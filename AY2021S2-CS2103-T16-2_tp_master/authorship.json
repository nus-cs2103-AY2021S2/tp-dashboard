[{"path":".github/run-checks.sh","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/bin/sh","lastModifiedDate":"2020-06-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"# Runs all check-* scripts, and returns a non-zero exit code if any of them fail.","lastModifiedDate":"2020-06-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026","lastModifiedDate":"2020-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"ret\u003d0 \u0026\u0026","lastModifiedDate":"2020-06-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"for checkscript in \"$dir\"/check-*; do","lastModifiedDate":"2020-06-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    if ! \"$checkscript\"; then","lastModifiedDate":"2020-06-16"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"      # This can be set to 0 temporarily to ignore eof, trailing... tests. Set this to 1 later.","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"        ret\u003d0","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    fi","lastModifiedDate":"2020-06-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"done","lastModifiedDate":"2020-06-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"exit $ret","lastModifiedDate":"2020-06-16"}],"authorContributionMap":{"totoyoyo":2,"-":10}},{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103-T16-2/tp/actions/workflows/gradle.yml/badge.svg?branch\u003dmaster)](https://github.com/AY2021S2-CS2103-T16-2/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2021-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"# MeetBuddy","lastModifiedDate":"2021-03-07"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"MeetBuddy is a desktop application to help manage your social life.","lastModifiedDate":"2021-03-07"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"****","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"totoyoyo":6,"-":2}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":"    // TAKE THIS OUT LATER","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"    ignoreFailures \u003d true","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":73,"author":{"gitId":"hengyiqun"},"content":"run {","lastModifiedDate":"2021-03-25"},{"lineNumber":74,"author":{"gitId":"hengyiqun"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-03-25"},{"lineNumber":75,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-25"},{"lineNumber":76,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":77,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":79,"author":{"gitId":"totoyoyo"},"content":"    archiveName \u003d \u0027meetbuddy.jar\u0027","lastModifiedDate":"2021-04-02"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"totoyoyo":3,"Maurice2n97":3,"hengyiqun":5,"-":71}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"### Heng Yi Qun","lastModifiedDate":"2021-02-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"\u003cimg src\u003d\"images/hengyiqun.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-03-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"[[github](http://github.com/hengyiqun)]","lastModifiedDate":"2021-02-25"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"[[portfolio](team/hengyiqun.md)]","lastModifiedDate":"2021-03-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"* Responsibilities: Features","lastModifiedDate":"2021-02-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"### ToTo Tokaeo","lastModifiedDate":"2021-02-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":"\u003cimg src\u003d\"images/totoyoyo.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"[[github](http://github.com/totoyoyo)]","lastModifiedDate":"2021-02-25"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"[[portfolio](team/totoyoyo.md)]","lastModifiedDate":"2021-02-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"* Responsibilities: Dates and Time Management","lastModifiedDate":"2021-02-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"### Maurice Mok","lastModifiedDate":"2021-02-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"\u003cimg src\u003d\"images/maurice2n97.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"[[homepage](https://github.com/Maurice2n97)]","lastModifiedDate":"2021-02-25"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"[[github](https://github.com/Maurice2n97)]","lastModifiedDate":"2021-02-25"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"[[portfolio](team/maurice2n97.md)]","lastModifiedDate":"2021-03-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"### Chen Yuheng","lastModifiedDate":"2021-02-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"\u003cimg src\u003d\"images/skinnychenpi.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"[[github](http://github.com/skinnychenpi)]","lastModifiedDate":"2021-02-25"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"[[portfolio](team/skinnychenpi.md)]","lastModifiedDate":"2021-02-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"* Responsibilities: Undecided","lastModifiedDate":"2021-02-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-02-25"}],"authorContributionMap":{"totoyoyo":5,"Maurice2n97":4,"skinnychenpi":6,"hengyiqun":6,"-":32}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2020-06-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"* defines its *API* in an `interface` with the same personName as the Component.","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class.","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component.","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`.","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person).","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`.","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user.","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences.","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"* stores the meeting book data.","lastModifiedDate":"2021-03-25"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"* exposes an unmodifiable `ObservableList\u003cMeeting\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-03-25"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"* stores the connection between the person in the address book and the meeting in the meeting book. e.g. Tom and July both participate in the CS2103 Lecture.","lastModifiedDate":"2021-03-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components.","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back.","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back.","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":140,"author":{"gitId":"totoyoyo"},"content":"### Sort feature","lastModifiedDate":"2021-03-28"},{"lineNumber":141,"author":{"gitId":"totoyoyo"},"content":"It can be helpful to sort the list of contacts and the list of meetings by a certain criteria.","lastModifiedDate":"2021-03-28"},{"lineNumber":142,"author":{"gitId":"totoyoyo"},"content":"For example, sorting contacts by their names could complement the user experience.","lastModifiedDate":"2021-03-28"},{"lineNumber":143,"author":{"gitId":"totoyoyo"},"content":"However, there were a few implementations details to consider.","lastModifiedDate":"2021-03-28"},{"lineNumber":144,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":145,"author":{"gitId":"totoyoyo"},"content":"Currently, an essential attribute in the model are the filtered lists, ","lastModifiedDate":"2021-03-28"},{"lineNumber":146,"author":{"gitId":"totoyoyo"},"content":"which shows the results of searches and finds. ","lastModifiedDate":"2021-03-28"},{"lineNumber":147,"author":{"gitId":"totoyoyo"},"content":"The indexes used in commands like \"edit\" are taken with respect to these filtered list.","lastModifiedDate":"2021-03-28"},{"lineNumber":148,"author":{"gitId":"totoyoyo"},"content":"These filtered lists, however, are backed by immutable observable lists, ","lastModifiedDate":"2021-03-28"},{"lineNumber":149,"author":{"gitId":"totoyoyo"},"content":"which helps update the JavaFX GUI. I initially tried to make copies of these observable lists,","lastModifiedDate":"2021-03-28"},{"lineNumber":150,"author":{"gitId":"totoyoyo"},"content":"so that I can mutate them through sorting and filtering. However, this would not work,","lastModifiedDate":"2021-03-28"},{"lineNumber":151,"author":{"gitId":"totoyoyo"},"content":"since commands like \"edit\" would be making changes to a copy of the data, ","lastModifiedDate":"2021-03-28"},{"lineNumber":152,"author":{"gitId":"totoyoyo"},"content":"not the data itself.","lastModifiedDate":"2021-03-28"},{"lineNumber":153,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":154,"author":{"gitId":"totoyoyo"},"content":"The implementation I went with uses another subclass of observable lists called sorted lists.","lastModifiedDate":"2021-03-28"},{"lineNumber":155,"author":{"gitId":"totoyoyo"},"content":"It goes between the link between the original immutable observable list and the filtered lists.","lastModifiedDate":"2021-03-28"},{"lineNumber":156,"author":{"gitId":"totoyoyo"},"content":"Sorting would occur in the sorted list layer, and the filtering will be applied on top.","lastModifiedDate":"2021-03-28"},{"lineNumber":157,"author":{"gitId":"totoyoyo"},"content":"This has the benefit of still sharing the references with the original observable list, ","lastModifiedDate":"2021-03-28"},{"lineNumber":158,"author":{"gitId":"totoyoyo"},"content":"so modifications will still be reflected in the correct data structures.","lastModifiedDate":"2021-03-28"},{"lineNumber":159,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":160,"author":{"gitId":"Maurice2n97"},"content":"###Timetable feature","lastModifiedDate":"2021-03-28"},{"lineNumber":161,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":162,"author":{"gitId":"Maurice2n97"},"content":"The timetable feature will be help the user visualise the free times. ","lastModifiedDate":"2021-03-28"},{"lineNumber":163,"author":{"gitId":"Maurice2n97"},"content":"It also aid the user in scheduling meetings faster.","lastModifiedDate":"2021-03-28"},{"lineNumber":164,"author":{"gitId":"Maurice2n97"},"content":"There are two possible implementations for the model below:","lastModifiedDate":"2021-03-28"},{"lineNumber":165,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":166,"author":{"gitId":"Maurice2n97"},"content":"One: Create a two-dimensional array to represent the schedule ","lastModifiedDate":"2021-03-28"},{"lineNumber":167,"author":{"gitId":"Maurice2n97"},"content":"with days as the row and columns being the half hour time slots","lastModifiedDate":"2021-03-28"},{"lineNumber":168,"author":{"gitId":"Maurice2n97"},"content":"This will serve as the model of a person\u0027s free schedule. Slots which are occupied will have","lastModifiedDate":"2021-03-28"},{"lineNumber":169,"author":{"gitId":"Maurice2n97"},"content":"their state marked as so. ","lastModifiedDate":"2021-03-28"},{"lineNumber":170,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":171,"author":{"gitId":"Maurice2n97"},"content":"Pros: A Ui can listen to the model and the display can be updated quickly with each change.","lastModifiedDate":"2021-03-28"},{"lineNumber":172,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":173,"author":{"gitId":"Maurice2n97"},"content":"Cons: Takes up more space. Problems handling meetings with not nice start and ending times.","lastModifiedDate":"2021-03-28"},{"lineNumber":174,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":175,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":176,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"#### Design consideration:","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":266,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":267,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":268,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":269,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"skinnychenpi"},"content":"* Computing minor students in NUS who like typing, and is most of the week spent moving about meeting people for his internship, lectures, or social life, have busy workdays.","lastModifiedDate":"2021-02-28"},{"lineNumber":280,"author":{"gitId":"skinnychenpi"},"content":"* Wants to manage school life and social life together in one app, with meetups for projects, lectures, social activities, and family all organised.","lastModifiedDate":"2021-02-28"},{"lineNumber":281,"author":{"gitId":"skinnychenpi"},"content":"* Would like to keep track of contacts and organise them as well for easy searching and easy remembering.","lastModifiedDate":"2021-02-28"},{"lineNumber":282,"author":{"gitId":"skinnychenpi"},"content":"* Can type fast","lastModifiedDate":"2021-02-28"},{"lineNumber":283,"author":{"gitId":"skinnychenpi"},"content":"* Prefers typing to mouse interactions","lastModifiedDate":"2021-02-28"},{"lineNumber":284,"author":{"gitId":"skinnychenpi"},"content":"* Is reasonably comfortable using CLI apps","lastModifiedDate":"2021-02-28"},{"lineNumber":285,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":286,"author":{"gitId":"skinnychenpi"},"content":"**Value proposition**: manage contacts faster than a typical mouse/GUI driven app.","lastModifiedDate":"2021-02-28"},{"lineNumber":287,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":288,"author":{"gitId":"skinnychenpi"},"content":"Can manage social life and academics by toggling between two modes \u003c-\u003e school activities and non-school activities. Better time management - Priorities of meetups can be ranked and less time to schedule meetings with friends, as well as keep track of existing meetings.","lastModifiedDate":"2021-02-28"},{"lineNumber":289,"author":{"gitId":"skinnychenpi"},"content":"Arrange activities with many people -\u003e events not only tie with single contacts but with a group of contacts that can be added inside. Stay connected -\u003e Keep in touch with old contacts or remove them by querying for old contacts . Keep a log and diary of past meetups, and small bios of people ,as well as images.","lastModifiedDate":"2021-02-28"},{"lineNumber":290,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":291,"author":{"gitId":"skinnychenpi"},"content":"Users would be better able to manage their social and academic commitments by toggling between both modes. With the option to rank/prioritise meetups, users can experience better time management, and can stay connected with many people easily. The app also maintains a diary of past meetups, with the inclusion of images and bios of the people.","lastModifiedDate":"2021-02-28"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |","lastModifiedDate":"2020-05-23"},{"lineNumber":302,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | add a new person               |                                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":303,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | delete a person                | remove entries that I no longer need                                   |","lastModifiedDate":"2020-05-23"},{"lineNumber":304,"author":{"gitId":"skinnychenpi"},"content":"| `* * *`  | user                                       | find a person by personName          | locate details of persons without having to go through the entire list |","lastModifiedDate":"2021-03-15"},{"lineNumber":305,"author":{"gitId":"-"},"content":"| `* *`    | user                                       | hide private contact details   | minimize chance of someone else seeing them by accident                |","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"skinnychenpi"},"content":"| `* *`    | user                                       | assign priorities for contacts | arrange my contacts and future tasks better                            |","lastModifiedDate":"2021-03-05"},{"lineNumber":307,"author":{"gitId":"skinnychenpi"},"content":"| `*`      | user with many persons in the MeetBuddy address book | sort persons by personName           | locate a person easily                                                 |","lastModifiedDate":"2021-03-15"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"-"},"content":"(For all use cases below, the **System** is the `AddressBook` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2020-05-23"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":315,"author":{"gitId":"-"},"content":"**Use case: Delete a person**","lastModifiedDate":"2020-05-23"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":319,"author":{"gitId":"-"},"content":"1.  User requests to list persons","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"skinnychenpi"},"content":"2.  MeetBuddy shows a list of persons","lastModifiedDate":"2021-03-05"},{"lineNumber":321,"author":{"gitId":"-"},"content":"3.  User requests to delete a specific person in the list","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"skinnychenpi"},"content":"4.  MeetBuddy deletes the person","lastModifiedDate":"2021-03-05"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":327,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":329,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":333,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"skinnychenpi"},"content":"    * 3a1. MeetBuddy shows an error message.","lastModifiedDate":"2021-03-05"},{"lineNumber":336,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"skinnychenpi"},"content":"**Use case: Assigning priorities to contacts**","lastModifiedDate":"2021-03-05"},{"lineNumber":340,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":341,"author":{"gitId":"skinnychenpi"},"content":"**MSS**","lastModifiedDate":"2021-03-05"},{"lineNumber":342,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":343,"author":{"gitId":"skinnychenpi"},"content":"1.  User requests to add a contact with priority","lastModifiedDate":"2021-03-05"},{"lineNumber":344,"author":{"gitId":"skinnychenpi"},"content":"2.  MeetBuddy shows the list of persons after adding.","lastModifiedDate":"2021-03-05"},{"lineNumber":345,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":346,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":347,"author":{"gitId":"skinnychenpi"},"content":"    Use case ends.","lastModifiedDate":"2021-03-05"},{"lineNumber":348,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":349,"author":{"gitId":"skinnychenpi"},"content":"**Extensions**","lastModifiedDate":"2021-03-05"},{"lineNumber":350,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":351,"author":{"gitId":"skinnychenpi"},"content":"* 1a. The priority is out of range.","lastModifiedDate":"2021-03-05"},{"lineNumber":352,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":353,"author":{"gitId":"skinnychenpi"},"content":"    * 1a1. AddressBook shows an error message.","lastModifiedDate":"2021-03-05"},{"lineNumber":354,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":355,"author":{"gitId":"skinnychenpi"},"content":"  Use case ends.","lastModifiedDate":"2021-03-05"},{"lineNumber":356,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":357,"author":{"gitId":"skinnychenpi"},"content":"**Use case: Assigning priorities to meetings**","lastModifiedDate":"2021-03-25"},{"lineNumber":358,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":359,"author":{"gitId":"skinnychenpi"},"content":"**MSS**","lastModifiedDate":"2021-03-25"},{"lineNumber":360,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":361,"author":{"gitId":"skinnychenpi"},"content":"1.  User requests to add a meeting with priority","lastModifiedDate":"2021-03-25"},{"lineNumber":362,"author":{"gitId":"skinnychenpi"},"content":"2.  MeetBuddy shows the list of meetings after adding.","lastModifiedDate":"2021-03-25"},{"lineNumber":363,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":364,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":365,"author":{"gitId":"skinnychenpi"},"content":"    Use case ends.","lastModifiedDate":"2021-03-25"},{"lineNumber":366,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":367,"author":{"gitId":"skinnychenpi"},"content":"**Extensions**","lastModifiedDate":"2021-03-25"},{"lineNumber":368,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":369,"author":{"gitId":"skinnychenpi"},"content":"* 1a. The priority is out of range.","lastModifiedDate":"2021-03-25"},{"lineNumber":370,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":371,"author":{"gitId":"skinnychenpi"},"content":"    * 1a1. MeetBuddy shows an error message.","lastModifiedDate":"2021-03-25"},{"lineNumber":372,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":373,"author":{"gitId":"skinnychenpi"},"content":"  Use case ends.","lastModifiedDate":"2021-03-25"},{"lineNumber":374,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":375,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":376,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":377,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":378,"author":{"gitId":"skinnychenpi"},"content":"New features on V1.2","lastModifiedDate":"2021-03-05"},{"lineNumber":379,"author":{"gitId":"skinnychenpi"},"content":"5.  Assign priorities to contacts","lastModifiedDate":"2021-03-05"},{"lineNumber":380,"author":{"gitId":"skinnychenpi"},"content":"6.  Notes about the contact.","lastModifiedDate":"2021-03-05"},{"lineNumber":381,"author":{"gitId":"skinnychenpi"},"content":"7.  Sort contacts by (priorities/personName/groups)","lastModifiedDate":"2021-03-15"},{"lineNumber":382,"author":{"gitId":"skinnychenpi"},"content":"8.  Last meetup date for each contact","lastModifiedDate":"2021-03-05"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":384,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":386,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":387,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":388,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":389,"author":{"gitId":"skinnychenpi"},"content":"4.  The response to any use action should become visible within 2 seconds.","lastModifiedDate":"2021-03-05"},{"lineNumber":390,"author":{"gitId":"skinnychenpi"},"content":"5.  The source code should be open source.","lastModifiedDate":"2021-03-05"},{"lineNumber":391,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":393,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":395,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":396,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":398,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":400,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":402,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":403,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":404,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":405,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":406,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":407,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":408,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":409,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":410,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":412,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":413,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":414,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":415,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":416,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":417,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":418,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":419,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":420,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":421,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":422,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":423,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":424,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":425,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":426,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":427,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":430,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":431,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":432,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":433,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":434,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":435,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":436,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":437,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":438,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":439,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":440,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":441,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":442,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":443,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":444,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":445,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":446,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":447,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":448,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":449,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"totoyoyo":22,"Maurice2n97":15,"skinnychenpi":69,"-":343}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"MeetBuddy is a **desktop app for managing contacts and daily meetings, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). ","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"If you can type fast, MeetBuddy can get your contacts and meetings management done faster than traditional GUI apps. In addition, MeetBuddy is meant for users to organise their meetups","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"with friends, family, or work colleagues. It provides a better user experience for users who have alot of contacts having online Gravatar accounts, where there is automatic syncing of","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"their profile pictures. ","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"1. Download the latest `meetbuddy.jar` from [here](https://github.com/AY2021S2-CS2103-T16-2/tp/releases).","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your MeetBuddy.","lastModifiedDate":"2021-03-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"   * **`listp`** : Lists all contacts.","lastModifiedDate":"2021-04-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"   * **`add`**`n/John Doe ph/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the Address Book.","lastModifiedDate":"2021-04-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * **`delete`**`3` : Deletes the 3rd contact shown in the current list.","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   * **`clear`** : Deletes all contacts.","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"1. Refer to the [Features](#features) below (after glossary) for details of each command.","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"## Glossary ","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"| First Header  | Second Header |","lastModifiedDate":"2021-04-08"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"| ------------- | ------------- |","lastModifiedDate":"2021-04-08"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"| Content Cell  | Content Cell  |","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"| Content Cell  | Content Cell  |","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-04-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"  e.g `n/NAME [g/GROUP]` can be used as `n/John Doe g/friend` or as `n/John Doe`.","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"hengyiqun"},"content":"  e.g. `[g/GROUP]…​` can be used as ` ` (i.e. 0 times), `g/friend`, `g/friend g/family` etc.","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"hengyiqun"},"content":"  e.g. if the command specifies `n/NAME ph/PHONE_NUMBER`, `ph/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2021-04-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":72,"author":{"gitId":"hengyiqun"},"content":"  e.g. if you specify `ph/12341234 ph/56785678`, only `ph/56785678` will be taken.","lastModifiedDate":"2021-04-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2021-02-03"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"* Note that for all date arguments, if the day is less than or equal to 31 and ","lastModifiedDate":"2021-04-08"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"there is no such day corresponding to the given month and year of the date, the program is smart enough to handle ","lastModifiedDate":"2021-04-08"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":" such cases and automatically corrects the date to the nearest valid end-of-month date. For example ","lastModifiedDate":"2021-04-08"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"`31-02-2021` will be auto-corrected to `28-02-2021` because there is no such date. ","lastModifiedDate":"2021-04-08"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"  But `32-02-2021` will not be autocorrected and the user will be prompted with an error message.","lastModifiedDate":"2021-04-08"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"### Adding a person: `add`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"Adds a person to the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"hengyiqun"},"content":"Format: `add n/NAME ph/PHONE_NUMBER e/EMAIL a/ADDRESS [g/GROUP]…​`","lastModifiedDate":"2021-04-04"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"hengyiqun"},"content":"A person can have any number of groups (including 0)","lastModifiedDate":"2021-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"hengyiqun"},"content":"* `add n/John Doe ph/98765432 e/johnd@example.com a/John street, block 123, #01-01`","lastModifiedDate":"2021-04-04"},{"lineNumber":107,"author":{"gitId":"hengyiqun"},"content":"* `add n/Betsy Crowe g/CS2103 e/betsycrowe@example.com a/Newgate Prison ph/1234567 g/badminton`","lastModifiedDate":"2021-04-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"hengyiqun"},"content":"### Listing all persons : `listp`","lastModifiedDate":"2021-04-02"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"Shows a list of all persons in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"hengyiqun"},"content":"Format: `listp`","lastModifiedDate":"2021-04-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"### Editing a person : `edit`","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"Edits an existing person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"hengyiqun"},"content":"Format: `edit INDEX [n/NAME] [ph/PHONE] [e/EMAIL] [a/ADDRESS] [g/GROUP]…​`","lastModifiedDate":"2021-04-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"hengyiqun"},"content":"* When editing groups, the existing groups of the person will be removed i.e adding of groups is not cumulative.","lastModifiedDate":"2021-03-14"},{"lineNumber":124,"author":{"gitId":"hengyiqun"},"content":"* You can remove all the person’s groups by typing `g/` without","lastModifiedDate":"2021-03-14"},{"lineNumber":125,"author":{"gitId":"hengyiqun"},"content":"    specifying any groups after it.","lastModifiedDate":"2021-03-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"hengyiqun"},"content":"*  `edit 1 ph/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2021-04-04"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"*  `edit 2 n/Betsy Crower g/` Edits the personName of the 2nd person to be `Betsy Crower` and clears all existing groups.","lastModifiedDate":"2021-03-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"### Locating persons by personName: `find`","lastModifiedDate":"2021-03-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords.","lastModifiedDate":"2021-04-02"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"hengyiqun"},"content":"* Only the personName are searched.","lastModifiedDate":"2021-04-02"},{"lineNumber":140,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"hengyiqun"},"content":"* Persons matching at least one keyword will be returned (i.e. OR search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2021-04-02"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"totoyoyo"},"content":"### Locating persons by group: `findg`","lastModifiedDate":"2021-04-02"},{"lineNumber":149,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":150,"author":{"gitId":"hengyiqun"},"content":"Finds persons whose groups contain any of the given keywords.","lastModifiedDate":"2021-04-02"},{"lineNumber":151,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":152,"author":{"gitId":"hengyiqun"},"content":"Format: `findg KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2021-04-02"},{"lineNumber":153,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":154,"author":{"gitId":"hengyiqun"},"content":"* The search is case-insensitive. e.g `badminton` will match `Badminton`","lastModifiedDate":"2021-04-02"},{"lineNumber":155,"author":{"gitId":"hengyiqun"},"content":"* The order of the keywords does not matter. e.g. `findg tennis table` will list every person in the table tennis group","lastModifiedDate":"2021-04-02"},{"lineNumber":156,"author":{"gitId":"hengyiqun"},"content":"* Only the groups are searched.","lastModifiedDate":"2021-04-02"},{"lineNumber":157,"author":{"gitId":"hengyiqun"},"content":"* Only full words will be matched e.g. `badminton` will not match `badmintons`","lastModifiedDate":"2021-04-02"},{"lineNumber":158,"author":{"gitId":"hengyiqun"},"content":"* Persons whose group match at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2021-04-02"},{"lineNumber":159,"author":{"gitId":"hengyiqun"},"content":"  ","lastModifiedDate":"2021-04-02"},{"lineNumber":160,"author":{"gitId":"hengyiqun"},"content":"Examples:","lastModifiedDate":"2021-04-02"},{"lineNumber":161,"author":{"gitId":"hengyiqun"},"content":"* `findg badminton` returns the list of contacts that are in the badminton group","lastModifiedDate":"2021-04-02"},{"lineNumber":162,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":163,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"Deletes the specified person from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list.","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"* `list` followed by `delete 2` deletes the 2nd person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"totoyoyo"},"content":"### Sorting of contacts : `sortp`","lastModifiedDate":"2021-04-02"},{"lineNumber":178,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":179,"author":{"gitId":"Maurice2n97"},"content":"Sorts the contacts displayed according to a specified field.","lastModifiedDate":"2021-02-28"},{"lineNumber":180,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":181,"author":{"gitId":"totoyoyo"},"content":"Format: `sortp by/FIELD d/DIRECTION`","lastModifiedDate":"2021-04-02"},{"lineNumber":182,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":183,"author":{"gitId":"totoyoyo"},"content":"* Sorts according to the field specified by `FIELD`","lastModifiedDate":"2021-04-02"},{"lineNumber":184,"author":{"gitId":"totoyoyo"},"content":"* `FIELD` is only restricted to the following cases:","lastModifiedDate":"2021-04-02"},{"lineNumber":185,"author":{"gitId":"totoyoyo"},"content":"    * Sort by name : `NAME`","lastModifiedDate":"2021-04-02"},{"lineNumber":186,"author":{"gitId":"totoyoyo"},"content":"    * Sort by email : `EMAIL`","lastModifiedDate":"2021-04-02"},{"lineNumber":187,"author":{"gitId":"totoyoyo"},"content":"    * Sort by phone number : `PHONE`","lastModifiedDate":"2021-04-02"},{"lineNumber":188,"author":{"gitId":"totoyoyo"},"content":"    * Sort by address : `ADDRESS`","lastModifiedDate":"2021-04-08"},{"lineNumber":189,"author":{"gitId":"totoyoyo"},"content":"* `DIRECTION` is only restricted to the following cases:","lastModifiedDate":"2021-04-02"},{"lineNumber":190,"author":{"gitId":"totoyoyo"},"content":"    * Sort by ascending alphabetical order : `ASC`","lastModifiedDate":"2021-04-02"},{"lineNumber":191,"author":{"gitId":"totoyoyo"},"content":"    * Sort by descending alphabetical order : `DESC`","lastModifiedDate":"2021-04-02"},{"lineNumber":192,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":193,"author":{"gitId":"Maurice2n97"},"content":"Examples","lastModifiedDate":"2021-04-02"},{"lineNumber":194,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":195,"author":{"gitId":"Maurice2n97"},"content":"##Timetable feature","lastModifiedDate":"2021-04-02"},{"lineNumber":196,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":197,"author":{"gitId":"Maurice2n97"},"content":"### Viewing Timetable: ","lastModifiedDate":"2021-04-02"},{"lineNumber":198,"author":{"gitId":"Maurice2n97"},"content":" No command is necessary. Just click on the timetable tab to switch view from meeting list to timetable. The timetable","lastModifiedDate":"2021-04-02"},{"lineNumber":199,"author":{"gitId":"Maurice2n97"},"content":" consists of 7 rows, each row corresponds a day of a week in the timetable, which default is from 7 am to 6.59 am on the next day. ","lastModifiedDate":"2021-04-02"},{"lineNumber":200,"author":{"gitId":"Maurice2n97"},"content":" Each meeting is represented as an orange rectangular slot that will be placed in the timetable according to the following rules","lastModifiedDate":"2021-04-02"},{"lineNumber":201,"author":{"gitId":"Maurice2n97"},"content":" ","lastModifiedDate":"2021-04-02"},{"lineNumber":202,"author":{"gitId":"Maurice2n97"},"content":" * If the meetings happen on a date corresponding to a column, it will be slotted into that column","lastModifiedDate":"2021-04-02"},{"lineNumber":203,"author":{"gitId":"Maurice2n97"},"content":" * The vertical axis if the timetable is the time, and slots are vertically placed according to their start time.","lastModifiedDate":"2021-04-02"},{"lineNumber":204,"author":{"gitId":"Maurice2n97"},"content":" * The length of the meeting slot is proportional to the timespan of the meeting.","lastModifiedDate":"2021-04-02"},{"lineNumber":205,"author":{"gitId":"Maurice2n97"},"content":" ","lastModifiedDate":"2021-04-02"},{"lineNumber":206,"author":{"gitId":"Maurice2n97"},"content":" Note that it will correctly update and display all meetings. Meetings that fall outside the range of the timetable ","lastModifiedDate":"2021-04-02"},{"lineNumber":207,"author":{"gitId":"Maurice2n97"},"content":" will be filtered off. Some things to note:","lastModifiedDate":"2021-04-02"},{"lineNumber":208,"author":{"gitId":"Maurice2n97"},"content":" ","lastModifiedDate":"2021-04-02"},{"lineNumber":209,"author":{"gitId":"Maurice2n97"},"content":" * Default when starting the application, the timetable will have the first ( leftmost column ) representing today\u0027s date.","lastModifiedDate":"2021-04-02"},{"lineNumber":210,"author":{"gitId":"Maurice2n97"},"content":" * Meetings can overlap across columns.","lastModifiedDate":"2021-04-02"},{"lineNumber":211,"author":{"gitId":"Maurice2n97"},"content":" * Setting small meeting times around the edge of the timetable will cause display issues, For example, setting a meeting ","lastModifiedDate":"2021-04-02"},{"lineNumber":212,"author":{"gitId":"Maurice2n97"},"content":" to 6:44-7:01 might cause display issues from the 7 - 7.01 will not display the date or time.","lastModifiedDate":"2021-04-02"},{"lineNumber":213,"author":{"gitId":"Maurice2n97"},"content":" * Note that you can scroll to view more slots.","lastModifiedDate":"2021-04-02"},{"lineNumber":214,"author":{"gitId":"Maurice2n97"},"content":" ","lastModifiedDate":"2021-04-02"},{"lineNumber":215,"author":{"gitId":"Maurice2n97"},"content":" ","lastModifiedDate":"2021-04-02"},{"lineNumber":216,"author":{"gitId":"Maurice2n97"},"content":"### Set Timetable date : `setTimetable`","lastModifiedDate":"2021-04-09"},{"lineNumber":217,"author":{"gitId":"Maurice2n97"},"content":" ","lastModifiedDate":"2021-04-02"},{"lineNumber":218,"author":{"gitId":"Maurice2n97"},"content":" Sets a timetable to start on a specified date. Updates the display accordingly.","lastModifiedDate":"2021-04-02"},{"lineNumber":219,"author":{"gitId":"Maurice2n97"},"content":" ","lastModifiedDate":"2021-04-02"},{"lineNumber":220,"author":{"gitId":"Maurice2n97"},"content":" Format: \u0027setTimetable DATE\u0027","lastModifiedDate":"2021-04-02"},{"lineNumber":221,"author":{"gitId":"Maurice2n97"},"content":" ","lastModifiedDate":"2021-04-02"},{"lineNumber":222,"author":{"gitId":"Maurice2n97"},"content":" * DATE must be a string strictly following the format `YYYY-mm-dd`","lastModifiedDate":"2021-04-02"},{"lineNumber":223,"author":{"gitId":"Maurice2n97"},"content":" * If no date is specified, for example `setTimetable` without DATE parameter is keyed in, it will default set to","lastModifiedDate":"2021-04-08"},{"lineNumber":224,"author":{"gitId":"Maurice2n97"},"content":" today\u0027s current date.","lastModifiedDate":"2021-04-08"},{"lineNumber":225,"author":{"gitId":"Maurice2n97"},"content":" ","lastModifiedDate":"2021-04-02"},{"lineNumber":226,"author":{"gitId":"Maurice2n97"},"content":" ","lastModifiedDate":"2021-04-02"},{"lineNumber":227,"author":{"gitId":"Maurice2n97"},"content":"### Profile picture:","lastModifiedDate":"2021-04-02"},{"lineNumber":228,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":229,"author":{"gitId":"Maurice2n97"},"content":"Instantly updates your contacts with their Gravatar profile picture, if your contact has their email linked","lastModifiedDate":"2021-04-08"},{"lineNumber":230,"author":{"gitId":"Maurice2n97"},"content":"to their gravatar account. The profile picture will be automatically displayed upon adding the contact.","lastModifiedDate":"2021-04-08"},{"lineNumber":231,"author":{"gitId":"Maurice2n97"},"content":"If there is a problem obtaining the image, a default blue circle icon will be displayed","lastModifiedDate":"2021-04-08"},{"lineNumber":232,"author":{"gitId":"Maurice2n97"},"content":"instead.","lastModifiedDate":"2021-04-02"},{"lineNumber":233,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"Clears all entries from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"Maurice2n97"},"content":"MeetBuddy data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2021-04-02"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":252,"author":{"gitId":"-"},"content":"AddressBook data are saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2021-02-04"},{"lineNumber":253,"author":{"gitId":"Maurice2n97"},"content":"MeetingBook data are saved as a JSON file \u0027[JAR file location]/data/meetingbook.json\u0027. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2021-04-02"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":255,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":256,"author":{"gitId":"-"},"content":"If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2021-02-04"},{"lineNumber":257,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":259,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"skinnychenpi"},"content":"### Adding a meeting: `addm`","lastModifiedDate":"2021-04-01"},{"lineNumber":262,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":263,"author":{"gitId":"skinnychenpi"},"content":"Adds a meeting to MeetBuddy. ","lastModifiedDate":"2021-04-09"},{"lineNumber":264,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":265,"author":{"gitId":"skinnychenpi"},"content":"Format: `addm n/NAME st/TIME ed/TIME [des/DESCRIPTIONS] [pr/PRIORITY] [p/PERSON RELATED INDEX]… [g/GROUP]…​`","lastModifiedDate":"2021-04-09"},{"lineNumber":266,"author":{"gitId":"skinnychenpi"},"content":"* Note that meetings must be of minimum length of 15 mins and maximum length of 7 days. For example a meeting cannot be 15 March 16:00 - 22 March 16:00, but can be from 15 March 16:00 - 22 march 15:59.","lastModifiedDate":"2021-04-09"},{"lineNumber":267,"author":{"gitId":"skinnychenpi"},"content":"* Priority should be an integer from 1 to 5. If the priority is not specified, it will be automatically set as 1.","lastModifiedDate":"2021-04-09"},{"lineNumber":268,"author":{"gitId":"skinnychenpi"},"content":"* Description can be empty.","lastModifiedDate":"2021-04-09"},{"lineNumber":269,"author":{"gitId":"skinnychenpi"},"content":"* A meeting can have any number of groups (including 0).","lastModifiedDate":"2021-04-09"},{"lineNumber":270,"author":{"gitId":"skinnychenpi"},"content":"* Person Related Index refers to the index of the contact list shown in the GUI. The index should be an integer and not out of bounds. If duplicated person index is in the input, the program will automatically remove the duplication.","lastModifiedDate":"2021-04-09"},{"lineNumber":271,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":272,"author":{"gitId":"skinnychenpi"},"content":"Examples:","lastModifiedDate":"2021-04-09"},{"lineNumber":273,"author":{"gitId":"skinnychenpi"},"content":"* `addm n/CS2103 Lecture st/2021-03-12 14:00 ed/2021-03-12 16:00 desc/Week 7 pr/3 g/lectures g/SoC p/1 p/2` ","lastModifiedDate":"2021-04-09"},{"lineNumber":274,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":275,"author":{"gitId":"hengyiqun"},"content":"### Listing all meetings : `listm`","lastModifiedDate":"2021-04-02"},{"lineNumber":276,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":277,"author":{"gitId":"hengyiqun"},"content":"Shows a list of all meetings in the meeting book.","lastModifiedDate":"2021-04-02"},{"lineNumber":278,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":279,"author":{"gitId":"hengyiqun"},"content":"Format: `listm`","lastModifiedDate":"2021-04-02"},{"lineNumber":280,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":281,"author":{"gitId":"hengyiqun"},"content":"### Editing a meeting : `editm`","lastModifiedDate":"2021-04-02"},{"lineNumber":282,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":283,"author":{"gitId":"hengyiqun"},"content":"Edits an existing meeting in the meeting book.","lastModifiedDate":"2021-04-02"},{"lineNumber":284,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":285,"author":{"gitId":"skinnychenpi"},"content":"Format: `editm INDEX n/NAME st/START TIME ed/END TIME desc/DESCRIPTION pr/PRIORITY [p/PERSON RELATED INDEX] [g/GROUP]...​`","lastModifiedDate":"2021-04-09"},{"lineNumber":286,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":287,"author":{"gitId":"hengyiqun"},"content":"* Edits the meeting at the specified `INDEX`. The index refers to the index number shown in the displayed meeting list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-04-02"},{"lineNumber":288,"author":{"gitId":"hengyiqun"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2021-04-02"},{"lineNumber":289,"author":{"gitId":"skinnychenpi"},"content":"* When editing person related, the existing related contacts will be removed. You must specify the index correctly.  ","lastModifiedDate":"2021-04-09"},{"lineNumber":290,"author":{"gitId":"hengyiqun"},"content":"* When editing groups, the existing groups in the meeting will be removed i.e adding of groups is not cumulative.","lastModifiedDate":"2021-04-02"},{"lineNumber":291,"author":{"gitId":"hengyiqun"},"content":"* You can remove all the meeting’s groups by typing `g/` without specifying any groups after it.","lastModifiedDate":"2021-04-02"},{"lineNumber":292,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":293,"author":{"gitId":"hengyiqun"},"content":"Examples:","lastModifiedDate":"2021-04-02"},{"lineNumber":294,"author":{"gitId":"hengyiqun"},"content":"*  `editm 1 n/CS2103 Lecture g/SOC g/friends` Edits the name of the 1st meeting to be `CS2103 Lecture`, and its groups to be `SOC` and `friends`.","lastModifiedDate":"2021-04-02"},{"lineNumber":295,"author":{"gitId":"hengyiqun"},"content":"*  `editm 2 n/CS2106 Lab g/` Edits the name of the 2nd meeting to be `CS2106 Lab` and clears all existing groups in the meeting.","lastModifiedDate":"2021-04-02"},{"lineNumber":296,"author":{"gitId":"skinnychenpi"},"content":"*  `editm 2 n/CS2106 Lab p/1` Edits the name of the 2nd meeting to be `CS2106 Lab` and change the contacts related field to the first person in your contact list (If he/she exists).","lastModifiedDate":"2021-04-09"},{"lineNumber":297,"author":{"gitId":"hengyiqun"},"content":"### Deleting a meeting: `deletem`","lastModifiedDate":"2021-04-02"},{"lineNumber":298,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":299,"author":{"gitId":"hengyiqun"},"content":"Deletes a meeting in the meeting book.","lastModifiedDate":"2021-04-02"},{"lineNumber":300,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":301,"author":{"gitId":"hengyiqun"},"content":"Format: `deletem INDEX`","lastModifiedDate":"2021-04-02"},{"lineNumber":302,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":303,"author":{"gitId":"hengyiqun"},"content":"* Deletes the meeting at the specified `INDEX`.","lastModifiedDate":"2021-04-02"},{"lineNumber":304,"author":{"gitId":"hengyiqun"},"content":"* The index refers to the index number shown in the displayed meeting list.","lastModifiedDate":"2021-04-02"},{"lineNumber":305,"author":{"gitId":"hengyiqun"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-04-02"},{"lineNumber":306,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":307,"author":{"gitId":"skinnychenpi"},"content":"Examples:","lastModifiedDate":"2021-04-01"},{"lineNumber":308,"author":{"gitId":"hengyiqun"},"content":"* `listm` followed by `delete 2` deletes the 2nd meeting in the meeting book.","lastModifiedDate":"2021-04-02"},{"lineNumber":309,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":310,"author":{"gitId":"skinnychenpi"},"content":"### Adding persons related for a meeting: `addptm`","lastModifiedDate":"2021-04-09"},{"lineNumber":311,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":312,"author":{"gitId":"skinnychenpi"},"content":"Adds persons related to a meeting in MeetBuddy.","lastModifiedDate":"2021-04-09"},{"lineNumber":313,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":314,"author":{"gitId":"skinnychenpi"},"content":"Format: `addptm INDEX p/PERSON RELATED INDEX1 p/PERSON RELATED INDEX2… ​`","lastModifiedDate":"2021-04-09"},{"lineNumber":315,"author":{"gitId":"skinnychenpi"},"content":"* The index refers to the meeting index, and it **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-04-09"},{"lineNumber":316,"author":{"gitId":"skinnychenpi"},"content":"* The user must input at least one person related index field.","lastModifiedDate":"2021-04-09"},{"lineNumber":317,"author":{"gitId":"skinnychenpi"},"content":"* Person Related Index refers to the index of the contact list shown in the GUI. The index should be an integer and not out of bounds. If duplicated person index is in the input, the program will automatically remove the duplication.","lastModifiedDate":"2021-04-09"},{"lineNumber":318,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":319,"author":{"gitId":"skinnychenpi"},"content":"Examples:","lastModifiedDate":"2021-04-09"},{"lineNumber":320,"author":{"gitId":"skinnychenpi"},"content":"* `addptm 1 p/1 p/2 p/2` Adds the person on index 1 and 2 into the contacts related field in meeting 1.","lastModifiedDate":"2021-04-09"},{"lineNumber":321,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":322,"author":{"gitId":"skinnychenpi"},"content":"### Deleting a meeting: `deletepfm`","lastModifiedDate":"2021-04-09"},{"lineNumber":323,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":324,"author":{"gitId":"skinnychenpi"},"content":"Deletes persons related from a meeting in MeetBuddy.","lastModifiedDate":"2021-04-09"},{"lineNumber":325,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":326,"author":{"gitId":"skinnychenpi"},"content":"Format: `deletepfm INDEX p/PERSON RELATED INDEX1 p/PERSON RELATED INDEX2… ​`","lastModifiedDate":"2021-04-09"},{"lineNumber":327,"author":{"gitId":"skinnychenpi"},"content":"* The index refers to the meeting index, and it **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-04-09"},{"lineNumber":328,"author":{"gitId":"skinnychenpi"},"content":"* The user must input at least one person related index field.","lastModifiedDate":"2021-04-09"},{"lineNumber":329,"author":{"gitId":"skinnychenpi"},"content":"* Person Related Index refers to the index of the contact list shown in the GUI. The index should be an integer and not out of bounds. If duplicated person index is in the input, the program will automatically remove the duplication.","lastModifiedDate":"2021-04-09"},{"lineNumber":330,"author":{"gitId":"skinnychenpi"},"content":"* The related persons that the user wants to delete must exist in the contacts related field. ","lastModifiedDate":"2021-04-09"},{"lineNumber":331,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":332,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":333,"author":{"gitId":"skinnychenpi"},"content":"Examples:","lastModifiedDate":"2021-04-09"},{"lineNumber":334,"author":{"gitId":"skinnychenpi"},"content":"* `deletepfm 1 p/1 p/2 p/2` Deletes the person on index 1 and 2 from the contacts related field in meeting 1.","lastModifiedDate":"2021-04-09"},{"lineNumber":335,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":336,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":337,"author":{"gitId":"totoyoyo"},"content":"### Sorting of meetings : `sortm`","lastModifiedDate":"2021-04-02"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"totoyoyo"},"content":"Sorts the meetings displayed according to a specified field.","lastModifiedDate":"2021-04-02"},{"lineNumber":340,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":341,"author":{"gitId":"totoyoyo"},"content":"Format: `sortm by/FIELD d/DIRECTION`","lastModifiedDate":"2021-04-02"},{"lineNumber":342,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":343,"author":{"gitId":"totoyoyo"},"content":"* Sorts according to the field specified by `FIELD`","lastModifiedDate":"2021-04-02"},{"lineNumber":344,"author":{"gitId":"totoyoyo"},"content":"* `FIELD` is only restricted to the following cases:","lastModifiedDate":"2021-04-02"},{"lineNumber":345,"author":{"gitId":"totoyoyo"},"content":"    * Sort by name : `NAME`","lastModifiedDate":"2021-04-02"},{"lineNumber":346,"author":{"gitId":"totoyoyo"},"content":"    * Sort by start time : `START`","lastModifiedDate":"2021-04-02"},{"lineNumber":347,"author":{"gitId":"totoyoyo"},"content":"    * Sort by end time : `END`","lastModifiedDate":"2021-04-02"},{"lineNumber":348,"author":{"gitId":"totoyoyo"},"content":"    * Sort by priority : `PRIORITY`","lastModifiedDate":"2021-04-02"},{"lineNumber":349,"author":{"gitId":"totoyoyo"},"content":"    * Sort by description : `DESCRIPTION`","lastModifiedDate":"2021-04-02"},{"lineNumber":350,"author":{"gitId":"totoyoyo"},"content":"* `DIRECTION` is only restricted to the following cases:","lastModifiedDate":"2021-04-02"},{"lineNumber":351,"author":{"gitId":"totoyoyo"},"content":"    * Sort by ascending order : `ASC`","lastModifiedDate":"2021-04-02"},{"lineNumber":352,"author":{"gitId":"totoyoyo"},"content":"    * Sort by descending order : `DESC`","lastModifiedDate":"2021-04-02"},{"lineNumber":353,"author":{"gitId":"totoyoyo"},"content":"    ","lastModifiedDate":"2021-04-02"},{"lineNumber":354,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":355,"author":{"gitId":"hengyiqun"},"content":"### Listing all persons and meetings : `list`","lastModifiedDate":"2021-04-02"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":357,"author":{"gitId":"hengyiqun"},"content":"Shows a list of all persons and meetings in MeetBuddy.","lastModifiedDate":"2021-04-02"},{"lineNumber":358,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":359,"author":{"gitId":"hengyiqun"},"content":"Format: `list`","lastModifiedDate":"2021-04-02"},{"lineNumber":360,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":361,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":363,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":365,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":366,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder.","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":370,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":373,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":374,"author":{"gitId":"hengyiqun"},"content":"**Add** | `add n/NAME ph/PHONE_NUMBER e/EMAIL a/ADDRESS [g/GROUP]…​` \u003cbr\u003e e.g., `add n/James Ho ph/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 g/CS2106 g/badminton` \u003cbr\u003e \u003cbr\u003e `addm n/NAME st/START TIME ed/END TIME desc/DESCRIPTION pr/PRIORITY [g/GROUP]...[p/INDEX OF PERSON RELATED]...​` \u003cbr\u003e e.g., `addm n/CS2103 Lecture st/2021-03-12 14:00 ed/2021-03-12 16:00 desc/Week 7 pr/3 g/lectures g/SoC p/1 p/2`","lastModifiedDate":"2021-04-04"},{"lineNumber":375,"author":{"gitId":"-"},"content":"**Clear** | `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"hengyiqun"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3` \u003cbr\u003e \u003cbr\u003e `deletem INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2021-04-02"},{"lineNumber":377,"author":{"gitId":"hengyiqun"},"content":"**Edit** | `edit INDEX [n/NAME] [ph/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [g/GROUP]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com` \u003cbr\u003e \u003cbr\u003e `editm n/NAME st/START TIME ed/END TIME desc/DESCRIPTION pr/PRIORITY [g/GROUP]...[p/INDEX OF PERSON RELATED]...​`\u003cbr\u003e e.g.,`editm 2 n/CS2103 Lecture`","lastModifiedDate":"2021-04-10"},{"lineNumber":378,"author":{"gitId":"hengyiqun"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake` \u003cbr\u003e \u003cbr\u003e `findg KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `findg badminton` \u003cbr\u003e","lastModifiedDate":"2021-04-02"},{"lineNumber":379,"author":{"gitId":"hengyiqun"},"content":"**List** | `list`, `listm`, `listp`","lastModifiedDate":"2021-04-02"},{"lineNumber":380,"author":{"gitId":"totoyoyo"},"content":"**Sort** | `sortp by/FIELD d/DIRECTION` \u003cbr\u003e  `sortm by/FIELD d/DIRECTION`","lastModifiedDate":"2021-04-02"},{"lineNumber":381,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"Maurice2n97"},"content":"**SetTimetable**| `setTimetable DATE`","lastModifiedDate":"2021-04-09"},{"lineNumber":383,"author":{"gitId":"skinnychenpi"},"content":"**AddPersonRelatedToAMeeting**|`addptm INDEX p/PERSON RELATED INDEX1 p/PERSON RELATED INDEX2… ​`","lastModifiedDate":"2021-04-09"},{"lineNumber":384,"author":{"gitId":"skinnychenpi"},"content":"**DeletePersonRelatedFromAMeeting**|`deletepfm INDEX p/PERSON RELATED INDEX1 p/PERSON RELATED INDEX2… ​`","lastModifiedDate":"2021-04-09"}],"authorContributionMap":{"totoyoyo":30,"Maurice2n97":66,"skinnychenpi":60,"hengyiqun":64,"-":164}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"skinnychenpi"},"content":"  * Replaces the top navigation menu with the project personName when printing","lastModifiedDate":"2021-03-15"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    content: \"AB-3\";","lastModifiedDate":"2021-01-12"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"skinnychenpi":1,"-":294}},{"path":"docs/team/hengyiqun.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-03-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2021-03-04"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"title: Yi Qun\u0027s Project Portfolio Page","lastModifiedDate":"2021-03-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-03-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Project: AddressBook Level 3","lastModifiedDate":"2021-03-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-03-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-03-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2021-03-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2021-03-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2021-03-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-03-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-03-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2021-03-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-03-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:","lastModifiedDate":"2021-03-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2021-03-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-03-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-03-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2021-03-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:","lastModifiedDate":"2021-03-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:","lastModifiedDate":"2021-03-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2021-03-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-03-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:","lastModifiedDate":"2021-03-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-03-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:","lastModifiedDate":"2021-03-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-03-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-03-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-03-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-03-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:","lastModifiedDate":"2021-03-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2021-03-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2021-03-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2021-03-04"}],"authorContributionMap":{"hengyiqun":1,"-":45}},{"path":"docs/team/maurice2n97.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"title: Maurice\u0027s Project Portfolio Page","lastModifiedDate":"2021-02-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Project: AddressBook Level 3","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Maurice2n97":1,"-":45}},{"path":"docs/team/skinnychenpi.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"---","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"layout: page","lastModifiedDate":"2021-04-07"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"title: Chen Yuheng\u0027s Project Portfolio Page","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"---","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"## Project: MeetBuddy","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"MeetBuddy is your handy desktop app, optimized for NUS students to manage their social connections and daily tasks who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)! I have added the functionality for tasks scheduling and the connections between tasks and contacts! The GUI of MeetBuddy was created with JavaFX and written in Java, and I have written about 4 kLoC.","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"* **New Feature**: Added the Meeting Class for tasks (i.e. meetings) scheduling.","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    * What it does: allows the user to create a meeting object with various attributes and add them into the GUI.","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    * Justification: This feature is an important part in our program.","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    * Highlights: This feature affects existing commands and commands to be added in the future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required to add commands, parsers, models, GUI.","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"* **New Feature**: Added the PersonMeetingConnection Class for the interactions between contacts and meetings.","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    * What it does: allows the user build a connection between the meetings and the contacts. For example, specify the people related to a certain meeting.","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    * Highlights: The implementation of the class requires careful design and numerous modification on existing codes as it relates to both contacts and meetings. It\u0027s also the very key function in our program, as it brings connections to two major parts in the model.","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"* **Project management**:","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub team repo.","lastModifiedDate":"2021-04-07"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"* **Documentation**:","lastModifiedDate":"2021-04-07"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    * User Guide:","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    * Developer Guide:","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-04-07"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"* **Community**:","lastModifiedDate":"2021-04-07"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-04-07"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-04-07"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-04-07"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-04-07"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"  ","lastModifiedDate":"2021-04-07"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"* **Summary of Contributions**:","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    * Created over 22 PRs on the team repo. See: https://github.com/AY2021S2-CS2103-T16-2/tp/pulls?q\u003dis%3Apr+author%3Askinnychenpi","lastModifiedDate":"2021-04-07"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    ","lastModifiedDate":"2021-04-07"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2021-04-07"}],"authorContributionMap":{"skinnychenpi":46}},{"path":"docs/team/totoyoyo.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"---","lastModifiedDate":"2021-02-25"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"layout: page title: Peeranat (ToTo) Tokaeo\u0027s Project Portfolio Page","lastModifiedDate":"2021-04-09"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"---","lastModifiedDate":"2021-02-25"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"## Project: MeetBuddy","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"MeetBuddy is ---.","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-02-25"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"* **New Feature**: Added the ability to sort contacts","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"    * What it does: allows the user to sort the contact lists using a specifc property of the contacts","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"    * Justification: helps the user organize the contact in a convenient way","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"* **New Feature**: Added the ability to unsort contacts","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"      by using the redo command.","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"      the app should provide a convenient way to rectify them.","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"      analysis of design alternatives. The implementation too was challenging as it required changes to existing","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"totoyoyo"},"content":"      commands.","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"totoyoyo"},"content":"      the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"* **New Feature**: Added the ability to sort meetings","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"totoyoyo"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"totoyoyo"},"content":"      by using the redo command.","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"totoyoyo"},"content":"      the app should provide a convenient way to rectify them.","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"totoyoyo"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"totoyoyo"},"content":"      analysis of design alternatives. The implementation too was challenging as it required changes to existing","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"totoyoyo"},"content":"      commands.","lastModifiedDate":"2021-04-09"},{"lineNumber":35,"author":{"gitId":"totoyoyo"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in","lastModifiedDate":"2021-04-09"},{"lineNumber":36,"author":{"gitId":"totoyoyo"},"content":"      the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-04-09"},{"lineNumber":37,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"totoyoyo"},"content":"* **New Feature**: Added the ability to unsort meetings","lastModifiedDate":"2021-04-09"},{"lineNumber":39,"author":{"gitId":"totoyoyo"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed","lastModifiedDate":"2021-04-09"},{"lineNumber":40,"author":{"gitId":"totoyoyo"},"content":"      by using the redo command.","lastModifiedDate":"2021-04-09"},{"lineNumber":41,"author":{"gitId":"totoyoyo"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"totoyoyo"},"content":"      the app should provide a convenient way to rectify them.","lastModifiedDate":"2021-04-09"},{"lineNumber":43,"author":{"gitId":"totoyoyo"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth","lastModifiedDate":"2021-04-09"},{"lineNumber":44,"author":{"gitId":"totoyoyo"},"content":"      analysis of design alternatives. The implementation too was challenging as it required changes to existing","lastModifiedDate":"2021-04-09"},{"lineNumber":45,"author":{"gitId":"totoyoyo"},"content":"      commands.","lastModifiedDate":"2021-04-09"},{"lineNumber":46,"author":{"gitId":"totoyoyo"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in","lastModifiedDate":"2021-04-09"},{"lineNumber":47,"author":{"gitId":"totoyoyo"},"content":"      the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-04-09"},{"lineNumber":48,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":49,"author":{"gitId":"totoyoyo"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s2.github.io/tp-dashboard/?search\u003dTOTOYOYO)","lastModifiedDate":"2021-04-09"},{"lineNumber":50,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":51,"author":{"gitId":"totoyoyo"},"content":"* **Team-tasks contributions**:","lastModifiedDate":"2021-04-09"},{"lineNumber":52,"author":{"gitId":"totoyoyo"},"content":"    * Set up the GitHub repository and team organization for the project","lastModifiedDate":"2021-04-09"},{"lineNumber":53,"author":{"gitId":"totoyoyo"},"content":"    * Managed GitHub Actions for Continuous Integration","lastModifiedDate":"2021-04-09"},{"lineNumber":54,"author":{"gitId":"totoyoyo"},"content":"    * Created and maintained issues on GitHub to keep track of tasks and progress","lastModifiedDate":"2021-04-09"},{"lineNumber":55,"author":{"gitId":"totoyoyo"},"content":"    * Create Google Docs files for project notes and drafts of UG","lastModifiedDate":"2021-04-09"},{"lineNumber":56,"author":{"gitId":"totoyoyo"},"content":"    * Provide location for offline meeting","lastModifiedDate":"2021-04-09"},{"lineNumber":57,"author":{"gitId":"totoyoyo"},"content":"    * Label bug reports for easier task division","lastModifiedDate":"2021-04-09"},{"lineNumber":58,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":59,"author":{"gitId":"totoyoyo"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-02-25"},{"lineNumber":60,"author":{"gitId":"totoyoyo"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-02-25"},{"lineNumber":61,"author":{"gitId":"totoyoyo"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36]()","lastModifiedDate":"2021-04-09"},{"lineNumber":62,"author":{"gitId":"totoyoyo"},"content":"      , [\\#38]())","lastModifiedDate":"2021-04-09"},{"lineNumber":63,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":64,"author":{"gitId":"totoyoyo"},"content":"* **Documentation**:","lastModifiedDate":"2021-02-25"},{"lineNumber":65,"author":{"gitId":"totoyoyo"},"content":"    * User Guide:","lastModifiedDate":"2021-02-25"},{"lineNumber":66,"author":{"gitId":"totoyoyo"},"content":"        * Added documentation for the features mentioned above, i.e. `sortp`, `unsortp`, etc.","lastModifiedDate":"2021-04-09"},{"lineNumber":67,"author":{"gitId":"totoyoyo"},"content":"    * Developer Guide:","lastModifiedDate":"2021-02-25"},{"lineNumber":68,"author":{"gitId":"totoyoyo"},"content":"        * Added implementation details for the features mentioned above, i.e. `sortp`, `unsortp`, etc.","lastModifiedDate":"2021-04-09"}],"authorContributionMap":{"totoyoyo":68}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2020-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.Model.Model;","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47).","lastModifiedDate":"2020-07-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \"","lastModifiedDate":"2020-07-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done.","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508).","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"skinnychenpi"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s personName). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2021-03-15"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe).","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":246,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71).","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether the remark is added to or removed from","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":378,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"skinnychenpi"},"content":"Following convention, let’s change the personName of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2021-03-15"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9).","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"skinnychenpi":3,"-":391}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`.","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can.","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"    \"personName\": \"Person with invalid personName field: Ha!ns Mu@ster\",","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"skinnychenpi":1,"-":102}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"![Architecture sequence diagram from the developer","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"guide](../images/ArchitectureSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base.","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Setting a break point","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"![Using the `Search for target by personName` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and look something like this:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at.","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce.","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. `Step into` the line where user input in parsed from a String to a Command.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    **`AddressBookParser\\#parseCommand()`**","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it.","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"1. Now let’s see what happens when we call `command#execute()`\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"   **`EditCommand\\#execute()`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to `model`.","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    `JsonAddressBook#saveAddressBook()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   /**","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    *","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    */","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"       persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"           source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                 .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                 .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                 .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"1. We can continue to step through until we return to `MainWindow#executeCommand()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    **`ResultDisplay\\#setFeedbackToUser()`**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"1. Finally, we step through until we reach the end of","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    `MainWindow#executeCommand()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"the result being displayed to the user. From this tutorial, you learned","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"more about the inner workings of AddressBook and how the various","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"components mesh together to form one cohesive product.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"execution path tracing. In some cases, you can do further tracing for","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"the given commands to find exactly what happens.","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown(if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"skinnychenpi":1,"-":249}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.connection.PersonMeetingConnection;","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.NoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.ReadOnlyNoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.addressbook.AddressBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.addressbook.JsonAddressBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.connection.ConnectionStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.connection.JsonConnectionStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.meetingbook.JsonMeetingBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.notebook.JsonNoteBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-03-18"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.meetingbook.MeetingBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.notebook.NoteBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2021-03-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2021-03-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2021-03-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);","lastModifiedDate":"2017-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"        MeetingBookStorage meetingBookStorage \u003d new JsonMeetingBookStorage(userPrefs.getMeetingBookFilePath());","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"hengyiqun"},"content":"        NoteBookStorage noteBookStorage \u003d new JsonNoteBookStorage(userPrefs.getNoteBookFilePath());","lastModifiedDate":"2021-04-01"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"        ConnectionStorage connectionStorage \u003d new JsonConnectionStorage(userPrefs.getConnectionsFilePath());","lastModifiedDate":"2021-04-09"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"        storage \u003d new StorageManager(addressBookStorage, meetingBookStorage, noteBookStorage, userPrefsStorage,","lastModifiedDate":"2021-04-09"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"                connectionStorage);","lastModifiedDate":"2021-04-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"        Optional\u003cReadOnlyMeetingBook\u003e meetingBookOptional;","lastModifiedDate":"2021-03-17"},{"lineNumber":95,"author":{"gitId":"hengyiqun"},"content":"        Optional\u003cReadOnlyNoteBook\u003e noteBookOptional;","lastModifiedDate":"2021-04-01"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"        Optional\u003cPersonMeetingConnection\u003e personMeetingConnectionOptional;","lastModifiedDate":"2021-04-09"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"        ReadOnlyAddressBook initialDataAddressBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"        ReadOnlyMeetingBook initialDataMeetingBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":99,"author":{"gitId":"hengyiqun"},"content":"        ReadOnlyNoteBook initialDataNoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"        PersonMeetingConnection personMeetingConnection;","lastModifiedDate":"2021-04-09"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2016-12-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"            initialDataAddressBook \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2021-03-17"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"            initialDataAddressBook \u003d new AddressBook();","lastModifiedDate":"2021-03-17"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"            initialDataAddressBook \u003d new AddressBook();","lastModifiedDate":"2021-03-17"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"        //--\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MEETING \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-17"},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":"        try {","lastModifiedDate":"2021-03-17"},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":"            meetingBookOptional \u003d storage.readMeetingBook();","lastModifiedDate":"2021-03-17"},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":"            if (!meetingBookOptional.isPresent()) {","lastModifiedDate":"2021-03-17"},{"lineNumber":121,"author":{"gitId":"Maurice2n97"},"content":"                logger.info(\"Data file not found. Will be starting with a sample MeetingBook\");","lastModifiedDate":"2021-03-17"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":"            initialDataMeetingBook \u003d meetingBookOptional.orElseGet(SampleDataUtil::getSampleMeetingBook);","lastModifiedDate":"2021-03-17"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2021-03-17"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty MeetingBook\");","lastModifiedDate":"2021-03-17"},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"            initialDataMeetingBook \u003d new MeetingBook();","lastModifiedDate":"2021-03-17"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-03-17"},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty MeetingBook\");","lastModifiedDate":"2021-03-17"},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":"            initialDataMeetingBook \u003d new MeetingBook();","lastModifiedDate":"2021-03-17"},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":132,"author":{"gitId":"hengyiqun"},"content":"        //--\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d NOTE \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-01"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"hengyiqun"},"content":"        try {","lastModifiedDate":"2021-04-01"},{"lineNumber":135,"author":{"gitId":"hengyiqun"},"content":"            noteBookOptional \u003d storage.readNoteBook();","lastModifiedDate":"2021-04-01"},{"lineNumber":136,"author":{"gitId":"hengyiqun"},"content":"            if (!noteBookOptional.isPresent()) {","lastModifiedDate":"2021-04-01"},{"lineNumber":137,"author":{"gitId":"hengyiqun"},"content":"                logger.info(\"Data file not found. Will be starting with a sample NoteBook\");","lastModifiedDate":"2021-04-01"},{"lineNumber":138,"author":{"gitId":"hengyiqun"},"content":"            }","lastModifiedDate":"2021-04-01"},{"lineNumber":139,"author":{"gitId":"hengyiqun"},"content":"            initialDataNoteBook \u003d noteBookOptional.orElseGet(SampleDataUtil::getSampleNoteBook);","lastModifiedDate":"2021-04-01"},{"lineNumber":140,"author":{"gitId":"hengyiqun"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2021-04-01"},{"lineNumber":141,"author":{"gitId":"hengyiqun"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty NoteBook\");","lastModifiedDate":"2021-04-01"},{"lineNumber":142,"author":{"gitId":"hengyiqun"},"content":"            initialDataNoteBook \u003d new NoteBook();","lastModifiedDate":"2021-04-01"},{"lineNumber":143,"author":{"gitId":"hengyiqun"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-04-01"},{"lineNumber":144,"author":{"gitId":"hengyiqun"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty NoteBook\");","lastModifiedDate":"2021-04-01"},{"lineNumber":145,"author":{"gitId":"hengyiqun"},"content":"            initialDataNoteBook \u003d new NoteBook();","lastModifiedDate":"2021-04-01"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":148,"author":{"gitId":"Maurice2n97"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Establish Connection \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-09"},{"lineNumber":149,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":150,"author":{"gitId":"Maurice2n97"},"content":"        try {","lastModifiedDate":"2021-04-09"},{"lineNumber":151,"author":{"gitId":"Maurice2n97"},"content":"            personMeetingConnectionOptional \u003d storage.readConnection(initialDataMeetingBook, initialDataAddressBook);","lastModifiedDate":"2021-04-09"},{"lineNumber":152,"author":{"gitId":"Maurice2n97"},"content":"            if (!personMeetingConnectionOptional.isPresent()) {","lastModifiedDate":"2021-04-09"},{"lineNumber":153,"author":{"gitId":"Maurice2n97"},"content":"                logger.info(\"Date file not found. Will be starting with no person to meetings established\");","lastModifiedDate":"2021-04-09"},{"lineNumber":154,"author":{"gitId":"Maurice2n97"},"content":"            }","lastModifiedDate":"2021-04-09"},{"lineNumber":155,"author":{"gitId":"Maurice2n97"},"content":"            personMeetingConnection \u003d personMeetingConnectionOptional.orElseGet(() -\u003e new PersonMeetingConnection());","lastModifiedDate":"2021-04-09"},{"lineNumber":156,"author":{"gitId":"Maurice2n97"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2021-04-09"},{"lineNumber":157,"author":{"gitId":"Maurice2n97"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with no person to meeting \"","lastModifiedDate":"2021-04-09"},{"lineNumber":158,"author":{"gitId":"Maurice2n97"},"content":"                    + \"connections\");","lastModifiedDate":"2021-04-09"},{"lineNumber":159,"author":{"gitId":"Maurice2n97"},"content":"            personMeetingConnection \u003d new PersonMeetingConnection();","lastModifiedDate":"2021-04-09"},{"lineNumber":160,"author":{"gitId":"Maurice2n97"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-04-09"},{"lineNumber":161,"author":{"gitId":"Maurice2n97"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with no person to meeting \"","lastModifiedDate":"2021-04-09"},{"lineNumber":162,"author":{"gitId":"Maurice2n97"},"content":"                    + \"connections established\");","lastModifiedDate":"2021-04-09"},{"lineNumber":163,"author":{"gitId":"Maurice2n97"},"content":"            personMeetingConnection \u003d new PersonMeetingConnection();","lastModifiedDate":"2021-04-09"},{"lineNumber":164,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-04-09"},{"lineNumber":165,"author":{"gitId":"Maurice2n97"},"content":"        return new ModelManager(initialDataAddressBook, initialDataMeetingBook, initialDataNoteBook,","lastModifiedDate":"2021-04-09"},{"lineNumber":166,"author":{"gitId":"Maurice2n97"},"content":"                userPrefs, personMeetingConnection);","lastModifiedDate":"2021-04-09"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":210,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":211,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":213,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);","lastModifiedDate":"2016-09-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":256,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Maurice2n97":63,"hengyiqun":18,"-":175}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"    public static final String MESSAGE_MEETINGS_LISTED_OVERVIEW \u003d \"%1$d meetings listed!\";","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_INVALID_MEETING_DISPLAYED_INDEX \u003d \"The meeting index provided is invalid\";","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_INVALID_NOTE_DISPLAYED_INDEX \u003d \"The note index provided is invalid\";","lastModifiedDate":"2021-04-02"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d For findm","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":"    public static final String MESSAGE_INVALID_PERSONS_DISPLAYED_INDEX \u003d \"A person index provided is invalid\";","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"totoyoyo":4,"hengyiqun":2,"-":13}},{"path":"src/main/java/seedu/address/commons/util/ImageRequestUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"public class ImageRequestUtil {","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    public static final String BASIC_IMAGE_REQUEST_URL \u003d \"https://www.gravatar.com/avatar/%s\";","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    public static final String SIZE_REQUEST \u003d \"?s\u003d104\";","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    public static final String DEFAULT_IMAGE_REQUEST \u003d \"d\u003drobohash\";","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    public static final String FILE_EXTENSION \u003d \".jpg\";","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"     * generates the image request URL from an email. The image request URL","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"     * will be used to get the image from Gravatar account associated to the email.","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"     * @param email the email of the gravatar account.","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"     * @return the URL string of image request","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"     * @throws Exception when it is unable to get the hash correctly.","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    public static String generateImageRequest(String email) throws Exception {","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        String hash \u003d MD5Util.md5Hex(email.toLowerCase());","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        String urlString \u003d String.format(BASIC_IMAGE_REQUEST_URL","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"                + FILE_EXTENSION","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"                + SIZE_REQUEST","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"                + \"\u0026\"","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"                + DEFAULT_IMAGE_REQUEST, hash","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"        );","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"        return urlString;","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"     * Fetches Gravatar Image from Gravatar server given an email of the Gravatar avatar.","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"     * @param email email of the Gravatar avatar","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"     * @return the javafx Image of the avatar","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"     * @throws Exception when unable to fetch image.","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    public static Image getGravatarImage(String email) throws Exception {","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"        String urlString \u003d generateImageRequest(email);","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        Image image \u003d new Image(urlString);","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        if (image.isError()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalArgumentException(\"failed to load image\");","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"        return image;","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"Maurice2n97":56}},{"path":"src/main/java/seedu/address/commons/util/MD5Util.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.security.MessageDigest;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":" * A Utility class for returning  the MD5 hash of some input string.","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":" * This class is used  by {@link ImageRequestUtil}","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"public class MD5Util {","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"     * Encodes a byte[] array into hexadecimal string.","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"     * @param array of bytes","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"     * @return the hexadecimal string","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    public static String hex(byte[] array) {","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"        StringBuffer sb \u003d new StringBuffer();","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        for (int i \u003d 0; i \u003c array.length; ++i) {","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"            sb.append(Integer.toHexString((array[i]","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"                    \u0026 0xFF) | 0x100).substring(1, 3));","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"        return sb.toString();","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"     * Hashes a string using MD5 algorithm and returns it in hexadecimal format.","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"     * @param message the input string to be hashed.","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"     * @return hexed md5-hash of input string","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"     * @throws Exception if messageDigest library fails to hash.","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    public static String md5Hex(String message) throws Exception {","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"        MessageDigest md \u003d MessageDigest.getInstance(\"MD5\");","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        return hex(md.digest(message.getBytes(\"CP1252\")));","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"//code from http://en.gravatar.com/site/implement/images/java/","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"Maurice2n97":39}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import javafx.beans.value.ObservableValue;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Note;","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.ReadOnlyNoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"     * @see Model#getAddressBook()","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"     * Returns the MeetingBook.","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"     * @see Model#getMeetingBook()","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"    ReadOnlyMeetingBook getMeetingBook();","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"    /** Returns an unmodifiable view of the filtered list of meetings */","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"    ObservableList\u003cMeeting\u003e getFilteredMeetingList();","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"    ReadOnlyNoteBook getNoteBook();","lastModifiedDate":"2021-04-01"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"    ObservableList\u003cNote\u003e getFilteredNoteList();","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":62,"author":{"gitId":"hengyiqun"},"content":"    Path getNoteBookFilePath();","lastModifiedDate":"2021-04-01"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the internal unmodifiable Observable list of all meetings inside meeting book","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"    ObservableList\u003cMeeting\u003e getAllMeetingList();","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the observable value of the timetable start date.","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"    public ObservableValue\u003cLocalDate\u003e getTimeTableStartDate();","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"Maurice2n97":14,"skinnychenpi":14,"hengyiqun":8,"-":48}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import javafx.beans.value.ObservableValue;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.MeetBuddyParser;","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Note;","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.ReadOnlyNoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    private final MeetBuddyParser meetBuddyParser;","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        meetBuddyParser \u003d new MeetBuddyParser();","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        Command command \u003d meetBuddyParser.parseCommand(commandText);","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"            storage.saveMeetingBook(model.getMeetingBook());","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"            //storage.saveNoteBook(model.getNoteBook());","lastModifiedDate":"2021-04-09"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"            storage.saveConnection(model.getPersonMeetingConnection());","lastModifiedDate":"2021-04-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"    public ReadOnlyMeetingBook getMeetingBook() {","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"        return model.getMeetingBook();","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"    public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"        return model.getFilteredMeetingList();","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":101,"author":{"gitId":"hengyiqun"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dNotebook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-01"},{"lineNumber":102,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":103,"author":{"gitId":"hengyiqun"},"content":"    public ReadOnlyNoteBook getNoteBook() {","lastModifiedDate":"2021-04-01"},{"lineNumber":104,"author":{"gitId":"hengyiqun"},"content":"        return model.getNoteBook();","lastModifiedDate":"2021-04-01"},{"lineNumber":105,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":106,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":107,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":108,"author":{"gitId":"hengyiqun"},"content":"    public ObservableList\u003cNote\u003e getFilteredNoteList() {","lastModifiedDate":"2021-04-01"},{"lineNumber":109,"author":{"gitId":"hengyiqun"},"content":"        return model.getFilteredNoteList();","lastModifiedDate":"2021-04-01"},{"lineNumber":110,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":111,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":112,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":113,"author":{"gitId":"hengyiqun"},"content":"    public Path getNoteBookFilePath() {","lastModifiedDate":"2021-04-01"},{"lineNumber":114,"author":{"gitId":"hengyiqun"},"content":"        return model.getNoteBookFilePath();","lastModifiedDate":"2021-04-01"},{"lineNumber":115,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":116,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":117,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dTimetable UI methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":121,"author":{"gitId":"Maurice2n97"},"content":"    public ObservableList\u003cMeeting\u003e getAllMeetingList() {","lastModifiedDate":"2021-03-30"},{"lineNumber":122,"author":{"gitId":"Maurice2n97"},"content":"        return model.getUnmodifiableMeetingList();","lastModifiedDate":"2021-03-30"},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"    public ObservableValue\u003cLocalDate\u003e getTimeTableStartDate() {","lastModifiedDate":"2021-03-30"},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"        return model.getReadOnlyTimetableStartDate();","lastModifiedDate":"2021-03-30"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"Maurice2n97":17,"skinnychenpi":16,"hengyiqun":20,"-":76}},{"path":"src/main/java/seedu/address/logic/commands/ListAllCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEETINGS;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"public class ListAllCommand extends Command {","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all meetings and persons\";","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"        model.updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"hengyiqun":21}},{"path":"src/main/java/seedu/address/logic/commands/connections/AddPersonToMeetingConnectionCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.connections;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.meetings.EditMeetingCommand.EditMeetingDescriptor;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.*;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_CONNECTION;","lastModifiedDate":"2021-04-08"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEETINGS;","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"public class AddPersonToMeetingConnectionCommand extends Command {","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    public static final String COMMAND_WORD \u003d \"addptm\";","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds persons by index or by groups to a meeting. \"","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"            + \"INDEX of the meeting (must be a positive integer) \"","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"            + \"[\" + PREFIX_PERSON_CONNECTION + \"INDEX OF PERSON RELATED]...\\n\"","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"            + \"1 \"","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_PERSON_CONNECTION + \"1 \"","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_PERSON_CONNECTION + \"2\";","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    private static String MESSAGE_SUCCESS \u003d \"Successfully add persons related to the meeting! \"","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"            + \"The possible duplication of persons related is automatically removed.\";","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    private static String MESSAGE_NO_PERSON_FOUND \u003d \"Please input the contact\u0027s index.\";","lastModifiedDate":"2021-04-08"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    private final Index meetingIndex;","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    private final Set\u003cIndex\u003e personsIndexToAdd \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"     * @param index of the meeting in the filtered meeting list to edit","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     * @param personsIndexToAdd the set of index of persons the users want to add.","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public AddPersonToMeetingConnectionCommand(Index index, Set\u003cIndex\u003e personsIndexToAdd) {","lastModifiedDate":"2021-04-07"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(personsIndexToAdd);","lastModifiedDate":"2021-04-08"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        meetingIndex \u003d index;","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        this.personsIndexToAdd.addAll(personsIndexToAdd);","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        List\u003cMeeting\u003e lastShownList \u003d model.getFilteredMeetingList();","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        if (meetingIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        Meeting meetingToEdit \u003d lastShownList.get(meetingIndex.getZeroBased());","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        Meeting meetingEdited \u003d createEditedMeeting(meetingToEdit, new EditMeetingDescriptor());","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cPerson\u003e existedPersonsConnection \u003d meetingToEdit.getConnectionToPerson();","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"        model.deleteAllPersonMeetingConnectionByMeeting(meetingToEdit);","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"        addConnectionsToPersons(meetingEdited, model, existedPersonsConnection);","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"        model.updateMeeting(meetingToEdit, meetingEdited);","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        model.updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"     * This method will handle the connections that the user wants to add from both the g/ and p/","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"     * Duplicate person that the user wants to build connection with this meeting will be automatically removed.","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"    private void addConnectionsToPersons(Meeting toAdd, Model model, Set\u003cPerson\u003e existedPersonsConnection) throws CommandException {","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"        // Use set to ensure unique element.","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"        HashSet\u003cPerson\u003e personsConnection \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"        personsConnection.addAll(existedPersonsConnection);","lastModifiedDate":"2021-03-31"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"        toAdd.setPersonMeetingConnection(model.getPersonMeetingConnection());","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        if (personsIndexToAdd.size() !\u003d 0) {","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"            // Check whether the index is out of bounds","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"            for (Index index : personsIndexToAdd) {","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"                if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-31"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"                    throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-31"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"                }","lastModifiedDate":"2021-03-31"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"            // If we can pass the check, then add connection.","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"            for (Index index: personsIndexToAdd) {","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"                Person personToAddConnection \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"                personsConnection.add(personToAddConnection);","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"        } else {","lastModifiedDate":"2021-04-08"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"            throw new CommandException(MESSAGE_NO_PERSON_FOUND);","lastModifiedDate":"2021-04-08"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"        for (Person allPersonToAddConnection : personsConnection) {","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"            model.addPersonMeetingConnection(allPersonToAddConnection, toAdd);","lastModifiedDate":"2021-03-31"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"     * Creates and returns a {@code Meeting} with the details of {@code meetingToEdit}","lastModifiedDate":"2021-03-31"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"     * edited with {@code editMeetingDescriptor}.","lastModifiedDate":"2021-03-31"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"    private static Meeting createEditedMeeting(Meeting meetingToEdit, EditMeetingDescriptor editMeetingDescriptor) {","lastModifiedDate":"2021-03-31"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"        assert meetingToEdit !\u003d null;","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"        MeetingName updatedMeetingName \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"                .getName()","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getName());","lastModifiedDate":"2021-03-31"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"        DateTime updatedStart \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-31"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"                .getStart()","lastModifiedDate":"2021-03-31"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getStart());","lastModifiedDate":"2021-03-31"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"        DateTime updatedTerminate \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"                .getTerminate()","lastModifiedDate":"2021-03-31"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getTerminate());","lastModifiedDate":"2021-03-31"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"        Priority updatedPriority \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-31"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"                .getPriority()","lastModifiedDate":"2021-03-31"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getPriority());","lastModifiedDate":"2021-03-31"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"        Description updatedDescription \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-31"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"                .getDescription()","lastModifiedDate":"2021-03-31"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getDescription());","lastModifiedDate":"2021-03-31"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cGroup\u003e updatedGroups \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"                .getGroups()","lastModifiedDate":"2021-03-31"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getGroups());","lastModifiedDate":"2021-03-31"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"        return new Meeting(updatedMeetingName, updatedStart,","lastModifiedDate":"2021-03-31"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"                updatedTerminate, updatedPriority, updatedDescription, updatedGroups);","lastModifiedDate":"2021-03-31"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-04-08"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-04-08"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof AddPersonToMeetingConnectionCommand // instanceof handles nulls","lastModifiedDate":"2021-04-08"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 meetingIndex.equals(((AddPersonToMeetingConnectionCommand) other).meetingIndex)","lastModifiedDate":"2021-04-08"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 personsIndexToAdd.equals(((AddPersonToMeetingConnectionCommand) other).personsIndexToAdd));","lastModifiedDate":"2021-04-08"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"skinnychenpi":136}},{"path":"src/main/java/seedu/address/logic/commands/connections/DeletePersonToMeetingConnectionCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.connections;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.meetings.EditMeetingCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.*;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_CONNECTION;","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEETINGS;","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"public class DeletePersonToMeetingConnectionCommand extends Command {","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    public static final String COMMAND_WORD \u003d \"deletepfm\";","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes persons by index or by groups from a meeting. \"","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"            + \"INDEX of the meeting (must be a positive integer) \"","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"            + \"[\" + PREFIX_PERSON_CONNECTION + \"INDEX OF PERSON RELATED]...\\n\"","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"            + \"1 \"","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_PERSON_CONNECTION + \"1 \"","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_PERSON_CONNECTION + \"2\";","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    private static String MESSAGE_SUCCESS \u003d \"Successfully delete persons related to the meeting! \";","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    private static String MESSAGE_PERSON_NOT_EXIST \u003d \"The person related to this meeting doesn\u0027t exist!\";","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    private final Index meetingIndex;","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    private final Set\u003cIndex\u003e personsIndexToDelete \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"     * @param index of the meeting in the filtered meeting list to edit","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"     * @param personsIndexToAdd the set of index of persons the users want to delete.","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    public DeletePersonToMeetingConnectionCommand(Index index, Set\u003cIndex\u003e personsIndexToAdd) {","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        meetingIndex \u003d index;","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        this.personsIndexToDelete.addAll(personsIndexToAdd);","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        List\u003cMeeting\u003e lastShownList \u003d model.getFilteredMeetingList();","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        if (meetingIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        Meeting meetingToEdit \u003d lastShownList.get(meetingIndex.getZeroBased());","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        Meeting meetingEdited \u003d createEditedMeeting(meetingToEdit, new EditMeetingCommand.EditMeetingDescriptor());","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        deleteConnectionsToPersons(meetingToEdit, meetingEdited, model);","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        model.updateMeeting(meetingToEdit, meetingEdited);","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        model.updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"     * This method will handle the connections that the user wants to add from both the g/ and p/","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"     * Duplicate person that the user wants to build connection with this meeting will be automatically removed.","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    private void deleteConnectionsToPersons(Meeting toDelete, Meeting toAdd, Model model) throws CommandException {","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cPerson\u003e prevPersonsConnection \u003d toDelete.getConnectionToPerson();","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"        toAdd.setPersonMeetingConnection(model.getPersonMeetingConnection());","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cPerson\u003e totalPersonsToRemove \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"        if (personsIndexToDelete.size() !\u003d 0) {","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"            // Check whether the index is out of bounds","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"            for (Index index : personsIndexToDelete) {","lastModifiedDate":"2021-03-31"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"                if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"                    throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-31"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"                }","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"            // Check whether the person the user wants to delete is in the meetings to be edited.","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"            for (Index index : personsIndexToDelete) {","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"                Person personToDeleteConnection \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-31"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"                if (!prevPersonsConnection.contains(personToDeleteConnection)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"                    throw new CommandException(MESSAGE_PERSON_NOT_EXIST);","lastModifiedDate":"2021-03-31"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"                }","lastModifiedDate":"2021-03-31"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"            for (Index index : personsIndexToDelete) {","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"                Person personToAddConnection \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"                totalPersonsToRemove.add(personToAddConnection);","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"        prevPersonsConnection.removeAll(totalPersonsToRemove);","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cPerson\u003e updatedPersonsConnection \u003d prevPersonsConnection;","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"        model.deleteAllPersonMeetingConnectionByMeeting(toDelete);","lastModifiedDate":"2021-03-31"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        for (Person allPersonToAddConnection : updatedPersonsConnection) {","lastModifiedDate":"2021-03-31"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"            model.addPersonMeetingConnection(allPersonToAddConnection, toAdd);","lastModifiedDate":"2021-03-31"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"     * Creates and returns a {@code Meeting} with the details of {@code meetingToEdit}","lastModifiedDate":"2021-03-31"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"     * edited with {@code editMeetingDescriptor}.","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"    private static Meeting createEditedMeeting(Meeting meetingToEdit, EditMeetingCommand.EditMeetingDescriptor editMeetingDescriptor) {","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"        assert meetingToEdit !\u003d null;","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"        MeetingName updatedMeetingName \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-31"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"                .getName()","lastModifiedDate":"2021-03-31"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getName());","lastModifiedDate":"2021-03-31"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"        DateTime updatedStart \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"                .getStart()","lastModifiedDate":"2021-03-31"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getStart());","lastModifiedDate":"2021-03-31"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"        DateTime updatedTerminate \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-31"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"                .getTerminate()","lastModifiedDate":"2021-03-31"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getTerminate());","lastModifiedDate":"2021-03-31"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"        Priority updatedPriority \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-31"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"                .getPriority()","lastModifiedDate":"2021-03-31"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getPriority());","lastModifiedDate":"2021-03-31"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"        Description updatedDescription \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"                .getDescription()","lastModifiedDate":"2021-03-31"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getDescription());","lastModifiedDate":"2021-03-31"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cGroup\u003e updatedGroups \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-31"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"                .getGroups()","lastModifiedDate":"2021-03-31"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getGroups());","lastModifiedDate":"2021-03-31"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"        return new Meeting(updatedMeetingName, updatedStart,","lastModifiedDate":"2021-03-31"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"                updatedTerminate, updatedPriority, updatedDescription, updatedGroups);","lastModifiedDate":"2021-03-31"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-04-08"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-04-08"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof DeletePersonToMeetingConnectionCommand // instanceof handles nulls","lastModifiedDate":"2021-04-08"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 meetingIndex.equals(((DeletePersonToMeetingConnectionCommand) other).meetingIndex)","lastModifiedDate":"2021-04-08"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 personsIndexToDelete.equals(((DeletePersonToMeetingConnectionCommand) other).personsIndexToDelete));","lastModifiedDate":"2021-04-08"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"skinnychenpi":139}},{"path":"src/main/java/seedu/address/logic/commands/meetings/AddMeetingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.meetings;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CliSyntax.*;","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"public class AddMeetingCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public static final String COMMAND_WORD \u003d \"addm\";","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a meeting to MeetBuddy. \"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_START_TIME + \"START TIME \"","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_END_TIME + \"END TIME \"","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \"","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_PRIORITY + \"PRIORITY \"","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"            + \"[\" + PREFIX_GROUP + \"GROUP]...\"","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"            + \"[\" + PREFIX_PERSON_CONNECTION + \"INDEX OF PERSON RELATED]...\\n\"","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_NAME + \"CS2103 Lecture \"","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_START_TIME + \"2021-03-12 14:00 \"","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_END_TIME + \"2021-03-12 16:00 \"","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_DESCRIPTION + \"Week 7 \"","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_PRIORITY + \"3 \"","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_GROUP + \"lectures \"","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_GROUP + \"SoC \"","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_PERSON_CONNECTION + \"1 \"","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_PERSON_CONNECTION + \"2\";","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New meeting added: %1$s\";","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_DUPLICATE_MEETING \u003d \"This meeting already exists in MeetBuddy\";","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"    public static final String MESSAGE_CLASH_MEETING \u003d \"This meeting clashes with the following existing meetings \\n%s\";","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    private final Meeting toAdd;","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    private final Set\u003cIndex\u003e connectionToPerson \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"     * Creates an AddPersonCommand to add the specified {@code Person}","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"    public AddMeetingCommand(Meeting meeting) {","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(meeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        toAdd \u003d meeting;","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"     * Set the connection indices to persons.","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"    public AddMeetingCommand setConnectionToPerson(Set\u003cIndex\u003e indices) {","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"        this.connectionToPerson.addAll(indices);","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        return this;","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"     * Get the connection indices to persons.","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"    public Set\u003cIndex\u003e getConnectionToPerson() {","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"        return this.connectionToPerson;","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-16"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"        if (model.hasMeeting(toAdd)) {","lastModifiedDate":"2021-03-16"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_MEETING);","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"        if (model.clashes(toAdd)) {","lastModifiedDate":"2021-03-26"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"            List\u003cMeeting\u003e listOfClashingMeetings \u003d model.getClashes(toAdd);","lastModifiedDate":"2021-03-26"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"            String formatMeetingListString \u003d CommandDisplayUtil.formatElementsIntoRows(listOfClashingMeetings);","lastModifiedDate":"2021-03-26"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"            throw new CommandException(String.format(MESSAGE_CLASH_MEETING, formatMeetingListString));","lastModifiedDate":"2021-03-26"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"        addConnectionsToPersons(toAdd, model);","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"        model.addMeeting(toAdd);","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"     * This method will handle the connections that the user wants to add from both the g/ and p/","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"     * Duplicate person that the user wants to build connection with this meeting will be automatically removed.","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"    private void addConnectionsToPersons(Meeting toAdd, Model model) throws CommandException {","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        // Use set to ensure unique element.","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"        HashSet\u003cPerson\u003e personsConnection \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"        toAdd.setPersonMeetingConnection(model.getPersonMeetingConnection());","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"        if (getConnectionToPerson().size() !\u003d 0) {","lastModifiedDate":"2021-03-30"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-03-27"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"            // Check whether the index is out of bounds","lastModifiedDate":"2021-03-27"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"            for (Index index : getConnectionToPerson()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"                if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"                    throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"                }","lastModifiedDate":"2021-03-27"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-03-27"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"            // If we can pass the check, then add connection.","lastModifiedDate":"2021-03-27"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"            for (Index index: getConnectionToPerson()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"                Person personToAddConnection \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-27"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"                personsConnection.add(personToAddConnection);","lastModifiedDate":"2021-03-30"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-03-27"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"        for (Person allPersonToAddConnection : personsConnection) {","lastModifiedDate":"2021-03-30"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"            model.addPersonMeetingConnection(allPersonToAddConnection, toAdd);","lastModifiedDate":"2021-03-30"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof AddMeetingCommand // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 toAdd.equals(((AddMeetingCommand) other).toAdd));","lastModifiedDate":"2021-03-15"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-15"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"Maurice2n97":9,"skinnychenpi":118,"hengyiqun":1}},{"path":"src/main/java/seedu/address/logic/commands/meetings/CommandDisplayUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.logic.commands.meetings;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"public class CommandDisplayUtil {","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"     * Customises the format of the string to display in the command message, instead of relying on the List toString","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"     * method.","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    public static String formatElementsIntoRows(List\u003c?\u003e listItems) {","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"        String formatString \u003d \"\";","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"        for (Object o : listItems) {","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"            formatString +\u003d listItems.toString();","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"            formatString +\u003d \"\\n\";","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        return formatString;","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"Maurice2n97":21}},{"path":"src/main/java/seedu/address/logic/commands/meetings/DeleteMeetingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.logic.commands.meetings;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"public class DeleteMeetingCommand extends Command {","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"    public static final String COMMAND_WORD \u003d \"deletem\";","lastModifiedDate":"2021-03-25"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"            + \": Deletes the meeting identified by the index number used in the displayed meeting list.\\n\"","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    public static final String MESSAGE_DELETE_MEETING_SUCCESS \u003d \"Deleted Meeting: %1$s\";","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    public DeleteMeetingCommand(Index targetIndex) {","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        List\u003cMeeting\u003e lastShownList \u003d model.getFilteredMeetingList();","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"        Meeting meetingToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"        model.deleteMeeting(meetingToDelete);","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        model.deleteAllPersonMeetingConnectionByMeeting(meetingToDelete);","lastModifiedDate":"2021-04-07"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_MEETING_SUCCESS, meetingToDelete));","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"                || (other instanceof DeleteMeetingCommand // instanceof handles nulls","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteMeetingCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"Maurice2n97":49,"skinnychenpi":5,"hengyiqun":1}},{"path":"src/main/java/seedu/address/logic/commands/meetings/EditMeetingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.logic.commands.meetings;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.*;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import java.util.*;","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CliSyntax.*;","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEETINGS;","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":" * Edits the details of an existing meeting in meet buddy.","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"public class EditMeetingCommand extends Command {","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"    public static final String COMMAND_WORD \u003d \"editm\";","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the meeting identified \"","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"            + \"by the index number used in the displayed meeting list(and contact list\"","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"            + \" if you want to modify the contacts related). \"","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_START_TIME + \"START TIME \"","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_END_TIME + \"END TIME \"","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \"","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_PRIORITY + \"PRIORITY \"","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"            + \"[\" + PREFIX_GROUP + \"GROUP]...\"","lastModifiedDate":"2021-04-02"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"            + \"[\" + PREFIX_PERSON_CONNECTION + \"INDEX OF PERSON RELATED]...\\n\"","lastModifiedDate":"2021-04-02"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_NAME + \"CS2103 Lecture \"","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_START_TIME + \"2021-03-12 14:00 \"","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_END_TIME + \"2021-03-12 16:00 \"","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_DESCRIPTION + \"Week 7 \"","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_PRIORITY + \"3 \"","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_GROUP + \"lectures \"","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_GROUP + \"SoC \"","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_PERSON_CONNECTION + \"1 \"","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            + PREFIX_PERSON_CONNECTION + \"2\";","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_EDIT_MEETING_SUCCESS \u003d \"Edited Meeting: %1$s\";","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_DUPLICATE_MEETING \u003d \"This meeting already exists in the meeting book.\";","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_CLASH_MEETING \u003d \"This meeting clashes with the following existing meetings \\n%s\";","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"    private final Index index;","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"    private final EditMeetingDescriptor editMeetingDescriptor;","lastModifiedDate":"2021-03-28"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    private final Set\u003cIndex\u003e connectionToPerson \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"     * @param index of the meeting in the filtered meeting list to edit","lastModifiedDate":"2021-03-28"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"     * @param editMeetingDescriptor details to edit the meeting with","lastModifiedDate":"2021-03-28"},{"lineNumber":62,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"    public EditMeetingCommand(Index index, EditMeetingDescriptor editMeetingDescriptor) {","lastModifiedDate":"2021-03-28"},{"lineNumber":64,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-03-28"},{"lineNumber":65,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(editMeetingDescriptor);","lastModifiedDate":"2021-03-28"},{"lineNumber":66,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":67,"author":{"gitId":"hengyiqun"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-03-28"},{"lineNumber":68,"author":{"gitId":"hengyiqun"},"content":"        this.editMeetingDescriptor \u003d new EditMeetingDescriptor(editMeetingDescriptor);","lastModifiedDate":"2021-03-28"},{"lineNumber":69,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"     * Set the connection indices to persons.","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"    public EditMeetingCommand setConnectionToPerson(Set\u003cIndex\u003e indices) {","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"        this.connectionToPerson.addAll(indices);","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"        return this;","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"     * Get the connection indices to persons.","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"    public Set\u003cIndex\u003e getConnectionToPerson() {","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"        return this.connectionToPerson;","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":84,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":85,"author":{"gitId":"hengyiqun"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-28"},{"lineNumber":86,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-28"},{"lineNumber":87,"author":{"gitId":"hengyiqun"},"content":"        List\u003cMeeting\u003e lastShownList \u003d model.getFilteredMeetingList();","lastModifiedDate":"2021-03-28"},{"lineNumber":88,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":89,"author":{"gitId":"hengyiqun"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-28"},{"lineNumber":90,"author":{"gitId":"hengyiqun"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-28"},{"lineNumber":91,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":92,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":93,"author":{"gitId":"hengyiqun"},"content":"        Meeting meetingToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-28"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"        Meeting editedMeeting;","lastModifiedDate":"2021-04-09"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"        try {","lastModifiedDate":"2021-04-09"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"            editedMeeting \u003d createEditedMeeting(meetingToEdit, editMeetingDescriptor);","lastModifiedDate":"2021-04-09"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"        } catch (InvalidMeetingException err) {","lastModifiedDate":"2021-04-09"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"            throw new CommandException(err.getMessage());","lastModifiedDate":"2021-04-09"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-04-09"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":101,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":102,"author":{"gitId":"hengyiqun"},"content":"        if (!meetingToEdit.isSameMeeting(editedMeeting) \u0026\u0026 model.hasMeeting(editedMeeting)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":103,"author":{"gitId":"hengyiqun"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_MEETING);","lastModifiedDate":"2021-03-28"},{"lineNumber":104,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":105,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":106,"author":{"gitId":"hengyiqun"},"content":"        if (model.clashesExceptOne(meetingToEdit, editedMeeting)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":107,"author":{"gitId":"hengyiqun"},"content":"            List\u003cMeeting\u003e listOfClashingMeetings \u003d model.getClashes(editedMeeting);","lastModifiedDate":"2021-03-28"},{"lineNumber":108,"author":{"gitId":"hengyiqun"},"content":"            String formatMeetingListString \u003d CommandDisplayUtil.formatElementsIntoRows(listOfClashingMeetings);","lastModifiedDate":"2021-03-28"},{"lineNumber":109,"author":{"gitId":"hengyiqun"},"content":"            throw new CommandException(String.format(MESSAGE_CLASH_MEETING, formatMeetingListString));","lastModifiedDate":"2021-03-28"},{"lineNumber":110,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":111,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"        // Reconstruct connection.","lastModifiedDate":"2021-03-30"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cPerson\u003e existedPersonsConnection \u003d meetingToEdit.getConnectionToPerson();","lastModifiedDate":"2021-03-30"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"        model.deleteAllPersonMeetingConnectionByMeeting(meetingToEdit);","lastModifiedDate":"2021-03-30"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"        // If the user does not try to modify the persons related, then preserve the old connection.","lastModifiedDate":"2021-03-30"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"        if (getConnectionToPerson().isEmpty()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"            addConnectionsToPersons(editedMeeting, model, existedPersonsConnection);","lastModifiedDate":"2021-03-30"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"        } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"            addConnectionsToPersons(editedMeeting, model, new HashSet\u003cPerson\u003e());","lastModifiedDate":"2021-03-30"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"        // End of Reconstruct Connection.","lastModifiedDate":"2021-03-30"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":123,"author":{"gitId":"hengyiqun"},"content":"        model.updateMeeting(meetingToEdit, editedMeeting);","lastModifiedDate":"2021-03-28"},{"lineNumber":124,"author":{"gitId":"hengyiqun"},"content":"        model.updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);","lastModifiedDate":"2021-03-28"},{"lineNumber":125,"author":{"gitId":"hengyiqun"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_MEETING_SUCCESS, editedMeeting));","lastModifiedDate":"2021-03-28"},{"lineNumber":126,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":127,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":128,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":129,"author":{"gitId":"hengyiqun"},"content":"     * Creates and returns a {@code Meeting} with the details of {@code meetingToEdit}","lastModifiedDate":"2021-03-28"},{"lineNumber":130,"author":{"gitId":"hengyiqun"},"content":"     * edited with {@code editMeetingDescriptor}.","lastModifiedDate":"2021-03-28"},{"lineNumber":131,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":132,"author":{"gitId":"Maurice2n97"},"content":"    private static Meeting createEditedMeeting(Meeting meetingToEdit, EditMeetingDescriptor editMeetingDescriptor)","lastModifiedDate":"2021-04-09"},{"lineNumber":133,"author":{"gitId":"Maurice2n97"},"content":"            throws InvalidMeetingException {","lastModifiedDate":"2021-04-09"},{"lineNumber":134,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":135,"author":{"gitId":"Maurice2n97"},"content":"        assert meetingToEdit !\u003d null;","lastModifiedDate":"2021-04-09"},{"lineNumber":136,"author":{"gitId":"hengyiqun"},"content":"        MeetingName updatedMeetingName \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-28"},{"lineNumber":137,"author":{"gitId":"hengyiqun"},"content":"                .getName()","lastModifiedDate":"2021-03-28"},{"lineNumber":138,"author":{"gitId":"hengyiqun"},"content":"                .orElse(meetingToEdit.getName());","lastModifiedDate":"2021-03-28"},{"lineNumber":139,"author":{"gitId":"hengyiqun"},"content":"        DateTime updatedStart \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-28"},{"lineNumber":140,"author":{"gitId":"hengyiqun"},"content":"                .getStart()","lastModifiedDate":"2021-03-28"},{"lineNumber":141,"author":{"gitId":"hengyiqun"},"content":"                .orElse(meetingToEdit.getStart());","lastModifiedDate":"2021-03-28"},{"lineNumber":142,"author":{"gitId":"hengyiqun"},"content":"        DateTime updatedTerminate \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-28"},{"lineNumber":143,"author":{"gitId":"hengyiqun"},"content":"                .getTerminate()","lastModifiedDate":"2021-03-28"},{"lineNumber":144,"author":{"gitId":"hengyiqun"},"content":"                .orElse(meetingToEdit.getTerminate());","lastModifiedDate":"2021-03-28"},{"lineNumber":145,"author":{"gitId":"hengyiqun"},"content":"        Priority updatedPriority \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-28"},{"lineNumber":146,"author":{"gitId":"hengyiqun"},"content":"                .getPriority()","lastModifiedDate":"2021-03-28"},{"lineNumber":147,"author":{"gitId":"hengyiqun"},"content":"                .orElse(meetingToEdit.getPriority());","lastModifiedDate":"2021-03-28"},{"lineNumber":148,"author":{"gitId":"hengyiqun"},"content":"        Description updatedDescription \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-28"},{"lineNumber":149,"author":{"gitId":"hengyiqun"},"content":"                .getDescription()","lastModifiedDate":"2021-03-28"},{"lineNumber":150,"author":{"gitId":"hengyiqun"},"content":"                .orElse(meetingToEdit.getDescription());","lastModifiedDate":"2021-03-28"},{"lineNumber":151,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e updatedGroups \u003d editMeetingDescriptor","lastModifiedDate":"2021-03-28"},{"lineNumber":152,"author":{"gitId":"hengyiqun"},"content":"                .getGroups()","lastModifiedDate":"2021-03-28"},{"lineNumber":153,"author":{"gitId":"hengyiqun"},"content":"                .orElse(meetingToEdit.getGroups());","lastModifiedDate":"2021-03-28"},{"lineNumber":154,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":155,"author":{"gitId":"Maurice2n97"},"content":"        if (!Meeting.isValidStartTerminate(updatedStart, updatedTerminate)) {","lastModifiedDate":"2021-04-09"},{"lineNumber":156,"author":{"gitId":"Maurice2n97"},"content":"            throw new InvalidMeetingException(Meeting.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-04-09"},{"lineNumber":157,"author":{"gitId":"Maurice2n97"},"content":"        };","lastModifiedDate":"2021-04-09"},{"lineNumber":158,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":159,"author":{"gitId":"hengyiqun"},"content":"        return new Meeting(updatedMeetingName, updatedStart,","lastModifiedDate":"2021-03-28"},{"lineNumber":160,"author":{"gitId":"hengyiqun"},"content":"                updatedTerminate, updatedPriority, updatedDescription, updatedGroups);","lastModifiedDate":"2021-03-28"},{"lineNumber":161,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":162,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":163,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":164,"author":{"gitId":"skinnychenpi"},"content":"     * This method will handle the connections that the user wants to add from both the g/ and p/","lastModifiedDate":"2021-03-30"},{"lineNumber":165,"author":{"gitId":"skinnychenpi"},"content":"     * Duplicate person that the user wants to build connection with this meeting will be automatically removed.","lastModifiedDate":"2021-03-30"},{"lineNumber":166,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":167,"author":{"gitId":"skinnychenpi"},"content":"    private void addConnectionsToPersons(Meeting toAdd, Model model, Set\u003cPerson\u003e existedPersonsConnection) throws CommandException {","lastModifiedDate":"2021-03-30"},{"lineNumber":168,"author":{"gitId":"skinnychenpi"},"content":"        // Use set to ensure unique element.","lastModifiedDate":"2021-03-30"},{"lineNumber":169,"author":{"gitId":"skinnychenpi"},"content":"        HashSet\u003cPerson\u003e personsConnection \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":170,"author":{"gitId":"skinnychenpi"},"content":"        personsConnection.addAll(existedPersonsConnection);","lastModifiedDate":"2021-03-30"},{"lineNumber":171,"author":{"gitId":"skinnychenpi"},"content":"        toAdd.setPersonMeetingConnection(model.getPersonMeetingConnection());","lastModifiedDate":"2021-03-30"},{"lineNumber":172,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":173,"author":{"gitId":"skinnychenpi"},"content":"        if (!getConnectionToPerson().isEmpty()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":174,"author":{"gitId":"skinnychenpi"},"content":"            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-03-30"},{"lineNumber":175,"author":{"gitId":"skinnychenpi"},"content":"            // Check whether the index is out of bounds","lastModifiedDate":"2021-03-30"},{"lineNumber":176,"author":{"gitId":"skinnychenpi"},"content":"            for (Index index : getConnectionToPerson()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":177,"author":{"gitId":"skinnychenpi"},"content":"                if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":178,"author":{"gitId":"skinnychenpi"},"content":"                    throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-30"},{"lineNumber":179,"author":{"gitId":"skinnychenpi"},"content":"                }","lastModifiedDate":"2021-03-30"},{"lineNumber":180,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":181,"author":{"gitId":"skinnychenpi"},"content":"            // If we can pass the check, then add connection.","lastModifiedDate":"2021-03-30"},{"lineNumber":182,"author":{"gitId":"skinnychenpi"},"content":"            for (Index index: getConnectionToPerson()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":183,"author":{"gitId":"skinnychenpi"},"content":"                Person personToAddConnection \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-30"},{"lineNumber":184,"author":{"gitId":"skinnychenpi"},"content":"                personsConnection.add(personToAddConnection);","lastModifiedDate":"2021-03-30"},{"lineNumber":185,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":186,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":187,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":188,"author":{"gitId":"skinnychenpi"},"content":"        for (Person allPersonToAddConnection : personsConnection) {","lastModifiedDate":"2021-03-30"},{"lineNumber":189,"author":{"gitId":"skinnychenpi"},"content":"            model.addPersonMeetingConnection(allPersonToAddConnection, toAdd);","lastModifiedDate":"2021-03-30"},{"lineNumber":190,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":191,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":192,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":193,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":194,"author":{"gitId":"hengyiqun"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-28"},{"lineNumber":195,"author":{"gitId":"hengyiqun"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-28"},{"lineNumber":196,"author":{"gitId":"hengyiqun"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-28"},{"lineNumber":197,"author":{"gitId":"hengyiqun"},"content":"            return true;","lastModifiedDate":"2021-03-28"},{"lineNumber":198,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":199,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":200,"author":{"gitId":"hengyiqun"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-28"},{"lineNumber":201,"author":{"gitId":"hengyiqun"},"content":"        if (!(other instanceof EditMeetingCommand)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":202,"author":{"gitId":"hengyiqun"},"content":"            return false;","lastModifiedDate":"2021-03-28"},{"lineNumber":203,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":204,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":205,"author":{"gitId":"hengyiqun"},"content":"        // state check","lastModifiedDate":"2021-03-28"},{"lineNumber":206,"author":{"gitId":"hengyiqun"},"content":"        EditMeetingCommand e \u003d (EditMeetingCommand) other;","lastModifiedDate":"2021-03-28"},{"lineNumber":207,"author":{"gitId":"hengyiqun"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-03-28"},{"lineNumber":208,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 editMeetingDescriptor.equals(e.editMeetingDescriptor);","lastModifiedDate":"2021-03-28"},{"lineNumber":209,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":210,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":211,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":212,"author":{"gitId":"hengyiqun"},"content":"     * Stores the details to edit the meeting with. Each non-empty field value will replace the","lastModifiedDate":"2021-03-28"},{"lineNumber":213,"author":{"gitId":"hengyiqun"},"content":"     * corresponding field value of the meeting.","lastModifiedDate":"2021-03-28"},{"lineNumber":214,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":215,"author":{"gitId":"hengyiqun"},"content":"    public static class EditMeetingDescriptor {","lastModifiedDate":"2021-03-28"},{"lineNumber":216,"author":{"gitId":"hengyiqun"},"content":"        private MeetingName meetingName;","lastModifiedDate":"2021-03-28"},{"lineNumber":217,"author":{"gitId":"hengyiqun"},"content":"        private DateTime start;","lastModifiedDate":"2021-03-28"},{"lineNumber":218,"author":{"gitId":"hengyiqun"},"content":"        private DateTime terminate;","lastModifiedDate":"2021-03-28"},{"lineNumber":219,"author":{"gitId":"hengyiqun"},"content":"        private Priority priority;","lastModifiedDate":"2021-03-28"},{"lineNumber":220,"author":{"gitId":"hengyiqun"},"content":"        private Description description;","lastModifiedDate":"2021-03-28"},{"lineNumber":221,"author":{"gitId":"hengyiqun"},"content":"        private Set\u003cGroup\u003e groups;","lastModifiedDate":"2021-03-28"},{"lineNumber":222,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":223,"author":{"gitId":"hengyiqun"},"content":"        public EditMeetingDescriptor() {}","lastModifiedDate":"2021-03-28"},{"lineNumber":224,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":225,"author":{"gitId":"hengyiqun"},"content":"        /**","lastModifiedDate":"2021-03-28"},{"lineNumber":226,"author":{"gitId":"hengyiqun"},"content":"         * Copy constructor.","lastModifiedDate":"2021-03-28"},{"lineNumber":227,"author":{"gitId":"hengyiqun"},"content":"         * A defensive copy of {@code groups} is used internally.","lastModifiedDate":"2021-03-28"},{"lineNumber":228,"author":{"gitId":"hengyiqun"},"content":"         */","lastModifiedDate":"2021-03-28"},{"lineNumber":229,"author":{"gitId":"hengyiqun"},"content":"        public EditMeetingDescriptor(EditMeetingDescriptor toCopy) {","lastModifiedDate":"2021-03-28"},{"lineNumber":230,"author":{"gitId":"hengyiqun"},"content":"            setName(toCopy.meetingName);","lastModifiedDate":"2021-03-28"},{"lineNumber":231,"author":{"gitId":"hengyiqun"},"content":"            setStart(toCopy.start);","lastModifiedDate":"2021-03-28"},{"lineNumber":232,"author":{"gitId":"hengyiqun"},"content":"            setTerminate(toCopy.terminate);","lastModifiedDate":"2021-03-28"},{"lineNumber":233,"author":{"gitId":"hengyiqun"},"content":"            setPriority(toCopy.priority);","lastModifiedDate":"2021-03-28"},{"lineNumber":234,"author":{"gitId":"hengyiqun"},"content":"            setDescription(toCopy.description);","lastModifiedDate":"2021-03-28"},{"lineNumber":235,"author":{"gitId":"hengyiqun"},"content":"            setGroups(toCopy.groups);","lastModifiedDate":"2021-03-28"},{"lineNumber":236,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":237,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":238,"author":{"gitId":"hengyiqun"},"content":"        /**","lastModifiedDate":"2021-03-28"},{"lineNumber":239,"author":{"gitId":"hengyiqun"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-03-28"},{"lineNumber":240,"author":{"gitId":"hengyiqun"},"content":"         */","lastModifiedDate":"2021-03-28"},{"lineNumber":241,"author":{"gitId":"hengyiqun"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-03-28"},{"lineNumber":242,"author":{"gitId":"hengyiqun"},"content":"            return CollectionUtil.isAnyNonNull(meetingName, start, terminate, priority, description, groups);","lastModifiedDate":"2021-03-28"},{"lineNumber":243,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":244,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":245,"author":{"gitId":"hengyiqun"},"content":"        public void setName(MeetingName meetingName) {","lastModifiedDate":"2021-03-28"},{"lineNumber":246,"author":{"gitId":"hengyiqun"},"content":"            this.meetingName \u003d meetingName;","lastModifiedDate":"2021-03-28"},{"lineNumber":247,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":248,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":249,"author":{"gitId":"hengyiqun"},"content":"        public Optional\u003cMeetingName\u003e getName() {","lastModifiedDate":"2021-03-28"},{"lineNumber":250,"author":{"gitId":"hengyiqun"},"content":"            return Optional.ofNullable(meetingName);","lastModifiedDate":"2021-03-28"},{"lineNumber":251,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":252,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":253,"author":{"gitId":"hengyiqun"},"content":"        public void setStart(DateTime start) {","lastModifiedDate":"2021-03-28"},{"lineNumber":254,"author":{"gitId":"hengyiqun"},"content":"            this.start \u003d start;","lastModifiedDate":"2021-03-28"},{"lineNumber":255,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":256,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":257,"author":{"gitId":"hengyiqun"},"content":"        public Optional\u003cDateTime\u003e getStart() {","lastModifiedDate":"2021-03-28"},{"lineNumber":258,"author":{"gitId":"hengyiqun"},"content":"            return Optional.ofNullable(start);","lastModifiedDate":"2021-03-28"},{"lineNumber":259,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":260,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":261,"author":{"gitId":"hengyiqun"},"content":"        public void setTerminate(DateTime terminate) {","lastModifiedDate":"2021-03-28"},{"lineNumber":262,"author":{"gitId":"hengyiqun"},"content":"            this.terminate \u003d terminate;","lastModifiedDate":"2021-03-28"},{"lineNumber":263,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":264,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":265,"author":{"gitId":"hengyiqun"},"content":"        public Optional\u003cDateTime\u003e getTerminate() {","lastModifiedDate":"2021-03-28"},{"lineNumber":266,"author":{"gitId":"hengyiqun"},"content":"            return Optional.ofNullable(terminate);","lastModifiedDate":"2021-03-28"},{"lineNumber":267,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":268,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":269,"author":{"gitId":"hengyiqun"},"content":"        public void setPriority(Priority priority) {","lastModifiedDate":"2021-03-28"},{"lineNumber":270,"author":{"gitId":"hengyiqun"},"content":"            this.priority \u003d priority;","lastModifiedDate":"2021-03-28"},{"lineNumber":271,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":272,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":273,"author":{"gitId":"hengyiqun"},"content":"        public Optional\u003cPriority\u003e getPriority() {","lastModifiedDate":"2021-03-28"},{"lineNumber":274,"author":{"gitId":"hengyiqun"},"content":"            return Optional.ofNullable(priority);","lastModifiedDate":"2021-03-28"},{"lineNumber":275,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":276,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":277,"author":{"gitId":"hengyiqun"},"content":"        public void setDescription(Description description) {","lastModifiedDate":"2021-03-28"},{"lineNumber":278,"author":{"gitId":"hengyiqun"},"content":"            this.description \u003d description;","lastModifiedDate":"2021-03-28"},{"lineNumber":279,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":280,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":281,"author":{"gitId":"hengyiqun"},"content":"        public Optional\u003cDescription\u003e getDescription() {","lastModifiedDate":"2021-03-28"},{"lineNumber":282,"author":{"gitId":"hengyiqun"},"content":"            return Optional.ofNullable(description);","lastModifiedDate":"2021-03-28"},{"lineNumber":283,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":284,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":285,"author":{"gitId":"hengyiqun"},"content":"        /**","lastModifiedDate":"2021-03-28"},{"lineNumber":286,"author":{"gitId":"hengyiqun"},"content":"         * Sets {@code groups} to this object\u0027s {@code groups}.","lastModifiedDate":"2021-03-28"},{"lineNumber":287,"author":{"gitId":"hengyiqun"},"content":"         * A defensive copy of {@code groups} is used internally.","lastModifiedDate":"2021-03-28"},{"lineNumber":288,"author":{"gitId":"hengyiqun"},"content":"         */","lastModifiedDate":"2021-03-28"},{"lineNumber":289,"author":{"gitId":"hengyiqun"},"content":"        public void setGroups(Set\u003cGroup\u003e groups) {","lastModifiedDate":"2021-03-28"},{"lineNumber":290,"author":{"gitId":"hengyiqun"},"content":"            this.groups \u003d (groups !\u003d null) ? new HashSet\u003c\u003e(groups) : null;","lastModifiedDate":"2021-03-28"},{"lineNumber":291,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":292,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":293,"author":{"gitId":"hengyiqun"},"content":"        /**","lastModifiedDate":"2021-03-28"},{"lineNumber":294,"author":{"gitId":"hengyiqun"},"content":"         * Returns an unmodifiable group set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2021-03-28"},{"lineNumber":295,"author":{"gitId":"hengyiqun"},"content":"         * if modification is attempted.","lastModifiedDate":"2021-03-28"},{"lineNumber":296,"author":{"gitId":"hengyiqun"},"content":"         * Returns {@code Optional#empty()} if {@code groups} is null.","lastModifiedDate":"2021-03-28"},{"lineNumber":297,"author":{"gitId":"hengyiqun"},"content":"         */","lastModifiedDate":"2021-03-28"},{"lineNumber":298,"author":{"gitId":"hengyiqun"},"content":"        public Optional\u003cSet\u003cGroup\u003e\u003e getGroups() {","lastModifiedDate":"2021-03-28"},{"lineNumber":299,"author":{"gitId":"hengyiqun"},"content":"            return (groups !\u003d null) ? Optional.of(Collections.unmodifiableSet(groups)) : Optional.empty();","lastModifiedDate":"2021-03-28"},{"lineNumber":300,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":301,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":302,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":303,"author":{"gitId":"hengyiqun"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-03-28"},{"lineNumber":304,"author":{"gitId":"hengyiqun"},"content":"            // short circuit if same object","lastModifiedDate":"2021-03-28"},{"lineNumber":305,"author":{"gitId":"hengyiqun"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-28"},{"lineNumber":306,"author":{"gitId":"hengyiqun"},"content":"                return true;","lastModifiedDate":"2021-03-28"},{"lineNumber":307,"author":{"gitId":"hengyiqun"},"content":"            }","lastModifiedDate":"2021-03-28"},{"lineNumber":308,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":309,"author":{"gitId":"hengyiqun"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-03-28"},{"lineNumber":310,"author":{"gitId":"hengyiqun"},"content":"            if (!(other instanceof EditMeetingDescriptor)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":311,"author":{"gitId":"hengyiqun"},"content":"                return false;","lastModifiedDate":"2021-03-28"},{"lineNumber":312,"author":{"gitId":"hengyiqun"},"content":"            }","lastModifiedDate":"2021-03-28"},{"lineNumber":313,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":314,"author":{"gitId":"hengyiqun"},"content":"            // state check","lastModifiedDate":"2021-03-28"},{"lineNumber":315,"author":{"gitId":"hengyiqun"},"content":"            EditMeetingDescriptor e \u003d (EditMeetingDescriptor) other;","lastModifiedDate":"2021-03-28"},{"lineNumber":316,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":317,"author":{"gitId":"hengyiqun"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2021-03-28"},{"lineNumber":318,"author":{"gitId":"hengyiqun"},"content":"                    \u0026\u0026 getGroups().equals(e.getGroups());","lastModifiedDate":"2021-03-28"},{"lineNumber":319,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":320,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":321,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"Maurice2n97":15,"skinnychenpi":69,"hengyiqun":237}},{"path":"src/main/java/seedu/address/logic/commands/meetings/FindMeetingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.logic.commands.meetings;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_CONNECTION;","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"import java.util.List;","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"import java.util.Set;","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"import java.util.function.Supplier;","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-04-07"},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"public class FindMeetingCommand extends Command {","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"totoyoyo"},"content":"    public static final String COMMAND_WORD \u003d \"findm\";","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds meetings with that has all the \"","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"totoyoyo"},"content":"            + \"specified values.\\n\"","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"totoyoyo"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"totoyoyo"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"totoyoyo"},"content":"            + PREFIX_TIME + \"TIME \"","lastModifiedDate":"2021-04-07"},{"lineNumber":35,"author":{"gitId":"totoyoyo"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \"","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"totoyoyo"},"content":"            + PREFIX_PRIORITY + \"PRIORITY \"","lastModifiedDate":"2021-04-07"},{"lineNumber":37,"author":{"gitId":"totoyoyo"},"content":"            + \"[\" + PREFIX_GROUP + \"GROUP]...\"","lastModifiedDate":"2021-04-07"},{"lineNumber":38,"author":{"gitId":"totoyoyo"},"content":"            + \"[\" + PREFIX_PERSON_CONNECTION + \"INDEX OF PERSON RELATED]...\\n\"","lastModifiedDate":"2021-04-07"},{"lineNumber":39,"author":{"gitId":"totoyoyo"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-04-07"},{"lineNumber":40,"author":{"gitId":"totoyoyo"},"content":"            + PREFIX_NAME + \"CS2103 Lecture \"","lastModifiedDate":"2021-04-07"},{"lineNumber":41,"author":{"gitId":"totoyoyo"},"content":"            + PREFIX_TIME + \"2021-03-12 14:00 \"","lastModifiedDate":"2021-04-07"},{"lineNumber":42,"author":{"gitId":"totoyoyo"},"content":"            + PREFIX_DESCRIPTION + \"Week 7 \"","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"totoyoyo"},"content":"            + PREFIX_PRIORITY + \"3 \"","lastModifiedDate":"2021-04-07"},{"lineNumber":44,"author":{"gitId":"totoyoyo"},"content":"            + PREFIX_GROUP + \"lectures \"","lastModifiedDate":"2021-04-07"},{"lineNumber":45,"author":{"gitId":"totoyoyo"},"content":"            + PREFIX_GROUP + \"SoC \"","lastModifiedDate":"2021-04-07"},{"lineNumber":46,"author":{"gitId":"totoyoyo"},"content":"            + PREFIX_PERSON_CONNECTION + \"1 \"","lastModifiedDate":"2021-04-07"},{"lineNumber":47,"author":{"gitId":"totoyoyo"},"content":"            + PREFIX_PERSON_CONNECTION + \"2\";","lastModifiedDate":"2021-04-07"},{"lineNumber":48,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":49,"author":{"gitId":"totoyoyo"},"content":"    private final Predicate\u003cMeeting\u003e combinedPredicate;","lastModifiedDate":"2021-04-07"},{"lineNumber":50,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":51,"author":{"gitId":"totoyoyo"},"content":"    private final Set\u003cIndex\u003e persons;","lastModifiedDate":"2021-04-07"},{"lineNumber":52,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":53,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":54,"author":{"gitId":"totoyoyo"},"content":"    public FindMeetingCommand(Predicate\u003cMeeting\u003e combinedPredicate, Set\u003cIndex\u003e personsIndexesToSearch) {","lastModifiedDate":"2021-04-07"},{"lineNumber":55,"author":{"gitId":"totoyoyo"},"content":"        super();","lastModifiedDate":"2021-04-07"},{"lineNumber":56,"author":{"gitId":"totoyoyo"},"content":"        this.combinedPredicate \u003d combinedPredicate;","lastModifiedDate":"2021-04-07"},{"lineNumber":57,"author":{"gitId":"totoyoyo"},"content":"        persons \u003d personsIndexesToSearch;","lastModifiedDate":"2021-04-07"},{"lineNumber":58,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":59,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":60,"author":{"gitId":"totoyoyo"},"content":"    /**","lastModifiedDate":"2021-04-07"},{"lineNumber":61,"author":{"gitId":"totoyoyo"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2021-04-07"},{"lineNumber":62,"author":{"gitId":"totoyoyo"},"content":"     *","lastModifiedDate":"2021-04-07"},{"lineNumber":63,"author":{"gitId":"totoyoyo"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-04-07"},{"lineNumber":64,"author":{"gitId":"totoyoyo"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2021-04-07"},{"lineNumber":65,"author":{"gitId":"totoyoyo"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-04-07"},{"lineNumber":66,"author":{"gitId":"totoyoyo"},"content":"     */","lastModifiedDate":"2021-04-07"},{"lineNumber":67,"author":{"gitId":"totoyoyo"},"content":"    @Override","lastModifiedDate":"2021-04-07"},{"lineNumber":68,"author":{"gitId":"totoyoyo"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-04-07"},{"lineNumber":69,"author":{"gitId":"totoyoyo"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-04-07"},{"lineNumber":70,"author":{"gitId":"totoyoyo"},"content":"        Predicate\u003cMeeting\u003e containsPeoplePredicate \u003d makeContainsPeoplePredicate(persons, model);","lastModifiedDate":"2021-04-07"},{"lineNumber":71,"author":{"gitId":"totoyoyo"},"content":"        Predicate\u003cMeeting\u003e finalPredicate \u003d combinedPredicate.and(containsPeoplePredicate);","lastModifiedDate":"2021-04-07"},{"lineNumber":72,"author":{"gitId":"totoyoyo"},"content":"        model.updateFilteredMeetingList(finalPredicate);","lastModifiedDate":"2021-04-07"},{"lineNumber":73,"author":{"gitId":"totoyoyo"},"content":"        return new CommandResult(","lastModifiedDate":"2021-04-07"},{"lineNumber":74,"author":{"gitId":"totoyoyo"},"content":"                String.format(Messages.MESSAGE_MEETINGS_LISTED_OVERVIEW, model.getFilteredMeetingList().size()));","lastModifiedDate":"2021-04-07"},{"lineNumber":75,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":76,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":77,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":78,"author":{"gitId":"totoyoyo"},"content":"    private Predicate\u003cMeeting\u003e makeContainsPeoplePredicate(Set\u003cIndex\u003e people, Model model) throws CommandException {","lastModifiedDate":"2021-04-07"},{"lineNumber":79,"author":{"gitId":"totoyoyo"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-04-07"},{"lineNumber":80,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":81,"author":{"gitId":"totoyoyo"},"content":"        Supplier\u003cStream\u003cInteger\u003e\u003e zeroBasedIndexStreamSupplier \u003d () -\u003e people.stream().map(index -\u003e index.getZeroBased());","lastModifiedDate":"2021-04-07"},{"lineNumber":82,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":83,"author":{"gitId":"totoyoyo"},"content":"        if (zeroBasedIndexStreamSupplier.get().anyMatch(integer -\u003e integer \u003e\u003d  lastShownList.size())) {","lastModifiedDate":"2021-04-07"},{"lineNumber":84,"author":{"gitId":"totoyoyo"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSONS_DISPLAYED_INDEX);","lastModifiedDate":"2021-04-07"},{"lineNumber":85,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":86,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":87,"author":{"gitId":"totoyoyo"},"content":"        Predicate\u003cMeeting\u003e personPred \u003d meeting -\u003e zeroBasedIndexStreamSupplier.get().allMatch(index -\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":88,"author":{"gitId":"totoyoyo"},"content":"                meeting.containsPerson(lastShownList.get(index))","lastModifiedDate":"2021-04-07"},{"lineNumber":89,"author":{"gitId":"totoyoyo"},"content":"        );","lastModifiedDate":"2021-04-07"},{"lineNumber":90,"author":{"gitId":"totoyoyo"},"content":"        return personPred;","lastModifiedDate":"2021-04-07"},{"lineNumber":91,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":92,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":93,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":94,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-04-07"}],"authorContributionMap":{"totoyoyo":94}},{"path":"src/main/java/seedu/address/logic/commands/meetings/InvalidMeetingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.logic.commands.meetings;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"public class InvalidMeetingException  extends Exception {","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"    public InvalidMeetingException(String message) {","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"        super(message);","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-04-09"}],"authorContributionMap":{"Maurice2n97":8}},{"path":"src/main/java/seedu/address/logic/commands/meetings/ListMeetingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.logic.commands.meetings;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEETINGS;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"public class ListMeetingCommand extends Command {","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"    public static final String COMMAND_WORD \u003d \"listm\";","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all meetings\";","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"        model.updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"hengyiqun":21}},{"path":"src/main/java/seedu/address/logic/commands/meetings/SetTimetableCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.logic.commands.meetings;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.DateTimeUtil;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"public class SetTimetableCommand extends Command {","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    public static final String COMMAND_WORD \u003d \"setTimetable\";","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    public static final String MESSAGE_USAGE \u003d \"setTimetable : Sets a starting date for the timetable.\"","lastModifiedDate":"2021-04-08"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"            + \" If no date is specified, it will set the starting date to be today\u0027s date.\"","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"            + \" Parameters: (DATE must be in the format YYYY-mm-dd).\"","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"            + \"\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"            + \"Example Usage: \"","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"            + \"setTimetable 2021-03-21\";","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Timetable updated to start on %s!\";","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    private final LocalDate localDate;","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    public SetTimetableCommand(LocalDate localDate) {","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(localDate);","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        this.localDate \u003d localDate;","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"        model.setTimetableStartDate(localDate);","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"        String successMessage \u003d String.format(MESSAGE_SUCCESS, DateTimeUtil.prettyPrintFormatLocalDate(localDate));","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        return new CommandResult(successMessage);","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"Maurice2n97":40}},{"path":"src/main/java/seedu/address/logic/commands/meetings/ShowMeetingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.logic.commands.meetings;","lastModifiedDate":"2021-04-06"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-06"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import java.util.List;","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-04-06"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-04-06"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-04-06"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-04-06"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.connection.PersonInMeetingPredicate;","lastModifiedDate":"2021-04-06"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-04-06"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"public class ShowMeetingCommand extends Command {","lastModifiedDate":"2021-04-06"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"    public static final String COMMAND_WORD \u003d \"showm\";","lastModifiedDate":"2021-04-06"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons who are in the specified \"","lastModifiedDate":"2021-04-06"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"            + \"meeting and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2021-04-06"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"            + \"Parameters: MEETING_INDEX...\\n\"","lastModifiedDate":"2021-04-06"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-04-06"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"    private final Index index;","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"    public ShowMeetingCommand(Index index) {","lastModifiedDate":"2021-04-06"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-04-06"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-06"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-04-06"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-04-06"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"        List\u003cMeeting\u003e lastShownList \u003d model.getFilteredMeetingList();","lastModifiedDate":"2021-04-06"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-04-06"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);","lastModifiedDate":"2021-04-06"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"        Meeting meeting \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-04-06"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"        PersonInMeetingPredicate predicate \u003d new PersonInMeetingPredicate(meeting);","lastModifiedDate":"2021-04-06"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-04-06"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"        return new CommandResult(","lastModifiedDate":"2021-04-06"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2021-04-06"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-06"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-04-06"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-04-06"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"                || (other instanceof ShowMeetingCommand // instanceof handles nulls","lastModifiedDate":"2021-04-06"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 this.index.equals(((ShowMeetingCommand) other).index)); // state check","lastModifiedDate":"2021-04-06"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-04-06"}],"authorContributionMap":{"hengyiqun":54}},{"path":"src/main/java/seedu/address/logic/commands/meetings/SortMeetingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.logic.commands.meetings;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_BY;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_DIRECTION;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"import java.util.List;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.MeetingSortDirection;","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.MeetingSortOption;","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":"public class SortMeetingCommand extends Command {","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"totoyoyo"},"content":"    private Comparator\u003cMeeting\u003e meetingComparator;","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"totoyoyo"},"content":"    public static final String COMMAND_WORD \u003d \"sortm\";","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"    private static final List\u003cString\u003e all_options \u003d Arrays.stream(MeetingSortOption.values()).","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"totoyoyo"},"content":"            map(meetingSortOption -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"totoyoyo"},"content":"                    meetingSortOption.getValue()).collect(Collectors.toList());","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"    private static final List\u003cString\u003e all_directions \u003d Arrays.stream(MeetingSortDirection.values()).","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"totoyoyo"},"content":"            map(meetingSortDirection -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"totoyoyo"},"content":"                    meetingSortDirection.getValue()).collect(Collectors.toList());","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"totoyoyo"},"content":"    public static final String MESSAGE_USAGE \u003d \"Please do: \" + COMMAND_WORD + \" \" +","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"totoyoyo"},"content":"            PREFIX_SORT_BY + all_options.toString() + \" \" +","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"totoyoyo"},"content":"            PREFIX_SORT_DIRECTION + all_directions.toString();","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"totoyoyo"},"content":"    public SortMeetingCommand(MeetingSortOption sortOption, MeetingSortDirection sortDirection) {","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"totoyoyo"},"content":"        switch (sortOption) {","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"totoyoyo"},"content":"        case NAME:","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"totoyoyo"},"content":"            meetingComparator \u003d Comparator.comparing(meeting -\u003e meeting.getName().toString(),","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"totoyoyo"},"content":"                    String.CASE_INSENSITIVE_ORDER);","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"totoyoyo"},"content":"            break;","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"totoyoyo"},"content":"        case START:","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"totoyoyo"},"content":"            meetingComparator \u003d Comparator.comparing(meeting -\u003e meeting.getStart());","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"totoyoyo"},"content":"            break;","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"totoyoyo"},"content":"        case END:","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"totoyoyo"},"content":"            meetingComparator \u003d Comparator.comparing(meeting -\u003e meeting.getTerminate());","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"totoyoyo"},"content":"            break;","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"totoyoyo"},"content":"        case PRIORITY:","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"totoyoyo"},"content":"            meetingComparator \u003d Comparator.comparing(meeting -\u003e meeting.getPriority().toString(),","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"totoyoyo"},"content":"                    String.CASE_INSENSITIVE_ORDER);","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"totoyoyo"},"content":"            break;","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"totoyoyo"},"content":"        case DESCRIPTION:","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"totoyoyo"},"content":"            meetingComparator \u003d Comparator.comparing(meeting -\u003e meeting.getDescription().toString(),","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"totoyoyo"},"content":"                    String.CASE_INSENSITIVE_ORDER);","lastModifiedDate":"2021-03-28"},{"lineNumber":57,"author":{"gitId":"totoyoyo"},"content":"            break;","lastModifiedDate":"2021-03-28"},{"lineNumber":58,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":59,"author":{"gitId":"totoyoyo"},"content":"        if (sortDirection \u003d\u003d MeetingSortDirection.DESC) {","lastModifiedDate":"2021-03-28"},{"lineNumber":60,"author":{"gitId":"totoyoyo"},"content":"            meetingComparator \u003d meetingComparator.reversed();","lastModifiedDate":"2021-03-28"},{"lineNumber":61,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":62,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":63,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":64,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":65,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":66,"author":{"gitId":"totoyoyo"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":67,"author":{"gitId":"totoyoyo"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2021-03-28"},{"lineNumber":68,"author":{"gitId":"totoyoyo"},"content":"     *","lastModifiedDate":"2021-03-28"},{"lineNumber":69,"author":{"gitId":"totoyoyo"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-03-28"},{"lineNumber":70,"author":{"gitId":"totoyoyo"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"totoyoyo"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-03-28"},{"lineNumber":72,"author":{"gitId":"totoyoyo"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":73,"author":{"gitId":"totoyoyo"},"content":"    @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":74,"author":{"gitId":"totoyoyo"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-28"},{"lineNumber":75,"author":{"gitId":"totoyoyo"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-28"},{"lineNumber":76,"author":{"gitId":"totoyoyo"},"content":"        model.sortFilteredMeetingList(this.meetingComparator);","lastModifiedDate":"2021-03-28"},{"lineNumber":77,"author":{"gitId":"totoyoyo"},"content":"        return new CommandResult(\"Sorted meeting\");","lastModifiedDate":"2021-03-28"},{"lineNumber":78,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":79,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"totoyoyo":79}},{"path":"src/main/java/seedu/address/logic/commands/meetings/UnsortMeetingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.logic.commands.meetings;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"public class UnsortMeetingCommand extends Command {","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"    public static final String COMMAND_WORD \u003d \"unsortm\";","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"     *","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"totoyoyo"},"content":"    @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"totoyoyo"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"        model.sortFilteredMeetingList(null);","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"        return new CommandResult(\"Unsorted the meeting list\");","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"totoyoyo":31}},{"path":"src/main/java/seedu/address/logic/commands/notes/AddNoteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.logic.commands.notes;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Note;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"public class AddNoteCommand extends Command {","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"    public static final String COMMAND_WORD \u003d \"addn\";","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a note to the note book. \"","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"            + \"[\" + PREFIX_PRIORITY + \"PRIORITY]...\\n\"","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_NAME + \"Complete CS2103 Tutorial \"","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_PRIORITY + \"5 \\n\"","lastModifiedDate":"2021-04-02"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"            + \"Default priority is 1\";","lastModifiedDate":"2021-04-02"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New note added: %1$s\";","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"This note already exists in the note book\";","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"    private final Note toAdd;","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"     * Creates an AddNoteCommand to add the specified {@code Note}","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"    public AddNoteCommand(Note note) {","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(note);","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"        this.toAdd \u003d note;","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"        if (model.hasNote(toAdd)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_NOTE);","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"        model.addNote(toAdd);","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"                || (other instanceof AddNoteCommand // instanceof handles nulls","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 toAdd.equals(((AddNoteCommand) other).toAdd));","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"hengyiqun":61}},{"path":"src/main/java/seedu/address/logic/commands/notes/DeleteNoteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.logic.commands.notes;","lastModifiedDate":"2021-04-02"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-02"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import java.util.List;","lastModifiedDate":"2021-04-02"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-04-02"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-04-02"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-04-02"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-04-02"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-04-02"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-04-02"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Note;","lastModifiedDate":"2021-04-02"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-04-02"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":" * Deletes a note identified using it\u0027s displayed index from the note book.","lastModifiedDate":"2021-04-02"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-04-02"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"public class DeleteNoteCommand extends Command {","lastModifiedDate":"2021-04-02"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"    public static final String COMMAND_WORD \u003d \"deleten\";","lastModifiedDate":"2021-04-02"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-04-02"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"            + \": Deletes the note identified by the index number used in the displayed note list.\\n\"","lastModifiedDate":"2021-04-02"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-04-02"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-04-02"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_DELETE_NOTE_SUCCESS \u003d \"Deleted Note: %1$s\";","lastModifiedDate":"2021-04-02"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-04-02"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"    public DeleteNoteCommand(Index targetIndex) {","lastModifiedDate":"2021-04-02"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-04-02"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-02"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-04-02"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-04-02"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"        List\u003cNote\u003e lastShownList \u003d model.getFilteredNoteList();","lastModifiedDate":"2021-04-02"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-04-02"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);","lastModifiedDate":"2021-04-02"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-02"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"        Note noteToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-04-02"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"        model.deleteNote(noteToDelete);","lastModifiedDate":"2021-04-02"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_NOTE_SUCCESS, noteToDelete));","lastModifiedDate":"2021-04-02"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-02"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-04-02"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-04-02"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"                || (other instanceof seedu.address.logic.commands.notes.DeleteNoteCommand // instanceof handles nulls","lastModifiedDate":"2021-04-02"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 targetIndex.equals(((seedu.address.logic.commands.notes.DeleteNoteCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-04-02"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-04-02"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"}],"authorContributionMap":{"hengyiqun":56}},{"path":"src/main/java/seedu/address/logic/commands/persons/AddPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"public class AddPersonCommand extends Command {","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"            + \"[\" + PREFIX_GROUP + \"GROUP]...\\n\"","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_GROUP + \"friends \"","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_GROUP + \"owesMoney\";","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"     * Creates an AddPersonCommand to add the specified {@code Person}","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    public AddPersonCommand(Person person) {","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof AddPersonCommand // instanceof handles nulls","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 toAdd.equals(((AddPersonCommand) other).toAdd));","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Maurice2n97":1,"skinnychenpi":8,"hengyiqun":3,"-":57}},{"path":"src/main/java/seedu/address/logic/commands/persons/ClearPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"public class ClearPersonCommand extends Command {","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Maurice2n97":1,"skinnychenpi":4,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/persons/DeletePersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.meetings.EditMeetingCommand.EditMeetingDescriptor;","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.*;","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEETINGS;","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"public class DeletePersonCommand extends Command {","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    public DeletePersonCommand(Index targetIndex) {","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        // If this person is related to some meetings...","lastModifiedDate":"2021-04-07"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        if (!model.getFilteredMeetingListByPersonConnection(personToDelete).isEmpty()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"            updatePersonMeetingConnection(personToDelete, model);","lastModifiedDate":"2021-04-07"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"            model.updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);","lastModifiedDate":"2021-04-07"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof DeletePersonCommand // instanceof handles nulls","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 targetIndex.equals(((DeletePersonCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"    private void updatePersonMeetingConnection(Person personToDelete, Model model) {","lastModifiedDate":"2021-04-07"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList toDeletePersonRelatedMeetings \u003d model.getUniqueMeetingListByPersonConnection(personToDelete);","lastModifiedDate":"2021-04-07"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cMeeting\u003e toDeletePersonRelatedMeetingsSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-04-07"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"        // Do a deep copy","lastModifiedDate":"2021-04-07"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"        for (Meeting meeting : toDeletePersonRelatedMeetings) {","lastModifiedDate":"2021-04-07"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"            toDeletePersonRelatedMeetingsSet.add(meeting);","lastModifiedDate":"2021-04-07"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"        // Start to edit connection(i.e. reconstruct connection)","lastModifiedDate":"2021-04-07"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"        for (Meeting meetingToEdit : toDeletePersonRelatedMeetingsSet) {","lastModifiedDate":"2021-04-07"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"            Meeting meetingEdited \u003d createEditedMeeting(meetingToEdit, new EditMeetingDescriptor());","lastModifiedDate":"2021-04-07"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"            deleteConnectionsToPersons(meetingToEdit, meetingEdited, model, personToDelete);","lastModifiedDate":"2021-04-07"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"            model.updateMeeting(meetingToEdit, meetingEdited);","lastModifiedDate":"2021-04-07"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        model.deleteAllPersonMeetingConnectionByPerson(personToDelete);","lastModifiedDate":"2021-04-07"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"    private void deleteConnectionsToPersons(Meeting toDelete, Meeting toAdd, Model model, Person personToDelete) {","lastModifiedDate":"2021-04-07"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cPerson\u003e prevPersonsConnection \u003d toDelete.getConnectionToPerson();","lastModifiedDate":"2021-04-07"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"        toAdd.setPersonMeetingConnection(model.getPersonMeetingConnection());","lastModifiedDate":"2021-04-07"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"        prevPersonsConnection.remove(personToDelete);","lastModifiedDate":"2021-04-07"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cPerson\u003e updatedPersonsConnection \u003d prevPersonsConnection;","lastModifiedDate":"2021-04-07"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"        model.deleteAllPersonMeetingConnectionByMeeting(toDelete);","lastModifiedDate":"2021-04-07"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"        for (Person allPersonToAddConnection : updatedPersonsConnection) {","lastModifiedDate":"2021-04-07"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"            model.addPersonMeetingConnection(allPersonToAddConnection, toAdd);","lastModifiedDate":"2021-04-07"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-07"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"     * Creates and returns a {@code Meeting} with the details of {@code meetingToEdit}","lastModifiedDate":"2021-04-07"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"     * edited with {@code editMeetingDescriptor}.","lastModifiedDate":"2021-04-07"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-07"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"    private static Meeting createEditedMeeting(Meeting meetingToEdit, EditMeetingDescriptor editMeetingDescriptor) {","lastModifiedDate":"2021-04-07"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"        assert meetingToEdit !\u003d null;","lastModifiedDate":"2021-04-07"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"        MeetingName updatedMeetingName \u003d editMeetingDescriptor","lastModifiedDate":"2021-04-07"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"                .getName()","lastModifiedDate":"2021-04-07"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getName());","lastModifiedDate":"2021-04-07"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"        DateTime updatedStart \u003d editMeetingDescriptor","lastModifiedDate":"2021-04-07"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"                .getStart()","lastModifiedDate":"2021-04-07"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getStart());","lastModifiedDate":"2021-04-07"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"        DateTime updatedTerminate \u003d editMeetingDescriptor","lastModifiedDate":"2021-04-07"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"                .getTerminate()","lastModifiedDate":"2021-04-07"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getTerminate());","lastModifiedDate":"2021-04-07"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"        Priority updatedPriority \u003d editMeetingDescriptor","lastModifiedDate":"2021-04-07"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"                .getPriority()","lastModifiedDate":"2021-04-07"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getPriority());","lastModifiedDate":"2021-04-07"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"        Description updatedDescription \u003d editMeetingDescriptor","lastModifiedDate":"2021-04-07"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"                .getDescription()","lastModifiedDate":"2021-04-07"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getDescription());","lastModifiedDate":"2021-04-07"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cGroup\u003e updatedGroups \u003d editMeetingDescriptor","lastModifiedDate":"2021-04-07"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"                .getGroups()","lastModifiedDate":"2021-04-07"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getGroups());","lastModifiedDate":"2021-04-07"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"        return new Meeting(updatedMeetingName, updatedStart,","lastModifiedDate":"2021-04-07"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"                updatedTerminate, updatedPriority, updatedDescription, updatedGroups);","lastModifiedDate":"2021-04-07"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"skinnychenpi":81,"-":44}},{"path":"src/main/java/seedu/address/logic/commands/persons/EditPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.meetings.EditMeetingCommand;","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.*;","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.*;","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import java.util.*;","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CliSyntax.*;","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEETINGS;","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"public class EditPersonCommand extends Command {","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"            + \"[\" + PREFIX_GROUP + \"GROUP]...\\n\"","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"    public EditPersonCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        if (!model.getFilteredMeetingListByPersonConnection(personToEdit).isEmpty()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"            updatePersonMeetingConnection(personToEdit, editedPerson, model);","lastModifiedDate":"2021-04-07"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"            model.updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);","lastModifiedDate":"2021-04-07"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"        PersonName updatedPersonName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2021-03-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":98,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e updatedGroups \u003d editPersonDescriptor.getGroups().orElse(personToEdit.getGroups());","lastModifiedDate":"2021-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"        return new Person(updatedPersonName, updatedPhone, updatedEmail, updatedAddress, updatedGroups);","lastModifiedDate":"2021-03-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"    private void updatePersonMeetingConnection(Person personToEdit, Person editedPerson, Model model) {","lastModifiedDate":"2021-04-07"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList toEditPersonRelatedMeetings \u003d model.getUniqueMeetingListByPersonConnection(personToEdit);","lastModifiedDate":"2021-04-07"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cMeeting\u003e toEditPersonRelatedMeetingsSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-04-07"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"        // Do a deep copy","lastModifiedDate":"2021-04-07"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"        for (Meeting meeting : toEditPersonRelatedMeetings) {","lastModifiedDate":"2021-04-07"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"            toEditPersonRelatedMeetingsSet.add(meeting);","lastModifiedDate":"2021-04-07"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"        // Start to edit connection(i.e. reconstruct connection)","lastModifiedDate":"2021-04-07"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"        for (Meeting meetingToEdit : toEditPersonRelatedMeetingsSet) {","lastModifiedDate":"2021-04-07"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"            Meeting meetingEdited \u003d createEditedMeeting(meetingToEdit, new EditMeetingCommand.EditMeetingDescriptor());","lastModifiedDate":"2021-04-07"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"            editConnectionsToPersons(meetingToEdit, meetingEdited, model, personToEdit, editedPerson);","lastModifiedDate":"2021-04-07"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"            model.updateMeeting(meetingToEdit, meetingEdited);","lastModifiedDate":"2021-04-07"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"        model.deleteAllPersonMeetingConnectionByPerson(personToEdit);","lastModifiedDate":"2021-04-07"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"    private void editConnectionsToPersons(Meeting toDelete, Meeting toAdd, Model model, Person personToDelete, Person personToAdd) {","lastModifiedDate":"2021-04-07"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cPerson\u003e prevPersonsConnection \u003d toDelete.getConnectionToPerson();","lastModifiedDate":"2021-04-07"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"        toAdd.setPersonMeetingConnection(model.getPersonMeetingConnection());","lastModifiedDate":"2021-04-07"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"        prevPersonsConnection.remove(personToDelete);","lastModifiedDate":"2021-04-07"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"        prevPersonsConnection.add(personToAdd);","lastModifiedDate":"2021-04-07"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cPerson\u003e updatedPersonsConnection \u003d prevPersonsConnection;","lastModifiedDate":"2021-04-07"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"        model.deleteAllPersonMeetingConnectionByMeeting(toDelete);","lastModifiedDate":"2021-04-07"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"        for (Person allPersonToAddConnection : updatedPersonsConnection) {","lastModifiedDate":"2021-04-07"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"            model.addPersonMeetingConnection(allPersonToAddConnection, toAdd);","lastModifiedDate":"2021-04-07"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-07"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"     * Creates and returns a {@code Meeting} with the details of {@code meetingToEdit}","lastModifiedDate":"2021-04-07"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"     * edited with {@code editMeetingDescriptor}.","lastModifiedDate":"2021-04-07"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-07"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"    private static Meeting createEditedMeeting(Meeting meetingToEdit, EditMeetingCommand.EditMeetingDescriptor editMeetingDescriptor) {","lastModifiedDate":"2021-04-07"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"        assert meetingToEdit !\u003d null;","lastModifiedDate":"2021-04-07"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"        MeetingName updatedMeetingName \u003d editMeetingDescriptor","lastModifiedDate":"2021-04-07"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":"                .getName()","lastModifiedDate":"2021-04-07"},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getName());","lastModifiedDate":"2021-04-07"},{"lineNumber":143,"author":{"gitId":"skinnychenpi"},"content":"        DateTime updatedStart \u003d editMeetingDescriptor","lastModifiedDate":"2021-04-07"},{"lineNumber":144,"author":{"gitId":"skinnychenpi"},"content":"                .getStart()","lastModifiedDate":"2021-04-07"},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getStart());","lastModifiedDate":"2021-04-07"},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"        DateTime updatedTerminate \u003d editMeetingDescriptor","lastModifiedDate":"2021-04-07"},{"lineNumber":147,"author":{"gitId":"skinnychenpi"},"content":"                .getTerminate()","lastModifiedDate":"2021-04-07"},{"lineNumber":148,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getTerminate());","lastModifiedDate":"2021-04-07"},{"lineNumber":149,"author":{"gitId":"skinnychenpi"},"content":"        Priority updatedPriority \u003d editMeetingDescriptor","lastModifiedDate":"2021-04-07"},{"lineNumber":150,"author":{"gitId":"skinnychenpi"},"content":"                .getPriority()","lastModifiedDate":"2021-04-07"},{"lineNumber":151,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getPriority());","lastModifiedDate":"2021-04-07"},{"lineNumber":152,"author":{"gitId":"skinnychenpi"},"content":"        Description updatedDescription \u003d editMeetingDescriptor","lastModifiedDate":"2021-04-07"},{"lineNumber":153,"author":{"gitId":"skinnychenpi"},"content":"                .getDescription()","lastModifiedDate":"2021-04-07"},{"lineNumber":154,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getDescription());","lastModifiedDate":"2021-04-07"},{"lineNumber":155,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cGroup\u003e updatedGroups \u003d editMeetingDescriptor","lastModifiedDate":"2021-04-07"},{"lineNumber":156,"author":{"gitId":"skinnychenpi"},"content":"                .getGroups()","lastModifiedDate":"2021-04-07"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":"                .orElse(meetingToEdit.getGroups());","lastModifiedDate":"2021-04-07"},{"lineNumber":158,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":159,"author":{"gitId":"skinnychenpi"},"content":"        return new Meeting(updatedMeetingName, updatedStart,","lastModifiedDate":"2021-04-07"},{"lineNumber":160,"author":{"gitId":"skinnychenpi"},"content":"                updatedTerminate, updatedPriority, updatedDescription, updatedGroups);","lastModifiedDate":"2021-04-07"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"skinnychenpi"},"content":"        if (!(other instanceof EditPersonCommand)) {","lastModifiedDate":"2021-03-14"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":176,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand e \u003d (EditPersonCommand) other;","lastModifiedDate":"2021-03-14"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"skinnychenpi"},"content":"        private PersonName personName;","lastModifiedDate":"2021-03-15"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":190,"author":{"gitId":"hengyiqun"},"content":"        private Set\u003cGroup\u003e groups;","lastModifiedDate":"2021-03-14"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":195,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":196,"author":{"gitId":"hengyiqun"},"content":"         * A defensive copy of {@code groups} is used internally.","lastModifiedDate":"2021-03-14"},{"lineNumber":197,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":199,"author":{"gitId":"skinnychenpi"},"content":"            setName(toCopy.personName);","lastModifiedDate":"2021-03-15"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":203,"author":{"gitId":"hengyiqun"},"content":"            setGroups(toCopy.groups);","lastModifiedDate":"2021-03-14"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":208,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":210,"author":{"gitId":"skinnychenpi"},"content":"            return CollectionUtil.isAnyNonNull(personName, phone, email, address, groups);","lastModifiedDate":"2021-03-15"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":213,"author":{"gitId":"skinnychenpi"},"content":"        public void setName(PersonName personName) {","lastModifiedDate":"2021-03-15"},{"lineNumber":214,"author":{"gitId":"skinnychenpi"},"content":"            this.personName \u003d personName;","lastModifiedDate":"2021-03-15"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":217,"author":{"gitId":"skinnychenpi"},"content":"        public Optional\u003cPersonName\u003e getName() {","lastModifiedDate":"2021-03-15"},{"lineNumber":218,"author":{"gitId":"skinnychenpi"},"content":"            return Optional.ofNullable(personName);","lastModifiedDate":"2021-03-15"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":246,"author":{"gitId":"hengyiqun"},"content":"         * Sets {@code groups} to this object\u0027s {@code groups}.","lastModifiedDate":"2021-03-14"},{"lineNumber":247,"author":{"gitId":"hengyiqun"},"content":"         * A defensive copy of {@code groups} is used internally.","lastModifiedDate":"2021-03-14"},{"lineNumber":248,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":249,"author":{"gitId":"hengyiqun"},"content":"        public void setGroups(Set\u003cGroup\u003e groups) {","lastModifiedDate":"2021-03-14"},{"lineNumber":250,"author":{"gitId":"hengyiqun"},"content":"            this.groups \u003d (groups !\u003d null) ? new HashSet\u003c\u003e(groups) : null;","lastModifiedDate":"2021-03-14"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":254,"author":{"gitId":"hengyiqun"},"content":"         * Returns an unmodifiable group set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2021-03-14"},{"lineNumber":255,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":256,"author":{"gitId":"hengyiqun"},"content":"         * Returns {@code Optional#empty()} if {@code groups} is null.","lastModifiedDate":"2021-03-14"},{"lineNumber":257,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":258,"author":{"gitId":"hengyiqun"},"content":"        public Optional\u003cSet\u003cGroup\u003e\u003e getGroups() {","lastModifiedDate":"2021-03-14"},{"lineNumber":259,"author":{"gitId":"hengyiqun"},"content":"            return (groups !\u003d null) ? Optional.of(Collections.unmodifiableSet(groups)) : Optional.empty();","lastModifiedDate":"2021-03-14"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":264,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":265,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":266,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":269,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":271,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":272,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":274,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":275,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":277,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":278,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":279,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":280,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":281,"author":{"gitId":"hengyiqun"},"content":"                    \u0026\u0026 getGroups().equals(e.getGroups());","lastModifiedDate":"2021-03-14"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":284,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"skinnychenpi":89,"hengyiqun":15,"-":180}},{"path":"src/main/java/seedu/address/logic/commands/persons/FindGroupCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.GroupContainsKeywordsPredicate;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":" * Finds and lists all persons in address book whose group contains any of the argument keywords.","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"public class FindGroupCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"    public static final String COMMAND_WORD \u003d \"findg\";","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose groups contain any of \"","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"            + \"Example: \" + COMMAND_WORD + \" badminton tennis\";","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"    private final GroupContainsKeywordsPredicate predicate;","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"    public FindGroupCommand(GroupContainsKeywordsPredicate predicate) {","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"        return new CommandResult(","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"                || (other instanceof FindGroupCommand // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 predicate.equals(((FindGroupCommand) other).predicate)); // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hengyiqun":44}},{"path":"src/main/java/seedu/address/logic/commands/persons/FindPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2018-04-01"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"public class FindPersonCommand extends Command {","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    public FindPersonCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof FindPersonCommand // instanceof handles nulls","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 predicate.equals(((FindPersonCommand) other).predicate)); // state check","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"skinnychenpi":7,"-":37}},{"path":"src/main/java/seedu/address/logic/commands/persons/ListPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"public class ListPersonCommand extends Command {","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"    public static final String COMMAND_WORD \u003d \"listp\";","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"skinnychenpi":4,"hengyiqun":1,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/persons/SortPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_BY;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_DIRECTION;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"import java.util.List;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.person.PersonSortDirection;","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.person.PersonSortOption;","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"public class SortPersonCommand extends Command {","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":"    private Comparator\u003cPerson\u003e personComparator;","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"    public static final String COMMAND_WORD \u003d \"sortp\";","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"totoyoyo"},"content":"    private static final List\u003cString\u003e all_options \u003d Arrays.stream(PersonSortOption.values()).","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"totoyoyo"},"content":"            map(personSortOption -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"                    personSortOption.getValue()).collect(Collectors.toList());","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"totoyoyo"},"content":"    private static final List\u003cString\u003e all_directions \u003d Arrays.stream(PersonSortDirection.values()).","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"totoyoyo"},"content":"            map(PersonSortDirection -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"totoyoyo"},"content":"                    PersonSortDirection.getValue()).collect(Collectors.toList());","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"totoyoyo"},"content":"    public static final String MESSAGE_USAGE \u003d \"Please do: \" + COMMAND_WORD + \" \" +","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"totoyoyo"},"content":"            PREFIX_SORT_BY + all_options.toString() + \" \" +","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"totoyoyo"},"content":"            PREFIX_SORT_DIRECTION + all_directions.toString();","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"totoyoyo"},"content":"    public SortPersonCommand(PersonSortOption sortOption, PersonSortDirection sortDirection) {","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"totoyoyo"},"content":"        switch (sortOption) {","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"totoyoyo"},"content":"        case NAME:","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"totoyoyo"},"content":"            personComparator \u003d Comparator.comparing(person -\u003e person.getName().toString(),","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"totoyoyo"},"content":"                    String.CASE_INSENSITIVE_ORDER);","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"totoyoyo"},"content":"            break;","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"totoyoyo"},"content":"        case EMAIL:","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"totoyoyo"},"content":"            personComparator \u003d Comparator.comparing(person -\u003e person.getEmail().toString(),","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"totoyoyo"},"content":"                    String.CASE_INSENSITIVE_ORDER);","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"totoyoyo"},"content":"            break;","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"totoyoyo"},"content":"        case PHONE:","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"totoyoyo"},"content":"            personComparator \u003d Comparator.comparing(person -\u003e person.getPhone().toString(),","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"totoyoyo"},"content":"                    String.CASE_INSENSITIVE_ORDER);","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"totoyoyo"},"content":"            break;","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"totoyoyo"},"content":"        case ADDRESS:","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"totoyoyo"},"content":"            personComparator \u003d Comparator.comparing(person -\u003e person.getAddress().toString(),","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"totoyoyo"},"content":"                    String.CASE_INSENSITIVE_ORDER);","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"totoyoyo"},"content":"            break;","lastModifiedDate":"2021-03-28"},{"lineNumber":57,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":58,"author":{"gitId":"totoyoyo"},"content":"        if (sortDirection \u003d\u003d PersonSortDirection.DESC) {","lastModifiedDate":"2021-03-28"},{"lineNumber":59,"author":{"gitId":"totoyoyo"},"content":"            personComparator \u003d personComparator.reversed();","lastModifiedDate":"2021-03-28"},{"lineNumber":60,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":61,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":62,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":63,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":64,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":65,"author":{"gitId":"totoyoyo"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":66,"author":{"gitId":"totoyoyo"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2021-03-28"},{"lineNumber":67,"author":{"gitId":"totoyoyo"},"content":"     *","lastModifiedDate":"2021-03-28"},{"lineNumber":68,"author":{"gitId":"totoyoyo"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-03-28"},{"lineNumber":69,"author":{"gitId":"totoyoyo"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2021-03-28"},{"lineNumber":70,"author":{"gitId":"totoyoyo"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"totoyoyo"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":72,"author":{"gitId":"totoyoyo"},"content":"    @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":73,"author":{"gitId":"totoyoyo"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-28"},{"lineNumber":74,"author":{"gitId":"totoyoyo"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-28"},{"lineNumber":75,"author":{"gitId":"totoyoyo"},"content":"        model.sortFilteredPersonList(this.personComparator);","lastModifiedDate":"2021-03-28"},{"lineNumber":76,"author":{"gitId":"totoyoyo"},"content":"        return new CommandResult(\"Sorted\");","lastModifiedDate":"2021-03-28"},{"lineNumber":77,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":78,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"totoyoyo":78}},{"path":"src/main/java/seedu/address/logic/commands/persons/UnsortPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"public class UnsortPersonCommand extends Command {","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"    public static final String COMMAND_WORD \u003d \"unsortp\";","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"     *","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"totoyoyo"},"content":"    @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"totoyoyo"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"        model.sortFilteredPersonList(null);","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"        return new CommandResult(\"Unsorted the contacts list\");","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"totoyoyo":31}},{"path":"src/main/java/seedu/address/logic/commands/reminders/RefreshRemindersCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.logic.commands.reminders;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"public class RefreshRemindersCommand extends Command {","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"    public static final String COMMAND_WORD \u003d \"refresh\";","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Refreshed reminders\";","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"        model.refreshReminderBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"totoyoyo":22}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"    /* Public prefix */","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    public static final Prefix PREFIX_GROUP \u003d new Prefix(\"g/\");","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    /* Prefix specific for person */","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"ph/\");","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":"    /* Prefix for sorting */","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"    public static final Prefix PREFIX_SORT_DIRECTION \u003d new Prefix(\"d/\");","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":"    public static final Prefix PREFIX_SORT_BY \u003d new Prefix(\"by/\");","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    /* Prefix specific for meeting */","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"ed/\");","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"desc/\");","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"pr/\");","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    public static final Prefix PREFIX_PERSON_CONNECTION \u003d new Prefix(\"p/\");","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"totoyoyo"},"content":"    /* Prefix for meeting search */","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"totoyoyo"},"content":"    public static final Prefix PREFIX_TIME \u003d new Prefix(\"time/\");","lastModifiedDate":"2021-04-07"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"totoyoyo":8,"Maurice2n97":1,"skinnychenpi":12,"-":12}},{"path":"src/main/java/seedu/address/logic/parser/DateTimeUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-03-25"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":" * A utility class for parsing/formatting LocalDateTimes into ISO format.","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"public class DateTimeUtil {","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    public static final String MESSAGE_INVALID_DATETIME_FORMAT \u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"            \"The date should be of the following format : YYYY-MM-DD HH:MM\";","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"            \"The date should be of the folloing format : YYYY-MM-DD\";","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    public static final DateTimeFormatter ISO_DATE_FORMATTER_NO_SECONDS \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    public static final DateTimeFormatter PRETTY_DATETIME_FORMATTER \u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"            DateTimeFormatter.ofPattern(\"dd MMM yyyy, eeee, h:mm a\");","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    public static final DateTimeFormatter ISO_TIME_FORMATTER_NO_SECONDS \u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"            DateTimeFormatter.ofPattern(\"HH:mm\");","lastModifiedDate":"2021-03-25"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    public static final DateTimeFormatter PRETTY_TIME_FORMATTER \u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"            DateTimeFormatter.ofPattern(\"h:mm a\");","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    public static final DateTimeFormatter PRETTY_DATE_FORMATTER \u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"            DateTimeFormatter.ofPattern(\"dd MMM yyyy\");","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    public static final DateTimeFormatter ISO_DATE_FORMATTER \u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"     * Formats a LocalDateTime object into the appropriate ISO string, with the seconds","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"     * stripped.","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"     * @param dateTime the dateTime object to be formatted.","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"     * @return the formatted string","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"    public static String formatDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"        return dateTime.format(ISO_DATE_FORMATTER_NO_SECONDS);","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"     * Parses a string into LocalDateTime.","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"     * @param dateTime the string must be in the format yyyy-MM-dd HH:mm","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"     * @return the LocalDateTime.","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"     * @throws ParseException if the dateTime string is of incorrect format","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"    public static LocalDateTime parseDateTime(String dateTime) throws ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"        try {","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"            return LocalDateTime.parse(dateTime, ISO_DATE_FORMATTER_NO_SECONDS);","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"            throw new ParseException(MESSAGE_INVALID_DATETIME_FORMAT);","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"    public static LocalDate parseIsoDate(String date) throws ParseException {","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"        try {","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"            return LocalDate.parse(date, ISO_DATE_FORMATTER);","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-14"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"            throw new ParseException(MESSAGE_INVALID_DATE_FORMAT);","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"     * Formats a LocalDateTime object into a pretty print format.","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"     * @param dateTime the dateTime object to be formatted.","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"     * @return the formatted string","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"    public static String prettyPrintFormatDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2021-03-24"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"        return dateTime.format(PRETTY_DATETIME_FORMATTER);","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"    public static String isoFormatTime(LocalTime localTime) {","lastModifiedDate":"2021-03-25"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"        return localTime.format(ISO_TIME_FORMATTER_NO_SECONDS);","lastModifiedDate":"2021-03-25"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"    public static String prettyPrintFormatLocalTime(LocalTime localTime) {","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"        return localTime.format(PRETTY_TIME_FORMATTER);","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"    public static String prettyPrintFormatLocalDate(LocalDate localDate) {","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"        return localDate.format(PRETTY_DATE_FORMATTER);","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"Maurice2n97":91}},{"path":"src/main/java/seedu/address/logic/parser/MeetBuddyParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.connections.AddPersonToMeetingConnectionCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.connections.DeletePersonToMeetingConnectionCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.ListAllCommand;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.meetings.*;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.notes.AddNoteCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.notes.DeleteNoteCommand;","lastModifiedDate":"2021-04-02"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.persons.AddPersonCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.persons.ClearPersonCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.persons.DeletePersonCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.persons.FindGroupCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.persons.FindPersonCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.persons.ListPersonCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.persons.SortPersonCommand;","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.persons.UnsortPersonCommand;","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.reminders.RefreshRemindersCommand;","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.connections.AddPersonToMeetingConnectionParser;","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.connections.DeletePersonToMeetingConnectionParser;","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.meetings.*;","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.notes.AddNoteCommandParser;","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.notes.DeleteNoteCommandParser;","lastModifiedDate":"2021-04-02"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.persons.AddPersonCommandParser;","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.persons.DeletePersonCommandParser;","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.persons.EditPersonCommandParser;","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.persons.FindGroupCommandParser;","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.persons.FindPersonCommandParser;","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.parser.persons.SortPersonCommandParser;","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"public class MeetBuddyParser {","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"        case AddPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"            return new AddPersonCommandParser().parse(arguments);","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"        case EditPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"            return new EditPersonCommandParser().parse(arguments);","lastModifiedDate":"2021-03-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"        case DeletePersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"            return new DeletePersonCommandParser().parse(arguments);","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        case ClearPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"            return new ClearPersonCommand();","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        case FindPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"            return new FindPersonCommandParser().parse(arguments);","lastModifiedDate":"2021-03-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"        case FindGroupCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"hengyiqun"},"content":"            return new FindGroupCommandParser().parse(arguments);","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"        case ListPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-14"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"            return new ListPersonCommand();","lastModifiedDate":"2021-03-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"totoyoyo"},"content":"        case SortPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-28"},{"lineNumber":90,"author":{"gitId":"totoyoyo"},"content":"            return new SortPersonCommandParser().parse(arguments);","lastModifiedDate":"2021-03-28"},{"lineNumber":91,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":92,"author":{"gitId":"totoyoyo"},"content":"        case UnsortPersonCommand","lastModifiedDate":"2021-03-28"},{"lineNumber":93,"author":{"gitId":"totoyoyo"},"content":"                    .COMMAND_WORD:","lastModifiedDate":"2021-03-28"},{"lineNumber":94,"author":{"gitId":"totoyoyo"},"content":"            return new UnsortPersonCommand();","lastModifiedDate":"2021-03-28"},{"lineNumber":95,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Meeting \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        case AddMeetingCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-15"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"            return new AddMeetingCommandParser().parse(arguments);","lastModifiedDate":"2021-03-15"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":100,"author":{"gitId":"hengyiqun"},"content":"        case EditMeetingCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-28"},{"lineNumber":101,"author":{"gitId":"hengyiqun"},"content":"            return new EditMeetingCommandParser().parse(arguments);","lastModifiedDate":"2021-03-28"},{"lineNumber":102,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"        case DeleteMeetingCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-17"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"            return new DeleteMeetingCommandParser().parse(arguments);","lastModifiedDate":"2021-03-17"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":106,"author":{"gitId":"hengyiqun"},"content":"        case ListMeetingCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"hengyiqun"},"content":"            return new ListMeetingCommand();","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":109,"author":{"gitId":"totoyoyo"},"content":"        case SortMeetingCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-28"},{"lineNumber":110,"author":{"gitId":"totoyoyo"},"content":"            return new SortMeetingCommandParser().parse(arguments);","lastModifiedDate":"2021-03-28"},{"lineNumber":111,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":112,"author":{"gitId":"totoyoyo"},"content":"        case UnsortMeetingCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-28"},{"lineNumber":113,"author":{"gitId":"totoyoyo"},"content":"            return new UnsortMeetingCommand();","lastModifiedDate":"2021-03-28"},{"lineNumber":114,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":115,"author":{"gitId":"hengyiqun"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Connection \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-06"},{"lineNumber":116,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":117,"author":{"gitId":"hengyiqun"},"content":"        case ShowMeetingCommand.COMMAND_WORD:","lastModifiedDate":"2021-04-06"},{"lineNumber":118,"author":{"gitId":"hengyiqun"},"content":"            return new ShowMeetingCommandParser().parse(arguments);","lastModifiedDate":"2021-04-06"},{"lineNumber":119,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":120,"author":{"gitId":"totoyoyo"},"content":"        case FindMeetingCommand.COMMAND_WORD:","lastModifiedDate":"2021-04-07"},{"lineNumber":121,"author":{"gitId":"totoyoyo"},"content":"            return new FindMeetingCommandParser().parse(arguments);","lastModifiedDate":"2021-04-07"},{"lineNumber":122,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":123,"author":{"gitId":"hengyiqun"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Note \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-01"},{"lineNumber":124,"author":{"gitId":"hengyiqun"},"content":"        case AddNoteCommand.COMMAND_WORD:","lastModifiedDate":"2021-04-01"},{"lineNumber":125,"author":{"gitId":"hengyiqun"},"content":"            return new AddNoteCommandParser().parse(arguments);","lastModifiedDate":"2021-04-01"},{"lineNumber":126,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":127,"author":{"gitId":"hengyiqun"},"content":"        case DeleteNoteCommand.COMMAND_WORD:","lastModifiedDate":"2021-04-02"},{"lineNumber":128,"author":{"gitId":"hengyiqun"},"content":"            return new DeleteNoteCommandParser().parse(arguments);","lastModifiedDate":"2021-04-02"},{"lineNumber":129,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Timetable \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":132,"author":{"gitId":"Maurice2n97"},"content":"        case SetTimetableCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-30"},{"lineNumber":133,"author":{"gitId":"Maurice2n97"},"content":"            return new SetTimetableCommandParser().parse(arguments);","lastModifiedDate":"2021-03-30"},{"lineNumber":134,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Meeting \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-31"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"        case AddPersonToMeetingConnectionCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-31"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"            return new AddPersonToMeetingConnectionParser().parse(arguments);","lastModifiedDate":"2021-03-31"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"        case DeletePersonToMeetingConnectionCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-31"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"            return new DeletePersonToMeetingConnectionParser().parse(arguments);","lastModifiedDate":"2021-03-31"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d General \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":149,"author":{"gitId":"hengyiqun"},"content":"        case ListAllCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-28"},{"lineNumber":150,"author":{"gitId":"hengyiqun"},"content":"            return new ListAllCommand();","lastModifiedDate":"2021-03-28"},{"lineNumber":151,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":152,"author":{"gitId":"totoyoyo"},"content":"        case RefreshRemindersCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-27"},{"lineNumber":153,"author":{"gitId":"totoyoyo"},"content":"            return new RefreshRemindersCommand();","lastModifiedDate":"2021-03-27"},{"lineNumber":154,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"totoyoyo":24,"Maurice2n97":16,"skinnychenpi":35,"hengyiqun":31,"-":54}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.DateTime;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Description;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.MeetingName;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Priority;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Content;","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.PersonName;","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Collection;","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index of a person or a \"","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        + \"meeting is not a non-zero unsigned integer.\";","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"     * Parses a {@code String name} into a {@code PersonName}.","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"    public static PersonName parseName(String name) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        if (!PersonName.isValidName(trimmedName)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"            throw new ParseException(PersonName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        return new PersonName(trimmedName);","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ParserUtil for Meetings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"     * Parses a {@code String name} into a {@code MeetingName}.","lastModifiedDate":"2021-03-15"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-15"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2021-03-15"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"    public static MeetingName parseMeetingName(String name) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-03-15"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2021-03-15"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"        if (!MeetingName.isValidName(trimmedName)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"            throw new ParseException(MeetingName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"        return new MeetingName(trimmedName);","lastModifiedDate":"2021-03-15"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":122,"author":{"gitId":"totoyoyo"},"content":"    public static Set\u003cMeetingName\u003e parseMeetingNames(Collection\u003cString\u003e names) throws ParseException {","lastModifiedDate":"2021-04-07"},{"lineNumber":123,"author":{"gitId":"totoyoyo"},"content":"        return parseMany(ParserUtil::parseMeetingName, names);","lastModifiedDate":"2021-04-07"},{"lineNumber":124,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":125,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"     * Parses a {@code String datetime} into a {@code DateTime}.","lastModifiedDate":"2021-03-15"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-15"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2021-03-15"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"    public static DateTime parseMeetingDateTime(String datetime) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(datetime);","lastModifiedDate":"2021-03-15"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"        String trimmedDatetime \u003d datetime.trim();","lastModifiedDate":"2021-03-15"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"        if (!DateTime.isValidDateTime(trimmedDatetime)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"        return new DateTime(trimmedDatetime);","lastModifiedDate":"2021-03-15"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":141,"author":{"gitId":"totoyoyo"},"content":"    public static Set\u003cDateTime\u003e parseMeetingDateTimes(Collection\u003cString\u003e datetimes) throws ParseException {","lastModifiedDate":"2021-04-07"},{"lineNumber":142,"author":{"gitId":"totoyoyo"},"content":"        return parseMany(ParserUtil::parseMeetingDateTime, datetimes);","lastModifiedDate":"2021-04-07"},{"lineNumber":143,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":144,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":145,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":146,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":147,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":148,"author":{"gitId":"skinnychenpi"},"content":"     * Parses a {@code String description} into a {@code Description}.","lastModifiedDate":"2021-03-15"},{"lineNumber":149,"author":{"gitId":"skinnychenpi"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-15"},{"lineNumber":150,"author":{"gitId":"skinnychenpi"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":151,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":152,"author":{"gitId":"skinnychenpi"},"content":"    public static Description parseMeetingDescription(String description) {","lastModifiedDate":"2021-03-15"},{"lineNumber":153,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(description);","lastModifiedDate":"2021-03-15"},{"lineNumber":154,"author":{"gitId":"skinnychenpi"},"content":"        String trimmedDescription \u003d description.trim();","lastModifiedDate":"2021-03-15"},{"lineNumber":155,"author":{"gitId":"skinnychenpi"},"content":"        return new Description(trimmedDescription);","lastModifiedDate":"2021-03-15"},{"lineNumber":156,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":158,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":160,"author":{"gitId":"skinnychenpi"},"content":"     * Parses a {@code String priority} into a {@code DateTime}.","lastModifiedDate":"2021-03-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":163,"author":{"gitId":"skinnychenpi"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2021-03-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":165,"author":{"gitId":"skinnychenpi"},"content":"    public static Priority parseMeetingPriority(String priority) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":166,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(priority);","lastModifiedDate":"2021-03-15"},{"lineNumber":167,"author":{"gitId":"skinnychenpi"},"content":"        String trimmedPriority \u003d priority.trim();","lastModifiedDate":"2021-03-15"},{"lineNumber":168,"author":{"gitId":"skinnychenpi"},"content":"        if (!Priority.isValidPriority(trimmedPriority)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":169,"author":{"gitId":"skinnychenpi"},"content":"            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":171,"author":{"gitId":"skinnychenpi"},"content":"        return new Priority(trimmedPriority);","lastModifiedDate":"2021-03-15"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":174,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":176,"author":{"gitId":"hengyiqun"},"content":"     * Parses a {@code String group} into a {@code group}.","lastModifiedDate":"2021-03-14"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":179,"author":{"gitId":"hengyiqun"},"content":"     * @throws ParseException if the given {@code group} is invalid.","lastModifiedDate":"2021-03-14"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":181,"author":{"gitId":"hengyiqun"},"content":"    public static Group parseGroup(String group) throws ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":182,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(group);","lastModifiedDate":"2021-03-14"},{"lineNumber":183,"author":{"gitId":"hengyiqun"},"content":"        String trimmedGroup \u003d group.trim();","lastModifiedDate":"2021-03-14"},{"lineNumber":184,"author":{"gitId":"hengyiqun"},"content":"        if (!Group.isValidGroupName(trimmedGroup)) {","lastModifiedDate":"2021-03-14"},{"lineNumber":185,"author":{"gitId":"hengyiqun"},"content":"            throw new ParseException(Group.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-14"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":187,"author":{"gitId":"hengyiqun"},"content":"        return new Group(trimmedGroup);","lastModifiedDate":"2021-03-14"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":191,"author":{"gitId":"hengyiqun"},"content":"     * Parses {@code Collection\u003cString\u003e groups} into a {@code Set\u003cGroup\u003e}.","lastModifiedDate":"2021-03-14"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":193,"author":{"gitId":"hengyiqun"},"content":"    public static Set\u003cGroup\u003e parseGroups(Collection\u003cString\u003e groups) throws ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":194,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(groups);","lastModifiedDate":"2021-03-14"},{"lineNumber":195,"author":{"gitId":"hengyiqun"},"content":"        final Set\u003cGroup\u003e groupSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":196,"author":{"gitId":"hengyiqun"},"content":"        for (String groupName : groups) {","lastModifiedDate":"2021-03-14"},{"lineNumber":197,"author":{"gitId":"hengyiqun"},"content":"            groupSet.add(parseGroup(groupName));","lastModifiedDate":"2021-03-14"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":199,"author":{"gitId":"hengyiqun"},"content":"        return groupSet;","lastModifiedDate":"2021-03-14"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":201,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":202,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":203,"author":{"gitId":"skinnychenpi"},"content":"     * Parses {@code Collection\u003cString\u003e oneBasedIndexes} into a {@code Set\u003cIndex\u003e}.","lastModifiedDate":"2021-03-27"},{"lineNumber":204,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":205,"author":{"gitId":"skinnychenpi"},"content":"    public static Set\u003cIndex\u003e parsePersonsConnection(Collection\u003cString\u003e oneBasedIndexes) throws ParseException {","lastModifiedDate":"2021-03-27"},{"lineNumber":206,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(oneBasedIndexes);","lastModifiedDate":"2021-03-27"},{"lineNumber":207,"author":{"gitId":"skinnychenpi"},"content":"        final Set\u003cIndex\u003e indexSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":208,"author":{"gitId":"skinnychenpi"},"content":"        for (String index : oneBasedIndexes) {","lastModifiedDate":"2021-03-27"},{"lineNumber":209,"author":{"gitId":"skinnychenpi"},"content":"            indexSet.add(parseIndex(index));","lastModifiedDate":"2021-03-27"},{"lineNumber":210,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":211,"author":{"gitId":"skinnychenpi"},"content":"        return indexSet;","lastModifiedDate":"2021-03-27"},{"lineNumber":212,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":213,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":214,"author":{"gitId":"hengyiqun"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ParserUtil for Note \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-01"},{"lineNumber":215,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":216,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":217,"author":{"gitId":"hengyiqun"},"content":"     * Parses a {@code String content} into a {@code Content}.","lastModifiedDate":"2021-04-01"},{"lineNumber":218,"author":{"gitId":"hengyiqun"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-04-01"},{"lineNumber":219,"author":{"gitId":"hengyiqun"},"content":"     *","lastModifiedDate":"2021-04-01"},{"lineNumber":220,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":221,"author":{"gitId":"hengyiqun"},"content":"    public static Content parseNoteContent(String content) {","lastModifiedDate":"2021-04-01"},{"lineNumber":222,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(content);","lastModifiedDate":"2021-04-01"},{"lineNumber":223,"author":{"gitId":"hengyiqun"},"content":"        String trimmedContent \u003d content.trim();","lastModifiedDate":"2021-04-01"},{"lineNumber":224,"author":{"gitId":"hengyiqun"},"content":"        return new Content(trimmedContent);","lastModifiedDate":"2021-04-01"},{"lineNumber":225,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":226,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":227,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":228,"author":{"gitId":"totoyoyo"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Interface for Parsing Many Strings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-07"},{"lineNumber":229,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":230,"author":{"gitId":"totoyoyo"},"content":"    public interface smallParseUtil\u003cT\u003e {","lastModifiedDate":"2021-04-07"},{"lineNumber":231,"author":{"gitId":"totoyoyo"},"content":"        T parseOne(String input) throws ParseException;","lastModifiedDate":"2021-04-07"},{"lineNumber":232,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":233,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":234,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":235,"author":{"gitId":"totoyoyo"},"content":"    public static \u003cT\u003e Set\u003cT\u003e parseMany(smallParseUtil\u003cT\u003e parseUtil, Collection\u003cString\u003e strings) throws ParseException {","lastModifiedDate":"2021-04-07"},{"lineNumber":236,"author":{"gitId":"totoyoyo"},"content":"        requireNonNull(strings);","lastModifiedDate":"2021-04-07"},{"lineNumber":237,"author":{"gitId":"totoyoyo"},"content":"        final Set\u003cT\u003e newSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-04-07"},{"lineNumber":238,"author":{"gitId":"totoyoyo"},"content":"        for (String string : strings) {","lastModifiedDate":"2021-04-07"},{"lineNumber":239,"author":{"gitId":"totoyoyo"},"content":"            newSet.add(parseUtil.parseOne(string));","lastModifiedDate":"2021-04-07"},{"lineNumber":240,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":241,"author":{"gitId":"totoyoyo"},"content":"        return newSet;","lastModifiedDate":"2021-04-07"},{"lineNumber":242,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":243,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":244,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"totoyoyo":30,"Maurice2n97":1,"skinnychenpi":80,"hengyiqun":30,"-":103}},{"path":"src/main/java/seedu/address/logic/parser/connections/AddPersonToMeetingConnectionParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.connections;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.connections.AddPersonToMeetingConnectionCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_CONNECTION;","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":" * Parses input arguments and creates a new AddMeetingCommand object","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"public class AddPersonToMeetingConnectionParser implements Parser\u003cAddPersonToMeetingConnectionCommand\u003e {","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPersonToMeetingConnectionCommand","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * and returns an AddPersonToMeetingConnectionCommand object for execution.","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    public AddPersonToMeetingConnectionCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PERSON_CONNECTION);","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        Index index;","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        try {","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"                    AddPersonToMeetingConnectionCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cIndex\u003e personConnectionSet \u003d ParserUtil","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"                .parsePersonsConnection(argMultimap.getAllValues(PREFIX_PERSON_CONNECTION));","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        return new AddPersonToMeetingConnectionCommand(index, personConnectionSet);","lastModifiedDate":"2021-04-07"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"skinnychenpi":43}},{"path":"src/main/java/seedu/address/logic/parser/connections/DeletePersonToMeetingConnectionParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.connections;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.connections.DeletePersonToMeetingConnectionCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_CONNECTION;","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"public class DeletePersonToMeetingConnectionParser implements Parser\u003cDeletePersonToMeetingConnectionCommand\u003e {","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPersonToMeetingConnectionCommand","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     * and returns an AddPersonToMeetingConnectionCommand object for execution.","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    public DeletePersonToMeetingConnectionCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PERSON_CONNECTION);","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        Index index;","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        try {","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"                    DeletePersonToMeetingConnectionCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cIndex\u003e personConnectionSet \u003d ParserUtil","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"                .parsePersonsConnection(argMultimap.getAllValues(PREFIX_PERSON_CONNECTION));","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        return new DeletePersonToMeetingConnectionCommand(index, personConnectionSet);","lastModifiedDate":"2021-04-07"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"skinnychenpi":40}},{"path":"src/main/java/seedu/address/logic/parser/meetings/AddMeetingCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.meetings;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.meetings.AddMeetingCommand;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.*;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.*;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CliSyntax.*;","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":" * Parses input arguments and creates a new AddMeetingCommand object","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"public class AddMeetingCommandParser implements Parser\u003cAddMeetingCommand\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * Parses the given {@code String} of arguments in the context of the AddMeetingCommand","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     * and returns an AddMeetingCommand object for execution.","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    public AddMeetingCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_TIME, PREFIX_END_TIME,","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"                        PREFIX_DESCRIPTION, PREFIX_PRIORITY, PREFIX_GROUP, PREFIX_PERSON_CONNECTION);","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"        // If the meeting has its meetingName and start time as well as the end time,","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"        // then it\u0027s sufficient for definition.","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        // If no description, then the description will be set as empty.","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        // If no priority, then the priority will be set as 1.","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_START_TIME, PREFIX_END_TIME)","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMeetingCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        MeetingName meetingName \u003d ParserUtil.parseMeetingName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        DateTime startTime \u003d ParserUtil.parseMeetingDateTime(argMultimap.getValue(PREFIX_START_TIME).get());","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        DateTime endTime \u003d ParserUtil.parseMeetingDateTime(argMultimap.getValue(PREFIX_END_TIME).get());","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        Description description;","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        Priority priority;","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        // Optional fields:","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            description \u003d new Description(\"\");","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        } else {","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"            description \u003d ParserUtil.parseMeetingDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PRIORITY)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"            priority \u003d new Priority(\"1\");","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        } else {","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"            priority \u003d ParserUtil.parseMeetingPriority(argMultimap.getValue(PREFIX_PRIORITY).get());","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e tagList \u003d ParserUtil.parseGroups(argMultimap.getAllValues(PREFIX_GROUP));","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cIndex\u003e personConnectionSet \u003d ParserUtil","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"            .parsePersonsConnection(argMultimap.getAllValues(PREFIX_PERSON_CONNECTION));","lastModifiedDate":"2021-03-27"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"        Meeting meeting;","lastModifiedDate":"2021-03-25"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"        try {","lastModifiedDate":"2021-03-25"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"            meeting \u003d new Meeting(meetingName, startTime, endTime, priority, description, tagList);","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-03-25"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"            throw new ParseException(e.getMessage());","lastModifiedDate":"2021-03-25"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"        return new AddMeetingCommand(meeting).setConnectionToPerson(personConnectionSet);","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"Maurice2n97":8,"skinnychenpi":45,"hengyiqun":2,"-":25}},{"path":"src/main/java/seedu/address/logic/parser/meetings/DeleteMeetingCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.logic.parser.meetings;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.meetings.DeleteMeetingCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"public class DeleteMeetingCommandParser implements Parser\u003cDeleteMeetingCommand\u003e {","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    public DeleteMeetingCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"        try {","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"            return new DeleteMeetingCommand(index);","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMeetingCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"Maurice2n97":25}},{"path":"src/main/java/seedu/address/logic/parser/meetings/EditMeetingCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.logic.parser.meetings;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.meetings.EditMeetingCommand;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.meetings.EditMeetingCommand.EditMeetingDescriptor;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Collection;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CliSyntax.*;","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":" * Parses input arguments and creates a new EditMeetingCommand object","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"public class EditMeetingCommandParser implements Parser\u003cEditMeetingCommand\u003e {","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"     * Parses the given {@code String} of arguments in the context of the EditMeetingCommand","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"     * and returns an EditMeetingCommand object for execution.","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"    public EditMeetingCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_PRIORITY,","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"                        PREFIX_DESCRIPTION, PREFIX_GROUP, PREFIX_PERSON_CONNECTION);","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"        Index index;","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"        try {","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"                    EditMeetingCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"        EditMeetingDescriptor editMeetingDescriptor \u003d new EditMeetingDescriptor();","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"            editMeetingDescriptor.setName(ParserUtil.parseMeetingName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"        if (argMultimap.getValue(PREFIX_START_TIME).isPresent()) {","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"            editMeetingDescriptor.setStart(ParserUtil.parseMeetingDateTime(argMultimap.getValue(PREFIX_START_TIME).get()));","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"        if (argMultimap.getValue(PREFIX_END_TIME).isPresent()) {","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"            editMeetingDescriptor.setTerminate(ParserUtil.parseMeetingDateTime(argMultimap.getValue(PREFIX_END_TIME).get()));","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {","lastModifiedDate":"2021-03-28"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"            editMeetingDescriptor.setPriority(ParserUtil.parseMeetingPriority(argMultimap.getValue(PREFIX_PRIORITY).get()));","lastModifiedDate":"2021-03-28"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {","lastModifiedDate":"2021-03-28"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"            editMeetingDescriptor.setDescription(ParserUtil.parseMeetingDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));","lastModifiedDate":"2021-03-28"},{"lineNumber":62,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cIndex\u003e personConnectionSet \u003d ParserUtil.parsePersonsConnection(argMultimap.getAllValues(PREFIX_PERSON_CONNECTION));","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"hengyiqun"},"content":"        parseGroupsForEdit(argMultimap.getAllValues(PREFIX_GROUP)).ifPresent(editMeetingDescriptor::setGroups);","lastModifiedDate":"2021-03-28"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"        if (!editMeetingDescriptor.isAnyFieldEdited() \u0026\u0026 personConnectionSet.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"hengyiqun"},"content":"            throw new ParseException(EditMeetingCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-28"},{"lineNumber":67,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":68,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"        return new EditMeetingCommand(index, editMeetingDescriptor).setConnectionToPerson(personConnectionSet);","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":72,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":73,"author":{"gitId":"hengyiqun"},"content":"     * Parses {@code Collection\u003cString\u003e groups} into a {@code Set\u003cGroup\u003e} if {@code groups} is non-empty.","lastModifiedDate":"2021-03-28"},{"lineNumber":74,"author":{"gitId":"hengyiqun"},"content":"     * If {@code groups} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2021-03-28"},{"lineNumber":75,"author":{"gitId":"hengyiqun"},"content":"     * {@code Set\u003cGroup\u003e} containing zero groups.","lastModifiedDate":"2021-03-28"},{"lineNumber":76,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":77,"author":{"gitId":"hengyiqun"},"content":"    private Optional\u003cSet\u003cGroup\u003e\u003e parseGroupsForEdit(Collection\u003cString\u003e groups) throws ParseException {","lastModifiedDate":"2021-03-28"},{"lineNumber":78,"author":{"gitId":"hengyiqun"},"content":"        assert groups !\u003d null;","lastModifiedDate":"2021-03-28"},{"lineNumber":79,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":80,"author":{"gitId":"hengyiqun"},"content":"        if (groups.isEmpty()) {","lastModifiedDate":"2021-03-28"},{"lineNumber":81,"author":{"gitId":"hengyiqun"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-28"},{"lineNumber":82,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"        Collection\u003cString\u003e groupSet \u003d groups.size() \u003d\u003d 1 \u0026\u0026 groups.contains(\"\") ? Collections.emptySet() : groups;","lastModifiedDate":"2021-03-28"},{"lineNumber":84,"author":{"gitId":"hengyiqun"},"content":"        return Optional.of(ParserUtil.parseGroups(groupSet));","lastModifiedDate":"2021-03-28"},{"lineNumber":85,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":86,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":87,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"skinnychenpi":14,"hengyiqun":73}},{"path":"src/main/java/seedu/address/logic/parser/meetings/FindMeetingCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.logic.parser.meetings;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_CONNECTION;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"import java.util.List;","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"import java.util.Optional;","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"import java.util.Set;","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.meetings.FindMeetingCommand;","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-04-07"},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.DateTime;","lastModifiedDate":"2021-04-07"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.Description;","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.MeetingName;","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.Priority;","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":35,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"totoyoyo"},"content":"public class FindMeetingCommandParser implements Parser\u003cFindMeetingCommand\u003e {","lastModifiedDate":"2021-04-07"},{"lineNumber":37,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":38,"author":{"gitId":"totoyoyo"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-04-07"},{"lineNumber":39,"author":{"gitId":"totoyoyo"},"content":"        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-04-07"},{"lineNumber":40,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":41,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":42,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"totoyoyo"},"content":"    /**","lastModifiedDate":"2021-04-07"},{"lineNumber":44,"author":{"gitId":"totoyoyo"},"content":"     * Parses {@code args} into a command and returns it.","lastModifiedDate":"2021-04-07"},{"lineNumber":45,"author":{"gitId":"totoyoyo"},"content":"     *","lastModifiedDate":"2021-04-07"},{"lineNumber":46,"author":{"gitId":"totoyoyo"},"content":"     * @param args","lastModifiedDate":"2021-04-07"},{"lineNumber":47,"author":{"gitId":"totoyoyo"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2021-04-07"},{"lineNumber":48,"author":{"gitId":"totoyoyo"},"content":"     */","lastModifiedDate":"2021-04-07"},{"lineNumber":49,"author":{"gitId":"totoyoyo"},"content":"    @Override","lastModifiedDate":"2021-04-07"},{"lineNumber":50,"author":{"gitId":"totoyoyo"},"content":"    public FindMeetingCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-04-07"},{"lineNumber":51,"author":{"gitId":"totoyoyo"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-04-07"},{"lineNumber":52,"author":{"gitId":"totoyoyo"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PERSON_CONNECTION,","lastModifiedDate":"2021-04-07"},{"lineNumber":53,"author":{"gitId":"totoyoyo"},"content":"                        PREFIX_NAME, PREFIX_TIME, PREFIX_DESCRIPTION,","lastModifiedDate":"2021-04-07"},{"lineNumber":54,"author":{"gitId":"totoyoyo"},"content":"                        PREFIX_PRIORITY, PREFIX_GROUP);","lastModifiedDate":"2021-04-07"},{"lineNumber":55,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":56,"author":{"gitId":"totoyoyo"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PERSON_CONNECTION,","lastModifiedDate":"2021-04-07"},{"lineNumber":57,"author":{"gitId":"totoyoyo"},"content":"                PREFIX_NAME, PREFIX_TIME, PREFIX_DESCRIPTION,","lastModifiedDate":"2021-04-07"},{"lineNumber":58,"author":{"gitId":"totoyoyo"},"content":"                PREFIX_PRIORITY,PREFIX_GROUP)","lastModifiedDate":"2021-04-07"},{"lineNumber":59,"author":{"gitId":"totoyoyo"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":60,"author":{"gitId":"totoyoyo"},"content":"            throw new ParseException(FindMeetingCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-04-07"},{"lineNumber":61,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":62,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":63,"author":{"gitId":"totoyoyo"},"content":"        List\u003cString\u003e personIndexes \u003d argMultimap.getAllValues(PREFIX_PERSON_CONNECTION);","lastModifiedDate":"2021-04-07"},{"lineNumber":64,"author":{"gitId":"totoyoyo"},"content":"        List\u003cString\u003e meetingTimes \u003d argMultimap.getAllValues(PREFIX_TIME);","lastModifiedDate":"2021-04-07"},{"lineNumber":65,"author":{"gitId":"totoyoyo"},"content":"        List\u003cString\u003e meetingGroups \u003d argMultimap.getAllValues(PREFIX_GROUP);","lastModifiedDate":"2021-04-07"},{"lineNumber":66,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":67,"author":{"gitId":"totoyoyo"},"content":"        Optional\u003cString\u003e meetingName \u003d argMultimap.getValue(PREFIX_NAME);","lastModifiedDate":"2021-04-07"},{"lineNumber":68,"author":{"gitId":"totoyoyo"},"content":"        Optional\u003cString\u003e meetingDescription \u003d argMultimap.getValue(PREFIX_DESCRIPTION);","lastModifiedDate":"2021-04-07"},{"lineNumber":69,"author":{"gitId":"totoyoyo"},"content":"        Optional\u003cString\u003e meetingPriority \u003d argMultimap.getValue(PREFIX_PRIORITY);","lastModifiedDate":"2021-04-07"},{"lineNumber":70,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":71,"author":{"gitId":"totoyoyo"},"content":"        try {","lastModifiedDate":"2021-04-07"},{"lineNumber":72,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":73,"author":{"gitId":"totoyoyo"},"content":"//            checkSomeNotNull(personIndexes,meetingTimes,meetingName,meetingDescription,","lastModifiedDate":"2021-04-07"},{"lineNumber":74,"author":{"gitId":"totoyoyo"},"content":"//                    meetingPriority);","lastModifiedDate":"2021-04-07"},{"lineNumber":75,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":76,"author":{"gitId":"totoyoyo"},"content":"            Set\u003cIndex\u003e personsIndexesToSearch \u003d getPersonsSet(personIndexes);","lastModifiedDate":"2021-04-07"},{"lineNumber":77,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":78,"author":{"gitId":"totoyoyo"},"content":"            Predicate\u003cMeeting\u003e predicateHasTimes \u003d handleTimes(meetingTimes);","lastModifiedDate":"2021-04-07"},{"lineNumber":79,"author":{"gitId":"totoyoyo"},"content":"            Predicate\u003cMeeting\u003e predicateHasGroups \u003d handleGroups(meetingGroups);","lastModifiedDate":"2021-04-07"},{"lineNumber":80,"author":{"gitId":"totoyoyo"},"content":"            Predicate\u003cMeeting\u003e predicateHasName \u003d handleName(meetingName);","lastModifiedDate":"2021-04-07"},{"lineNumber":81,"author":{"gitId":"totoyoyo"},"content":"            Predicate\u003cMeeting\u003e predicateHasDescription \u003d handleDescription(meetingDescription);","lastModifiedDate":"2021-04-07"},{"lineNumber":82,"author":{"gitId":"totoyoyo"},"content":"            Predicate\u003cMeeting\u003e predicateHasPriority \u003d handlePriority(meetingPriority);","lastModifiedDate":"2021-04-07"},{"lineNumber":83,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":84,"author":{"gitId":"totoyoyo"},"content":"            Predicate\u003cMeeting\u003e bigPredicate \u003d combinePredicates(predicateHasName,","lastModifiedDate":"2021-04-07"},{"lineNumber":85,"author":{"gitId":"totoyoyo"},"content":"                    predicateHasDescription,predicateHasPriority,predicateHasTimes,","lastModifiedDate":"2021-04-07"},{"lineNumber":86,"author":{"gitId":"totoyoyo"},"content":"                    predicateHasGroups);","lastModifiedDate":"2021-04-07"},{"lineNumber":87,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":88,"author":{"gitId":"totoyoyo"},"content":"            return new FindMeetingCommand(bigPredicate, personsIndexesToSearch);","lastModifiedDate":"2021-04-07"},{"lineNumber":89,"author":{"gitId":"totoyoyo"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-04-07"},{"lineNumber":90,"author":{"gitId":"totoyoyo"},"content":"            throw new ParseException(\"findm: \" + e.getMessage());","lastModifiedDate":"2021-04-07"},{"lineNumber":91,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":92,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":93,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":94,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":95,"author":{"gitId":"totoyoyo"},"content":"    @SafeVarargs","lastModifiedDate":"2021-04-07"},{"lineNumber":96,"author":{"gitId":"totoyoyo"},"content":"    private Predicate\u003cMeeting\u003e combinePredicates(Predicate\u003cMeeting\u003e ... predicates) {","lastModifiedDate":"2021-04-07"},{"lineNumber":97,"author":{"gitId":"totoyoyo"},"content":"        Predicate\u003cMeeting\u003e combinedPredicate \u003d Arrays.stream(predicates).reduce(pred -\u003e true,","lastModifiedDate":"2021-04-07"},{"lineNumber":98,"author":{"gitId":"totoyoyo"},"content":"                (meetingPredicate, meetingPredicate2) -\u003e meetingPredicate.and(meetingPredicate2));","lastModifiedDate":"2021-04-07"},{"lineNumber":99,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":100,"author":{"gitId":"totoyoyo"},"content":"        return combinedPredicate;","lastModifiedDate":"2021-04-07"},{"lineNumber":101,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":102,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":103,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":104,"author":{"gitId":"totoyoyo"},"content":"    private Set\u003cIndex\u003e getPersonsSet(List\u003cString\u003e personIndexes) throws ParseException {","lastModifiedDate":"2021-04-07"},{"lineNumber":105,"author":{"gitId":"totoyoyo"},"content":"        if (personIndexes.isEmpty()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":106,"author":{"gitId":"totoyoyo"},"content":"            return new HashSet\u003c\u003e();","lastModifiedDate":"2021-04-07"},{"lineNumber":107,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":108,"author":{"gitId":"totoyoyo"},"content":"        Set\u003cIndex\u003e personIndexSet \u003d ParserUtil.parsePersonsConnection(personIndexes);","lastModifiedDate":"2021-04-07"},{"lineNumber":109,"author":{"gitId":"totoyoyo"},"content":"        return personIndexSet;","lastModifiedDate":"2021-04-07"},{"lineNumber":110,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":111,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":112,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":113,"author":{"gitId":"totoyoyo"},"content":"    private Predicate\u003cMeeting\u003e handleTimes(List\u003cString\u003e times) throws ParseException {","lastModifiedDate":"2021-04-07"},{"lineNumber":114,"author":{"gitId":"totoyoyo"},"content":"        if (times.isEmpty()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":115,"author":{"gitId":"totoyoyo"},"content":"            return meeting -\u003e true;","lastModifiedDate":"2021-04-07"},{"lineNumber":116,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":117,"author":{"gitId":"totoyoyo"},"content":"        Set\u003cDateTime\u003e parsedTimes \u003d ParserUtil.parseMeetingDateTimes(times);","lastModifiedDate":"2021-04-07"},{"lineNumber":118,"author":{"gitId":"totoyoyo"},"content":"        Predicate\u003cMeeting\u003e timePred \u003d meeting -\u003e parsedTimes.stream().allMatch(time -\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":119,"author":{"gitId":"totoyoyo"},"content":"                meeting.containsTime(time));","lastModifiedDate":"2021-04-07"},{"lineNumber":120,"author":{"gitId":"totoyoyo"},"content":"        return timePred;","lastModifiedDate":"2021-04-07"},{"lineNumber":121,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":122,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":123,"author":{"gitId":"totoyoyo"},"content":"    private Predicate\u003cMeeting\u003e handleGroups(List\u003cString\u003e groups) throws ParseException {","lastModifiedDate":"2021-04-07"},{"lineNumber":124,"author":{"gitId":"totoyoyo"},"content":"        if (groups.isEmpty()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":125,"author":{"gitId":"totoyoyo"},"content":"            return meeting -\u003e true;","lastModifiedDate":"2021-04-07"},{"lineNumber":126,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":127,"author":{"gitId":"totoyoyo"},"content":"        Set\u003cGroup\u003e parsedGroups \u003d ParserUtil.parseGroups(groups);","lastModifiedDate":"2021-04-07"},{"lineNumber":128,"author":{"gitId":"totoyoyo"},"content":"        Predicate\u003cMeeting\u003e groupPred \u003d meeting -\u003e parsedGroups.stream().allMatch(group -\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":129,"author":{"gitId":"totoyoyo"},"content":"                meeting.containsGroup(group));","lastModifiedDate":"2021-04-07"},{"lineNumber":130,"author":{"gitId":"totoyoyo"},"content":"        return groupPred;","lastModifiedDate":"2021-04-07"},{"lineNumber":131,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":132,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":133,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":134,"author":{"gitId":"totoyoyo"},"content":"    private Predicate\u003cMeeting\u003e handleName(Optional\u003cString\u003e name) throws ParseException {","lastModifiedDate":"2021-04-07"},{"lineNumber":135,"author":{"gitId":"totoyoyo"},"content":"        if (name.isEmpty()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":136,"author":{"gitId":"totoyoyo"},"content":"            return meeting -\u003e true;","lastModifiedDate":"2021-04-07"},{"lineNumber":137,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":138,"author":{"gitId":"totoyoyo"},"content":"        MeetingName parsedNames \u003d ParserUtil.parseMeetingName(name.get());","lastModifiedDate":"2021-04-07"},{"lineNumber":139,"author":{"gitId":"totoyoyo"},"content":"        Predicate\u003cMeeting\u003e namePred \u003d meeting -\u003e meeting.containsName(parsedNames);","lastModifiedDate":"2021-04-07"},{"lineNumber":140,"author":{"gitId":"totoyoyo"},"content":"        return namePred;","lastModifiedDate":"2021-04-07"},{"lineNumber":141,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":142,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":143,"author":{"gitId":"totoyoyo"},"content":"    private Predicate\u003cMeeting\u003e handleDescription(Optional\u003cString\u003e description) throws ParseException {","lastModifiedDate":"2021-04-07"},{"lineNumber":144,"author":{"gitId":"totoyoyo"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":145,"author":{"gitId":"totoyoyo"},"content":"            return meeting -\u003e true;","lastModifiedDate":"2021-04-07"},{"lineNumber":146,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":147,"author":{"gitId":"totoyoyo"},"content":"        Description parsedDesc \u003d ParserUtil.parseMeetingDescription(description.get());","lastModifiedDate":"2021-04-07"},{"lineNumber":148,"author":{"gitId":"totoyoyo"},"content":"        Predicate\u003cMeeting\u003e pred \u003d meeting -\u003e meeting.containsDescription(parsedDesc);","lastModifiedDate":"2021-04-07"},{"lineNumber":149,"author":{"gitId":"totoyoyo"},"content":"        return pred;","lastModifiedDate":"2021-04-07"},{"lineNumber":150,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":151,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":152,"author":{"gitId":"totoyoyo"},"content":"    private Predicate\u003cMeeting\u003e handlePriority(Optional\u003cString\u003e priority) throws ParseException {","lastModifiedDate":"2021-04-07"},{"lineNumber":153,"author":{"gitId":"totoyoyo"},"content":"        if (priority.isEmpty()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":154,"author":{"gitId":"totoyoyo"},"content":"            return meeting -\u003e true;","lastModifiedDate":"2021-04-07"},{"lineNumber":155,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":156,"author":{"gitId":"totoyoyo"},"content":"        Priority parsedPrio \u003d ParserUtil.parseMeetingPriority(priority.get());","lastModifiedDate":"2021-04-07"},{"lineNumber":157,"author":{"gitId":"totoyoyo"},"content":"        Predicate\u003cMeeting\u003e pred \u003d meeting -\u003e meeting.hasPriority(parsedPrio);","lastModifiedDate":"2021-04-07"},{"lineNumber":158,"author":{"gitId":"totoyoyo"},"content":"        return pred;","lastModifiedDate":"2021-04-07"},{"lineNumber":159,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":160,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":161,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":162,"author":{"gitId":"totoyoyo"},"content":"    private void checkSomeNotNull(List list1, List list2, Optional ... optionals) throws ParseException {","lastModifiedDate":"2021-04-07"},{"lineNumber":163,"author":{"gitId":"totoyoyo"},"content":"        if (Arrays.stream(optionals).allMatch(o -\u003e o.isEmpty()) \u0026\u0026 list1.isEmpty()","lastModifiedDate":"2021-04-07"},{"lineNumber":164,"author":{"gitId":"totoyoyo"},"content":"                \u0026\u0026 list2.isEmpty()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":165,"author":{"gitId":"totoyoyo"},"content":"            throw new ParseException(FindMeetingCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-04-07"},{"lineNumber":166,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":167,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":168,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":169,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":170,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":171,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":172,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":173,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-04-07"}],"authorContributionMap":{"totoyoyo":173}},{"path":"src/main/java/seedu/address/logic/parser/meetings/SetTimetableCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.logic.parser.meetings;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.meetings.SetTimetableCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.DateTimeUtil;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"public class SetTimetableCommandParser implements Parser\u003cSetTimetableCommand\u003e {","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    public SetTimetableCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        LocalDate parsedDate;","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        if (trimmedArgs.equals(\"\")) {","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"            parsedDate \u003d LocalDate.now();","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"        } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"            try {","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"                parsedDate \u003d DateTimeUtil.parseIsoDate(trimmedArgs);","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"            } catch (ParseException e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"                        SetTimetableCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"        return new SetTimetableCommand(parsedDate);","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"Maurice2n97":33}},{"path":"src/main/java/seedu/address/logic/parser/meetings/ShowMeetingCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.logic.parser.meetings;","lastModifiedDate":"2021-04-06"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-06"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-04-06"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.meetings.ShowMeetingCommand;","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-04-06"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-04-06"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-04-06"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":" * Parses input arguments and creates a new ShowMeetingCommand object","lastModifiedDate":"2021-04-06"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-04-06"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"public class ShowMeetingCommandParser implements Parser\u003cShowMeetingCommand\u003e {","lastModifiedDate":"2021-04-06"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"     * Parses the given {@code String} of arguments in the context of the ShowMeetingCommand","lastModifiedDate":"2021-04-06"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"     * and returns a ShowMeetingCommand object for execution.","lastModifiedDate":"2021-04-06"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-04-06"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"    public ShowMeetingCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-04-06"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"        Index index;","lastModifiedDate":"2021-04-06"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"        try {","lastModifiedDate":"2021-04-06"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"            requireNonNull(args);","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"            index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-04-06"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-04-06"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"                    ShowMeetingCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-04-06"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"        return new ShowMeetingCommand(index);","lastModifiedDate":"2021-04-06"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-04-06"}],"authorContributionMap":{"hengyiqun":34}},{"path":"src/main/java/seedu/address/logic/parser/meetings/SortMeetingCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.logic.parser.meetings;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_BY;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_DIRECTION;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.meetings.SortMeetingCommand;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.persons.SortPersonCommand;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.MeetingSortDirection;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.MeetingSortOption;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"public class SortMeetingCommandParser implements Parser\u003cSortMeetingCommand\u003e {","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":"     * Parses {@code args} into a command and returns it.","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"     *","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":"     * @param args","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"totoyoyo"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":"    @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"totoyoyo"},"content":"    public SortMeetingCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_SORT_BY, PREFIX_SORT_DIRECTION);","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"totoyoyo"},"content":"        try {","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"            String optionStringCaps \u003d argMultimap.getValue(PREFIX_SORT_BY).get().toUpperCase();","lastModifiedDate":"2021-04-08"},{"lineNumber":31,"author":{"gitId":"totoyoyo"},"content":"            String directionStringCaps \u003d argMultimap.getValue(PREFIX_SORT_DIRECTION).get().toUpperCase();","lastModifiedDate":"2021-04-08"},{"lineNumber":32,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":33,"author":{"gitId":"totoyoyo"},"content":"            MeetingSortOption option \u003d MeetingSortOption.valueOf(optionStringCaps);","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"totoyoyo"},"content":"            MeetingSortDirection direction \u003d MeetingSortDirection.valueOf(directionStringCaps);","lastModifiedDate":"2021-04-08"},{"lineNumber":35,"author":{"gitId":"totoyoyo"},"content":"            return new SortMeetingCommand(option, direction);","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"totoyoyo"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"totoyoyo"},"content":"            throw new ParseException(SortMeetingCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"totoyoyo":44}},{"path":"src/main/java/seedu/address/logic/parser/notes/AddNoteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.logic.parser.notes;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.notes.AddNoteCommand;","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.meeting.Priority;","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Content;","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Note;","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":" * Parses input arguments and creates a new AddNoteCommand object","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"public class AddNoteCommandParser implements Parser\u003cAddNoteCommand\u003e {","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"     * Parses the given {@code String} of arguments in the context of the AddNoteCommand","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"     * and returns an AddNoteCommand object for execution.","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"    public AddNoteCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PRIORITY);","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"        Content content \u003d ParserUtil.parseNoteContent(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"        Priority priority;","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PRIORITY)) {","lastModifiedDate":"2021-04-01"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"            priority \u003d new Priority(\"1\");","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"        } else {","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"            priority \u003d ParserUtil.parseMeetingPriority(argMultimap.getValue(PREFIX_PRIORITY).get());","lastModifiedDate":"2021-04-01"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"        Note note \u003d new Note(content, priority);","lastModifiedDate":"2021-04-01"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"        return new AddNoteCommand(note);","lastModifiedDate":"2021-04-01"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-04-01"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-04-01"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"hengyiqun":61}},{"path":"src/main/java/seedu/address/logic/parser/notes/DeleteNoteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.logic.parser.notes;","lastModifiedDate":"2021-04-02"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-04-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-04-02"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.notes.DeleteNoteCommand;","lastModifiedDate":"2021-04-02"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-04-02"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-04-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-04-02"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2021-04-02"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":" * Parses input arguments and creates a new DeleteNoteCommand object","lastModifiedDate":"2021-04-02"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2021-04-02"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"public class DeleteNoteCommandParser implements Parser\u003cDeleteNoteCommand\u003e {","lastModifiedDate":"2021-04-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-04-02"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteNoteCommand","lastModifiedDate":"2021-04-02"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"     * and returns a DeleteNoteCommand object for execution.","lastModifiedDate":"2021-04-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-04-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-04-02"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"    public DeleteNoteCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-04-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-04-02"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-04-02"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"            return new DeleteNoteCommand(index);","lastModifiedDate":"2021-04-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-04-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2021-04-02"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteNoteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-04-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-04-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-04-02"}],"authorContributionMap":{"hengyiqun":11,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/persons/AddPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.persons;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.AddPersonCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.PersonName;","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":" * Parses input arguments and creates a new AddPersonCommand object","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"public class AddPersonCommandParser implements Parser\u003cAddPersonCommand\u003e {","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPersonCommand","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     * and returns an AddPersonCommand object for execution.","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    public AddPersonCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_GROUP);","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":41,"author":{"gitId":"totoyoyo"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        PersonName personName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"totoyoyo"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).orElse(Phone.PLACE_HOLDER));","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"totoyoyo"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).orElse(Email.PLACE_HOLDER));","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"totoyoyo"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).orElse(Address.PLACE_HOLDER));","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e groupList \u003d ParserUtil.parseGroups(argMultimap.getAllValues(PREFIX_GROUP));","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        Person person \u003d new Person(personName, phone, email, address, groupList);","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        return new AddPersonCommand(person);","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"totoyoyo":4,"Maurice2n97":7,"skinnychenpi":11,"hengyiqun":3,"-":40}},{"path":"src/main/java/seedu/address/logic/parser/persons/DeletePersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.persons;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.DeletePersonCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" * Parses input arguments and creates a new DeletePersonCommand object","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"public class DeletePersonCommandParser implements Parser\u003cDeletePersonCommand\u003e {","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * Parses the given {@code String} of arguments in the context of the DeletePersonCommand","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * and returns a DeletePersonCommand object for execution.","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public DeletePersonCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        try {","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"            return new DeletePersonCommand(index);","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"skinnychenpi":31}},{"path":"src/main/java/seedu/address/logic/parser/persons/EditPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.persons;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":" * Parses input arguments and creates a new EditPersonCommand object","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"public class EditPersonCommandParser implements Parser\u003cEditPersonCommand\u003e {","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     * Parses the given {@code String} of arguments in the context of the EditPersonCommand","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * and returns an EditPersonCommand object for execution.","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    public EditPersonCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_GROUP);","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"                    EditPersonCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"        parseGroupsForEdit(argMultimap.getAllValues(PREFIX_GROUP)).ifPresent(editPersonDescriptor::setGroups);","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"            throw new ParseException(EditPersonCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"        return new EditPersonCommand(index, editPersonDescriptor);","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"hengyiqun"},"content":"     * Parses {@code Collection\u003cString\u003e groups} into a {@code Set\u003cGroup\u003e} if {@code groups} is non-empty.","lastModifiedDate":"2021-03-14"},{"lineNumber":74,"author":{"gitId":"hengyiqun"},"content":"     * If {@code groups} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"hengyiqun"},"content":"     * {@code Set\u003cGroup\u003e} containing zero groups.","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"hengyiqun"},"content":"    private Optional\u003cSet\u003cGroup\u003e\u003e parseGroupsForEdit(Collection\u003cString\u003e groups) throws ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"hengyiqun"},"content":"        assert groups !\u003d null;","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"hengyiqun"},"content":"        if (groups.isEmpty()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"        Collection\u003cString\u003e groupSet \u003d groups.size() \u003d\u003d 1 \u0026\u0026 groups.contains(\"\") ? Collections.emptySet() : groups;","lastModifiedDate":"2021-03-14"},{"lineNumber":84,"author":{"gitId":"hengyiqun"},"content":"        return Optional.of(ParserUtil.parseGroups(groupSet));","lastModifiedDate":"2021-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"Maurice2n97":3,"skinnychenpi":14,"hengyiqun":11,"-":59}},{"path":"src/main/java/seedu/address/logic/parser/persons/FindGroupCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.logic.parser.persons;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.persons.FindGroupCommand;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.GroupContainsKeywordsPredicate;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":" * Parses input arguments and creates a new FindGroupCommand object","lastModifiedDate":"2021-04-06"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"public class FindGroupCommandParser implements Parser\u003cFindGroupCommand\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPersonCommand","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"     * and returns a FindPersonCommand object for execution.","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"    public FindGroupCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindGroupCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"        return new FindGroupCommand(new GroupContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hengyiqun":34}},{"path":"src/main/java/seedu/address/logic/parser/persons/FindPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.persons;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.FindPersonCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":" * Parses input arguments and creates a new FindPersonCommand object","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"public class FindPersonCommandParser implements Parser\u003cFindPersonCommand\u003e {","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPersonCommand","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     * and returns a FindPersonCommand object for execution.","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    public FindPersonCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        return new FindPersonCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"skinnychenpi":10,"-":24}},{"path":"src/main/java/seedu/address/logic/parser/persons/SortPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.logic.parser.persons;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_BY;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_DIRECTION;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.commands.persons.SortPersonCommand;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.person.PersonSortDirection;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.person.PersonSortOption;","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":"public class SortPersonCommandParser implements Parser\u003cSortPersonCommand\u003e {","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"     * Parses {@code args} into a command and returns it.","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"totoyoyo"},"content":"     *","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":"     * @param args","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"totoyoyo"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"    @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"totoyoyo"},"content":"    public SortPersonCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"totoyoyo"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_SORT_BY, PREFIX_SORT_DIRECTION);","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"totoyoyo"},"content":"        try {","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"totoyoyo"},"content":"            String optionStringCaps \u003d argMultimap.getValue(PREFIX_SORT_BY).get().toUpperCase();","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"totoyoyo"},"content":"            String directionStringCaps \u003d argMultimap.getValue(PREFIX_SORT_DIRECTION).get().toUpperCase();","lastModifiedDate":"2021-04-08"},{"lineNumber":35,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":36,"author":{"gitId":"totoyoyo"},"content":"            PersonSortOption option \u003d PersonSortOption.valueOf(optionStringCaps);","lastModifiedDate":"2021-04-08"},{"lineNumber":37,"author":{"gitId":"totoyoyo"},"content":"            PersonSortDirection direction \u003d PersonSortDirection.valueOf(directionStringCaps);","lastModifiedDate":"2021-04-08"},{"lineNumber":38,"author":{"gitId":"totoyoyo"},"content":"            return new SortPersonCommand(option, direction);","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"totoyoyo"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"totoyoyo"},"content":"            throw new ParseException(SortPersonCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"totoyoyo":47}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import javafx.beans.value.ObservableValue;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.connection.PersonMeetingConnection;","lastModifiedDate":"2021-03-25"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.UniqueMeetingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Note;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.ReadOnlyNoteBook;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.reminder.ReadOnlyReminderBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Optional;","lastModifiedDate":"2021-04-07"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    Predicate\u003cMeeting\u003e PREDICATE_SHOW_ALL_MEETINGS \u003d unused -\u003e true;","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"    Predicate\u003cNote\u003e PREDICATE_SHOW_ALL_NOTES \u003d unused -\u003e true;","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person part of the person model interface \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d //","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":100,"author":{"gitId":"hengyiqun"},"content":"    Set\u003cPerson\u003e findPersonsInGroup(Group group);","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":111,"author":{"gitId":"totoyoyo"},"content":"    void sortFilteredPersonList(Comparator\u003cPerson\u003e comparator);","lastModifiedDate":"2021-03-28"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Meeting part of the meeting Model interface \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d //","lastModifiedDate":"2021-03-15"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"     * Replaces meeting book data with the data in {@code meetingBook}.","lastModifiedDate":"2021-03-15"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"    void setMeetingBook(ReadOnlyMeetingBook meetingBook);","lastModifiedDate":"2021-03-15"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":"    /** Returns the Book */","lastModifiedDate":"2021-03-17"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"    ReadOnlyMeetingBook getMeetingBook();","lastModifiedDate":"2021-03-15"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if a meeting with the same identity as {@code meeting} exists in the address book.","lastModifiedDate":"2021-03-15"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"    boolean hasMeeting(Meeting meeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"     * Deletes the given meeting.","lastModifiedDate":"2021-03-15"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"     * The meeting must exist in the meeting book.","lastModifiedDate":"2021-03-15"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"    void deleteMeeting(Meeting target);","lastModifiedDate":"2021-03-15"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"     * Adds the given meeting.","lastModifiedDate":"2021-03-15"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"     * {@code meeting} must not already exist in the meeting book.","lastModifiedDate":"2021-03-15"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"    void addMeeting(Meeting meeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":"     * Replaces the given meeting {@code target} with {@code editedMeeting}.","lastModifiedDate":"2021-03-15"},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":"     * {@code target} must exist in the meeting book.","lastModifiedDate":"2021-03-15"},{"lineNumber":143,"author":{"gitId":"Maurice2n97"},"content":"     * The meeting identity of {@code editedMeeting} must not be the same as another existing","lastModifiedDate":"2021-03-16"},{"lineNumber":144,"author":{"gitId":"Maurice2n97"},"content":"     * meeting in the meeting book.","lastModifiedDate":"2021-03-16"},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"    void setMeeting(Meeting target, Meeting editedMeeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":147,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":148,"author":{"gitId":"hengyiqun"},"content":"    void updateMeeting(Meeting target, Meeting editedMeeting);","lastModifiedDate":"2021-03-28"},{"lineNumber":149,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":150,"author":{"gitId":"skinnychenpi"},"content":"    /** Returns an unmodifiable view of the filtered meeting list */","lastModifiedDate":"2021-03-15"},{"lineNumber":151,"author":{"gitId":"skinnychenpi"},"content":"    ObservableList\u003cMeeting\u003e getFilteredMeetingList();","lastModifiedDate":"2021-03-15"},{"lineNumber":152,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":153,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":154,"author":{"gitId":"skinnychenpi"},"content":"     * Updates the filter of the filtered meeting list to filter by the given {@code predicate}.","lastModifiedDate":"2021-03-15"},{"lineNumber":155,"author":{"gitId":"skinnychenpi"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-03-15"},{"lineNumber":156,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":"    void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":158,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":159,"author":{"gitId":"totoyoyo"},"content":"    void sortFilteredMeetingList(Comparator\u003cMeeting\u003e comparator);","lastModifiedDate":"2021-03-28"},{"lineNumber":160,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":161,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":162,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the internal meeting list of meeting book as an unmodifiable meeting list.","lastModifiedDate":"2021-03-30"},{"lineNumber":163,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":164,"author":{"gitId":"Maurice2n97"},"content":"    ObservableList\u003cMeeting\u003e getUnmodifiableMeetingList();","lastModifiedDate":"2021-03-30"},{"lineNumber":165,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":166,"author":{"gitId":"Maurice2n97"},"content":"        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Clashing Meetings  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-26"},{"lineNumber":167,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":168,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":169,"author":{"gitId":"Maurice2n97"},"content":"     * Checks if there is a clash in meeting times within the model.","lastModifiedDate":"2021-03-26"},{"lineNumber":170,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":171,"author":{"gitId":"Maurice2n97"},"content":"    public boolean clashes(Meeting toCheck);","lastModifiedDate":"2021-03-26"},{"lineNumber":172,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":173,"author":{"gitId":"hengyiqun"},"content":"    public boolean clashesExceptOne(Meeting meetingNotIncluded, Meeting toCheck);","lastModifiedDate":"2021-03-28"},{"lineNumber":174,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":175,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":176,"author":{"gitId":"Maurice2n97"},"content":"     * Gets a list of meetings from the model that overlap with this meeting.","lastModifiedDate":"2021-03-26"},{"lineNumber":177,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":178,"author":{"gitId":"Maurice2n97"},"content":"    public List\u003cMeeting\u003e getClashes(Meeting toCheck);","lastModifiedDate":"2021-03-26"},{"lineNumber":179,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":180,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":181,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the meeting ( if any ) scheduled  at this point in time in the model.","lastModifiedDate":"2021-03-26"},{"lineNumber":182,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":183,"author":{"gitId":"Maurice2n97"},"content":"    public Optional\u003cMeeting\u003e getMeetingAtInstant(LocalDateTime localDateTime);","lastModifiedDate":"2021-03-26"},{"lineNumber":184,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":185,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":186,"author":{"gitId":"skinnychenpi"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PersonMeetingConnection part of the meeting Model interface \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d //","lastModifiedDate":"2021-03-25"},{"lineNumber":187,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":188,"author":{"gitId":"skinnychenpi"},"content":"     * Replaces person meeting connection data with the data in {@code PersonMeetingConnection}.","lastModifiedDate":"2021-03-25"},{"lineNumber":189,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":190,"author":{"gitId":"skinnychenpi"},"content":"    void setPersonMeetingConnection(PersonMeetingConnection connection);","lastModifiedDate":"2021-03-25"},{"lineNumber":191,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":192,"author":{"gitId":"skinnychenpi"},"content":"    /** Returns the connection */","lastModifiedDate":"2021-03-25"},{"lineNumber":193,"author":{"gitId":"skinnychenpi"},"content":"    PersonMeetingConnection getPersonMeetingConnection();","lastModifiedDate":"2021-03-25"},{"lineNumber":194,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":195,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":196,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if a given person and a given meeting exist a connection.","lastModifiedDate":"2021-03-25"},{"lineNumber":197,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":198,"author":{"gitId":"skinnychenpi"},"content":"    boolean hasPersonMeetingConnection(Person person, Meeting meeting);","lastModifiedDate":"2021-03-25"},{"lineNumber":199,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":200,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":201,"author":{"gitId":"skinnychenpi"},"content":"     * Adds a connection between a person and a meeting.","lastModifiedDate":"2021-03-25"},{"lineNumber":202,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":203,"author":{"gitId":"skinnychenpi"},"content":"    void addPersonMeetingConnection(Person person, Meeting meeting);","lastModifiedDate":"2021-03-25"},{"lineNumber":204,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":205,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":206,"author":{"gitId":"skinnychenpi"},"content":"     * This method delete a single connection between a meeting and a person.","lastModifiedDate":"2021-03-25"},{"lineNumber":207,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":208,"author":{"gitId":"skinnychenpi"},"content":"    void deleteSinglePersonMeetingConnection(Person person, Meeting meeting);","lastModifiedDate":"2021-03-25"},{"lineNumber":209,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":210,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":211,"author":{"gitId":"skinnychenpi"},"content":"     * This method delete a all connections related to a given person.","lastModifiedDate":"2021-03-25"},{"lineNumber":212,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":213,"author":{"gitId":"skinnychenpi"},"content":"    void deleteAllPersonMeetingConnectionByPerson(Person person);","lastModifiedDate":"2021-03-25"},{"lineNumber":214,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":215,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":216,"author":{"gitId":"skinnychenpi"},"content":"     * This method delete a all connections related to a given meeting.","lastModifiedDate":"2021-03-25"},{"lineNumber":217,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":218,"author":{"gitId":"skinnychenpi"},"content":"    void deleteAllPersonMeetingConnectionByMeeting(Meeting meeting);","lastModifiedDate":"2021-03-25"},{"lineNumber":219,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":220,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":221,"author":{"gitId":"skinnychenpi"},"content":"     * Returns a Observable meeting list object with the person as the key.","lastModifiedDate":"2021-03-25"},{"lineNumber":222,"author":{"gitId":"skinnychenpi"},"content":"     * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-03-25"},{"lineNumber":223,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":224,"author":{"gitId":"skinnychenpi"},"content":"    ObservableList\u003cMeeting\u003e getFilteredMeetingListByPersonConnection(Person person);","lastModifiedDate":"2021-03-25"},{"lineNumber":225,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":226,"author":{"gitId":"skinnychenpi"},"content":"     * Returns a Observable person list object with the meeting as the key.","lastModifiedDate":"2021-03-25"},{"lineNumber":227,"author":{"gitId":"skinnychenpi"},"content":"     * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-03-25"},{"lineNumber":228,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":229,"author":{"gitId":"skinnychenpi"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonListByMeetingConnection(Meeting meeting);","lastModifiedDate":"2021-03-25"},{"lineNumber":230,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-07"},{"lineNumber":231,"author":{"gitId":"skinnychenpi"},"content":"     * Returns a Unique meeting list object with the person as the key.","lastModifiedDate":"2021-04-07"},{"lineNumber":232,"author":{"gitId":"skinnychenpi"},"content":"     * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-04-07"},{"lineNumber":233,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-07"},{"lineNumber":234,"author":{"gitId":"skinnychenpi"},"content":"    UniqueMeetingList getUniqueMeetingListByPersonConnection(Person person);","lastModifiedDate":"2021-04-07"},{"lineNumber":235,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-07"},{"lineNumber":236,"author":{"gitId":"skinnychenpi"},"content":"     * Returns a Unique person list object with the meeting as the key.","lastModifiedDate":"2021-04-07"},{"lineNumber":237,"author":{"gitId":"skinnychenpi"},"content":"     * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-04-07"},{"lineNumber":238,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-07"},{"lineNumber":239,"author":{"gitId":"skinnychenpi"},"content":"    UniquePersonList getUniquePersonListByMeetingConnection(Meeting meeting);","lastModifiedDate":"2021-04-07"},{"lineNumber":240,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":241,"author":{"gitId":"hengyiqun"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Note part of the note Model interface \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d //","lastModifiedDate":"2021-03-31"},{"lineNumber":242,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":243,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":244,"author":{"gitId":"hengyiqun"},"content":"     * Replaces note book data with the data in {@code noteBook}.","lastModifiedDate":"2021-03-31"},{"lineNumber":245,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":246,"author":{"gitId":"hengyiqun"},"content":"    void setNoteBook(ReadOnlyNoteBook noteBook);","lastModifiedDate":"2021-03-31"},{"lineNumber":247,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":248,"author":{"gitId":"hengyiqun"},"content":"    /** Returns the NoteBook */","lastModifiedDate":"2021-03-31"},{"lineNumber":249,"author":{"gitId":"hengyiqun"},"content":"    ReadOnlyNoteBook getNoteBook();","lastModifiedDate":"2021-03-31"},{"lineNumber":250,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":251,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":252,"author":{"gitId":"hengyiqun"},"content":"     * Returns true if a note with the same content as {@code note} exists in the note book.","lastModifiedDate":"2021-03-31"},{"lineNumber":253,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":254,"author":{"gitId":"hengyiqun"},"content":"    boolean hasNote(Note note);","lastModifiedDate":"2021-03-31"},{"lineNumber":255,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":256,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":257,"author":{"gitId":"hengyiqun"},"content":"     * Deletes the given note.","lastModifiedDate":"2021-03-31"},{"lineNumber":258,"author":{"gitId":"hengyiqun"},"content":"     * The note must exist in the note book.","lastModifiedDate":"2021-03-31"},{"lineNumber":259,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":260,"author":{"gitId":"hengyiqun"},"content":"    void deleteNote(Note target);","lastModifiedDate":"2021-03-31"},{"lineNumber":261,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":262,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":263,"author":{"gitId":"hengyiqun"},"content":"     * Adds the given note.","lastModifiedDate":"2021-03-31"},{"lineNumber":264,"author":{"gitId":"hengyiqun"},"content":"     * {@code note} must not already exist in the note book.","lastModifiedDate":"2021-03-31"},{"lineNumber":265,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":266,"author":{"gitId":"hengyiqun"},"content":"    void addNote(Note note);","lastModifiedDate":"2021-03-31"},{"lineNumber":267,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":268,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":269,"author":{"gitId":"hengyiqun"},"content":"     * Replaces the given note {@code target} with {@code editedNote}.","lastModifiedDate":"2021-03-31"},{"lineNumber":270,"author":{"gitId":"hengyiqun"},"content":"     * {@code target} must exist in the note book.","lastModifiedDate":"2021-03-31"},{"lineNumber":271,"author":{"gitId":"hengyiqun"},"content":"     * The content of {@code editedNote} must not be the same as another existing note in the note book.","lastModifiedDate":"2021-03-31"},{"lineNumber":272,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":273,"author":{"gitId":"hengyiqun"},"content":"    void setNote(Note target, Note editedNote);","lastModifiedDate":"2021-03-31"},{"lineNumber":274,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":275,"author":{"gitId":"hengyiqun"},"content":"    /** Returns an unmodifiable view of the filtered note list */","lastModifiedDate":"2021-03-31"},{"lineNumber":276,"author":{"gitId":"hengyiqun"},"content":"    ObservableList\u003cNote\u003e getFilteredNoteList();","lastModifiedDate":"2021-03-31"},{"lineNumber":277,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":278,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":279,"author":{"gitId":"hengyiqun"},"content":"     * Updates the filter of the filtered note list to filter by the given {@code predicate}.","lastModifiedDate":"2021-03-31"},{"lineNumber":280,"author":{"gitId":"hengyiqun"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-03-31"},{"lineNumber":281,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":282,"author":{"gitId":"hengyiqun"},"content":"    void updateFilteredNoteList(Predicate\u003cNote\u003e predicate);","lastModifiedDate":"2021-03-31"},{"lineNumber":283,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":284,"author":{"gitId":"hengyiqun"},"content":"    Path getNoteBookFilePath();","lastModifiedDate":"2021-04-01"},{"lineNumber":285,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":286,"author":{"gitId":"hengyiqun"},"content":"    void setNoteBookFilePath(Path noteBookFilePath);","lastModifiedDate":"2021-04-01"},{"lineNumber":287,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":288,"author":{"gitId":"Maurice2n97"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Timetable settings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":289,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":290,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":291,"author":{"gitId":"Maurice2n97"},"content":"     * sets the timetable start date.","lastModifiedDate":"2021-03-30"},{"lineNumber":292,"author":{"gitId":"Maurice2n97"},"content":"     * @param localDate","lastModifiedDate":"2021-03-30"},{"lineNumber":293,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":294,"author":{"gitId":"Maurice2n97"},"content":"    public void setTimetableStartDate(LocalDate localDate);","lastModifiedDate":"2021-03-30"},{"lineNumber":295,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":296,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":297,"author":{"gitId":"Maurice2n97"},"content":"     * Get a read-only observable for the timetable start date.","lastModifiedDate":"2021-03-30"},{"lineNumber":298,"author":{"gitId":"Maurice2n97"},"content":"     * @return the observable value of the start date.","lastModifiedDate":"2021-03-30"},{"lineNumber":299,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":300,"author":{"gitId":"Maurice2n97"},"content":"    public ObservableValue\u003cLocalDate\u003e getReadOnlyTimetableStartDate();","lastModifiedDate":"2021-03-30"},{"lineNumber":301,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":302,"author":{"gitId":"totoyoyo"},"content":"    // ------ Reminders ------","lastModifiedDate":"2021-03-27"},{"lineNumber":303,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":304,"author":{"gitId":"totoyoyo"},"content":"    ReadOnlyReminderBook getReminderBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":305,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":306,"author":{"gitId":"totoyoyo"},"content":"    void refreshReminderBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":307,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":308,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":309,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"totoyoyo":12,"Maurice2n97":42,"skinnychenpi":114,"hengyiqun":56,"-":85}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import javafx.beans.value.ObservableValue;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"import javafx.collections.transformation.SortedList;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.connection.PersonMeetingConnection;","lastModifiedDate":"2021-03-25"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.UniqueMeetingList;","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Note;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.NoteBook;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.ReadOnlyNoteBook;","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2021-03-25"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.reminder.ReadOnlyReminderBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.reminder.ReminderBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.schedule.TimetablePrefs;","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-04-07"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Optional;","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-07"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-07"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-04-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"totoyoyo"},"content":"    private final SortedList\u003cPerson\u003e sortedBeforeFilterPersons;","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    // TODO: Modify the signature of ModelManager so that we c","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"    //  an add meetings inside it.","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"    private final MeetingBook meetingBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"totoyoyo"},"content":"    private final SortedList\u003cMeeting\u003e sortedBeforeFilterMeetings;","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"    private final FilteredList\u003cMeeting\u003e filteredMeetings;","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"    // TODO: Modify the signature of ModelManager so that we can add connection inside it.","lastModifiedDate":"2021-03-25"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    private final PersonMeetingConnection connection;","lastModifiedDate":"2021-03-25"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":59,"author":{"gitId":"totoyoyo"},"content":"    private final ReminderBook reminderBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Note \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"hengyiqun"},"content":"    private final NoteBook noteBook;","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"    private final FilteredList\u003cNote\u003e filteredNotes;","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Timetable \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"    private final TimetablePrefs timetablePrefs;","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs. MeetingBook will be set to default.","lastModifiedDate":"2021-03-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"        this.meetingBook \u003d new MeetingBook();","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"totoyoyo"},"content":"        this.sortedBeforeFilterMeetings \u003d new SortedList\u003c\u003e(this.meetingBook.getMeetingList());","lastModifiedDate":"2021-03-28"},{"lineNumber":79,"author":{"gitId":"totoyoyo"},"content":"        this.filteredMeetings \u003d new FilteredList\u003cMeeting\u003e(sortedBeforeFilterMeetings);","lastModifiedDate":"2021-03-28"},{"lineNumber":80,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2021-03-17"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2021-03-17"},{"lineNumber":83,"author":{"gitId":"totoyoyo"},"content":"        this.sortedBeforeFilterPersons \u003d new SortedList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2021-03-28"},{"lineNumber":84,"author":{"gitId":"totoyoyo"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(sortedBeforeFilterPersons);","lastModifiedDate":"2021-03-28"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"        // TODO: Modify the signature of ModelManager so that we can add connection inside it.","lastModifiedDate":"2021-03-25"},{"lineNumber":86,"author":{"gitId":"hengyiqun"},"content":"        this.reminderBook \u003d new ReminderBook(this.meetingBook);","lastModifiedDate":"2021-04-09"},{"lineNumber":87,"author":{"gitId":"hengyiqun"},"content":"        this.connection \u003d new PersonMeetingConnection();","lastModifiedDate":"2021-04-09"},{"lineNumber":88,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":89,"author":{"gitId":"hengyiqun"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Timetable \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-09"},{"lineNumber":90,"author":{"gitId":"hengyiqun"},"content":"        this.noteBook \u003d new NoteBook();","lastModifiedDate":"2021-04-09"},{"lineNumber":91,"author":{"gitId":"hengyiqun"},"content":"        this.filteredNotes \u003d new FilteredList\u003c\u003e(this.noteBook.getNoteList());","lastModifiedDate":"2021-04-09"},{"lineNumber":92,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":93,"author":{"gitId":"hengyiqun"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Timetable \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-09"},{"lineNumber":94,"author":{"gitId":"hengyiqun"},"content":"        //default initializes to current localdate","lastModifiedDate":"2021-04-09"},{"lineNumber":95,"author":{"gitId":"hengyiqun"},"content":"        timetablePrefs \u003d new TimetablePrefs(LocalDate.now());","lastModifiedDate":"2021-04-09"},{"lineNumber":96,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":97,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":98,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":99,"author":{"gitId":"hengyiqun"},"content":"     * Initializes a ModelManager with the given meetingBook and userPrefs. AddressBook will be set to default.","lastModifiedDate":"2021-04-09"},{"lineNumber":100,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":101,"author":{"gitId":"hengyiqun"},"content":"    public ModelManager(ReadOnlyMeetingBook meetingBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-04-09"},{"lineNumber":102,"author":{"gitId":"hengyiqun"},"content":"        super();","lastModifiedDate":"2021-04-09"},{"lineNumber":103,"author":{"gitId":"hengyiqun"},"content":"        requireAllNonNull(meetingBook, userPrefs);","lastModifiedDate":"2021-04-09"},{"lineNumber":104,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":105,"author":{"gitId":"hengyiqun"},"content":"        logger.fine(\"Initializing with meeting book: \" + meetingBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2021-04-09"},{"lineNumber":106,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":107,"author":{"gitId":"hengyiqun"},"content":"        this.addressBook \u003d new AddressBook();","lastModifiedDate":"2021-04-09"},{"lineNumber":108,"author":{"gitId":"hengyiqun"},"content":"        this.sortedBeforeFilterPersons \u003d new SortedList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2021-04-09"},{"lineNumber":109,"author":{"gitId":"hengyiqun"},"content":"        this.filteredPersons \u003d new FilteredList\u003cPerson\u003e(sortedBeforeFilterPersons);","lastModifiedDate":"2021-04-09"},{"lineNumber":110,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":111,"author":{"gitId":"hengyiqun"},"content":"        this.meetingBook \u003d new MeetingBook(meetingBook);","lastModifiedDate":"2021-04-09"},{"lineNumber":112,"author":{"gitId":"hengyiqun"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2021-04-09"},{"lineNumber":113,"author":{"gitId":"hengyiqun"},"content":"        this.sortedBeforeFilterMeetings \u003d new SortedList\u003c\u003e(this.meetingBook.getMeetingList());","lastModifiedDate":"2021-04-09"},{"lineNumber":114,"author":{"gitId":"hengyiqun"},"content":"        filteredMeetings \u003d new FilteredList\u003c\u003e(sortedBeforeFilterMeetings);","lastModifiedDate":"2021-04-09"},{"lineNumber":115,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":116,"author":{"gitId":"hengyiqun"},"content":"        // TODO: Modify the signature of ModelManager so that we can add connection inside it.","lastModifiedDate":"2021-04-09"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"        this.connection \u003d new PersonMeetingConnection();","lastModifiedDate":"2021-03-25"},{"lineNumber":118,"author":{"gitId":"totoyoyo"},"content":"        this.reminderBook \u003d new ReminderBook(this.meetingBook);","lastModifiedDate":"2021-03-27"},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":120,"author":{"gitId":"hengyiqun"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Timetable \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-31"},{"lineNumber":121,"author":{"gitId":"hengyiqun"},"content":"        this.noteBook \u003d new NoteBook();","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"hengyiqun"},"content":"        this.filteredNotes \u003d new FilteredList\u003c\u003e(this.noteBook.getNoteList());","lastModifiedDate":"2021-03-31"},{"lineNumber":123,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Timetable \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"        //default initializes to current localdate","lastModifiedDate":"2021-03-30"},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"        timetablePrefs \u003d new TimetablePrefs(LocalDate.now());","lastModifiedDate":"2021-03-30"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":130,"author":{"gitId":"hengyiqun"},"content":"     * Initializes a ModelManager with the given addressBook, meetingBook and userPrefs","lastModifiedDate":"2021-04-09"},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":132,"author":{"gitId":"Maurice2n97"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyMeetingBook meetingBook,","lastModifiedDate":"2021-03-17"},{"lineNumber":133,"author":{"gitId":"hengyiqun"},"content":"                        ReadOnlyNoteBook noteBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-03-31"},{"lineNumber":134,"author":{"gitId":"Maurice2n97"},"content":"        super();","lastModifiedDate":"2021-03-17"},{"lineNumber":135,"author":{"gitId":"Maurice2n97"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2021-03-17"},{"lineNumber":136,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":137,"author":{"gitId":"Maurice2n97"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2021-03-17"},{"lineNumber":138,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":139,"author":{"gitId":"Maurice2n97"},"content":"        this.meetingBook \u003d new MeetingBook(meetingBook);","lastModifiedDate":"2021-03-17"},{"lineNumber":140,"author":{"gitId":"totoyoyo"},"content":"        this.sortedBeforeFilterMeetings \u003d new SortedList\u003c\u003e(this.meetingBook.getMeetingList());","lastModifiedDate":"2021-03-28"},{"lineNumber":141,"author":{"gitId":"totoyoyo"},"content":"        this.filteredMeetings \u003d new FilteredList\u003c\u003e(sortedBeforeFilterMeetings);","lastModifiedDate":"2021-04-07"},{"lineNumber":142,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":145,"author":{"gitId":"totoyoyo"},"content":"        this.sortedBeforeFilterPersons \u003d new SortedList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2021-03-28"},{"lineNumber":146,"author":{"gitId":"totoyoyo"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(sortedBeforeFilterPersons);","lastModifiedDate":"2021-03-28"},{"lineNumber":147,"author":{"gitId":"skinnychenpi"},"content":"        // TODO: Modify the signature of ModelManager so that we can add connection inside it.","lastModifiedDate":"2021-03-25"},{"lineNumber":148,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":149,"author":{"gitId":"Maurice2n97"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Set Connection \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-09"},{"lineNumber":150,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":151,"author":{"gitId":"skinnychenpi"},"content":"        this.connection \u003d new PersonMeetingConnection();","lastModifiedDate":"2021-03-25"},{"lineNumber":152,"author":{"gitId":"Maurice2n97"},"content":"        this.meetingBook.setPersonToMeetingConnections(connection);","lastModifiedDate":"2021-04-09"},{"lineNumber":153,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":154,"author":{"gitId":"hengyiqun"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Note \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-31"},{"lineNumber":155,"author":{"gitId":"hengyiqun"},"content":"        this.noteBook \u003d new NoteBook();","lastModifiedDate":"2021-03-31"},{"lineNumber":156,"author":{"gitId":"hengyiqun"},"content":"        this.filteredNotes \u003d new FilteredList\u003c\u003e(this.noteBook.getNoteList());","lastModifiedDate":"2021-03-31"},{"lineNumber":157,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":158,"author":{"gitId":"Maurice2n97"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Timetable \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":159,"author":{"gitId":"Maurice2n97"},"content":"        //default initializes to current localdate","lastModifiedDate":"2021-03-30"},{"lineNumber":160,"author":{"gitId":"Maurice2n97"},"content":"        timetablePrefs \u003d new TimetablePrefs(LocalDate.now());","lastModifiedDate":"2021-03-30"},{"lineNumber":161,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":162,"author":{"gitId":"hengyiqun"},"content":"        this.reminderBook \u003d new ReminderBook(this.meetingBook);","lastModifiedDate":"2021-04-09"},{"lineNumber":163,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":164,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":165,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":166,"author":{"gitId":"skinnychenpi"},"content":"     * Initializes a ModelManager with the given addressBook, meetingBook, userPrefs and PersonMeetingConnection","lastModifiedDate":"2021-03-25"},{"lineNumber":167,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":168,"author":{"gitId":"skinnychenpi"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyMeetingBook meetingBook,","lastModifiedDate":"2021-03-25"},{"lineNumber":169,"author":{"gitId":"hengyiqun"},"content":"                        ReadOnlyNoteBook noteBook, ReadOnlyUserPrefs userPrefs,","lastModifiedDate":"2021-03-31"},{"lineNumber":170,"author":{"gitId":"hengyiqun"},"content":"                        PersonMeetingConnection connection) {","lastModifiedDate":"2021-03-31"},{"lineNumber":171,"author":{"gitId":"skinnychenpi"},"content":"        super();","lastModifiedDate":"2021-03-25"},{"lineNumber":172,"author":{"gitId":"skinnychenpi"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2021-03-25"},{"lineNumber":173,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":174,"author":{"gitId":"skinnychenpi"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2021-03-25"},{"lineNumber":175,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":176,"author":{"gitId":"skinnychenpi"},"content":"        this.meetingBook \u003d new MeetingBook(meetingBook);","lastModifiedDate":"2021-03-25"},{"lineNumber":177,"author":{"gitId":"totoyoyo"},"content":"        this.sortedBeforeFilterMeetings \u003d new SortedList\u003c\u003e(this.meetingBook.getMeetingList());","lastModifiedDate":"2021-03-28"},{"lineNumber":178,"author":{"gitId":"totoyoyo"},"content":"        this.filteredMeetings \u003d new FilteredList\u003cMeeting\u003e(sortedBeforeFilterMeetings);","lastModifiedDate":"2021-03-28"},{"lineNumber":179,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2021-03-25"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2021-03-25"},{"lineNumber":182,"author":{"gitId":"totoyoyo"},"content":"        this.sortedBeforeFilterPersons \u003d new SortedList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2021-03-28"},{"lineNumber":183,"author":{"gitId":"totoyoyo"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(sortedBeforeFilterPersons);","lastModifiedDate":"2021-03-28"},{"lineNumber":184,"author":{"gitId":"skinnychenpi"},"content":"        // TODO: Modify the signature of ModelManager so that we can add connection inside it.","lastModifiedDate":"2021-03-25"},{"lineNumber":185,"author":{"gitId":"totoyoyo"},"content":"        this.reminderBook \u003d new ReminderBook(this.meetingBook);","lastModifiedDate":"2021-03-27"},{"lineNumber":186,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":187,"author":{"gitId":"Maurice2n97"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Set Connection \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-09"},{"lineNumber":188,"author":{"gitId":"Maurice2n97"},"content":"        this.connection \u003d connection;","lastModifiedDate":"2021-04-09"},{"lineNumber":189,"author":{"gitId":"Maurice2n97"},"content":"        this.meetingBook.setPersonToMeetingConnections(connection);","lastModifiedDate":"2021-04-09"},{"lineNumber":190,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":191,"author":{"gitId":"hengyiqun"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Note \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-31"},{"lineNumber":192,"author":{"gitId":"hengyiqun"},"content":"        this.noteBook \u003d new NoteBook(noteBook);","lastModifiedDate":"2021-03-31"},{"lineNumber":193,"author":{"gitId":"hengyiqun"},"content":"        this.filteredNotes \u003d new FilteredList\u003c\u003e(this.noteBook.getNoteList());","lastModifiedDate":"2021-03-31"},{"lineNumber":194,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":195,"author":{"gitId":"Maurice2n97"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Timetable \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":196,"author":{"gitId":"Maurice2n97"},"content":"        //default initializes to current localdate","lastModifiedDate":"2021-03-30"},{"lineNumber":197,"author":{"gitId":"Maurice2n97"},"content":"        timetablePrefs \u003d new TimetablePrefs(LocalDate.now());","lastModifiedDate":"2021-03-30"},{"lineNumber":198,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":203,"author":{"gitId":"Maurice2n97"},"content":"        this(new AddressBook(), new MeetingBook(), new NoteBook(), new UserPrefs(), new PersonMeetingConnection());","lastModifiedDate":"2021-04-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":276,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":277,"author":{"gitId":"hengyiqun"},"content":"    public Set\u003cPerson\u003e findPersonsInGroup(Group group) {","lastModifiedDate":"2021-03-30"},{"lineNumber":278,"author":{"gitId":"hengyiqun"},"content":"        return addressBook.findPersonsInGroup(group);","lastModifiedDate":"2021-03-30"},{"lineNumber":279,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":280,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":281,"author":{"gitId":"skinnychenpi"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MeetingBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":282,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":283,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":284,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetingBook(ReadOnlyMeetingBook meetingBook) {","lastModifiedDate":"2021-03-15"},{"lineNumber":285,"author":{"gitId":"skinnychenpi"},"content":"        this.meetingBook.resetData(meetingBook);","lastModifiedDate":"2021-03-15"},{"lineNumber":286,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":287,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":288,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":289,"author":{"gitId":"skinnychenpi"},"content":"    public ReadOnlyMeetingBook getMeetingBook() {","lastModifiedDate":"2021-03-15"},{"lineNumber":290,"author":{"gitId":"skinnychenpi"},"content":"        return meetingBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":291,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":292,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":293,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":294,"author":{"gitId":"skinnychenpi"},"content":"    public boolean hasMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-15"},{"lineNumber":295,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(meeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":296,"author":{"gitId":"skinnychenpi"},"content":"        return meetingBook.hasMeeting(meeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":297,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":298,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":299,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":300,"author":{"gitId":"skinnychenpi"},"content":"    public void deleteMeeting(Meeting target) {","lastModifiedDate":"2021-03-15"},{"lineNumber":301,"author":{"gitId":"skinnychenpi"},"content":"        meetingBook.removeMeeting(target);","lastModifiedDate":"2021-03-15"},{"lineNumber":302,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":303,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":304,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":305,"author":{"gitId":"skinnychenpi"},"content":"    public void addMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-15"},{"lineNumber":306,"author":{"gitId":"skinnychenpi"},"content":"        meetingBook.addMeeting(meeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":307,"author":{"gitId":"skinnychenpi"},"content":"        updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);","lastModifiedDate":"2021-03-15"},{"lineNumber":308,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":309,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":310,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":311,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting(Meeting target, Meeting editedMeeting) {","lastModifiedDate":"2021-03-15"},{"lineNumber":312,"author":{"gitId":"skinnychenpi"},"content":"        requireAllNonNull(target, editedMeeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":313,"author":{"gitId":"skinnychenpi"},"content":"        meetingBook.setMeeting(target, editedMeeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":314,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":315,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":316,"author":{"gitId":"hengyiqun"},"content":"    public void updateMeeting(Meeting target, Meeting editedMeeting) {","lastModifiedDate":"2021-03-28"},{"lineNumber":317,"author":{"gitId":"hengyiqun"},"content":"        requireAllNonNull(target, editedMeeting);","lastModifiedDate":"2021-03-28"},{"lineNumber":318,"author":{"gitId":"hengyiqun"},"content":"        meetingBook.updateMeeting(target, editedMeeting);","lastModifiedDate":"2021-03-28"},{"lineNumber":319,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":320,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":321,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":322,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the unmodifiable list of all meetings","lastModifiedDate":"2021-03-30"},{"lineNumber":323,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":324,"author":{"gitId":"Maurice2n97"},"content":"    public ObservableList\u003cMeeting\u003e getUnmodifiableMeetingList() {","lastModifiedDate":"2021-03-30"},{"lineNumber":325,"author":{"gitId":"Maurice2n97"},"content":"        return this.meetingBook.getMeetingList();","lastModifiedDate":"2021-03-30"},{"lineNumber":326,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":327,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":328,"author":{"gitId":"Maurice2n97"},"content":"    //TODO: Set MeetingBook file path in userPrefs? low priority feature(nice to have)","lastModifiedDate":"2021-03-18"},{"lineNumber":329,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":330,"author":{"gitId":"Maurice2n97"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Clashing Meetings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-26"},{"lineNumber":331,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":332,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":333,"author":{"gitId":"Maurice2n97"},"content":"     * Checks if there is a clash in meeting times within the model.","lastModifiedDate":"2021-03-26"},{"lineNumber":334,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":335,"author":{"gitId":"Maurice2n97"},"content":"    public boolean clashes(Meeting toCheck) {","lastModifiedDate":"2021-03-26"},{"lineNumber":336,"author":{"gitId":"Maurice2n97"},"content":"        return meetingBook.clashes(toCheck);","lastModifiedDate":"2021-03-26"},{"lineNumber":337,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":338,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":339,"author":{"gitId":"hengyiqun"},"content":"    public boolean clashesExceptOne(Meeting meetingNotIncluded, Meeting toCheck) {","lastModifiedDate":"2021-03-28"},{"lineNumber":340,"author":{"gitId":"hengyiqun"},"content":"        return meetingBook.clashesExceptOne(meetingNotIncluded, toCheck);","lastModifiedDate":"2021-03-28"},{"lineNumber":341,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":342,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":343,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":344,"author":{"gitId":"Maurice2n97"},"content":"     * Gets a list of meetings from the model that overlap with this meeting.","lastModifiedDate":"2021-03-26"},{"lineNumber":345,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":346,"author":{"gitId":"Maurice2n97"},"content":"    public List\u003cMeeting\u003e getClashes(Meeting toCheck) {","lastModifiedDate":"2021-03-26"},{"lineNumber":347,"author":{"gitId":"Maurice2n97"},"content":"        return meetingBook.getClashes(toCheck);","lastModifiedDate":"2021-03-26"},{"lineNumber":348,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":349,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":350,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":351,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the meeting ( if any ) scheduled  at this point in time in the model.","lastModifiedDate":"2021-03-26"},{"lineNumber":352,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":353,"author":{"gitId":"Maurice2n97"},"content":"    public Optional\u003cMeeting\u003e getMeetingAtInstant(LocalDateTime localDateTime) {","lastModifiedDate":"2021-03-26"},{"lineNumber":354,"author":{"gitId":"Maurice2n97"},"content":"        return meetingBook.getMeetingAtInstant(localDateTime);","lastModifiedDate":"2021-03-26"},{"lineNumber":355,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":356,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":357,"author":{"gitId":"skinnychenpi"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PersonMeetingConnection \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":358,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":359,"author":{"gitId":"skinnychenpi"},"content":"     * Replaces person meeting connection data with the data in {@code PersonMeetingConnection}.","lastModifiedDate":"2021-03-25"},{"lineNumber":360,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":361,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":362,"author":{"gitId":"skinnychenpi"},"content":"    public void setPersonMeetingConnection(PersonMeetingConnection connection) {","lastModifiedDate":"2021-03-25"},{"lineNumber":363,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(connection);","lastModifiedDate":"2021-03-25"},{"lineNumber":364,"author":{"gitId":"skinnychenpi"},"content":"        this.connection.resetData(connection);","lastModifiedDate":"2021-03-25"},{"lineNumber":365,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":366,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":367,"author":{"gitId":"skinnychenpi"},"content":"    /** Returns the connection */","lastModifiedDate":"2021-03-25"},{"lineNumber":368,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":369,"author":{"gitId":"skinnychenpi"},"content":"    public PersonMeetingConnection getPersonMeetingConnection() {","lastModifiedDate":"2021-03-25"},{"lineNumber":370,"author":{"gitId":"skinnychenpi"},"content":"        return connection;","lastModifiedDate":"2021-03-25"},{"lineNumber":371,"author":{"gitId":"skinnychenpi"},"content":"    };","lastModifiedDate":"2021-03-25"},{"lineNumber":372,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":373,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":374,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if a given person and a given meeting exist a connection.","lastModifiedDate":"2021-03-25"},{"lineNumber":375,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":376,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":377,"author":{"gitId":"skinnychenpi"},"content":"    public boolean hasPersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-03-25"},{"lineNumber":378,"author":{"gitId":"skinnychenpi"},"content":"        return connection.existPersonMeetingConnection(person, meeting);","lastModifiedDate":"2021-03-25"},{"lineNumber":379,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":380,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":381,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":382,"author":{"gitId":"skinnychenpi"},"content":"     * Adds a connection between a person and a meeting.","lastModifiedDate":"2021-03-25"},{"lineNumber":383,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":384,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":385,"author":{"gitId":"skinnychenpi"},"content":"    public void addPersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-03-25"},{"lineNumber":386,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(person, meeting);","lastModifiedDate":"2021-03-25"},{"lineNumber":387,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":388,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":389,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":390,"author":{"gitId":"skinnychenpi"},"content":"     * This method delete a single connection between a meeting and a person.","lastModifiedDate":"2021-03-25"},{"lineNumber":391,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":392,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":393,"author":{"gitId":"skinnychenpi"},"content":"    public void deleteSinglePersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-03-25"},{"lineNumber":394,"author":{"gitId":"skinnychenpi"},"content":"        connection.deleteSinglePersonMeetingConnection(person, meeting);","lastModifiedDate":"2021-03-25"},{"lineNumber":395,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":396,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":397,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":398,"author":{"gitId":"skinnychenpi"},"content":"     * This method delete a all connections related to a given person.","lastModifiedDate":"2021-03-25"},{"lineNumber":399,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":400,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":401,"author":{"gitId":"skinnychenpi"},"content":"    public void deleteAllPersonMeetingConnectionByPerson(Person person) {","lastModifiedDate":"2021-03-25"},{"lineNumber":402,"author":{"gitId":"skinnychenpi"},"content":"        connection.deleteAllPersonMeetingConnectionByPerson(person);","lastModifiedDate":"2021-03-25"},{"lineNumber":403,"author":{"gitId":"skinnychenpi"},"content":"    };","lastModifiedDate":"2021-03-25"},{"lineNumber":404,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":405,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":406,"author":{"gitId":"skinnychenpi"},"content":"     * This method delete a all connections related to a given meeting.","lastModifiedDate":"2021-03-25"},{"lineNumber":407,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":408,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":409,"author":{"gitId":"skinnychenpi"},"content":"    public void deleteAllPersonMeetingConnectionByMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-25"},{"lineNumber":410,"author":{"gitId":"skinnychenpi"},"content":"        connection.deleteAllPersonMeetingConnectionByMeeting(meeting);","lastModifiedDate":"2021-03-25"},{"lineNumber":411,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":412,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":413,"author":{"gitId":"skinnychenpi"},"content":"    //TODO: This two methods below may need further change because I don\u0027t know how it works with GUI.(Yuheng)","lastModifiedDate":"2021-03-25"},{"lineNumber":414,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":415,"author":{"gitId":"skinnychenpi"},"content":"     * Returns a Observable meeting list object with the person as the key.","lastModifiedDate":"2021-03-25"},{"lineNumber":416,"author":{"gitId":"skinnychenpi"},"content":"     * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-03-25"},{"lineNumber":417,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":418,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-04-07"},{"lineNumber":419,"author":{"gitId":"skinnychenpi"},"content":"    public ObservableList\u003cMeeting\u003e getFilteredMeetingListByPersonConnection(Person person) {","lastModifiedDate":"2021-03-25"},{"lineNumber":420,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList meetings \u003d connection.getMeetingsByPerson(person);","lastModifiedDate":"2021-03-25"},{"lineNumber":421,"author":{"gitId":"skinnychenpi"},"content":"        assert meetings !\u003d null;","lastModifiedDate":"2021-03-25"},{"lineNumber":422,"author":{"gitId":"skinnychenpi"},"content":"        return meetings.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-25"},{"lineNumber":423,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":424,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":425,"author":{"gitId":"skinnychenpi"},"content":"     * Returns a Observable person list object with the meeting as the key.","lastModifiedDate":"2021-03-25"},{"lineNumber":426,"author":{"gitId":"skinnychenpi"},"content":"     * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-03-25"},{"lineNumber":427,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":428,"author":{"gitId":"skinnychenpi"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonListByMeetingConnection(Meeting meeting) {","lastModifiedDate":"2021-03-25"},{"lineNumber":429,"author":{"gitId":"skinnychenpi"},"content":"        UniquePersonList persons \u003d connection.getPersonsByMeeting(meeting);","lastModifiedDate":"2021-03-25"},{"lineNumber":430,"author":{"gitId":"skinnychenpi"},"content":"        assert persons !\u003d null;","lastModifiedDate":"2021-03-25"},{"lineNumber":431,"author":{"gitId":"skinnychenpi"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-25"},{"lineNumber":432,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":433,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-07"},{"lineNumber":434,"author":{"gitId":"skinnychenpi"},"content":"     * Returns a Unique meeting list object with the person as the key.","lastModifiedDate":"2021-04-07"},{"lineNumber":435,"author":{"gitId":"skinnychenpi"},"content":"     * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-04-07"},{"lineNumber":436,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-07"},{"lineNumber":437,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-04-07"},{"lineNumber":438,"author":{"gitId":"skinnychenpi"},"content":"    public UniqueMeetingList getUniqueMeetingListByPersonConnection(Person person) {","lastModifiedDate":"2021-04-07"},{"lineNumber":439,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList meetings \u003d connection.getMeetingsByPerson(person);","lastModifiedDate":"2021-04-07"},{"lineNumber":440,"author":{"gitId":"skinnychenpi"},"content":"        return meetings;","lastModifiedDate":"2021-04-07"},{"lineNumber":441,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":442,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-07"},{"lineNumber":443,"author":{"gitId":"skinnychenpi"},"content":"     * Returns a Unique person list object with the meeting as the key.","lastModifiedDate":"2021-04-07"},{"lineNumber":444,"author":{"gitId":"skinnychenpi"},"content":"     * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-04-07"},{"lineNumber":445,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-07"},{"lineNumber":446,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-04-07"},{"lineNumber":447,"author":{"gitId":"skinnychenpi"},"content":"    public UniquePersonList getUniquePersonListByMeetingConnection(Meeting meeting) {","lastModifiedDate":"2021-04-07"},{"lineNumber":448,"author":{"gitId":"skinnychenpi"},"content":"        UniquePersonList persons \u003d connection.getPersonsByMeeting(meeting);","lastModifiedDate":"2021-04-07"},{"lineNumber":449,"author":{"gitId":"skinnychenpi"},"content":"        return persons;","lastModifiedDate":"2021-04-07"},{"lineNumber":450,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":451,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":452,"author":{"gitId":"totoyoyo"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":453,"author":{"gitId":"totoyoyo"},"content":"    public ReadOnlyReminderBook getReminderBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":454,"author":{"gitId":"totoyoyo"},"content":"        return reminderBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":455,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":456,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":457,"author":{"gitId":"totoyoyo"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":458,"author":{"gitId":"totoyoyo"},"content":"    public void refreshReminderBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":459,"author":{"gitId":"totoyoyo"},"content":"        reminderBook.refreshRemindersFromMeetings(this.meetingBook);","lastModifiedDate":"2021-03-27"},{"lineNumber":460,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":461,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":462,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":463,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":464,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":465,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":466,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":467,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":468,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":469,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":470,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":471,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":472,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":473,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":474,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":475,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":476,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":477,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":478,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":479,"author":{"gitId":"totoyoyo"},"content":"    public void sortFilteredPersonList(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2021-03-28"},{"lineNumber":480,"author":{"gitId":"totoyoyo"},"content":"        sortedBeforeFilterPersons.setComparator(comparator);","lastModifiedDate":"2021-03-28"},{"lineNumber":481,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":482,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":483,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":484,"author":{"gitId":"skinnychenpi"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Meeting List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":485,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":486,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":487,"author":{"gitId":"skinnychenpi"},"content":"     * Returns an unmodifiable view of the list of {@code Meeting} backed by the internal list of","lastModifiedDate":"2021-03-15"},{"lineNumber":488,"author":{"gitId":"skinnychenpi"},"content":"     * {@code versionedMeetingBook}","lastModifiedDate":"2021-03-15"},{"lineNumber":489,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":490,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":491,"author":{"gitId":"skinnychenpi"},"content":"    public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":492,"author":{"gitId":"skinnychenpi"},"content":"        return filteredMeetings;","lastModifiedDate":"2021-03-15"},{"lineNumber":493,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":494,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":495,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":496,"author":{"gitId":"skinnychenpi"},"content":"    public void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate) {","lastModifiedDate":"2021-03-15"},{"lineNumber":497,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":498,"author":{"gitId":"skinnychenpi"},"content":"        filteredMeetings.setPredicate(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":499,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":500,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":501,"author":{"gitId":"totoyoyo"},"content":"    public void sortFilteredMeetingList(Comparator\u003cMeeting\u003e comparator) {","lastModifiedDate":"2021-03-28"},{"lineNumber":502,"author":{"gitId":"totoyoyo"},"content":"        sortedBeforeFilterMeetings.setComparator(comparator);","lastModifiedDate":"2021-03-28"},{"lineNumber":503,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":504,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":505,"author":{"gitId":"hengyiqun"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Note part of the note Model interface \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d //","lastModifiedDate":"2021-03-31"},{"lineNumber":506,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":507,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":508,"author":{"gitId":"hengyiqun"},"content":"    public void setNoteBook(ReadOnlyNoteBook noteBook) {","lastModifiedDate":"2021-03-31"},{"lineNumber":509,"author":{"gitId":"hengyiqun"},"content":"        this.noteBook.resetData(noteBook);","lastModifiedDate":"2021-03-31"},{"lineNumber":510,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":511,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":512,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":513,"author":{"gitId":"hengyiqun"},"content":"    public ReadOnlyNoteBook getNoteBook() {","lastModifiedDate":"2021-03-31"},{"lineNumber":514,"author":{"gitId":"hengyiqun"},"content":"        return noteBook;","lastModifiedDate":"2021-03-31"},{"lineNumber":515,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":516,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":517,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":518,"author":{"gitId":"hengyiqun"},"content":"    public boolean hasNote(Note note) {","lastModifiedDate":"2021-03-31"},{"lineNumber":519,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(note);","lastModifiedDate":"2021-03-31"},{"lineNumber":520,"author":{"gitId":"hengyiqun"},"content":"        return noteBook.hasNote(note);","lastModifiedDate":"2021-03-31"},{"lineNumber":521,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":522,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":523,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":524,"author":{"gitId":"hengyiqun"},"content":"    public void deleteNote(Note target) {","lastModifiedDate":"2021-03-31"},{"lineNumber":525,"author":{"gitId":"hengyiqun"},"content":"        noteBook.removeNote(target);","lastModifiedDate":"2021-03-31"},{"lineNumber":526,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":527,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":528,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":529,"author":{"gitId":"hengyiqun"},"content":"    public void addNote(Note note) {","lastModifiedDate":"2021-03-31"},{"lineNumber":530,"author":{"gitId":"hengyiqun"},"content":"        noteBook.addNote(note);","lastModifiedDate":"2021-03-31"},{"lineNumber":531,"author":{"gitId":"hengyiqun"},"content":"        updateFilteredNoteList(PREDICATE_SHOW_ALL_NOTES);","lastModifiedDate":"2021-03-31"},{"lineNumber":532,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":533,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":534,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":535,"author":{"gitId":"hengyiqun"},"content":"    public void setNote(Note target, Note editedNote) {","lastModifiedDate":"2021-03-31"},{"lineNumber":536,"author":{"gitId":"hengyiqun"},"content":"        requireAllNonNull(target, editedNote);","lastModifiedDate":"2021-03-31"},{"lineNumber":537,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":538,"author":{"gitId":"hengyiqun"},"content":"        noteBook.setNote(target, editedNote);","lastModifiedDate":"2021-03-31"},{"lineNumber":539,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":540,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":541,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":542,"author":{"gitId":"hengyiqun"},"content":"     * Returns an unmodifiable view of the list of {@code Note} backed by the internal list of","lastModifiedDate":"2021-03-31"},{"lineNumber":543,"author":{"gitId":"hengyiqun"},"content":"     * {@code versionedNoteBook}","lastModifiedDate":"2021-03-31"},{"lineNumber":544,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":545,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":546,"author":{"gitId":"hengyiqun"},"content":"    public ObservableList\u003cNote\u003e getFilteredNoteList() {","lastModifiedDate":"2021-03-31"},{"lineNumber":547,"author":{"gitId":"hengyiqun"},"content":"        return filteredNotes;","lastModifiedDate":"2021-03-31"},{"lineNumber":548,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":549,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":550,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":551,"author":{"gitId":"hengyiqun"},"content":"    public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {","lastModifiedDate":"2021-03-31"},{"lineNumber":552,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-03-31"},{"lineNumber":553,"author":{"gitId":"hengyiqun"},"content":"        filteredNotes.setPredicate(predicate);","lastModifiedDate":"2021-03-31"},{"lineNumber":554,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":555,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":556,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":557,"author":{"gitId":"hengyiqun"},"content":"    public Path getNoteBookFilePath() {","lastModifiedDate":"2021-04-01"},{"lineNumber":558,"author":{"gitId":"hengyiqun"},"content":"        return userPrefs.getNoteBookFilePath();","lastModifiedDate":"2021-04-01"},{"lineNumber":559,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":560,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":561,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":562,"author":{"gitId":"hengyiqun"},"content":"    public void setNoteBookFilePath(Path noteBookFilePath) {","lastModifiedDate":"2021-04-01"},{"lineNumber":563,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(noteBookFilePath);","lastModifiedDate":"2021-04-01"},{"lineNumber":564,"author":{"gitId":"hengyiqun"},"content":"        userPrefs.setAddressBookFilePath(noteBookFilePath);","lastModifiedDate":"2021-04-01"},{"lineNumber":565,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":566,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":567,"author":{"gitId":"Maurice2n97"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Get timetable prefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":568,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":569,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":570,"author":{"gitId":"Maurice2n97"},"content":"    public void setTimetableStartDate(LocalDate localDate) {","lastModifiedDate":"2021-03-30"},{"lineNumber":571,"author":{"gitId":"Maurice2n97"},"content":"        timetablePrefs.setTimetableStartDate(localDate);","lastModifiedDate":"2021-03-30"},{"lineNumber":572,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":573,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":574,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":575,"author":{"gitId":"Maurice2n97"},"content":"    public ObservableValue\u003cLocalDate\u003e getReadOnlyTimetableStartDate() {","lastModifiedDate":"2021-03-30"},{"lineNumber":576,"author":{"gitId":"Maurice2n97"},"content":"        return timetablePrefs.getReadOnlyStartDate();","lastModifiedDate":"2021-03-30"},{"lineNumber":577,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":578,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":579,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":580,"author":{"gitId":"skinnychenpi"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Other methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":581,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":582,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":583,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":584,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":585,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":586,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":587,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":588,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":589,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":590,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":591,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":592,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":593,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":594,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":595,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":596,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":597,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)","lastModifiedDate":"2021-03-15"},{"lineNumber":598,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 meetingBook.equals(other.meetingBook)","lastModifiedDate":"2021-03-15"},{"lineNumber":599,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 filteredMeetings.equals(other.filteredMeetings)","lastModifiedDate":"2021-03-31"},{"lineNumber":600,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 noteBook.equals(other.noteBook);","lastModifiedDate":"2021-03-31"},{"lineNumber":601,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":602,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":603,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"totoyoyo":44,"Maurice2n97":87,"skinnychenpi":193,"hengyiqun":137,"-":142}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    Path getMeetingBookFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    Path getConnectionsFilePath();","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"Maurice2n97":4,"-":16}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    private Path meetingBookFilePath \u003d Paths.get(\"data\", \"meetingbook.json\");","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"    private Path noteBookFilePath \u003d Paths.get(\"data\", \"notebook.json\");","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    private Path connectionsFilePath \u003d Paths.get(\"data\",  \"connections.json\");","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"    public Path getMeetingBookFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"        return meetingBookFilePath;","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"    public Path getNoteBookFilePath() {","lastModifiedDate":"2021-04-01"},{"lineNumber":62,"author":{"gitId":"hengyiqun"},"content":"        return noteBookFilePath;","lastModifiedDate":"2021-04-01"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":64,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"    public Path getConnectionsFilePath() {","lastModifiedDate":"2021-04-09"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"        return connectionsFilePath;","lastModifiedDate":"2021-04-09"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"    public void setMeetingBookFilePath(Path meetingBookFilePath) {","lastModifiedDate":"2021-03-17"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(meetingBookFilePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"        this.meetingBookFilePath \u003d meetingBookFilePath;","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"hengyiqun"},"content":"    public void setNoteBookFilePath(Path noteBookFilePath) {","lastModifiedDate":"2021-04-01"},{"lineNumber":81,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(noteBookFilePath);","lastModifiedDate":"2021-04-01"},{"lineNumber":82,"author":{"gitId":"hengyiqun"},"content":"        this.noteBookFilePath \u003d noteBookFilePath;","lastModifiedDate":"2021-04-01"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"    public void setConnectionsFilePath(Path connectionsFilePath) {","lastModifiedDate":"2021-04-09"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(noteBookFilePath);","lastModifiedDate":"2021-04-09"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"        this.connectionsFilePath \u003d connectionsFilePath;","lastModifiedDate":"2021-04-09"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":89,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Maurice2n97":20,"hengyiqun":10,"-":88}},{"path":"src/main/java/seedu/address/model/connection/PersonInMeetingPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.model.connection;","lastModifiedDate":"2021-04-06"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import java.util.Set;","lastModifiedDate":"2021-04-06"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-04-06"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"public class PersonInMeetingPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-04-06"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"    private final Meeting meeting;","lastModifiedDate":"2021-04-06"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"    public PersonInMeetingPredicate(Meeting meeting) {","lastModifiedDate":"2021-04-06"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"        this.meeting \u003d meeting;","lastModifiedDate":"2021-04-06"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-06"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-04-06"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cPerson\u003e personsInMeeting \u003d this.meeting.getConnectionToPerson();","lastModifiedDate":"2021-04-06"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e groupsInMeeting \u003d this.meeting.getGroups();","lastModifiedDate":"2021-04-06"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e groupsForPerson \u003d person.getGroups();","lastModifiedDate":"2021-04-06"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"        return groupsInMeeting.stream()","lastModifiedDate":"2021-04-06"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"                .anyMatch(mGroup -\u003e","lastModifiedDate":"2021-04-06"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"                        groupsForPerson.stream().anyMatch(pGroup -\u003e","lastModifiedDate":"2021-04-06"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"                                pGroup.equals(mGroup))) ||","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"                personsInMeeting.stream().anyMatch(p -\u003e p.equals(person));","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-06"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-04-06"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-04-06"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"                || (other instanceof seedu.address.model.connection.PersonInMeetingPredicate // instanceof handles null","lastModifiedDate":"2021-04-06"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 meeting.equals(((seedu.address.model.connection.PersonInMeetingPredicate) other).meeting));","lastModifiedDate":"2021-04-06"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"        // state check","lastModifiedDate":"2021-04-06"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-04-06"}],"authorContributionMap":{"hengyiqun":36}},{"path":"src/main/java/seedu/address/model/connection/PersonMeetingConnection.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.connection;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.connection.exceptions.ConnectionNoFoundException;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.connection.exceptions.DuplicateConnectionException;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.UniqueMeetingList;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-04-04"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-04"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"/**","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":" * Represents a connection between persons and meetings.","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":" * Uses two hashmaps to store the connections, use both meeting and person as a connection.","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":" * In default, if the connection is not stated, the connection class object will not record the connections.","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":" * i.e: those meeting and person will not appear in the hashmap, both key and values(in the UniqueXXXList).","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":" */","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"public class PersonMeetingConnection {","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    private HashMap\u003cMeeting, UniquePersonList\u003e personsInMeeting;","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    private HashMap\u003cPerson, UniqueMeetingList\u003e meetingsInPerson;","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * Constructs a {@code PersonMeetingConnection}.","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    public PersonMeetingConnection() {","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        personsInMeeting \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        meetingsInPerson \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * Constructs a {@code PersonMeetingConnection} from a existing connection.","lastModifiedDate":"2021-03-25"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    public PersonMeetingConnection(PersonMeetingConnection connection) {","lastModifiedDate":"2021-03-25"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        personsInMeeting \u003d connection.personsInMeeting;","lastModifiedDate":"2021-03-25"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        meetingsInPerson \u003d connection.meetingsInPerson;","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"     * Resets a {@code PersonMeetingConnection} from a existing connection.","lastModifiedDate":"2021-03-25"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    public void resetData(PersonMeetingConnection connection) {","lastModifiedDate":"2021-03-25"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(connection);","lastModifiedDate":"2021-03-25"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        this.personsInMeeting \u003d connection.personsInMeeting;","lastModifiedDate":"2021-03-25"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        this.meetingsInPerson \u003d connection.meetingsInPerson;","lastModifiedDate":"2021-03-25"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if a given person and a given meeting exist a connection.","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    public boolean existPersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-03-25"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        UniquePersonList personList \u003d personsInMeeting.get(meeting);","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList meetingList \u003d meetingsInPerson.get(person);","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        if (personList \u003d\u003d null || meetingList \u003d\u003d null) {","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"            return false;","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        return personList.contains(person) \u0026\u0026 meetingList.contains(meeting);","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"     * Returns a UniqueMeetingList object with the person as the key.","lastModifiedDate":"2021-03-24"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"     * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    public UniqueMeetingList getMeetingsByPerson(Person person) {","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        return meetingsInPerson.getOrDefault(person, new UniqueMeetingList());","lastModifiedDate":"2021-03-24"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"     * Returns a UniquePersonList object with the meeting as the key.","lastModifiedDate":"2021-03-24"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"     * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-03-24"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"    public UniquePersonList getPersonsByMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"        return personsInMeeting.getOrDefault(meeting, new UniquePersonList());","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"     * Adds a connection between a person and a meeting.","lastModifiedDate":"2021-03-25"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"    public void addPersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"        UniquePersonList personList \u003d personsInMeeting.getOrDefault(meeting, new UniquePersonList());","lastModifiedDate":"2021-03-24"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList meetingList \u003d meetingsInPerson.getOrDefault(person, new UniqueMeetingList());","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        try {","lastModifiedDate":"2021-03-27"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"            personList.add(person);","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"            meetingList.add(meeting);","lastModifiedDate":"2021-03-24"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"        } catch (DuplicatePersonException e) {","lastModifiedDate":"2021-03-27"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"            throw new DuplicateConnectionException();","lastModifiedDate":"2021-03-27"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"        personsInMeeting.put(meeting, personList);","lastModifiedDate":"2021-03-24"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"        meetingsInPerson.put(person, meetingList);","lastModifiedDate":"2021-03-24"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"     * This method delete a single connection between a meeting and a person.","lastModifiedDate":"2021-03-24"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"    public void deleteSinglePersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-03-24"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"        if (!existPersonMeetingConnection(person, meeting)) {","lastModifiedDate":"2021-03-24"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"            throw new ConnectionNoFoundException();","lastModifiedDate":"2021-03-24"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"        UniquePersonList personList \u003d personsInMeeting.get(meeting);","lastModifiedDate":"2021-03-24"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList meetingList \u003d meetingsInPerson.get(person);","lastModifiedDate":"2021-03-24"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"        personList.remove(person);","lastModifiedDate":"2021-03-24"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"        meetingList.remove(meeting);","lastModifiedDate":"2021-03-24"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"        personsInMeeting.put(meeting, personList);","lastModifiedDate":"2021-03-24"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"        meetingsInPerson.put(person, meetingList);","lastModifiedDate":"2021-03-24"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"     * This method delete a all connections related to a given person.","lastModifiedDate":"2021-03-24"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"    public void deleteAllPersonMeetingConnectionByPerson(Person person) {","lastModifiedDate":"2021-03-24"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"        if (meetingsInPerson.get(person) !\u003d null) {","lastModifiedDate":"2021-03-24"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"            UniqueMeetingList meetings \u003d meetingsInPerson.get(person);","lastModifiedDate":"2021-03-24"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"            for (Meeting meeting : meetings) {","lastModifiedDate":"2021-03-24"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"                UniquePersonList persons \u003d personsInMeeting.get(meeting);","lastModifiedDate":"2021-03-24"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"                persons.remove(person);","lastModifiedDate":"2021-03-24"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"                personsInMeeting.put(meeting, persons);","lastModifiedDate":"2021-03-24"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-03-24"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"            meetingsInPerson.remove(person);","lastModifiedDate":"2021-03-24"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"     * This method delete a all connections related to a given meeting.","lastModifiedDate":"2021-03-24"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"    public void deleteAllPersonMeetingConnectionByMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-24"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"        if (personsInMeeting.get(meeting) !\u003d null) {","lastModifiedDate":"2021-03-24"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"            UniquePersonList persons \u003d personsInMeeting.get(meeting);","lastModifiedDate":"2021-03-24"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"            for (Person person : persons) {","lastModifiedDate":"2021-03-24"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"                UniqueMeetingList meetings \u003d meetingsInPerson.get(person);","lastModifiedDate":"2021-03-24"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"                meetings.remove(meeting);","lastModifiedDate":"2021-03-24"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"                meetingsInPerson.put(person, meetings);","lastModifiedDate":"2021-03-24"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-03-24"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"            personsInMeeting.remove(meeting);","lastModifiedDate":"2021-03-24"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"     * This method delete a all connections related to a given meeting.","lastModifiedDate":"2021-04-04"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"    public HashMap\u003cPerson, UniqueMeetingList\u003e getPersonMeetingMap() {","lastModifiedDate":"2021-04-04"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"        return meetingsInPerson;","lastModifiedDate":"2021-04-04"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"     * This method delete a all connections related to a given meeting.","lastModifiedDate":"2021-04-04"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"    public HashMap\u003cPerson, UniqueMeetingList\u003e getMeetingPersonMap() {","lastModifiedDate":"2021-04-04"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":"        return meetingsInPerson;","lastModifiedDate":"2021-04-04"},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":143,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":144,"author":{"gitId":"skinnychenpi"},"content":"    //Util methods","lastModifiedDate":"2021-03-25"},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {","lastModifiedDate":"2021-03-25"},{"lineNumber":147,"author":{"gitId":"skinnychenpi"},"content":"        return meetingsInPerson.keySet().toString() + \" have connection with meetings\\n\"","lastModifiedDate":"2021-03-25"},{"lineNumber":148,"author":{"gitId":"skinnychenpi"},"content":"            + personsInMeeting.keySet().toString() + \"have connection with persons.\";","lastModifiedDate":"2021-03-25"},{"lineNumber":149,"author":{"gitId":"skinnychenpi"},"content":"        // TODO: refine later","lastModifiedDate":"2021-03-25"},{"lineNumber":150,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":151,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":152,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":153,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-25"},{"lineNumber":154,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-25"},{"lineNumber":155,"author":{"gitId":"skinnychenpi"},"content":"            || (other instanceof PersonMeetingConnection // instanceof handles nulls","lastModifiedDate":"2021-03-25"},{"lineNumber":156,"author":{"gitId":"skinnychenpi"},"content":"            \u0026\u0026 personsInMeeting.equals(((PersonMeetingConnection) other).personsInMeeting)","lastModifiedDate":"2021-03-25"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":"            \u0026\u0026 meetingsInPerson.equals(((PersonMeetingConnection) other).meetingsInPerson));","lastModifiedDate":"2021-03-25"},{"lineNumber":158,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":159,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":160,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":161,"author":{"gitId":"skinnychenpi"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-25"},{"lineNumber":162,"author":{"gitId":"skinnychenpi"},"content":"        return this.hashCode();","lastModifiedDate":"2021-03-25"},{"lineNumber":163,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":164,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":165,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":166,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"skinnychenpi":165,"hengyiqun":1}},{"path":"src/main/java/seedu/address/model/connection/exceptions/ConnectionNoFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.connection.exceptions;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"/**","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":" * Signals that the operation will result in the connections between meetings and persons doesn\u0027t exist.","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" */","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"public class ConnectionNoFoundException extends RuntimeException {","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"    public ConnectionNoFoundException() {","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"        super(\"The linkage between the meeting and the person does not exist.\");","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"skinnychenpi":10}},{"path":"src/main/java/seedu/address/model/connection/exceptions/DuplicateConnectionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.connection.exceptions;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"public class DuplicateConnectionException extends RuntimeException {","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"    public DuplicateConnectionException() {","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"        super(\"The connection between the meeting and the person has already existed.\");","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"skinnychenpi":8}},{"path":"src/main/java/seedu/address/model/group/Group.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.model.group;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":" * Represents a Group in the address book.","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidGroupName(String)}","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"public class Group {","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Group names should be alphanumeric\";","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}\\\\s]+\";","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"    public final String groupName;","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"     * Constructs a {@code Group}.","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"     * @param groupName A valid group name.","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"    public Group(String groupName) {","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(groupName);","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"        checkArgument(isValidGroupName(groupName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"        this.groupName \u003d groupName;","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"     * Returns true if a given string is a valid group name.","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"    public static boolean isValidGroupName(String test) {","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"                || (other instanceof Group // instanceof handles nulls","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 groupName.equals(((Group) other).groupName)); // state check","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"        return groupName.hashCode();","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"    public String getGroupName() {","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"        return this.groupName;","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"    public String toString() {","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"        return \u0027[\u0027 + groupName + \u0027]\u0027;","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"hengyiqun":58}},{"path":"src/main/java/seedu/address/model/group/GroupContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.model.group;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import java.util.List;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":" * Tests that a {@code Person}\u0027s {@code Group} matches any of the keywords given.","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"public class GroupContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"    public GroupContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e groups \u003d person.getGroups();","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"        return keywords.stream()","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"                .anyMatch(keyword -\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"                        groups.stream().anyMatch(group -\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"                                StringUtil.containsWordIgnoreCase(group.getGroupName(), keyword)));","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"                || (other instanceof seedu.address.model.group.GroupContainsKeywordsPredicate // instanceof handles null","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"                \u0026\u0026 keywords.equals(((seedu.address.model.group.GroupContainsKeywordsPredicate) other).keywords));","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"        // state check","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"Maurice2n97":3,"hengyiqun":34}},{"path":"src/main/java/seedu/address/model/meeting/DateTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.DateTimeUtil;","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"/**","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":" * Represents a Meeting\u0027s DateTime in a meeting.","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":" */","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"public class DateTime implements Comparable\u003cDateTime\u003e {","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"DateTime should use YYYY-MM-DD HH:MM format\";","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    public static final DateTimeFormatter VALIDATION_DATETIME_FORMAT \u003d DateTimeUtil.ISO_DATE_FORMATTER_NO_SECONDS;","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    public final LocalDateTime value;","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"     * Constructs a {@code DateTime}.{}","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * @param dateTime A valid DateTime number.","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    public DateTime(String dateTime) {","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        value \u003d LocalDateTime.parse(dateTime, VALIDATION_DATETIME_FORMAT);","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"     * Constructs a {@code DateTime}","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"     * @param value a LocalDateTime object","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    public DateTime(LocalDateTime value) {","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(value);","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if a given string is a valid DateTime number.","lastModifiedDate":"2021-03-11"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    public static boolean isValidDateTime(String test) {","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"            LocalDateTime.parse(test, VALIDATION_DATETIME_FORMAT);","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-03-11"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"            return false;","lastModifiedDate":"2021-03-11"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        return true;","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"     * Formats the LocalDateTime attribute,","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"     * @return the ISO formatted string of LocalDateTime","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"    public String toIsoFormatString() {","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"        return DateTimeUtil.formatDateTime(value);","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"     * Converts the dateTime object to localDate.","lastModifiedDate":"2021-03-25"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"     *","lastModifiedDate":"2021-03-26"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"     * @return localDate","lastModifiedDate":"2021-03-25"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"    public LocalDate toLocalDate() {","lastModifiedDate":"2021-03-25"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"        return value.toLocalDate();","lastModifiedDate":"2021-03-25"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"     * Converts DateTime to LocalDateTime.","lastModifiedDate":"2021-03-26"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-03-26"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"    public LocalDateTime toLocalDateTime() {","lastModifiedDate":"2021-03-26"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"        return value;","lastModifiedDate":"2021-03-26"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"    public int compareTo(DateTime other) {","lastModifiedDate":"2021-03-11"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"        if (value.isBefore(other.value)) {","lastModifiedDate":"2021-03-11"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"            return -1;","lastModifiedDate":"2021-03-11"},{"lineNumber":91,"author":{"gitId":"totoyoyo"},"content":"        } else if (value.isEqual(other.value)){","lastModifiedDate":"2021-04-07"},{"lineNumber":92,"author":{"gitId":"totoyoyo"},"content":"            return 0;","lastModifiedDate":"2021-04-07"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"        return 1;","lastModifiedDate":"2021-03-11"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {","lastModifiedDate":"2021-03-11"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"        return value.toString();","lastModifiedDate":"2021-03-11"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-11"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-11"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof seedu.address.model.meeting.DateTime // instanceof handles nulls","lastModifiedDate":"2021-03-11"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 value.equals(((seedu.address.model.meeting.DateTime) other).value)); // state check","lastModifiedDate":"2021-03-11"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-11"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-11"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"totoyoyo":2,"Maurice2n97":47,"skinnychenpi":65}},{"path":"src/main/java/seedu/address/model/meeting/Description.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"/**","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * Represents a Meeting\u0027s Description in the meeting book.","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * Guarantees: immutable; should always be valid.}","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" */","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"public class Description {","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    public final String fullDescription;","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     * Constructs a {@code Description}.","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"     * @param description A valid Description.","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    public Description(String description) {","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(description);","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        fullDescription \u003d description;","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        return fullDescription;","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof seedu.address.model.meeting.Description // instanceof handles nulls","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"                \u0026\u0026 fullDescription.equals(((seedu.address.model.meeting.Description) other)","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"                                .fullDescription)); // state check","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        return fullDescription.hashCode();","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"Maurice2n97":6,"skinnychenpi":37}},{"path":"src/main/java/seedu/address/model/meeting/Meeting.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.connection.PersonMeetingConnection;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.schedule.Schedulable;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import java.time.Duration;","lastModifiedDate":"2021-04-02"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"/**","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":" * Represents a meeting in MeetBuddy.","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":" */","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"public class Meeting implements Schedulable {","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"            \"The start date time of a meeting should be strictly earlier than the terminate date time.\\nA meeting \"","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"                    + \"should be at least 15 minutes long.\\nA meeting should be at most one week long.\\nFor example:\"","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"                    + \"\\nIf the meeting starts on 15 August 7:00 am, it should be not end later than 22 Aug 6:59am\";","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    // Identity fields","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    private final MeetingName meetingName;","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    private final DateTime start;","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    private final DateTime terminate;","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    // Data fields","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    private final Priority priority;","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    private final Description description;","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"    private final Set\u003cGroup\u003e groups \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    private PersonMeetingConnection connection \u003d null;","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    public Meeting(MeetingName meetingName, DateTime start, DateTime terminate, Priority priority,","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"                   Description description, Set\u003cGroup\u003e groups) {","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        requireAllNonNull(meetingName, start, terminate, priority, description, groups);","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        checkArgument(isValidStartTerminate(start, terminate), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        this.meetingName \u003d meetingName;","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        this.start \u003d start;","lastModifiedDate":"2021-03-11"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        this.terminate \u003d terminate;","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2021-03-11"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-11"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"        this.groups.addAll(groups);","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingName getName() {","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        return meetingName;","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    public DateTime getStart() {","lastModifiedDate":"2021-03-11"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        return start;","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    public DateTime getTerminate() {","lastModifiedDate":"2021-03-11"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"        return terminate;","lastModifiedDate":"2021-03-11"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"    public Priority getPriority() {","lastModifiedDate":"2021-03-11"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"        return priority;","lastModifiedDate":"2021-03-11"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"    public Description getDescription() {","lastModifiedDate":"2021-03-11"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"        return description;","lastModifiedDate":"2021-03-11"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":79,"author":{"gitId":"hengyiqun"},"content":"     * Returns an immutable group set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2021-03-14"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"     * if modification is attempted.","lastModifiedDate":"2021-03-11"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":82,"author":{"gitId":"hengyiqun"},"content":"    public Set\u003cGroup\u003e getGroups() {","lastModifiedDate":"2021-03-14"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"        return Collections.unmodifiableSet(groups);","lastModifiedDate":"2021-03-14"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if both meetings have the same meetingName, start and terminate time. (Use identify fields only)","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"     * This defines a weaker notion of equality between two meetings.","lastModifiedDate":"2021-03-11"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"    public boolean isSameMeeting(Meeting otherMeeting) {","lastModifiedDate":"2021-03-11"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"        if (otherMeeting \u003d\u003d this) {","lastModifiedDate":"2021-03-11"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"            return true;","lastModifiedDate":"2021-03-11"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"        return otherMeeting !\u003d null","lastModifiedDate":"2021-03-11"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getName().equals(getName())","lastModifiedDate":"2021-03-11"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getStart().equals(getStart())","lastModifiedDate":"2021-03-11"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getTerminate().equals(getTerminate());","lastModifiedDate":"2021-03-11"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"     * Returns true if a given date time for the meeting is valid. Note the meeting must be at","lastModifiedDate":"2021-04-02"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"     * least 15 mins long and at most 7 days long.","lastModifiedDate":"2021-04-02"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"    public static boolean isValidStartTerminate(DateTime start, DateTime terminate) {","lastModifiedDate":"2021-03-11"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"        long minutesBetween \u003d Duration.between(start.toLocalDateTime(), terminate.toLocalDateTime()).toMinutes();","lastModifiedDate":"2021-04-02"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"        long daysBetween \u003d Duration.between(start.toLocalDateTime(), terminate.toLocalDateTime()).toDays();","lastModifiedDate":"2021-04-02"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"        return start.compareTo(terminate) \u003c 0 \u0026\u0026 (minutesBetween \u003e\u003d 15) \u0026\u0026 (daysBetween \u003c 7);","lastModifiedDate":"2021-04-02"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"     * Adds new groups from a set. Merge if new group appears.","lastModifiedDate":"2021-03-31"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"    public void addGroups(Set\u003cGroup\u003e newGroup) {","lastModifiedDate":"2021-03-31"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"        this.groups.addAll(newGroup);","lastModifiedDate":"2021-03-31"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"     * Deletes groups from a set.","lastModifiedDate":"2021-03-31"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"    public void deleteGroups(Set\u003cGroup\u003e groupsToDelete) {","lastModifiedDate":"2021-03-31"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"        this.groups.removeAll(groupsToDelete);","lastModifiedDate":"2021-03-31"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the person meeting connection so that the meeting can have access to the Person Meeting Connection object.","lastModifiedDate":"2021-03-30"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"     * This method will only be invoked in @code{AddMeetingCommand}.","lastModifiedDate":"2021-03-30"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"     * Note that Meeting Object has no permission to modify connection, this method is used for later read connection.","lastModifiedDate":"2021-03-30"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"    public void setPersonMeetingConnection(PersonMeetingConnection connection) {","lastModifiedDate":"2021-03-30"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"        this.connection \u003d connection;","lastModifiedDate":"2021-03-30"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"     * Returns an immutable person set.","lastModifiedDate":"2021-03-30"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"    public Set\u003cPerson\u003e getConnectionToPerson() {","lastModifiedDate":"2021-03-30"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"        // If the user didn\u0027t try to add connection, then returns an empty set.","lastModifiedDate":"2021-03-30"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"        if (connection \u003d\u003d null) {","lastModifiedDate":"2021-03-30"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"            return new HashSet\u003cPerson\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"        } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"            UniquePersonList persons \u003d connection.getPersonsByMeeting(this);","lastModifiedDate":"2021-03-30"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"            HashSet\u003cPerson\u003e personsSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"            for (Person person : persons) {","lastModifiedDate":"2021-03-30"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":"                personsSet.add(person);","lastModifiedDate":"2021-03-30"},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":143,"author":{"gitId":"skinnychenpi"},"content":"            return personsSet;","lastModifiedDate":"2021-03-30"},{"lineNumber":144,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":147,"author":{"gitId":"totoyoyo"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Some useful predicates \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-07"},{"lineNumber":148,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":149,"author":{"gitId":"totoyoyo"},"content":"    public boolean containsName(MeetingName name) {","lastModifiedDate":"2021-04-07"},{"lineNumber":150,"author":{"gitId":"totoyoyo"},"content":"        return meetingName.toString().contains(name.toString());","lastModifiedDate":"2021-04-07"},{"lineNumber":151,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":152,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":153,"author":{"gitId":"totoyoyo"},"content":"    public boolean containsDescription(Description desc) {","lastModifiedDate":"2021-04-07"},{"lineNumber":154,"author":{"gitId":"totoyoyo"},"content":"        return description.toString().contains(desc.toString());","lastModifiedDate":"2021-04-07"},{"lineNumber":155,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":156,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":157,"author":{"gitId":"totoyoyo"},"content":"    public boolean containsPerson(Person person) {","lastModifiedDate":"2021-04-07"},{"lineNumber":158,"author":{"gitId":"totoyoyo"},"content":"        Set\u003cPerson\u003e allPersons \u003d getConnectionToPerson();","lastModifiedDate":"2021-04-07"},{"lineNumber":159,"author":{"gitId":"totoyoyo"},"content":"        return allPersons.contains(person);","lastModifiedDate":"2021-04-07"},{"lineNumber":160,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":161,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":162,"author":{"gitId":"totoyoyo"},"content":"    public boolean containsGroup(Group group) {","lastModifiedDate":"2021-04-07"},{"lineNumber":163,"author":{"gitId":"totoyoyo"},"content":"        return groups.contains(group);","lastModifiedDate":"2021-04-07"},{"lineNumber":164,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":165,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":166,"author":{"gitId":"totoyoyo"},"content":"    public boolean containsTime(DateTime time) {","lastModifiedDate":"2021-04-07"},{"lineNumber":167,"author":{"gitId":"totoyoyo"},"content":"        boolean afterOrAtStart \u003d time.compareTo(start) \u003e\u003d 0;","lastModifiedDate":"2021-04-07"},{"lineNumber":168,"author":{"gitId":"totoyoyo"},"content":"        boolean beforeOrAtEnd \u003d time.compareTo(terminate) \u003c\u003d 0;","lastModifiedDate":"2021-04-07"},{"lineNumber":169,"author":{"gitId":"totoyoyo"},"content":"        return afterOrAtStart \u0026\u0026 beforeOrAtEnd;","lastModifiedDate":"2021-04-07"},{"lineNumber":170,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":171,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":172,"author":{"gitId":"totoyoyo"},"content":"    public boolean hasPriority(Priority prio) {","lastModifiedDate":"2021-04-07"},{"lineNumber":173,"author":{"gitId":"totoyoyo"},"content":"        return priority.equals(prio);","lastModifiedDate":"2021-04-07"},{"lineNumber":174,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":175,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":176,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":177,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":178,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":179,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":180,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":181,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if both meetings have the same identity and data fields.","lastModifiedDate":"2021-03-11"},{"lineNumber":182,"author":{"gitId":"skinnychenpi"},"content":"     * This defines a stronger notion of equality between two meetings.","lastModifiedDate":"2021-03-11"},{"lineNumber":183,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":184,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":185,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-11"},{"lineNumber":186,"author":{"gitId":"skinnychenpi"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-11"},{"lineNumber":187,"author":{"gitId":"skinnychenpi"},"content":"            return true;","lastModifiedDate":"2021-03-11"},{"lineNumber":188,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":189,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":190,"author":{"gitId":"skinnychenpi"},"content":"        if (!(other instanceof Meeting)) {","lastModifiedDate":"2021-03-11"},{"lineNumber":191,"author":{"gitId":"skinnychenpi"},"content":"            return false;","lastModifiedDate":"2021-03-11"},{"lineNumber":192,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":193,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":194,"author":{"gitId":"skinnychenpi"},"content":"        Meeting otherMeeting \u003d (Meeting) other;","lastModifiedDate":"2021-03-11"},{"lineNumber":195,"author":{"gitId":"skinnychenpi"},"content":"        return otherMeeting.getName().equals(getName())","lastModifiedDate":"2021-03-11"},{"lineNumber":196,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getStart().equals(getStart())","lastModifiedDate":"2021-03-11"},{"lineNumber":197,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getTerminate().equals(getTerminate())","lastModifiedDate":"2021-03-11"},{"lineNumber":198,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getPriority().equals(getPriority())","lastModifiedDate":"2021-03-11"},{"lineNumber":199,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getDescription().equals(getDescription())","lastModifiedDate":"2021-03-11"},{"lineNumber":200,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 otherMeeting.getGroups().equals(getGroups());","lastModifiedDate":"2021-03-14"},{"lineNumber":201,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":202,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":203,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":204,"author":{"gitId":"skinnychenpi"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-11"},{"lineNumber":205,"author":{"gitId":"skinnychenpi"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-03-11"},{"lineNumber":206,"author":{"gitId":"skinnychenpi"},"content":"        return Objects.hash(meetingName, start, terminate, priority, description, groups);","lastModifiedDate":"2021-03-15"},{"lineNumber":207,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":208,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":209,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":210,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {","lastModifiedDate":"2021-03-11"},{"lineNumber":211,"author":{"gitId":"skinnychenpi"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-03-11"},{"lineNumber":212,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(getName())","lastModifiedDate":"2021-03-11"},{"lineNumber":213,"author":{"gitId":"skinnychenpi"},"content":"                .append(\"; Start: \")","lastModifiedDate":"2021-03-11"},{"lineNumber":214,"author":{"gitId":"skinnychenpi"},"content":"                .append(getStart())","lastModifiedDate":"2021-03-11"},{"lineNumber":215,"author":{"gitId":"skinnychenpi"},"content":"                .append(\"; Terminate: \")","lastModifiedDate":"2021-03-11"},{"lineNumber":216,"author":{"gitId":"skinnychenpi"},"content":"                .append(getTerminate())","lastModifiedDate":"2021-03-11"},{"lineNumber":217,"author":{"gitId":"skinnychenpi"},"content":"                .append(\"; Priority: \")","lastModifiedDate":"2021-03-11"},{"lineNumber":218,"author":{"gitId":"skinnychenpi"},"content":"                .append(getPriority())","lastModifiedDate":"2021-03-11"},{"lineNumber":219,"author":{"gitId":"skinnychenpi"},"content":"                .append(\"; Description: \")","lastModifiedDate":"2021-03-11"},{"lineNumber":220,"author":{"gitId":"skinnychenpi"},"content":"                .append(getDescription());","lastModifiedDate":"2021-03-11"},{"lineNumber":221,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":222,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e groups \u003d getGroups();","lastModifiedDate":"2021-03-14"},{"lineNumber":223,"author":{"gitId":"hengyiqun"},"content":"        if (!groups.isEmpty()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":224,"author":{"gitId":"hengyiqun"},"content":"            builder.append(\"; Groups: \");","lastModifiedDate":"2021-03-14"},{"lineNumber":225,"author":{"gitId":"hengyiqun"},"content":"            groups.forEach(builder::append);","lastModifiedDate":"2021-03-14"},{"lineNumber":226,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":227,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":228,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cPerson\u003e personSet \u003d getConnectionToPerson();","lastModifiedDate":"2021-03-30"},{"lineNumber":229,"author":{"gitId":"skinnychenpi"},"content":"        if (!personSet.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":230,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"; Person Related: \");","lastModifiedDate":"2021-03-30"},{"lineNumber":231,"author":{"gitId":"skinnychenpi"},"content":"            for (Person person : personSet) {","lastModifiedDate":"2021-03-30"},{"lineNumber":232,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(\"[\" + person.getName() + \"]\");","lastModifiedDate":"2021-03-30"},{"lineNumber":233,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-03-27"},{"lineNumber":234,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":235,"author":{"gitId":"skinnychenpi"},"content":"        return builder.toString();","lastModifiedDate":"2021-03-11"},{"lineNumber":236,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":237,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":238,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":239,"author":{"gitId":"Maurice2n97"},"content":"     * Checks if the meeting is happening at this instant of time.","lastModifiedDate":"2021-03-26"},{"lineNumber":240,"author":{"gitId":"Maurice2n97"},"content":"     * @param localDateTime","lastModifiedDate":"2021-03-26"},{"lineNumber":241,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-03-26"},{"lineNumber":242,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":243,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":244,"author":{"gitId":"Maurice2n97"},"content":"    public boolean containsTime(LocalDateTime localDateTime) {","lastModifiedDate":"2021-03-26"},{"lineNumber":245,"author":{"gitId":"Maurice2n97"},"content":"        LocalDateTime startLocalDateTime \u003d start.toLocalDateTime();","lastModifiedDate":"2021-03-26"},{"lineNumber":246,"author":{"gitId":"Maurice2n97"},"content":"        LocalDateTime endLocalDateTime \u003d terminate.toLocalDateTime();","lastModifiedDate":"2021-03-26"},{"lineNumber":247,"author":{"gitId":"Maurice2n97"},"content":"        return startLocalDateTime.compareTo(localDateTime) \u003c\u003d 0","lastModifiedDate":"2021-03-26"},{"lineNumber":248,"author":{"gitId":"Maurice2n97"},"content":"                \u0026\u0026 endLocalDateTime.compareTo(localDateTime) \u003e 0;","lastModifiedDate":"2021-03-26"},{"lineNumber":249,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":250,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":251,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":252,"author":{"gitId":"Maurice2n97"},"content":"     * Checks if a meeting is a schedulable object is in conflict with this meeting.","lastModifiedDate":"2021-03-29"},{"lineNumber":253,"author":{"gitId":"Maurice2n97"},"content":"     * @param schedulable","lastModifiedDate":"2021-03-29"},{"lineNumber":254,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-03-29"},{"lineNumber":255,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":256,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":257,"author":{"gitId":"Maurice2n97"},"content":"    public boolean isConflict(Schedulable schedulable) {","lastModifiedDate":"2021-03-29"},{"lineNumber":258,"author":{"gitId":"Maurice2n97"},"content":"        return !(this.getTerminateLocalDateTime().compareTo(schedulable.getStartLocalDateTime()) \u003c\u003d 0","lastModifiedDate":"2021-03-29"},{"lineNumber":259,"author":{"gitId":"Maurice2n97"},"content":"                || this.getStartLocalDateTime().compareTo(schedulable.getTerminateLocalDateTime()) \u003e\u003d 0);","lastModifiedDate":"2021-03-29"},{"lineNumber":260,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":261,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":262,"author":{"gitId":"Maurice2n97"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dinterface methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-26"},{"lineNumber":263,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":264,"author":{"gitId":"Maurice2n97"},"content":"    public LocalDateTime getStartLocalDateTime() {","lastModifiedDate":"2021-03-26"},{"lineNumber":265,"author":{"gitId":"Maurice2n97"},"content":"        return start.toLocalDateTime();","lastModifiedDate":"2021-03-26"},{"lineNumber":266,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":267,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":268,"author":{"gitId":"Maurice2n97"},"content":"    public LocalDateTime getTerminateLocalDateTime() {","lastModifiedDate":"2021-03-26"},{"lineNumber":269,"author":{"gitId":"Maurice2n97"},"content":"        return terminate.toLocalDateTime();","lastModifiedDate":"2021-03-26"},{"lineNumber":270,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":271,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":272,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":273,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":274,"author":{"gitId":"Maurice2n97"},"content":"    public String getNameString() {","lastModifiedDate":"2021-03-26"},{"lineNumber":275,"author":{"gitId":"Maurice2n97"},"content":"        return meetingName.fullName;","lastModifiedDate":"2021-03-26"},{"lineNumber":276,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":277,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":278,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"totoyoyo":33,"Maurice2n97":53,"skinnychenpi":181,"hengyiqun":11}},{"path":"src/main/java/seedu/address/model/meeting/MeetingBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-04-04"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.connection.PersonMeetingConnection;","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-04"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"public class MeetingBook implements ReadOnlyMeetingBook {","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    private final UniqueMeetingList meetings;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    /*","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"     *   among constructors.","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    {","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        meetings \u003d new UniqueMeetingList();","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBook() {}","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * Creates an MeetingBook using the meetings in the {@code toBeCopied}","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBook(ReadOnlyMeetingBook toBeCopied) {","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        this();","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    //// list overwrite operations","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"     * Replaces the contents of the meeting list with {@code meetings}.","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     * {@code meetings} must not contain duplicate meetings.","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings(List\u003cMeeting\u003e meetings) {","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        this.meetings.setMeetings(meetings);","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"     * Resets the existing data of this {@code MeetingBook} with {@code newData}.","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    public void resetData(ReadOnlyMeetingBook newData) {","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(newData);","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        setMeetings(newData.getMeetingList());","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"    //// meeting-level operations","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if a meeting with the same identity as {@code meeting} exists in the meeting book.","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    public boolean hasMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(meeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"        return meetings.contains(meeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"     * Adds a meeting to the meeting book.","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"     * The meeting must not already exist in the meeting book.","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"     * The meeting must not clash with any meeting in the meetingBook.","lastModifiedDate":"2021-03-26"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"    public void addMeeting(Meeting m) {","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"        meetings.add(m);","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"     * Replaces the given meeting {@code target} in the list with {@code editedMeeting}.","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"     * {@code target} must exist in the meeting book.","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"     * The meeting identity of {@code editedMeeting} must not be the same as another","lastModifiedDate":"2021-03-16"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"     * existing meeting in the meeting book.","lastModifiedDate":"2021-03-16"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting(Meeting target, Meeting editedMeeting) {","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(editedMeeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"        meetings.setMeeting(target, editedMeeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"hengyiqun"},"content":"    public void updateMeeting(Meeting target, Meeting editedMeeting) {","lastModifiedDate":"2021-03-28"},{"lineNumber":86,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(editedMeeting);","lastModifiedDate":"2021-03-28"},{"lineNumber":87,"author":{"gitId":"hengyiqun"},"content":"        meetings.updateMeeting(target, editedMeeting);","lastModifiedDate":"2021-03-28"},{"lineNumber":88,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":89,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"     * Removes {@code key} from this {@code MeetingBook}.","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"     * {@code key} must exist in the meeting book.","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"    public void removeMeeting(Meeting key) {","lastModifiedDate":"2021-03-15"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"        meetings.remove(key);","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"     * For storage use @code{JsonAdaptedPersonMeetingConnection}","lastModifiedDate":"2021-04-04"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"    public Meeting getMeetingByNameAndStartTime(MeetingName name, DateTime start) {","lastModifiedDate":"2021-04-04"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"        for (Meeting meeting : meetings) {","lastModifiedDate":"2021-04-04"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"            if (meeting.getName().equals(name) \u0026\u0026 meeting.getStart().equals(start)) {","lastModifiedDate":"2021-04-04"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"                return meeting;","lastModifiedDate":"2021-04-04"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-04-04"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-04"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"        return null;","lastModifiedDate":"2021-04-04"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Clashing meetings checks \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-26"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"     * Checks if there is a clash in Meeting Times within the meeting book.","lastModifiedDate":"2021-03-26"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"    public boolean clashes(Meeting toCheck) {","lastModifiedDate":"2021-03-26"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"        return meetings.clashes(toCheck);","lastModifiedDate":"2021-03-26"},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":119,"author":{"gitId":"hengyiqun"},"content":"    public boolean clashesExceptOne(Meeting meetingNotIncluded, Meeting toCheck) {","lastModifiedDate":"2021-03-28"},{"lineNumber":120,"author":{"gitId":"hengyiqun"},"content":"        return meetings.clashesExceptOne(meetingNotIncluded, toCheck);","lastModifiedDate":"2021-03-28"},{"lineNumber":121,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":122,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"     * Gets a list of meetings that overlap with this meeting.","lastModifiedDate":"2021-03-26"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"    public List\u003cMeeting\u003e getClashes(Meeting toCheck) {","lastModifiedDate":"2021-03-26"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"        return meetings.getClashes(toCheck);","lastModifiedDate":"2021-03-26"},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the meeting ( if any ) happening at this point in time.","lastModifiedDate":"2021-03-26"},{"lineNumber":132,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":133,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":134,"author":{"gitId":"Maurice2n97"},"content":"    public Optional\u003cMeeting\u003e getMeetingAtInstant(LocalDateTime localDateTime) {","lastModifiedDate":"2021-03-26"},{"lineNumber":135,"author":{"gitId":"Maurice2n97"},"content":"        return meetings.getMeetingAtInstant(localDateTime);","lastModifiedDate":"2021-03-26"},{"lineNumber":136,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":137,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":138,"author":{"gitId":"Maurice2n97"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Set Connections \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-09"},{"lineNumber":139,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":140,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":141,"author":{"gitId":"Maurice2n97"},"content":"     * Sets all the meetings in the meeting book to refer to a person meeting Connection.","lastModifiedDate":"2021-04-09"},{"lineNumber":142,"author":{"gitId":"Maurice2n97"},"content":"     * @param personMeetingConnection","lastModifiedDate":"2021-04-09"},{"lineNumber":143,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":144,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":145,"author":{"gitId":"Maurice2n97"},"content":"    public void setPersonToMeetingConnections(PersonMeetingConnection personMeetingConnection) {","lastModifiedDate":"2021-04-09"},{"lineNumber":146,"author":{"gitId":"Maurice2n97"},"content":"        for (Meeting meeting : meetings) {","lastModifiedDate":"2021-04-09"},{"lineNumber":147,"author":{"gitId":"Maurice2n97"},"content":"            meeting.setPersonMeetingConnection(personMeetingConnection);","lastModifiedDate":"2021-04-09"},{"lineNumber":148,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-04-09"},{"lineNumber":149,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":150,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":151,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":152,"author":{"gitId":"Maurice2n97"},"content":"    //// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-26"},{"lineNumber":153,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":154,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {","lastModifiedDate":"2021-03-15"},{"lineNumber":155,"author":{"gitId":"skinnychenpi"},"content":"        return meetings.asUnmodifiableObservableList().size() + \" meetings\";","lastModifiedDate":"2021-03-15"},{"lineNumber":156,"author":{"gitId":"skinnychenpi"},"content":"        // TODO: refine later","lastModifiedDate":"2021-03-15"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":158,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":159,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":160,"author":{"gitId":"skinnychenpi"},"content":"    public ObservableList\u003cMeeting\u003e getMeetingList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":161,"author":{"gitId":"skinnychenpi"},"content":"        return meetings.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-15"},{"lineNumber":162,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":163,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":164,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":165,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":166,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":167,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof MeetingBook // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":168,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 meetings.equals(((MeetingBook) other).meetings));","lastModifiedDate":"2021-03-15"},{"lineNumber":169,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":170,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":171,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":172,"author":{"gitId":"skinnychenpi"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-15"},{"lineNumber":173,"author":{"gitId":"skinnychenpi"},"content":"        return meetings.hashCode();","lastModifiedDate":"2021-03-15"},{"lineNumber":174,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":175,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-15"},{"lineNumber":176,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"Maurice2n97":44,"skinnychenpi":123,"hengyiqun":9}},{"path":"src/main/java/seedu/address/model/meeting/MeetingName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"/**","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * Represents a Meeting\u0027s name in the meeting book.","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" */","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class MeetingName {","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    /*","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public final String fullName;","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * Constructs a {@code PersonName}.","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * @param name A valid name.","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingName(String name) {","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        fullName \u003d name;","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        return fullName;","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-11"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof MeetingName // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 fullName.equals(((MeetingName) other).fullName)); // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        return fullName.hashCode();","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"skinnychenpi":59}},{"path":"src/main/java/seedu/address/model/meeting/MeetingSortDirection.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.model.meeting;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"public enum MeetingSortDirection {","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"    ASC(\"ASC\"),","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"    DESC(\"DESC\");","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"    private final String sortString;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    MeetingSortDirection(String sortString) {","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"        this.sortString \u003d sortString;","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    public String getValue() {","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"        return sortString;","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"totoyoyo":9,"Maurice2n97":6}},{"path":"src/main/java/seedu/address/model/meeting/MeetingSortOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.model.meeting;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"public enum MeetingSortOption {","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"    NAME(\"NAME\"),","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"    START(\"START\"),","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"    END(\"END\"),","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"    PRIORITY(\"PRIORITY\"),","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"    DESCRIPTION(\"DESCRIPTION\");","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"    private final String sortString;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"    MeetingSortOption(String sortString) {this.sortString \u003d sortString;}","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"    public String getValue() { return sortString; }","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"totoyoyo":15}},{"path":"src/main/java/seedu/address/model/meeting/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.model.meeting;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":" * Tests that a {@code Meeting}\u0027s {@code MeetingName} matches any of the keywords given.","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cMeeting\u003e {","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    public boolean test(Meeting meeting) {","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        return keywords.stream()","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(meeting.getName().fullName, keyword));","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    //TODO: Do we have to include full path name to disntinguish from other NamePredicate? Feels redundant.","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"                // nulls","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords));","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"        // state check","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"Maurice2n97":36}},{"path":"src/main/java/seedu/address/model/meeting/Priority.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"/**","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * Represents a Meeting\u0027s priority in the meeting.","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" */","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class Priority {","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Priority can only vary from 1 to 5.\";","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[1-5]$\";","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    public final int priority;","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     * Constructs an {@code Priority}.","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * @param priority A valid priority.","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    public Priority(String priority) {","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(priority);","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        this.priority \u003d Integer.parseInt(priority);","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if a given string is a valid priority.","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    public static boolean isValidPriority(String priority) {","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        return priority.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        return Integer.toString(priority);","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof seedu.address.model.meeting.Priority // instanceof handles nulls","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 priority \u003d\u003d (((seedu.address.model.meeting.Priority) other).priority)); // state check","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"totoyoyo":1,"Maurice2n97":2,"skinnychenpi":47}},{"path":"src/main/java/seedu/address/model/meeting/ReadOnlyMeetingBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"public interface ReadOnlyMeetingBook {","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"     * Returns an unmodifiable view of the meeting\u0027s list.","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    ObservableList\u003cMeeting\u003e getMeetingList();","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"     * Returns a meeting by its name and start time.","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    public Meeting getMeetingByNameAndStartTime(MeetingName name, DateTime start);","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Maurice2n97":7,"skinnychenpi":3,"-":11}},{"path":"src/main/java/seedu/address/model/meeting/UniqueMeetingList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.exceptions.DuplicateMeetingException;","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.exceptions.MeetingNotFoundException;","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.exceptions.MeetingTimeClashException;","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"/**","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":" * A list of meetings that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":" * A meeting is considered unique by comparing using {@code Meeting#isSameMeeting(Meeting)}.","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":" * As such, adding and updating of meetings uses Meeting#isSameMeeting(Meeting) for equality","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":" * so as to ensure that the meeting being added or updated is","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":" * unique in terms of identity in the UniqueMeetingList. However, the removal of a meeting uses Meeting#equals(Object)","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":" * so as to ensure that the meeting with exactly the same fields will be removed.","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":" * Also, it enforces that the meetings cannot overlap with each other ( i.e there is no conflicting meetings.)","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":" *","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":" * In addition supports getting meetings happening at a certain point in time. For example, any time t,","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":" * it gets the meeting whose interval [start, end) such that it contains the time t.","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":" * Furthermore it gets a list of meetings that conflict with a certain meeting.","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":" *","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":" * @see Meeting#isSameMeeting(Meeting)","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":" */","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"public class UniqueMeetingList implements Iterable\u003cMeeting\u003e {","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    private final ObservableList\u003cMeeting\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    private final ObservableList\u003cMeeting\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if the list contains an equivalent meeting as the given argument.","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public boolean contains(Meeting toCheck) {","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        return internalList.stream().anyMatch(toCheck::isSameMeeting);","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"     * Checks if there is a clash in Meeting Times","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"    public boolean clashes(Meeting toCheck) {","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"        return internalList.stream().anyMatch(toCheck :: isConflict);","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"    public boolean clashesExceptOne(Meeting target, Meeting toCheck) {","lastModifiedDate":"2021-03-28"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-28"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"        return internalList.stream()","lastModifiedDate":"2021-03-28"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"                .filter(x -\u003e !x.equals(target))","lastModifiedDate":"2021-03-28"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"                .anyMatch(toCheck :: isConflict);","lastModifiedDate":"2021-03-28"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":62,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"     * Adds a meeting to the list.","lastModifiedDate":"2021-03-11"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"     * The meeting must not already exist in the list.","lastModifiedDate":"2021-03-11"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"     * There must be no clashes with current meeting.","lastModifiedDate":"2021-03-26"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"    public void add(Meeting toAdd) {","lastModifiedDate":"2021-03-11"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-03-11"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2021-03-11"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"            throw new DuplicateMeetingException();","lastModifiedDate":"2021-03-11"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"        if (clashes(toAdd)) {","lastModifiedDate":"2021-03-26"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"            throw new MeetingTimeClashException();","lastModifiedDate":"2021-03-26"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-03-11"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"     * Obtains the list of meetings that clashes,","lastModifiedDate":"2021-03-26"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"     * if there is a clash in Meeting Times.","lastModifiedDate":"2021-03-26"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"    public List\u003cMeeting\u003e getClashes(Meeting toCheck) {","lastModifiedDate":"2021-03-26"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-26"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"        return internalList.stream().filter(toCheck :: isConflict).collect(Collectors.toList());","lastModifiedDate":"2021-03-26"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the meeting happening at a particular point in time. Note that at the instance of time queried must lie","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"     * between start (inclusive) and end ( exclusive) times.","lastModifiedDate":"2021-03-26"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"    public Optional\u003cMeeting\u003e getMeetingAtInstant(LocalDateTime localDateTime) {","lastModifiedDate":"2021-03-26"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(localDateTime);","lastModifiedDate":"2021-03-26"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"        return internalList.stream()","lastModifiedDate":"2021-03-26"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"                .filter(meeting -\u003e meeting.containsTime(localDateTime))","lastModifiedDate":"2021-03-26"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"                .findFirst();","lastModifiedDate":"2021-03-26"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"     * Replaces the meeting {@code target} in the list with {@code editedMeeting}.","lastModifiedDate":"2021-03-11"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-03-11"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"     * The meeting identity of {@code editedMeeting} must not be the same as another existing meeting in the list.","lastModifiedDate":"2021-03-11"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting(Meeting target, Meeting editedMeeting) {","lastModifiedDate":"2021-03-11"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"        requireAllNonNull(target, editedMeeting);","lastModifiedDate":"2021-03-11"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-03-11"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-03-11"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"            throw new MeetingNotFoundException();","lastModifiedDate":"2021-03-11"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"        if (!target.isSameMeeting(editedMeeting) \u0026\u0026 contains(editedMeeting)) {","lastModifiedDate":"2021-03-11"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"            throw new DuplicateMeetingException();","lastModifiedDate":"2021-03-11"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"        if (!target.isSameMeeting(editedMeeting) \u0026\u0026 clashes(editedMeeting)) {","lastModifiedDate":"2021-03-26"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"            throw new MeetingTimeClashException();","lastModifiedDate":"2021-03-26"},{"lineNumber":117,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":118,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":119,"author":{"gitId":"hengyiqun"},"content":"        internalList.set(index, editedMeeting);","lastModifiedDate":"2021-03-28"},{"lineNumber":120,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":121,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":122,"author":{"gitId":"hengyiqun"},"content":"    public void updateMeeting(Meeting target, Meeting editedMeeting) {","lastModifiedDate":"2021-03-28"},{"lineNumber":123,"author":{"gitId":"hengyiqun"},"content":"        requireAllNonNull(target, editedMeeting);","lastModifiedDate":"2021-03-28"},{"lineNumber":124,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":125,"author":{"gitId":"hengyiqun"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-03-28"},{"lineNumber":126,"author":{"gitId":"hengyiqun"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-03-28"},{"lineNumber":127,"author":{"gitId":"hengyiqun"},"content":"            throw new MeetingNotFoundException();","lastModifiedDate":"2021-03-28"},{"lineNumber":128,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":129,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":130,"author":{"gitId":"hengyiqun"},"content":"        if (!target.isSameMeeting(editedMeeting) \u0026\u0026 contains(editedMeeting)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":131,"author":{"gitId":"hengyiqun"},"content":"            throw new DuplicateMeetingException();","lastModifiedDate":"2021-03-28"},{"lineNumber":132,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":133,"author":{"gitId":"hengyiqun"},"content":"        if (!target.isSameMeeting(editedMeeting) \u0026\u0026 clashesExceptOne(target, editedMeeting)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":134,"author":{"gitId":"hengyiqun"},"content":"            throw new MeetingTimeClashException();","lastModifiedDate":"2021-03-28"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"        internalList.set(index, editedMeeting);","lastModifiedDate":"2021-03-11"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":"     * Removes the equivalent meeting from the list.","lastModifiedDate":"2021-03-11"},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":"     * The meeting must exist in the list.","lastModifiedDate":"2021-03-11"},{"lineNumber":143,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":144,"author":{"gitId":"skinnychenpi"},"content":"    public void remove(Meeting toRemove) {","lastModifiedDate":"2021-03-11"},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-03-11"},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-03-11"},{"lineNumber":147,"author":{"gitId":"skinnychenpi"},"content":"            throw new MeetingNotFoundException();","lastModifiedDate":"2021-03-11"},{"lineNumber":148,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":149,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":150,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":151,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings(UniqueMeetingList replacement) {","lastModifiedDate":"2021-03-11"},{"lineNumber":152,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-03-11"},{"lineNumber":153,"author":{"gitId":"skinnychenpi"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-03-11"},{"lineNumber":154,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":155,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":156,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":"     * Replaces the contents of this list with {@code meetings}.","lastModifiedDate":"2021-03-11"},{"lineNumber":158,"author":{"gitId":"skinnychenpi"},"content":"     * {@code meetings} must not contain duplicate meetings.","lastModifiedDate":"2021-03-11"},{"lineNumber":159,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":160,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings(List\u003cMeeting\u003e meetings) {","lastModifiedDate":"2021-03-11"},{"lineNumber":161,"author":{"gitId":"skinnychenpi"},"content":"        requireAllNonNull(meetings);","lastModifiedDate":"2021-03-11"},{"lineNumber":162,"author":{"gitId":"skinnychenpi"},"content":"        if (!meetingsAreUnique(meetings)) {","lastModifiedDate":"2021-03-11"},{"lineNumber":163,"author":{"gitId":"skinnychenpi"},"content":"            throw new DuplicateMeetingException();","lastModifiedDate":"2021-03-11"},{"lineNumber":164,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":165,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":166,"author":{"gitId":"skinnychenpi"},"content":"        internalList.setAll(meetings);","lastModifiedDate":"2021-03-11"},{"lineNumber":167,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":168,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":169,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":170,"author":{"gitId":"skinnychenpi"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-03-11"},{"lineNumber":171,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":172,"author":{"gitId":"skinnychenpi"},"content":"    public ObservableList\u003cMeeting\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-03-11"},{"lineNumber":173,"author":{"gitId":"skinnychenpi"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-03-11"},{"lineNumber":174,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":175,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":176,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":177,"author":{"gitId":"skinnychenpi"},"content":"    public Iterator\u003cMeeting\u003e iterator() {","lastModifiedDate":"2021-03-11"},{"lineNumber":178,"author":{"gitId":"skinnychenpi"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-03-11"},{"lineNumber":179,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":180,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":181,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":182,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-11"},{"lineNumber":183,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-11"},{"lineNumber":184,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof UniqueMeetingList // instanceof handles nulls","lastModifiedDate":"2021-03-11"},{"lineNumber":185,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 internalList.equals(((UniqueMeetingList) other).internalList));","lastModifiedDate":"2021-03-11"},{"lineNumber":186,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":187,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":188,"author":{"gitId":"skinnychenpi"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":189,"author":{"gitId":"skinnychenpi"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-11"},{"lineNumber":190,"author":{"gitId":"skinnychenpi"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-03-11"},{"lineNumber":191,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":192,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":193,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":194,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if {@code meetings} contains only unique meetings.","lastModifiedDate":"2021-03-11"},{"lineNumber":195,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":196,"author":{"gitId":"skinnychenpi"},"content":"    private boolean meetingsAreUnique(List\u003cMeeting\u003e meetings) {","lastModifiedDate":"2021-03-11"},{"lineNumber":197,"author":{"gitId":"skinnychenpi"},"content":"        for (int i \u003d 0; i \u003c meetings.size() - 1; i++) {","lastModifiedDate":"2021-03-11"},{"lineNumber":198,"author":{"gitId":"skinnychenpi"},"content":"            for (int j \u003d i + 1; j \u003c meetings.size(); j++) {","lastModifiedDate":"2021-03-11"},{"lineNumber":199,"author":{"gitId":"skinnychenpi"},"content":"                if (meetings.get(i).isSameMeeting(meetings.get(j))) {","lastModifiedDate":"2021-03-11"},{"lineNumber":200,"author":{"gitId":"skinnychenpi"},"content":"                    return false;","lastModifiedDate":"2021-03-11"},{"lineNumber":201,"author":{"gitId":"skinnychenpi"},"content":"                }","lastModifiedDate":"2021-03-11"},{"lineNumber":202,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-03-11"},{"lineNumber":203,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":204,"author":{"gitId":"skinnychenpi"},"content":"        return true;","lastModifiedDate":"2021-03-11"},{"lineNumber":205,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":206,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"Maurice2n97":47,"skinnychenpi":133,"hengyiqun":26}},{"path":"src/main/java/seedu/address/model/meeting/exceptions/DuplicateMeetingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting.exceptions;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"/**","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * identity).","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" */","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"public class DuplicateMeetingException extends RuntimeException {","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"    public DuplicateMeetingException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"        super(\"Operation would result in duplicate meetings\");","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"skinnychenpi":12}},{"path":"src/main/java/seedu/address/model/meeting/exceptions/MeetingNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting.exceptions;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"/**","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" */","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"public class MeetingNotFoundException extends RuntimeException {","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingNotFoundException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"        super(\"Can\u0027t find the meeting in the UniqueMeetingList.\");","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"skinnychenpi":10}},{"path":"src/main/java/seedu/address/model/meeting/exceptions/MeetingTimeClashException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.model.meeting.exceptions;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"public class MeetingTimeClashException extends RuntimeException {","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"    private static final String MEETING_CLASH_MESSAGE \u003d \"Already has a meeting inside the meeting list with clashing \"","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"            + \"time.\";","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    public MeetingTimeClashException() {","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"        super(String.format(MEETING_CLASH_MESSAGE));","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"Maurice2n97":13}},{"path":"src/main/java/seedu/address/model/note/Content.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.model.note;","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":" * Represents a Note\u0027s content in the note book.","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":" * Guarantees: immutable; is valid.","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"public class Content {","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"    public final String content;","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"     * Constructs a {@code Content}.","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"     *","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"     * @param content A valid Content.","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"    public Content(String content) {","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(content);","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"        this.content \u003d content;","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"    public String toString() {","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"        return this.content;","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"                || (other instanceof seedu.address.model.note.Content // instanceof handles nulls","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 content.equalsIgnoreCase(((Content) other).content)); // state check","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"    public int hashCode() {","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"        return content.hashCode();","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"hengyiqun":41}},{"path":"src/main/java/seedu/address/model/note/Note.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.model.note;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.meeting.Priority;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"public class Note {","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"    private final Content content;","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"    private final Priority priority;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"    public Note(Content content) {","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(content);","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"        this.content \u003d content;","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"        this.priority \u003d new Priority(\"1\");","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"    public Note(Content content, Priority priority) {","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"        this.content \u003d content;","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"     * Returns true if both notes have the same note (name).","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"     * This defines a weaker notion of equality between two notes.","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"    public boolean isSameNote(Note otherNote) {","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"        if (otherNote \u003d\u003d this) {","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"            return true;","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"        return otherNote !\u003d null","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 otherNote.getContent().equals(getContent());","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"        return this.content.hashCode();","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"                || (other instanceof Note // instanceof handles nulls","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 this.content.equals(((Note) other).content)); // state check","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"    public Content getContent() {","lastModifiedDate":"2021-04-01"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"        return this.content;","lastModifiedDate":"2021-04-01"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"    public Priority getPriority() {","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"        return this.priority;","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"    public String toString() {","lastModifiedDate":"2021-04-01"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-04-01"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"        builder.append(getContent())","lastModifiedDate":"2021-04-01"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"                .append(\"; Priority: \")","lastModifiedDate":"2021-04-01"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"                .append(getPriority());","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":62,"author":{"gitId":"hengyiqun"},"content":"        return builder.toString();","lastModifiedDate":"2021-04-01"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"hengyiqun":64}},{"path":"src/main/java/seedu/address/model/note/NoteBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.model.note;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import java.util.List;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":" * Wraps all data at the note-book level","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":" * Duplicates are not allowed (by .isSameNote comparison)","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"public class NoteBook implements ReadOnlyNoteBook {","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"    private final UniqueNoteList notes;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"    /*","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"     *   among constructors.","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"    {","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"        this.notes \u003d new UniqueNoteList();","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"    public NoteBook() {}","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"     * Creates a NoteBook using the notes in the {@code toBeCopied}","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"    public NoteBook(ReadOnlyNoteBook toBeCopied) {","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"        this();","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"    //// list overwrite operations","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"     * Replaces the contents of the note list with {@code notes}.","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"     * {@code notes} must not contain duplicate notes.","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"    public void setNotes(List\u003cNote\u003e notes) {","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"        this.notes.setNotes(notes);","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"     * Resets the existing data of this {@code NoteBook} with {@code newData}.","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"    public void resetData(ReadOnlyNoteBook newData) {","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(newData);","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"        setNotes(newData.getNoteList());","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"    //// note-level operations","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"     * Returns true if a note with the same content as {@code note} exists in the address book.","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"hengyiqun"},"content":"    public boolean hasNote(Note note) {","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(note);","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"hengyiqun"},"content":"        return notes.contains(note);","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"hengyiqun"},"content":"     * Adds a note to the note book.","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"hengyiqun"},"content":"     * The note must not already exist in the note book.","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"hengyiqun"},"content":"    public void addNote(Note note) {","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"hengyiqun"},"content":"        notes.add(note);","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":75,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"hengyiqun"},"content":"     * Replaces the given note {@code target} in the list with {@code editedNote}.","lastModifiedDate":"2021-03-31"},{"lineNumber":77,"author":{"gitId":"hengyiqun"},"content":"     * {@code target} must exist in the note book.","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"hengyiqun"},"content":"     * The content of {@code editedNote} must not be the same as another existing note in the note book.","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"hengyiqun"},"content":"    public void setNote(Note target, Note editedNote) {","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(editedNote);","lastModifiedDate":"2021-03-31"},{"lineNumber":82,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"        notes.setNote(target, editedNote);","lastModifiedDate":"2021-03-31"},{"lineNumber":84,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":85,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"hengyiqun"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"hengyiqun"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":90,"author":{"gitId":"hengyiqun"},"content":"    public void removeNote(Note key) {","lastModifiedDate":"2021-03-31"},{"lineNumber":91,"author":{"gitId":"hengyiqun"},"content":"        notes.remove(key);","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"hengyiqun"},"content":"    //// util methods","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":96,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":97,"author":{"gitId":"hengyiqun"},"content":"    public String toString() {","lastModifiedDate":"2021-03-31"},{"lineNumber":98,"author":{"gitId":"hengyiqun"},"content":"        return notes.asUnmodifiableObservableList().size() + \" notes\";","lastModifiedDate":"2021-03-31"},{"lineNumber":99,"author":{"gitId":"hengyiqun"},"content":"        // TODO: refine later","lastModifiedDate":"2021-03-31"},{"lineNumber":100,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":101,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":102,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"hengyiqun"},"content":"    public ObservableList\u003cNote\u003e getNoteList() {","lastModifiedDate":"2021-03-31"},{"lineNumber":104,"author":{"gitId":"hengyiqun"},"content":"        return notes.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"hengyiqun"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-31"},{"lineNumber":109,"author":{"gitId":"hengyiqun"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-31"},{"lineNumber":110,"author":{"gitId":"hengyiqun"},"content":"                || (other instanceof seedu.address.model.note.NoteBook // instanceof handles nulls","lastModifiedDate":"2021-03-31"},{"lineNumber":111,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 notes.equals(((seedu.address.model.note.NoteBook) other).notes));","lastModifiedDate":"2021-03-31"},{"lineNumber":112,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":114,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":115,"author":{"gitId":"hengyiqun"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-31"},{"lineNumber":116,"author":{"gitId":"hengyiqun"},"content":"        return notes.hashCode();","lastModifiedDate":"2021-03-31"},{"lineNumber":117,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":118,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-31"},{"lineNumber":119,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"hengyiqun":119}},{"path":"src/main/java/seedu/address/model/note/ReadOnlyNoteBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.model.note;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":" * Unmodifiable view of a note book","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"public interface ReadOnlyNoteBook {","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"     * Returns an unmodifiable view of the notes list.","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"     * This list will not contain any duplicate notes.","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"    ObservableList\u003cNote\u003e getNoteList();","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"hengyiqun":16}},{"path":"src/main/java/seedu/address/model/note/UniqueNoteList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.model.note;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import java.util.List;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.exceptions.DuplicateNoteException;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.exceptions.NoteNotFoundException;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"public class UniqueNoteList implements Iterable\u003cNote\u003e {","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"    private final ObservableList\u003cNote\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"    private final ObservableList\u003cNote\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"     * Returns true if the list contains an equivalent note as the given argument.","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"    public boolean contains(Note toCheck) {","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"        return internalList.stream().anyMatch(toCheck::isSameNote);","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"     * Adds a note to the list.","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"     * The note must not already exist in the list.","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"    public void add(Note toAdd) {","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"            throw new DuplicateNoteException();","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"     * Replaces the note {@code target} in the list with {@code editedNote}.","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"     * The note identity of {@code editedNote} must not be the same as another existing note in the list.","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"    public void setNote(Note target, Note editedNote) {","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"        requireAllNonNull(target, editedNote);","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"            throw new NoteNotFoundException();","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"        if (!target.isSameNote(editedNote) \u0026\u0026 contains(editedNote)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"            throw new DuplicateNoteException();","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"        internalList.set(index, editedNote);","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"     * Removes the equivalent note from the list.","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"hengyiqun"},"content":"     * The note must exist in the list.","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"hengyiqun"},"content":"    public void remove(Note toRemove) {","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"hengyiqun"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"hengyiqun"},"content":"            throw new NoteNotFoundException();","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"hengyiqun"},"content":"    public void setNotes(UniqueNoteList replacement) {","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"hengyiqun"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":75,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":77,"author":{"gitId":"hengyiqun"},"content":"     * Replaces the contents of this list with {@code note}.","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"hengyiqun"},"content":"     * {@code notes} must not contain duplicate note.","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"hengyiqun"},"content":"    public void setNotes(List\u003cNote\u003e note) {","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"hengyiqun"},"content":"        requireAllNonNull(note);","lastModifiedDate":"2021-03-31"},{"lineNumber":82,"author":{"gitId":"hengyiqun"},"content":"        if (!notesAreUnique(note)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"            throw new DuplicateNoteException();","lastModifiedDate":"2021-03-31"},{"lineNumber":84,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":85,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"hengyiqun"},"content":"        internalList.setAll(note);","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":90,"author":{"gitId":"hengyiqun"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-03-31"},{"lineNumber":91,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"hengyiqun"},"content":"    public ObservableList\u003cNote\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"hengyiqun"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":96,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":97,"author":{"gitId":"hengyiqun"},"content":"    public Iterator\u003cNote\u003e iterator() {","lastModifiedDate":"2021-03-31"},{"lineNumber":98,"author":{"gitId":"hengyiqun"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-03-31"},{"lineNumber":99,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":100,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":101,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":102,"author":{"gitId":"hengyiqun"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"hengyiqun"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-31"},{"lineNumber":104,"author":{"gitId":"hengyiqun"},"content":"                || (other instanceof UniqueNoteList // instanceof handles nulls","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 internalList.equals(((UniqueNoteList) other).internalList));","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":109,"author":{"gitId":"hengyiqun"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-31"},{"lineNumber":110,"author":{"gitId":"hengyiqun"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-03-31"},{"lineNumber":111,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":112,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":114,"author":{"gitId":"hengyiqun"},"content":"     * Returns true if {@code notes} contains only unique notes.","lastModifiedDate":"2021-03-31"},{"lineNumber":115,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":116,"author":{"gitId":"hengyiqun"},"content":"    private boolean notesAreUnique(List\u003cNote\u003e notes) {","lastModifiedDate":"2021-03-31"},{"lineNumber":117,"author":{"gitId":"hengyiqun"},"content":"        for (int i \u003d 0; i \u003c notes.size() - 1; i++) {","lastModifiedDate":"2021-03-31"},{"lineNumber":118,"author":{"gitId":"hengyiqun"},"content":"            for (int j \u003d i + 1; j \u003c notes.size(); j++) {","lastModifiedDate":"2021-03-31"},{"lineNumber":119,"author":{"gitId":"hengyiqun"},"content":"                if (notes.get(i).isSameNote(notes.get(j))) {","lastModifiedDate":"2021-03-31"},{"lineNumber":120,"author":{"gitId":"hengyiqun"},"content":"                    return false;","lastModifiedDate":"2021-03-31"},{"lineNumber":121,"author":{"gitId":"hengyiqun"},"content":"                }","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"hengyiqun"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":123,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":124,"author":{"gitId":"hengyiqun"},"content":"        return true;","lastModifiedDate":"2021-03-31"},{"lineNumber":125,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":126,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"hengyiqun":126}},{"path":"src/main/java/seedu/address/model/note/exceptions/DuplicateNoteException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.model.note.exceptions;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":" * Signals that the operation will result in duplicate Notes (Notes are considered duplicates if they have the same","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":" * content).","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"public class DuplicateNoteException extends RuntimeException {","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"    public DuplicateNoteException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"        super(\"Operation would result in duplicate notes\");","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"hengyiqun":11}},{"path":"src/main/java/seedu/address/model/note/exceptions/NoteNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.model.note.exceptions;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":" * Signals that the operation is unable to find the specified note.","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"public class NoteNotFoundException extends RuntimeException {}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"hengyiqun":6}},{"path":"src/main/java/seedu/address/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":"    public static final String PLACE_HOLDER \u003d \"~No address\";","lastModifiedDate":"2021-04-08"},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\" + \"|\" + PLACE_HOLDER;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"totoyoyo":3,"-":56}},{"path":"src/main/java/seedu/address/model/person/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"hengyiqun"},"content":"    public Set\u003cPerson\u003e findPersonsInGroup(Group group) {","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cPerson\u003e personInGroup \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"hengyiqun"},"content":"        for (Person person: persons) {","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"hengyiqun"},"content":"            if (person.inGroup(group)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"hengyiqun"},"content":"                personInGroup.add(person);","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"hengyiqun"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"hengyiqun"},"content":"        return personInGroup;","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"     * For storage use @code{JsonAdaptedPersonMeetingConnection}","lastModifiedDate":"2021-04-04"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"    public Person getPersonByName(PersonName name) {","lastModifiedDate":"2021-04-04"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"        for (Person person : persons) {","lastModifiedDate":"2021-04-04"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"            if (person.getName().equals(name)) {","lastModifiedDate":"2021-04-04"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"                return person;","lastModifiedDate":"2021-04-04"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-04-04"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-04"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"        return null;","lastModifiedDate":"2021-04-04"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2018-04-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons));","lastModifiedDate":"2018-08-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"skinnychenpi":16,"hengyiqun":12,"-":115}},{"path":"src/main/java/seedu/address/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book.","lastModifiedDate":"2018-02-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";","lastModifiedDate":"2018-02-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \"","lastModifiedDate":"2018-02-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    - be at least 2 characters long\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";","lastModifiedDate":"2018-02-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";","lastModifiedDate":"2018-02-09"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"    public static final String PLACE_HOLDER \u003d \"~No email\";","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\"","lastModifiedDate":"2018-09-22"},{"lineNumber":29,"author":{"gitId":"totoyoyo"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX + \"|\" +\"(\" +","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"            PLACE_HOLDER + \")\";","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"totoyoyo":3,"-":66}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * Tests that a {@code Person}\u0027s {@code PersonName} matches any of the keywords given.","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"skinnychenpi":1,"-":30}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.util.ImageRequestUtil;","lastModifiedDate":"2021-04-08"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    private final PersonName personName;","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    private ProfilePicture picture;","lastModifiedDate":"2021-04-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"    private final Set\u003cGroup\u003e groups \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    public Person(PersonName personName, Phone phone, Email email, Address address, Set\u003cGroup\u003e groups) {","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        requireAllNonNull(personName, phone, email, address, groups);","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        this.personName \u003d personName;","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"        this.groups.addAll(groups);","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"        try {","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"            Image image \u003d ImageRequestUtil.getGravatarImage(email.value);","lastModifiedDate":"2021-04-08"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"            this.picture \u003d new ProfilePicture(image);","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-04-08"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"            this.picture \u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-08"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the profile picture, null if there is no profile picture.","lastModifiedDate":"2021-04-08"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-04-08"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-08"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"    public ProfilePicture getProfilePicture() {","lastModifiedDate":"2021-04-08"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"        return picture;","lastModifiedDate":"2021-04-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    public PersonName getName() {","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        return personName;","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":75,"author":{"gitId":"hengyiqun"},"content":"     * Returns an immutable group set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":78,"author":{"gitId":"hengyiqun"},"content":"    public Set\u003cGroup\u003e getGroups() {","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"hengyiqun"},"content":"        return Collections.unmodifiableSet(groups);","lastModifiedDate":"2021-03-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"hengyiqun"},"content":"    public boolean inGroup(Group group) {","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"        return groups.contains(group);","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if both persons have the same personName.","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":118,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 otherPerson.getGroups().equals(getGroups());","lastModifiedDate":"2021-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"        return Objects.hash(personName, phone, email, address, groups);","lastModifiedDate":"2021-03-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                .append(getAddress());","lastModifiedDate":"2020-12-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":138,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e groups \u003d getGroups();","lastModifiedDate":"2021-03-14"},{"lineNumber":139,"author":{"gitId":"hengyiqun"},"content":"        if (!groups.isEmpty()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":140,"author":{"gitId":"hengyiqun"},"content":"            builder.append(\"; Groups: \");","lastModifiedDate":"2021-03-14"},{"lineNumber":141,"author":{"gitId":"hengyiqun"},"content":"            groups.forEach(builder::append);","lastModifiedDate":"2021-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Maurice2n97":16,"skinnychenpi":8,"hengyiqun":13,"-":109}},{"path":"src/main/java/seedu/address/model/person/PersonName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class PersonName {","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * Constructs a {@code PersonName}.","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    public PersonName(String name) {","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof PersonName // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 fullName.equals(((PersonName) other).fullName)); // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"skinnychenpi":5,"-":54}},{"path":"src/main/java/seedu/address/model/person/PersonSortDirection.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"public enum PersonSortDirection {","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"    ASC(\"ASC\"),","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"    DESC(\"DESC\");","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"    private final String sortString;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"    PersonSortDirection(String sortString) {this.sortString \u003d sortString;}","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"    public String getValue() { return sortString; }","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"totoyoyo":13}},{"path":"src/main/java/seedu/address/model/person/PersonSortOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"public enum PersonSortOption {","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"    NAME(\"NAME\"),","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"    EMAIL(\"EMAIL\"),","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"    PHONE(\"PHONE\"),","lastModifiedDate":"2021-04-02"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"    ADDRESS(\"ADDRESS\");","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"    private String sortString;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"    PersonSortOption(String sortString) {this.sortString \u003d sortString;}","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"    public String getValue() { return sortString; }","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"totoyoyo":14}},{"path":"src/main/java/seedu/address/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"    public static final String PLACE_HOLDER \u003d \"~No number\";","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\" + \"|\" + PLACE_HOLDER;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"totoyoyo":2,"-":52}},{"path":"src/main/java/seedu/address/model/person/ProfilePicture.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":" * A class representing a person\u0027s profile picture in the model.","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"public class ProfilePicture {","lastModifiedDate":"2021-04-08"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    public final Image picture;","lastModifiedDate":"2021-04-08"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    public ProfilePicture(Image picture) {","lastModifiedDate":"2021-04-08"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(picture);","lastModifiedDate":"2021-04-08"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"        this.picture \u003d picture;","lastModifiedDate":"2021-04-08"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-04-08"}],"authorContributionMap":{"Maurice2n97":18}},{"path":"src/main/java/seedu/address/model/person/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"     * Returns a person by name inside the addresbook.","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"     * @param name","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    public Person getPersonByName(PersonName name);","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Maurice2n97":6,"skinnychenpi":1,"-":15}},{"path":"src/main/java/seedu/address/model/reminder/ReadOnlyReminderBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.model.reminder;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"/**","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":" */","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"public interface ReadOnlyReminderBook {","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"    ObservableList\u003cReminder\u003e getReminderList();","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"totoyoyo":16}},{"path":"src/main/java/seedu/address/model/reminder/Reminder.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.model.reminder;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"import java.time.Duration;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"import java.time.Period;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.DateTime;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.MeetingName;","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.Priority;","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"public class Reminder {","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"    private final MeetingName meetingName;","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"    private final DateTime startDate;","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"    private final Priority priority;","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"    private Duration timeUntilStart;","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":"    private Period calDaysUntilStart;","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"    public Reminder(MeetingName meetingName, DateTime startDate, Priority priority) {","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"totoyoyo"},"content":"        this.meetingName \u003d meetingName;","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"totoyoyo"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"        updateTimeAndDaysUntil();","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"totoyoyo"},"content":"    public Reminder(Meeting meeting) {","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"        this.meetingName \u003d meeting.getName();","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"totoyoyo"},"content":"        this.startDate \u003d meeting.getStart();","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"totoyoyo"},"content":"        this.priority \u003d meeting.getPriority();","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"totoyoyo"},"content":"        updateTimeAndDaysUntil();","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"totoyoyo"},"content":"    public MeetingName getMeetingName() {","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"totoyoyo"},"content":"        return meetingName;","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"totoyoyo"},"content":"    public DateTime getStartDate() {","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"totoyoyo"},"content":"        return startDate;","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"totoyoyo"},"content":"    public Priority getPriority() {","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"totoyoyo"},"content":"        return priority;","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"totoyoyo"},"content":"    public void updateTimeAndDaysUntil() {","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"totoyoyo"},"content":"        LocalDateTime currentTime \u003d LocalDateTime.now();","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"totoyoyo"},"content":"        LocalDateTime meetingTime \u003d startDate.value;","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"totoyoyo"},"content":"        Duration timeUntil \u003d Duration.between(currentTime, meetingTime);","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"totoyoyo"},"content":"        Period period \u003d Period.between(currentTime.toLocalDate(), meetingTime.toLocalDate());","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"totoyoyo"},"content":"        this.timeUntilStart \u003d timeUntil;","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"totoyoyo"},"content":"        this.calDaysUntilStart \u003d period;","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"totoyoyo"},"content":"    public Duration getRawTimeUntilStart() {","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"totoyoyo"},"content":"        return timeUntilStart;","lastModifiedDate":"2021-03-24"},{"lineNumber":60,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"totoyoyo"},"content":"//    public String yearTimeUntilToString() {","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"totoyoyo"},"content":"//        Duration timeMinusDays \u003d timeUntilStart.minusDays(timeUntilStart.toDaysPart());","lastModifiedDate":"2021-03-24"},{"lineNumber":64,"author":{"gitId":"totoyoyo"},"content":"//        String outString \u003d String.format(\"%d years, %d months, %d days, %d hours, %d minutes, %d seconds\",","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"totoyoyo"},"content":"//                calDaysUntilStart.getYears(),","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"totoyoyo"},"content":"//                calDaysUntilStart.getMonths(), calDaysUntilStart.getDays(), timeMinusDays.toHoursPart(),","lastModifiedDate":"2021-03-24"},{"lineNumber":67,"author":{"gitId":"totoyoyo"},"content":"//                timeMinusDays.toMinutesPart(), timeMinusDays.toSecondsPart());","lastModifiedDate":"2021-03-24"},{"lineNumber":68,"author":{"gitId":"totoyoyo"},"content":"//        return outString;","lastModifiedDate":"2021-03-24"},{"lineNumber":69,"author":{"gitId":"totoyoyo"},"content":"//    }","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"totoyoyo"},"content":"    public String dayTimeUntilToString() {","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"totoyoyo"},"content":"        String outString \u003d String.format(\"%d days, %d hours, %d minutes, %d seconds\",","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"totoyoyo"},"content":"                timeUntilStart.toDaysPart(), timeUntilStart.toHoursPart(),","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"totoyoyo"},"content":"                timeUntilStart.toMinutesPart(), timeUntilStart.toSecondsPart());","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"totoyoyo"},"content":"        return outString;","lastModifiedDate":"2021-03-24"},{"lineNumber":76,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":79,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":81,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"totoyoyo":82}},{"path":"src/main/java/seedu/address/model/reminder/ReminderBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.model.reminder;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"import java.util.List;","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"public class ReminderBook implements ReadOnlyReminderBook{","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":"    private final UniqueReminderList reminders;","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":"    /*","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"totoyoyo"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":"     *   among constructors.","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"totoyoyo"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"    {","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"        reminders \u003d new UniqueReminderList();","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"    public ReminderBook() {}","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"totoyoyo"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"totoyoyo"},"content":"     * Creates an ReminderBook using {@code toBeCopied}","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"totoyoyo"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"totoyoyo"},"content":"    public ReminderBook(ReadOnlyReminderBook toBeCopied) {","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"totoyoyo"},"content":"        this();","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"totoyoyo"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"totoyoyo"},"content":"    public ReminderBook(MeetingBook meetingBook){","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"totoyoyo"},"content":"        this();","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"totoyoyo"},"content":"        refreshRemindersFromMeetings(meetingBook);","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"totoyoyo"},"content":"    //// list overwrite operations","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"totoyoyo"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"totoyoyo"},"content":"     * Replaces the contents of the reminders","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"totoyoyo"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"totoyoyo"},"content":"    public void setReminders(List\u003cReminder\u003e reminders) {","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"totoyoyo"},"content":"        this.reminders.setReminders(reminders);","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"totoyoyo"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"totoyoyo"},"content":"     * Resets the existing data of this {@code ReminderBook} with {@code newData}.","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"totoyoyo"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"totoyoyo"},"content":"    public void resetData(ReadOnlyReminderBook newData) {","lastModifiedDate":"2021-03-27"},{"lineNumber":58,"author":{"gitId":"totoyoyo"},"content":"        requireNonNull(newData);","lastModifiedDate":"2021-03-27"},{"lineNumber":59,"author":{"gitId":"totoyoyo"},"content":"        setReminders(newData.getReminderList());","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":61,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":63,"author":{"gitId":"totoyoyo"},"content":"    public void refreshRemindersFromMeetings(MeetingBook meetingBook){","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"totoyoyo"},"content":"        ObservableList\u003cMeeting\u003e meetinglist \u003d meetingBook.getMeetingList();","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"totoyoyo"},"content":"//        List\u003cReminder\u003e remindersList \u003d meetinglist.stream().map(Reminder::new).sorted(new Comparator\u003cReminder\u003e() {","lastModifiedDate":"2021-03-27"},{"lineNumber":66,"author":{"gitId":"totoyoyo"},"content":"//            @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"totoyoyo"},"content":"//            public int compare(Reminder reminder1, Reminder reminder2) {","lastModifiedDate":"2021-03-27"},{"lineNumber":68,"author":{"gitId":"totoyoyo"},"content":"//                return reminder1.getRawTimeUntilStart().compareTo(reminder2.getRawTimeUntilStart());","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"totoyoyo"},"content":"//            }","lastModifiedDate":"2021-03-27"},{"lineNumber":70,"author":{"gitId":"totoyoyo"},"content":"//        }).collect(Collectors.toList());","lastModifiedDate":"2021-03-27"},{"lineNumber":71,"author":{"gitId":"totoyoyo"},"content":"        List\u003cReminder\u003e remindersList \u003d meetinglist.stream().map(Reminder::new).sorted(Comparator.comparing(","lastModifiedDate":"2021-03-27"},{"lineNumber":72,"author":{"gitId":"totoyoyo"},"content":"                Reminder::getRawTimeUntilStart)).collect(Collectors.toList());","lastModifiedDate":"2021-03-27"},{"lineNumber":73,"author":{"gitId":"totoyoyo"},"content":"        setReminders(remindersList);","lastModifiedDate":"2021-03-27"},{"lineNumber":74,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":75,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":76,"author":{"gitId":"totoyoyo"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":77,"author":{"gitId":"totoyoyo"},"content":"     * Returns an unmodifiable view of the reminders list.","lastModifiedDate":"2021-03-27"},{"lineNumber":78,"author":{"gitId":"totoyoyo"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":79,"author":{"gitId":"totoyoyo"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":80,"author":{"gitId":"totoyoyo"},"content":"    public ObservableList\u003cReminder\u003e getReminderList() {","lastModifiedDate":"2021-03-27"},{"lineNumber":81,"author":{"gitId":"totoyoyo"},"content":"        return this.reminders.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-27"},{"lineNumber":82,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":83,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":84,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":85,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":86,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"totoyoyo":86}},{"path":"src/main/java/seedu/address/model/reminder/UniqueReminderList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.model.reminder;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"import java.util.List;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"public class UniqueReminderList {","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"    private final ObservableList\u003cReminder\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"    private final ObservableList\u003cReminder\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"    public void setReminders(UniqueReminderList reminders) {","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":"        requireNonNull(reminders);","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"        internalList.setAll(reminders.internalList);","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"totoyoyo"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":"     * Replaces the contents of this list with {@code reminders}.","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"totoyoyo"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"    public void setReminders(List\u003cReminder\u003e reminders) {","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"        requireAllNonNull(reminders);","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"totoyoyo"},"content":"        internalList.setAll(reminders);","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"totoyoyo"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"totoyoyo"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"totoyoyo"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"totoyoyo"},"content":"    public ObservableList\u003cReminder\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"totoyoyo"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"totoyoyo":40}},{"path":"src/main/java/seedu/address/model/schedule/Schedulable.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.model.schedule;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":" * Represents objects that can be scheduled by a Scheduler. A schedulable object has","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":" * to have a start time  and end time, and a day it is scheduled on. Schedulable","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":" * objects can be scheduled into a timetable. A schedulable object must be active","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":" * from [start,end].","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":" *","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"public interface Schedulable {","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"     * get name of this object.","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    public String getNameString();","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"     * Get the start date time.","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    public LocalDateTime getStartLocalDateTime();","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"     * Get the termination date time.","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    public LocalDateTime getTerminateLocalDateTime();","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"     * Util method to check if two schedulables overlap or not.","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    public boolean isConflict(Schedulable schedulable);","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"Maurice2n97":41}},{"path":"src/main/java/seedu/address/model/schedule/SchedulableUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.model.schedule;","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":" * A class to manipulate schedulables, like shifting a schedulable by a certain offset,","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":" * or finding overlap between schedulable objects.","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"public class SchedulableUtil {","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"     * Splits a schedulable into multiple schedulables on different days. For example if a schedulable is scheduled","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"     * on friday 2pm  to Sunday 2pm, it should split into schedulables","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"     * [fri 2pm- fri 11.59.99999pm, sat 12am - sat 11.59.999999 pm , sunday 12am - 2pm]","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"     * @param schedulable","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    public static List\u003cSchedulable\u003e splitSchedulableByDay(Schedulable schedulable) {","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        LocalDateTime startDateTime \u003d schedulable.getStartLocalDateTime();","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        LocalDateTime endDateTime \u003d schedulable.getTerminateLocalDateTime();","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        //same day interval.","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        if (startDateTime.toLocalDate().isEqual(endDateTime.toLocalDate())) {","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"            return List.of(schedulable);","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"        ArrayList\u003cSchedulable\u003e listOfSchedulableUnits \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"        String name \u003d schedulable.getNameString();","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"        Schedulable firstPeriod \u003d new SimplePeriod(name, startDateTime, getEndOfTheDay(startDateTime));","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        listOfSchedulableUnits.add(firstPeriod);","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        //Check if case !endTime \u003d\u003d 00:00","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"        if (!endDateTime.isEqual(getStartOfTheDay(endDateTime))) {","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"            Schedulable lastPeriod \u003d new SimplePeriod(name, getStartOfTheDay(endDateTime), endDateTime);","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"            listOfSchedulableUnits.add(lastPeriod);","lastModifiedDate":"2021-04-01"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"        startDateTime \u003d getStartOfTheDay(startDateTime).plusDays(1);","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        endDateTime \u003d getStartOfTheDay(endDateTime);","lastModifiedDate":"2021-04-01"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"        //iterate through each day slot in between","lastModifiedDate":"2021-04-01"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        while(endDateTime.isAfter(startDateTime)) {","lastModifiedDate":"2021-04-01"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"            Schedulable toAdd \u003d new SimplePeriod(name, startDateTime, getEndOfTheDay(startDateTime));","lastModifiedDate":"2021-04-01"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"            listOfSchedulableUnits.add(toAdd);","lastModifiedDate":"2021-04-01"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"            startDateTime \u003d getStartOfTheDay(startDateTime).plusDays(1);","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"        return listOfSchedulableUnits;","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"     * Applies a positive offset to a Schedulable object by adding a positive number of hours and minutes to its","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"     * start and end times.","lastModifiedDate":"2021-04-01"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"     * @param schedulable","lastModifiedDate":"2021-04-01"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"     * @param hourOffset","lastModifiedDate":"2021-04-01"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"     * @param minuteOffset","lastModifiedDate":"2021-04-01"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-04-01"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"    public static Schedulable applyPositiveOffset(Schedulable schedulable, int hourOffset, int minuteOffset) {","lastModifiedDate":"2021-04-01"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"        return new SimplePeriod(schedulable.getNameString(),","lastModifiedDate":"2021-04-01"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"                applyPositiveOffset(schedulable.getStartLocalDateTime(), hourOffset, minuteOffset),","lastModifiedDate":"2021-04-01"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"                applyPositiveOffset(schedulable.getTerminateLocalDateTime(), hourOffset, minuteOffset));","lastModifiedDate":"2021-04-01"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"     * Applies a negative offset to a Schedulable object by subtracting a positive number of hours and minutes from its","lastModifiedDate":"2021-04-01"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"     * start and end times.","lastModifiedDate":"2021-04-01"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"     * @param schedulable","lastModifiedDate":"2021-04-01"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"     * @param hourOffset","lastModifiedDate":"2021-04-01"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"     * @param minuteOffset","lastModifiedDate":"2021-04-01"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-04-01"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"    public static Schedulable applyNegativeOffset(Schedulable schedulable, int hourOffset, int minuteOffset) {","lastModifiedDate":"2021-04-01"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"        return new SimplePeriod(","lastModifiedDate":"2021-04-01"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"                schedulable.getNameString(),","lastModifiedDate":"2021-04-01"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"                applyNegativeOffset(schedulable.getStartLocalDateTime(), hourOffset, minuteOffset),","lastModifiedDate":"2021-04-01"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"                 applyNegativeOffset(schedulable.getTerminateLocalDateTime(), hourOffset, minuteOffset));","lastModifiedDate":"2021-04-01"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"     * Offsets a local date by a negative number of hours and minutes;","lastModifiedDate":"2021-04-01"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-04-01"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"    public static LocalDateTime applyNegativeOffset(LocalDateTime localDateTime, int hourOffset, int minuteOffset) {","lastModifiedDate":"2021-04-01"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"        return localDateTime.minusHours(hourOffset).minusMinutes(minuteOffset);","lastModifiedDate":"2021-04-01"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"     * Offsets a datetime by a positive number of hours and minutes.","lastModifiedDate":"2021-04-01"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"     * in @code{applyOffset}","lastModifiedDate":"2021-04-01"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"     *","lastModifiedDate":"2021-04-01"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"     * @param offSetDateTime","lastModifiedDate":"2021-04-01"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-04-01"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"    public static LocalDateTime applyPositiveOffset(LocalDateTime offSetDateTime, int hourOffset, int minuteOffset) {","lastModifiedDate":"2021-04-01"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"        return offSetDateTime.plusHours(hourOffset).plusMinutes(minuteOffset);","lastModifiedDate":"2021-04-01"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the local date time of the end of the day, right before 00:00.","lastModifiedDate":"2021-04-01"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-04-01"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"    public static LocalDateTime getEndOfTheDay(LocalDateTime localDateTime) {","lastModifiedDate":"2021-04-01"},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"        return localDateTime.toLocalDate().atTime(LocalTime.MAX);","lastModifiedDate":"2021-04-01"},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":121,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the start of the day at 00:00.","lastModifiedDate":"2021-04-01"},{"lineNumber":122,"author":{"gitId":"Maurice2n97"},"content":"     * @param localDateTime","lastModifiedDate":"2021-04-01"},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-04-01"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"    public static LocalDateTime getStartOfTheDay(LocalDateTime localDateTime) {","lastModifiedDate":"2021-04-01"},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"        return localDateTime.toLocalDate().atTime(0,0);","lastModifiedDate":"2021-04-01"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"Maurice2n97":130}},{"path":"src/main/java/seedu/address/model/schedule/SimplePeriod.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.model.schedule;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":" * Represents a simple period in time that can be scheduled into the scheduler.","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"public class SimplePeriod implements Schedulable {","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    private final String name;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    private final LocalDateTime start;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    private final LocalDateTime end;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"     * Constructs a simple period of time that can be scheduled.","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"     * @param name","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"     * @param start","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"     * @param end","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    public SimplePeriod(String name, LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        assert end.isAfter(start);","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        this.start \u003d start;","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        this.end \u003d end;","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    public String getNameString() {","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"        return name;","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    public LocalDateTime getStartLocalDateTime() {","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        return start;","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    public LocalDateTime getTerminateLocalDateTime() {","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"        return end;","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"    public boolean isConflict(Schedulable schedulable) {","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        return !(this.end.compareTo(schedulable.getStartLocalDateTime()) \u003c\u003d 0","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"                || this.start.compareTo(schedulable.getTerminateLocalDateTime()) \u003e\u003d 0);","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Maurice2n97":50}},{"path":"src/main/java/seedu/address/model/schedule/TimetablePrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.model.schedule;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import javafx.beans.property.SimpleObjectProperty;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import javafx.beans.value.ObservableValue;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"public class TimetablePrefs {","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    private final SimpleObjectProperty\u003cLocalDate\u003e timetableStartDate;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"     * Default initialises the timetableStartDate to the localDate.","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    public TimetablePrefs(LocalDate localDate) {","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"        timetableStartDate \u003d new SimpleObjectProperty\u003cLocalDate\u003e(localDate);","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"     * Sets the timetableStartDate to a specified date.","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    public void setTimetableStartDate(LocalDate localDate) {","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        timetableStartDate.setValue(localDate);","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the timetable start date wrapped in Observable value wrapper.","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    public ObservableValue\u003cLocalDate\u003e getReadOnlyStartDate() {","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"        return timetableStartDate;","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"Maurice2n97":35}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.NoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.ReadOnlyNoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.PersonName;","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"            new Person(new PersonName(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"                getGroupSet(\"friends\")),","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"            new Person(new PersonName(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"                getGroupSet(\"colleagues\", \"friends\")),","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"            new Person(new PersonName(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"                getGroupSet(\"neighbours\")),","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"            new Person(new PersonName(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"                getGroupSet(\"family\")),","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"            new Person(new PersonName(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"                getGroupSet(\"classmates\")),","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            new Person(new PersonName(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"                getGroupSet(\"colleagues\"))","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"     * Returns a group set containing the list of strings given.","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"    public static Set\u003cGroup\u003e getGroupSet(String... strings) {","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"                .map(Group::new)","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"    // Change this to get sample meeting Data to be displayed.","lastModifiedDate":"2021-03-17"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"    public static ReadOnlyMeetingBook getSampleMeetingBook() {","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"        MeetingBook sampleMb \u003d new MeetingBook();","lastModifiedDate":"2021-03-17"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"        return sampleMb;","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":70,"author":{"gitId":"hengyiqun"},"content":"    public static ReadOnlyNoteBook getSampleNoteBook() {","lastModifiedDate":"2021-04-01"},{"lineNumber":71,"author":{"gitId":"hengyiqun"},"content":"        NoteBook sampleNb \u003d new NoteBook();","lastModifiedDate":"2021-04-01"},{"lineNumber":72,"author":{"gitId":"hengyiqun"},"content":"        return sampleNb;","lastModifiedDate":"2021-04-01"},{"lineNumber":73,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":74,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"Maurice2n97":11,"skinnychenpi":6,"hengyiqun":17,"-":41}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.connection.PersonMeetingConnection;","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.ReadOnlyNoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.addressbook.AddressBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.connection.ConnectionStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.meetingbook.MeetingBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.notebook.NoteBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"public interface Storage extends AddressBookStorage,","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        UserPrefsStorage, MeetingBookStorage, NoteBookStorage, ConnectionStorage {","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-10-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dMeeting Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-09"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    Path getMeetingBookFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook() throws DataConversionException, IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"    void saveMeetingBook(ReadOnlyMeetingBook meetingBook) throws IOException;","lastModifiedDate":"2021-03-18"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d NoteBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-09"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"    Path getNoteBookFilePath();","lastModifiedDate":"2021-04-01"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"    Optional\u003cReadOnlyNoteBook\u003e readNoteBook() throws DataConversionException, IOException;","lastModifiedDate":"2021-04-01"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":62,"author":{"gitId":"hengyiqun"},"content":"    void saveNoteBook(ReadOnlyNoteBook noteBook) throws IOException;","lastModifiedDate":"2021-04-01"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dPersonConnection methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-09"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-04-09"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"    Path getConnectionFilePath();","lastModifiedDate":"2021-04-09"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-04-09"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"    public Optional\u003cPersonMeetingConnection\u003e readConnection(ReadOnlyMeetingBook meetingBook,","lastModifiedDate":"2021-04-09"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"                                                            ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-04-09"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"            throws DataConversionException, IOException;","lastModifiedDate":"2021-04-09"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-04-09"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"    public void saveConnection(PersonMeetingConnection connection) throws IOException;","lastModifiedDate":"2021-04-09"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"Maurice2n97":40,"hengyiqun":7,"-":30}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.connection.PersonMeetingConnection;","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.ReadOnlyNoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.addressbook.AddressBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.connection.ConnectionStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.meetingbook.MeetingBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.notebook.NoteBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":" * Manages storage of AddressBook and MeetingBook data in local storage.","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    private MeetingBookStorage meetingBookStorage;","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"    private NoteBookStorage noteBookStorage;","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    private ConnectionStorage connectionStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage},","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"     * {@code meetingBookStorage}, {@code noteBookStorage} and {@code UserPrefStorage}","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, MeetingBookStorage meetingBookStorage,","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"                          NoteBookStorage noteBookStorage, UserPrefsStorage userPrefsStorage,","lastModifiedDate":"2021-04-09"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"                          ConnectionStorage connectionStorage) {","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        this.meetingBookStorage \u003d meetingBookStorage;","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"        this.noteBookStorage \u003d noteBookStorage;","lastModifiedDate":"2021-04-01"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"        this.connectionStorage \u003d connectionStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {","lastModifiedDate":"2016-10-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MeetingBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-17"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"    public Path getMeetingBookFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"        return meetingBookStorage.getMeetingBookFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"    public Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook() throws DataConversionException, IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"        return readMeetingBook(meetingBookStorage.getMeetingBookFilePath());","lastModifiedDate":"2021-03-17"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"    public Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"        return meetingBookStorage.readMeetingBook(filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"    public void saveMeetingBook(ReadOnlyMeetingBook meetingBook) throws IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"        saveMeetingBook(meetingBook, meetingBookStorage.getMeetingBookFilePath());","lastModifiedDate":"2021-03-17"},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":121,"author":{"gitId":"Maurice2n97"},"content":"    public void saveMeetingBook(ReadOnlyMeetingBook meetingBook, Path filePath) throws IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":122,"author":{"gitId":"Maurice2n97"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":"        meetingBookStorage.saveMeetingBook(meetingBook, filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":126,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":127,"author":{"gitId":"hengyiqun"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d NoteBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-01"},{"lineNumber":128,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":129,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":130,"author":{"gitId":"hengyiqun"},"content":"    public Path getNoteBookFilePath() {","lastModifiedDate":"2021-04-01"},{"lineNumber":131,"author":{"gitId":"hengyiqun"},"content":"        return noteBookStorage.getNoteBookFilePath();","lastModifiedDate":"2021-04-01"},{"lineNumber":132,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":133,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":134,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":135,"author":{"gitId":"hengyiqun"},"content":"    public Optional\u003cReadOnlyNoteBook\u003e readNoteBook() throws DataConversionException, IOException {","lastModifiedDate":"2021-04-01"},{"lineNumber":136,"author":{"gitId":"hengyiqun"},"content":"        return readNoteBook(noteBookStorage.getNoteBookFilePath());","lastModifiedDate":"2021-04-01"},{"lineNumber":137,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":138,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":139,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":140,"author":{"gitId":"hengyiqun"},"content":"    public Optional\u003cReadOnlyNoteBook\u003e readNoteBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2021-04-01"},{"lineNumber":141,"author":{"gitId":"hengyiqun"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2021-04-01"},{"lineNumber":142,"author":{"gitId":"hengyiqun"},"content":"        return noteBookStorage.readNoteBook(filePath);","lastModifiedDate":"2021-04-01"},{"lineNumber":143,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":144,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":145,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":146,"author":{"gitId":"hengyiqun"},"content":"    public void saveNoteBook(ReadOnlyNoteBook noteBook) throws IOException {","lastModifiedDate":"2021-04-01"},{"lineNumber":147,"author":{"gitId":"hengyiqun"},"content":"        saveNoteBook(noteBook, noteBookStorage.getNoteBookFilePath());","lastModifiedDate":"2021-04-01"},{"lineNumber":148,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":149,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":150,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":151,"author":{"gitId":"hengyiqun"},"content":"    public void saveNoteBook(ReadOnlyNoteBook noteBook, Path filePath) throws IOException {","lastModifiedDate":"2021-04-01"},{"lineNumber":152,"author":{"gitId":"hengyiqun"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2021-04-01"},{"lineNumber":153,"author":{"gitId":"hengyiqun"},"content":"        noteBookStorage.saveNoteBook(noteBook, filePath);","lastModifiedDate":"2021-04-01"},{"lineNumber":154,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":155,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":156,"author":{"gitId":"Maurice2n97"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person-Meeting Connection \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-09"},{"lineNumber":157,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-04-09"},{"lineNumber":158,"author":{"gitId":"Maurice2n97"},"content":"    public Path getConnectionFilePath() {","lastModifiedDate":"2021-04-09"},{"lineNumber":159,"author":{"gitId":"Maurice2n97"},"content":"        return connectionStorage.getConnectionFilePath();","lastModifiedDate":"2021-04-09"},{"lineNumber":160,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":161,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":162,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-04-09"},{"lineNumber":163,"author":{"gitId":"Maurice2n97"},"content":"    public Optional\u003cPersonMeetingConnection\u003e readConnection(ReadOnlyMeetingBook meetingBook,","lastModifiedDate":"2021-04-09"},{"lineNumber":164,"author":{"gitId":"Maurice2n97"},"content":"                                                            ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-04-09"},{"lineNumber":165,"author":{"gitId":"Maurice2n97"},"content":"            throws DataConversionException, IOException {","lastModifiedDate":"2021-04-09"},{"lineNumber":166,"author":{"gitId":"Maurice2n97"},"content":"        return readConnection(connectionStorage.getConnectionFilePath(), meetingBook, addressBook);","lastModifiedDate":"2021-04-09"},{"lineNumber":167,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":168,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":169,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-04-09"},{"lineNumber":170,"author":{"gitId":"Maurice2n97"},"content":"    public Optional\u003cPersonMeetingConnection\u003e readConnection(Path filePath, ReadOnlyMeetingBook meetingBook,","lastModifiedDate":"2021-04-09"},{"lineNumber":171,"author":{"gitId":"Maurice2n97"},"content":"                                                            ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-04-09"},{"lineNumber":172,"author":{"gitId":"Maurice2n97"},"content":"            throws DataConversionException, IOException {","lastModifiedDate":"2021-04-09"},{"lineNumber":173,"author":{"gitId":"Maurice2n97"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2021-04-09"},{"lineNumber":174,"author":{"gitId":"Maurice2n97"},"content":"        return connectionStorage.readConnection(filePath, meetingBook, addressBook);","lastModifiedDate":"2021-04-09"},{"lineNumber":175,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":176,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":177,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-04-09"},{"lineNumber":178,"author":{"gitId":"Maurice2n97"},"content":"    public void saveConnection(PersonMeetingConnection personMeetingConnection) throws IOException {","lastModifiedDate":"2021-04-09"},{"lineNumber":179,"author":{"gitId":"Maurice2n97"},"content":"        saveConnection(personMeetingConnection, connectionStorage.getConnectionFilePath());","lastModifiedDate":"2021-04-09"},{"lineNumber":180,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":181,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-04-09"},{"lineNumber":182,"author":{"gitId":"Maurice2n97"},"content":"    public void saveConnection(PersonMeetingConnection personMeetingConnection, Path filePath) throws IOException {","lastModifiedDate":"2021-04-09"},{"lineNumber":183,"author":{"gitId":"Maurice2n97"},"content":"        logger.fine(\"Attempting to write data to file: \" + filePath);","lastModifiedDate":"2021-04-09"},{"lineNumber":184,"author":{"gitId":"Maurice2n97"},"content":"        connectionStorage.saveConnection(personMeetingConnection, filePath);","lastModifiedDate":"2021-04-09"},{"lineNumber":185,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":186,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Maurice2n97":77,"hengyiqun":35,"-":75}},{"path":"src/main/java/seedu/address/storage/addressbook/AddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage.addressbook;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" * Represents a storage for {@link AddressBook}.","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface AddressBookStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see #getAddressBookFilePath()","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)","lastModifiedDate":"2016-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"Maurice2n97":1,"skinnychenpi":3,"-":42}},{"path":"src/main/java/seedu/address/storage/addressbook/JsonAdaptedGroup.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage.addressbook;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":" * Jackson-friendly version of {@link Group}.","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"public class JsonAdaptedGroup {","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"    private final String groupName;","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"     * Constructs a {@code JsonAdaptedGroup} with the given {@code groupName}.","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"    public JsonAdaptedGroup(String groupName) {","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"        this.groupName \u003d groupName;","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"     * Converts a given {@code Group} into this class for Jackson use.","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"    public JsonAdaptedGroup(Group source) {","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"        groupName \u003d source.groupName;","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"    @JsonValue","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"    public String getGroupName() {","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"        return groupName;","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"     * Converts this Jackson-friendly adapted group object into the model\u0027s {@code Group} object.","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted group.","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"    public Group toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"        if (!Group.isValidGroupName(groupName)) {","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"            throw new IllegalValueException(Group.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"        return new Group(groupName);","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"Maurice2n97":2,"hengyiqun":46}},{"path":"src/main/java/seedu/address/storage/addressbook/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage.addressbook;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.PersonName;","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"public class JsonAdaptedPerson {","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"    private final List\u003cJsonAdaptedGroup\u003e grouped \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"            @JsonProperty(\"group\") List\u003cJsonAdaptedGroup\u003e group) {","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"        if (group !\u003d null) {","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"            this.grouped.addAll(group);","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"        grouped.addAll(source.getGroups().stream()","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"                .map(JsonAdaptedGroup::new)","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"hengyiqun"},"content":"        final List\u003cGroup\u003e personGroups \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"hengyiqun"},"content":"        for (JsonAdaptedGroup group : grouped) {","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"hengyiqun"},"content":"            personGroups.add(group.toModelType());","lastModifiedDate":"2021-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"                    PersonName.class.getSimpleName()));","lastModifiedDate":"2021-03-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        if (!PersonName.isValidName(name)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"            throw new IllegalValueException(PersonName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        final PersonName modelPersonName \u003d new PersonName(name);","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"hengyiqun"},"content":"        final Set\u003cGroup\u003e modelGroups \u003d new HashSet\u003c\u003e(personGroups);","lastModifiedDate":"2021-03-14"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"        return new Person(modelPersonName, modelPhone, modelEmail, modelAddress, modelGroups);","lastModifiedDate":"2021-03-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Maurice2n97":5,"skinnychenpi":4,"hengyiqun":11,"-":90}},{"path":"src/main/java/seedu/address/storage/addressbook/JsonAddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage.addressbook;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorage implements AddressBookStorage {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public JsonAddressBookStorage(Path filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return readAddressBook(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Similar to {@link #readAddressBook()}.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                filePath, JsonSerializableAddressBook.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!jsonAddressBook.isPresent()) {","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}.","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Maurice2n97":1,"skinnychenpi":1,"-":77}},{"path":"src/main/java/seedu/address/storage/addressbook/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage.addressbook;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.addressbook.JsonAdaptedPerson;","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"public class JsonSerializableAddressBook {","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Maurice2n97":4,"skinnychenpi":1,"-":56}},{"path":"src/main/java/seedu/address/storage/connection/ConnectionStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage.connection;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.connection.PersonMeetingConnection;","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Optional;","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"public interface ConnectionStorage {","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the path to the data file.","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    public Path getConnectionFilePath();","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"     * Returns data of person and meeting connections in the form of a PersonMeetingConnection class.","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"     * Needs the meeting book data and addressBook data to form the connection.","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    public Optional\u003cPersonMeetingConnection\u003e readConnection(ReadOnlyMeetingBook meetingBook,","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"                                                            ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"            throws DataConversionException, IOException;","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the person and meeting connection from a specified file path.","lastModifiedDate":"2021-04-09"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"     * See {@link #readConnection(ReadOnlyMeetingBook,ReadOnlyAddressBook)}","lastModifiedDate":"2021-04-09"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"     * @param filePath path to the data file, cannot be null","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DataConversionException if the file is not of the correct format.","lastModifiedDate":"2021-04-09"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    public Optional\u003cPersonMeetingConnection\u003e readConnection(Path filePath, ReadOnlyMeetingBook meetingBook,","lastModifiedDate":"2021-04-09"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"                                                            ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"            throws DataConversionException, IOException;","lastModifiedDate":"2021-04-09"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"     * Saves the PersonMeeting connection into storage.","lastModifiedDate":"2021-04-09"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"     * @param connection the Person-Meeting connection","lastModifiedDate":"2021-04-09"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"     * @throws IOException if there is a problem writing to file.","lastModifiedDate":"2021-04-09"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    public void saveConnection(PersonMeetingConnection connection) throws IOException;","lastModifiedDate":"2021-04-09"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"     * Saves the Person Meeting Connection to a specified file path.","lastModifiedDate":"2021-04-09"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"     * See {@link #saveConnection(PersonMeetingConnection)}","lastModifiedDate":"2021-04-09"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"     * @param connection the person meeting connection.","lastModifiedDate":"2021-04-09"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"     * @param filePath path to data file to save the connection, cannot be null","lastModifiedDate":"2021-04-09"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"     * @throws IOException","lastModifiedDate":"2021-04-09"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"    public void saveConnection(PersonMeetingConnection connection, Path filePath) throws IOException;","lastModifiedDate":"2021-04-09"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-04-09"}],"authorContributionMap":{"Maurice2n97":62}},{"path":"src/main/java/seedu/address/storage/connection/JsonAdaptedPersonMeetingConnection.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage.connection;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-04-04"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-04-04"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-04-04"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.DateTimeUtil;","lastModifiedDate":"2021-04-04"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.connection.PersonMeetingConnection;","lastModifiedDate":"2021-04-04"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.*;","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-04-04"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-04-04"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.PersonName;","lastModifiedDate":"2021-04-04"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"public class JsonAdaptedPersonMeetingConnection {","lastModifiedDate":"2021-04-04"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    public static final String CONNECTION_FIELD_MESSAGE_FORMAT \u003d \"Connection\u0027s %s field is missing!\";","lastModifiedDate":"2021-04-04"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    private final String personName;","lastModifiedDate":"2021-04-04"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    private final String startDateTime;","lastModifiedDate":"2021-04-04"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    private final String meetingName;","lastModifiedDate":"2021-04-04"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * Constructs a {@code JsonAdoptedMeeting} with the given meeting details.","lastModifiedDate":"2021-04-04"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    @JsonCreator","lastModifiedDate":"2021-04-04"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    public JsonAdaptedPersonMeetingConnection(@JsonProperty(\"personName\") String personName,","lastModifiedDate":"2021-04-04"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"                              @JsonProperty(\"startDateTime\") String startDateTime,","lastModifiedDate":"2021-04-04"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"                              @JsonProperty(\"meetingName\") String meetingName) {","lastModifiedDate":"2021-04-04"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        this.personName \u003d personName;","lastModifiedDate":"2021-04-04"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2021-04-04"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        this.meetingName \u003d meetingName;","lastModifiedDate":"2021-04-04"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-04"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"     * Converts a given {@code Meeting} into this class for Jackson use.","lastModifiedDate":"2021-04-04"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    public JsonAdaptedPersonMeetingConnection(Meeting meetingSource, Person personSource) {","lastModifiedDate":"2021-04-04"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        personName \u003d personSource.getName().fullName;","lastModifiedDate":"2021-04-04"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        startDateTime \u003d DateTimeUtil.formatDateTime(meetingSource.getStart().value);","lastModifiedDate":"2021-04-04"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        meetingName \u003d meetingSource.getName().fullName;","lastModifiedDate":"2021-04-04"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"     * Converts this Jackson-friendly adapted meeting object into the model\u0027s {@code Meeting} object.","lastModifiedDate":"2021-04-04"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"     *","lastModifiedDate":"2021-04-04"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted meeting.","lastModifiedDate":"2021-04-04"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"    public PersonMeetingConnection toModelType(ReadOnlyAddressBook addressBook, ReadOnlyMeetingBook meetingBook,","lastModifiedDate":"2021-04-09"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"                                               PersonMeetingConnection connection) throws IllegalValueException {","lastModifiedDate":"2021-04-09"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        Person person \u003d addressBook.getPersonByName(new PersonName(personName));","lastModifiedDate":"2021-04-04"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        Meeting meeting \u003d meetingBook.getMeetingByNameAndStartTime(new MeetingName(meetingName), new DateTime(startDateTime));","lastModifiedDate":"2021-04-04"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        if (connection.existPersonMeetingConnection(person, meeting)) {","lastModifiedDate":"2021-04-04"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"            throw new IllegalValueException(JsonSerializableConnection.MESSAGE_DUPLICATE_CONNECTION);","lastModifiedDate":"2021-04-04"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-04"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(person, meeting);","lastModifiedDate":"2021-04-04"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        return connection;","lastModifiedDate":"2021-04-04"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-04-04"}],"authorContributionMap":{"Maurice2n97":5,"skinnychenpi":55}},{"path":"src/main/java/seedu/address/storage/connection/JsonConnectionStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage.connection;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-04-04"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-04-04"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-04-04"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2021-04-04"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2021-04-04"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.connection.PersonMeetingConnection;","lastModifiedDate":"2021-04-04"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-04-04"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-04-04"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.addressbook.JsonAddressBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import java.io.IOException;","lastModifiedDate":"2021-04-04"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-04-04"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Optional;","lastModifiedDate":"2021-04-04"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-04"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-04"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"public class JsonConnectionStorage implements ConnectionStorage {","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);","lastModifiedDate":"2021-04-04"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    private Path filePath;","lastModifiedDate":"2021-04-04"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    public JsonConnectionStorage(Path filePath) {","lastModifiedDate":"2021-04-04"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-04-04"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    public Path getConnectionFilePath() {","lastModifiedDate":"2021-04-04"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        return filePath;","lastModifiedDate":"2021-04-04"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    public Optional\u003cPersonMeetingConnection\u003e readConnection(ReadOnlyMeetingBook meetingBook,","lastModifiedDate":"2021-04-09"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"                                                            ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-04-09"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"            throws DataConversionException {","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        return readConnection(filePath, meetingBook, addressBook);","lastModifiedDate":"2021-04-04"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"     * Similar to {@link #readConnection(ReadOnlyMeetingBook, ReadOnlyAddressBook)}}.","lastModifiedDate":"2021-04-09"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"     *","lastModifiedDate":"2021-04-04"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-04-04"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2021-04-04"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"    public Optional\u003cPersonMeetingConnection\u003e readConnection(Path filePath, ReadOnlyMeetingBook meetingBook,","lastModifiedDate":"2021-04-09"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"                                                            ReadOnlyAddressBook addressBook) throws DataConversionException {","lastModifiedDate":"2021-04-09"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-04-04"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        Optional\u003cJsonSerializableConnection\u003e jsonConnection \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-04-04"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"                filePath, JsonSerializableConnection.class);","lastModifiedDate":"2021-04-04"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        if (!jsonConnection.isPresent()) {","lastModifiedDate":"2021-04-04"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"            return Optional.empty();","lastModifiedDate":"2021-04-04"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-04"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        try {","lastModifiedDate":"2021-04-04"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"            return Optional.of(jsonConnection.get().toModelType(meetingBook, addressBook));","lastModifiedDate":"2021-04-04"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-04-04"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2021-04-04"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2021-04-04"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-04"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"    public void saveConnection(PersonMeetingConnection connection) throws IOException {","lastModifiedDate":"2021-04-04"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"        saveConnection(connection, filePath);","lastModifiedDate":"2021-04-04"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"     * Similar to {@link #saveConnection(PersonMeetingConnection)}.","lastModifiedDate":"2021-04-04"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"     *","lastModifiedDate":"2021-04-04"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-04-04"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"    public void saveConnection(PersonMeetingConnection connection, Path filePath) throws IOException {","lastModifiedDate":"2021-04-04"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(connection);","lastModifiedDate":"2021-04-04"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-04-04"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2021-04-04"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableConnection(connection), filePath);","lastModifiedDate":"2021-04-04"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-04-04"}],"authorContributionMap":{"Maurice2n97":11,"skinnychenpi":70}},{"path":"src/main/java/seedu/address/storage/connection/JsonSerializableConnection.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage.connection;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-04-04"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-04-04"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2021-04-04"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-04-04"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.connection.PersonMeetingConnection;","lastModifiedDate":"2021-04-04"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-04-04"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-04-04"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.UniqueMeetingList;","lastModifiedDate":"2021-04-04"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-04-04"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-04-04"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.connection.JsonAdaptedPersonMeetingConnection;","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-04-04"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-04-04"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;","lastModifiedDate":"2021-04-04"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Map;","lastModifiedDate":"2021-04-04"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"@JsonRootName(value \u003d \"connection\")","lastModifiedDate":"2021-04-04"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"public class JsonSerializableConnection {","lastModifiedDate":"2021-04-04"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_DUPLICATE_CONNECTION \u003d \"Connections List contains duplicate connection(s).\";","lastModifiedDate":"2021-04-04"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    private final List\u003cJsonAdaptedPersonMeetingConnection\u003e connections \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-04"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * Constructs a {@code JsonSerializableMeetingBook} with the given persons.","lastModifiedDate":"2021-04-04"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    @JsonCreator","lastModifiedDate":"2021-04-04"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    public JsonSerializableConnection(@JsonProperty(\"connections\") List\u003cJsonAdaptedPersonMeetingConnection\u003e connection) {","lastModifiedDate":"2021-04-04"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        this.connections.addAll(connection);","lastModifiedDate":"2021-04-04"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"     * Converts a given {@code ReadOnlyMeetingBook} into this class for Jackson use.","lastModifiedDate":"2021-04-04"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"     *","lastModifiedDate":"2021-04-04"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableMeetingBook}.","lastModifiedDate":"2021-04-04"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    public JsonSerializableConnection(PersonMeetingConnection source) {","lastModifiedDate":"2021-04-04"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        HashMap\u003cPerson, UniqueMeetingList\u003e map \u003d source.getMeetingPersonMap();","lastModifiedDate":"2021-04-04"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        for (Map.Entry\u003cPerson, UniqueMeetingList\u003e dict : map.entrySet()) {","lastModifiedDate":"2021-04-04"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"            Person personKey \u003d dict.getKey();","lastModifiedDate":"2021-04-04"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"            for (Meeting meeting : dict.getValue()) {","lastModifiedDate":"2021-04-04"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"                connections.add(new JsonAdaptedPersonMeetingConnection(meeting, personKey));","lastModifiedDate":"2021-04-04"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-04-04"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-04"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"     * Converts this address book into the model\u0027s {@code MeetingBook} object.","lastModifiedDate":"2021-04-04"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"     *","lastModifiedDate":"2021-04-04"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2021-04-04"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"    public PersonMeetingConnection toModelType(ReadOnlyMeetingBook meetingBook, ReadOnlyAddressBook addressBook) throws IllegalValueException {","lastModifiedDate":"2021-04-09"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        PersonMeetingConnection connection \u003d new PersonMeetingConnection();","lastModifiedDate":"2021-04-04"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        for (JsonAdaptedPersonMeetingConnection jsonAdaptedPersonMeetingConnection : connections) {","lastModifiedDate":"2021-04-04"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"            connection \u003d jsonAdaptedPersonMeetingConnection.toModelType(addressBook, meetingBook, connection);","lastModifiedDate":"2021-04-04"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-04"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"        return connection;","lastModifiedDate":"2021-04-04"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-04-04"}],"authorContributionMap":{"Maurice2n97":5,"skinnychenpi":58}},{"path":"src/main/java/seedu/address/storage/meetingbook/JsonAdaptedMeeting.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage.meetingbook;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.DateTimeUtil;","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.DateTime;","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Description;","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.MeetingName;","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Priority;","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.addressbook.JsonAdaptedGroup;","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":" * Jackson-friendly version of {@link seedu.address.model.meeting.Meeting}.","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"public class JsonAdaptedMeeting {","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Meeting\u0027s %s field is missing!\";","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    private final String name;","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    private final String startDateTime;","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    private final String endDateTime;","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    private final String description;","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    private final String priority;","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"    private final List\u003cJsonAdaptedGroup\u003e group \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"     * Constructs a {@code JsonAdoptedMeeting} with the given meeting details.","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"    public JsonAdaptedMeeting(@JsonProperty(\"name\") String name,","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"                              @JsonProperty(\"startDateTime\") String startDateTime,","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"                              @JsonProperty(\"endDateTime\") String endDateTime,","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"                              @JsonProperty(\"description\") String description,","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"                              @JsonProperty(\"priority\") String priority,","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"                              @JsonProperty(\"group\") List\u003cJsonAdaptedGroup\u003e group) {","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"        if (group !\u003d null) {","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"            this.group.addAll(group);","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"     * Converts a given {@code Meeting} into this class for Jackson use.","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"    public JsonAdaptedMeeting(Meeting source) {","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"        startDateTime \u003d DateTimeUtil.formatDateTime(source.getStart().value);","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"        endDateTime \u003d DateTimeUtil.formatDateTime(source.getTerminate().value);","lastModifiedDate":"2021-03-24"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"        description \u003d source.getDescription().fullDescription;","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"        priority \u003d source.getPriority().toString();","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"hengyiqun"},"content":"        group.addAll(source.getGroups().stream()","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"hengyiqun"},"content":"                .map(JsonAdaptedGroup::new)","lastModifiedDate":"2021-03-14"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"     * Converts this Jackson-friendly adapted meeting object into the model\u0027s {@code Meeting} object.","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted meeting.","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"    public Meeting toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"hengyiqun"},"content":"        final List\u003cGroup\u003e meetingGroups \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":82,"author":{"gitId":"hengyiqun"},"content":"        for (JsonAdaptedGroup g: group) {","lastModifiedDate":"2021-03-14"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"            meetingGroups.add(g.toModelType());","lastModifiedDate":"2021-03-14"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2021-03-14"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-03-16"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"                    MeetingName.class.getSimpleName()));","lastModifiedDate":"2021-03-16"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"        if (!MeetingName.isValidName(name)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"            throw new IllegalValueException(MeetingName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"        final MeetingName modelMeetingName \u003d new MeetingName(name);","lastModifiedDate":"2021-03-15"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"        if (startDateTime \u003d\u003d null || endDateTime \u003d\u003d null) {","lastModifiedDate":"2021-03-14"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2021-03-14"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName()));","lastModifiedDate":"2021-03-14"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"        if (!DateTime.isValidDateTime(startDateTime) || !DateTime.isValidDateTime(endDateTime)) {","lastModifiedDate":"2021-03-14"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-14"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"        final DateTime modelStart \u003d new DateTime(startDateTime);","lastModifiedDate":"2021-03-14"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"        final DateTime modelTerminate \u003d new DateTime(endDateTime);","lastModifiedDate":"2021-03-14"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"        if (description \u003d\u003d null) {","lastModifiedDate":"2021-03-14"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2021-03-14"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));","lastModifiedDate":"2021-03-14"},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":"        final Description modelDescription \u003d new Description(description);","lastModifiedDate":"2021-03-14"},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"        if (priority \u003d\u003d null) {","lastModifiedDate":"2021-03-14"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-03-14"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"                    Priority.class.getSimpleName()));","lastModifiedDate":"2021-03-14"},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":"        if (!Priority.isValidPriority(priority)) {","lastModifiedDate":"2021-03-14"},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-14"},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":121,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":122,"author":{"gitId":"Maurice2n97"},"content":"        final Priority modelPriority \u003d new Priority(priority);","lastModifiedDate":"2021-03-14"},{"lineNumber":123,"author":{"gitId":"hengyiqun"},"content":"        final Set\u003cGroup\u003e modelTags \u003d new HashSet\u003c\u003e(meetingGroups);","lastModifiedDate":"2021-03-14"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"        try {","lastModifiedDate":"2021-03-14"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"            return new Meeting(modelMeetingName, modelStart, modelTerminate,","lastModifiedDate":"2021-03-15"},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"                    modelPriority, modelDescription, modelTags);","lastModifiedDate":"2021-03-14"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-03-14"},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalValueException(e.getMessage());","lastModifiedDate":"2021-03-14"},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":132,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-14"},{"lineNumber":133,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"Maurice2n97":117,"skinnychenpi":5,"hengyiqun":11}},{"path":"src/main/java/seedu/address/storage/meetingbook/JsonMeetingBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage.meetingbook;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":" * Represents a storage for {@link MeetingBook}.","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"public class JsonMeetingBookStorage implements MeetingBookStorage {","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonMeetingBookStorage.class);","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    private Path filePath;","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    public JsonMeetingBookStorage(Path filePath) {","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    public Path getMeetingBookFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"        return filePath;","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    public Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook() throws DataConversionException {","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"        return readMeetingBook(filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"     * Similar to {@link #readMeetingBook()}.","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"     *","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"    public Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook(Path filePath) throws DataConversionException {","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"        Optional\u003cJsonSerializableMeetingBook\u003e jsonMeetingBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"                filePath, JsonSerializableMeetingBook.class);","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"        if (!jsonMeetingBook.isPresent()) {","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"        try {","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"            return Optional.of(jsonMeetingBook.get().toModelType());","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"            logger.info(\"Illegal values found for Meeting Book in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"    public void saveMeetingBook(ReadOnlyMeetingBook meetingBook) throws IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"        saveMeetingBook(meetingBook, filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"     * Similar to {@link #saveMeetingBook(ReadOnlyMeetingBook)}.","lastModifiedDate":"2021-03-17"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"     *","lastModifiedDate":"2021-03-17"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"    public void saveMeetingBook(ReadOnlyMeetingBook meetingBook, Path filePath) throws IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(meetingBook);","lastModifiedDate":"2021-03-17"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableMeetingBook(meetingBook), filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-17"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"Maurice2n97":82}},{"path":"src/main/java/seedu/address/storage/meetingbook/JsonSerializableMeetingBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage.meetingbook;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-03-18"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.meetingbook.JsonAdaptedMeeting;","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":" * An Immutable MeetingBook that is serializable to JSON format.","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"@JsonRootName(value \u003d \"meetingbook\")","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"public class JsonSerializableMeetingBook {","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Meetings List contains duplicate meeting(s).\";","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    private final List\u003cJsonAdaptedMeeting\u003e meetings \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"     * Constructs a {@code JsonSerializableMeetingBook} with the given persons.","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    public JsonSerializableMeetingBook(@JsonProperty(\"meetings\") List\u003cJsonAdaptedMeeting\u003e meeting) {","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"        this.meetings.addAll(meeting);","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"     * Converts a given {@code ReadOnlyMeetingBook} into this class for Jackson use.","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"     *","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableMeetingBook}.","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    public JsonSerializableMeetingBook(ReadOnlyMeetingBook source) {","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"        meetings.addAll(source.getMeetingList().stream().map(JsonAdaptedMeeting::new).collect(Collectors.toList()));","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"     * Converts this address book into the model\u0027s {@code MeetingBook} object.","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"     *","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    public MeetingBook toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"        MeetingBook meetingBook \u003d new MeetingBook();","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        for (JsonAdaptedMeeting jsonAdaptedMeeting : meetings) {","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"            Meeting meeting \u003d jsonAdaptedMeeting.toModelType();","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"            if (meetingBook.hasMeeting(meeting)) {","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"            }","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"            meetingBook.addMeeting(meeting);","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"        return meetingBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"Maurice2n97":61}},{"path":"src/main/java/seedu/address/storage/meetingbook/MeetingBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage.meetingbook;","lastModifiedDate":"2021-04-09"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":" * Represents a storage for {@link MeetingBook}.","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"public interface MeetingBookStorage {","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    Path getMeetingBookFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"     * Returns AddressBook data as a {@link ReadOnlyMeetingBook}.","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook() throws DataConversionException, IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"     * @see #getMeetingBookFilePath()","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"     * Saves the given {@link ReadOnlyMeetingBook} to the storage.","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"     * @param meetingBook cannot be null.","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"    void saveMeetingBook(ReadOnlyMeetingBook meetingBook) throws IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"     * @see #saveMeetingBook(ReadOnlyMeetingBook)","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    void saveMeetingBook(ReadOnlyMeetingBook meetingBook, Path filePath) throws IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"Maurice2n97":47}},{"path":"src/main/java/seedu/address/storage/notebook/JsonAdaptedNote.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage.notebook;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.meeting.Priority;","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Content;","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Note;","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":" * Jackson-friendly version of {@link Note}.","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"public class JsonAdaptedNote {","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Note\u0027s %s field is missing!\";","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"    private final String content;","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"    private final String priority;","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"     * Constructs a {@code JsonAdaptedNote} with the given note details.","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"    @JsonCreator","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"    public JsonAdaptedNote(@JsonProperty(\"note\") String content, @JsonProperty(\"priority\") String priority) {","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"        this.content \u003d content;","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"     * Converts a given {@code Note} into this class for Jackson use.","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"    public JsonAdaptedNote(Note source) {","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"        content \u003d source.getContent().content;","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"        priority \u003d source.getPriority().toString();","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"     * Converts this Jackson-friendly adapted note object into the model\u0027s {@code Note} object.","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"     *","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted note.","lastModifiedDate":"2021-04-01"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"    public Note toModelType() throws IllegalValueException {","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"        if (content \u003d\u003d null) {","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-04-01"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"                    Content.class.getSimpleName()));","lastModifiedDate":"2021-04-01"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"        final Content modelContent \u003d new Content(content);","lastModifiedDate":"2021-04-01"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"        if (priority \u003d\u003d null) {","lastModifiedDate":"2021-04-01"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"                    Priority.class.getSimpleName()));","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"        if (!Priority.isValidPriority(priority)) {","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"        final Priority modelPriority \u003d new Priority(priority);","lastModifiedDate":"2021-04-01"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"        return new Note(modelContent, modelPriority);","lastModifiedDate":"2021-04-01"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":62,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"Maurice2n97":2,"hengyiqun":60}},{"path":"src/main/java/seedu/address/storage/notebook/JsonNoteBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage.notebook;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import java.io.IOException;","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import java.util.Optional;","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.ReadOnlyNoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":" * A class to access NoteBook data stored as a json file on the hard disk.","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"public class JsonNoteBookStorage implements NoteBookStorage {","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonNoteBookStorage.class);","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"    private Path filePath;","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"    public JsonNoteBookStorage(Path filePath) {","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"    public Path getNoteBookFilePath() {","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"        return filePath;","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"    public Optional\u003cReadOnlyNoteBook\u003e readNoteBook() throws DataConversionException {","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"        return readNoteBook(filePath);","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"     * Similar to {@link #readNoteBook()}.","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"     *","lastModifiedDate":"2021-04-01"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-04-01"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"    public Optional\u003cReadOnlyNoteBook\u003e readNoteBook(Path filePath) throws DataConversionException {","lastModifiedDate":"2021-04-01"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-04-01"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"        Optional\u003cJsonSerializableNoteBook\u003e jsonNoteBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-04-01"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"                filePath, JsonSerializableNoteBook.class);","lastModifiedDate":"2021-04-01"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"        if (!jsonNoteBook.isPresent()) {","lastModifiedDate":"2021-04-01"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"            return Optional.empty();","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"        try {","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"            return Optional.of(jsonNoteBook.get().toModelType());","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-04-01"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2021-04-01"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2021-04-01"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":62,"author":{"gitId":"hengyiqun"},"content":"    @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"    public void saveNoteBook(ReadOnlyNoteBook noteBook) throws IOException {","lastModifiedDate":"2021-04-01"},{"lineNumber":64,"author":{"gitId":"hengyiqun"},"content":"        saveNoteBook(noteBook, filePath);","lastModifiedDate":"2021-04-01"},{"lineNumber":65,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":66,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":67,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":68,"author":{"gitId":"hengyiqun"},"content":"     * Similar to {@link #saveNoteBook(ReadOnlyNoteBook)}.","lastModifiedDate":"2021-04-01"},{"lineNumber":69,"author":{"gitId":"hengyiqun"},"content":"     *","lastModifiedDate":"2021-04-01"},{"lineNumber":70,"author":{"gitId":"hengyiqun"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-04-01"},{"lineNumber":71,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":72,"author":{"gitId":"hengyiqun"},"content":"    public void saveNoteBook(ReadOnlyNoteBook noteBook, Path filePath) throws IOException {","lastModifiedDate":"2021-04-01"},{"lineNumber":73,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(noteBook);","lastModifiedDate":"2021-04-01"},{"lineNumber":74,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-04-01"},{"lineNumber":75,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":76,"author":{"gitId":"hengyiqun"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2021-04-01"},{"lineNumber":77,"author":{"gitId":"hengyiqun"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableNoteBook(noteBook), filePath);","lastModifiedDate":"2021-04-01"},{"lineNumber":78,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":79,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":80,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"Maurice2n97":1,"hengyiqun":79}},{"path":"src/main/java/seedu/address/storage/notebook/JsonSerializableNoteBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage.notebook;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import java.util.List;","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Note;","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.NoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.ReadOnlyNoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.notebook.JsonAdaptedNote;","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":" * An Immutable NoteBook that is serializable to JSON format.","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"@JsonRootName(value \u003d \"notebook\")","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"public class JsonSerializableNoteBook {","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"Notes list contains duplicate note(s).\";","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"    private final List\u003cJsonAdaptedNote\u003e notes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"     * Constructs a {@code JsonSerializableNoteBook} with the given notes.","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"    @JsonCreator","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"    public JsonSerializableNoteBook(@JsonProperty(\"notes\") List\u003cJsonAdaptedNote\u003e notes) {","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"        this.notes.addAll(notes);","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"     * Converts a given {@code ReadOnlyNoteBook} into this class for Jackson use.","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"     *","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableNoteBook}.","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"    public JsonSerializableNoteBook(ReadOnlyNoteBook source) {","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"        notes.addAll(source.getNoteList().stream().map(JsonAdaptedNote::new).collect(Collectors.toList()));","lastModifiedDate":"2021-04-01"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"     * Converts this note book into the model\u0027s {@code NoteBook} object.","lastModifiedDate":"2021-04-01"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"     *","lastModifiedDate":"2021-04-01"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2021-04-01"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"    public NoteBook toModelType() throws IllegalValueException {","lastModifiedDate":"2021-04-01"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"        NoteBook noteBook \u003d new NoteBook();","lastModifiedDate":"2021-04-01"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"        for (JsonAdaptedNote jsonAdaptedNote : notes) {","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"            Note note \u003d jsonAdaptedNote.toModelType();","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"            if (noteBook.hasNote(note)) {","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_NOTE);","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"            }","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"            noteBook.addNote(note);","lastModifiedDate":"2021-04-01"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"        return noteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"Maurice2n97":3,"hengyiqun":58}},{"path":"src/main/java/seedu/address/storage/notebook/NoteBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage.notebook;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.NoteBook;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.ReadOnlyNoteBook;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":" * Represents a storage for {@link NoteBook}.","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"public interface NoteBookStorage {","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"    Path getNoteBookFilePath();","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"     * Returns NoteBook data as a {@link ReadOnlyNoteBook}.","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"    Optional\u003cReadOnlyNoteBook\u003e readNoteBook() throws DataConversionException, IOException;","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"     * @see #getNoteBookFilePath()","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"    Optional\u003cReadOnlyNoteBook\u003e readNoteBook(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"     * Saves the given {@link ReadOnlyNoteBook} to the storage.","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"     * @param noteBook cannot be null.","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"    void saveNoteBook(ReadOnlyNoteBook noteBook) throws IOException;","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"     * @see #saveNoteBook(ReadOnlyNoteBook)","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"    void saveNoteBook(ReadOnlyNoteBook noteBook, Path filePath) throws IOException;","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"Maurice2n97":1,"hengyiqun":45}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103-t16-2.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-04-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"totoyoyo":1,"-":101}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.Tab;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.TabPane;","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.ui.Test.*;","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"    private MeetingDashboard meetingDashboard;","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"    private TabPane displayTabs;","lastModifiedDate":"2021-03-27"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-27"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"    private Tab meetingsTab;","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-27"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"    private Tab timetableTab;","lastModifiedDate":"2021-03-27"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-27"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"    private StackPane meetingDashboardPlaceholder;","lastModifiedDate":"2021-03-27"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-27"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"    private StackPane timetableHolder;","lastModifiedDate":"2021-03-27"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":151,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":152,"author":{"gitId":"Maurice2n97"},"content":"        ObservableList\u003cMeeting\u003e meetingObservableList \u003d logic.getAllMeetingList();","lastModifiedDate":"2021-03-30"},{"lineNumber":153,"author":{"gitId":"Maurice2n97"},"content":"        TimetableView timetableView \u003d new TimetableView(meetingObservableList, logic.getTimeTableStartDate());","lastModifiedDate":"2021-03-30"},{"lineNumber":154,"author":{"gitId":"Maurice2n97"},"content":"        timetableHolder.getChildren().add(timetableView.getRoot());","lastModifiedDate":"2021-03-27"},{"lineNumber":155,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":156,"author":{"gitId":"skinnychenpi"},"content":"        // Yuheng To Maurice: I made my modification to the logic so now you can add meetings into the UI.","lastModifiedDate":"2021-03-15"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":"        meetingDashboard \u003d new MeetingDashboard(logic.getFilteredMeetingList());","lastModifiedDate":"2021-03-15"},{"lineNumber":158,"author":{"gitId":"Maurice2n97"},"content":"        meetingDashboardPlaceholder.getChildren().add(meetingDashboard.getRoot());","lastModifiedDate":"2021-03-27"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"Maurice2n97":32,"skinnychenpi":2,"-":197}},{"path":"src/main/java/seedu/address/ui/MeetingCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.DateTimeUtil;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":" * An UI component that displays information of a {@code Meeting}.","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"public class MeetingCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    private static final String FXML \u003d \"MeetingCard.fxml\";","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    public final Meeting meeting;","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    private HBox meetingPane;","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    private Label name;","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    private Label id;","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    private Label startDate;","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    private Label endDate;","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    private Label description;","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    private Label priority;","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    private FlowPane tags;","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    @FXML","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    private FlowPane personsRelated;","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"     * Creates a {@code meetingCard} with the given {@code meeting} and index to display.","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"    public MeetingCard(Meeting meeting, int displayedIndex) {","lastModifiedDate":"2021-03-13"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"        super(FXML);","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"        this.meeting \u003d meeting;","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2021-03-13"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        name.setText(meeting.getName().toString());","lastModifiedDate":"2021-03-13"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"        LocalDateTime startDateTime \u003d meeting.getStartLocalDateTime();","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        LocalDateTime endDateTime \u003d meeting.getTerminateLocalDateTime();","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"        startDate.setText(DateTimeUtil.prettyPrintFormatDateTime(startDateTime));","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"        endDate.setText(DateTimeUtil.prettyPrintFormatDateTime(endDateTime));","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"        description.setText(meeting.getDescription().toString());","lastModifiedDate":"2021-03-13"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"        priority.setText(meeting.getPriority().toString());","lastModifiedDate":"2021-03-13"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"        meeting.getGroups().stream()","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.groupName))","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.groupName)));","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"        // Only when the person meeting connection exist then it will be shown on the meeting card.","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"        if (!meeting.getConnectionToPerson().isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"            personsRelated.getChildren().add(new Label(\"People Attending:\"));","lastModifiedDate":"2021-04-09"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"            meeting.getConnectionToPerson().stream()","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"                    .sorted(Comparator.comparing(person -\u003e person.getName().fullName))","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"                    .forEach(person -\u003e personsRelated.getChildren().add(new Label(\"[\" + person.getName().fullName + \"]\")));","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-13"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-13"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-13"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"            return true;","lastModifiedDate":"2021-03-13"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-13"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"        if (!(other instanceof MeetingCard)) {","lastModifiedDate":"2021-03-13"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"            return false;","lastModifiedDate":"2021-03-13"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"        // state check","lastModifiedDate":"2021-03-13"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"        MeetingCard card \u003d (MeetingCard) other;","lastModifiedDate":"2021-03-13"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2021-03-13"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"                \u0026\u0026 meeting.equals(card.meeting);","lastModifiedDate":"2021-03-13"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"Maurice2n97":76,"skinnychenpi":12,"hengyiqun":3}},{"path":"src/main/java/seedu/address/ui/MeetingDashboard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":" * Dashboard containing the list of meetings.","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"public class MeetingDashboard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    private static final String FXML \u003d \"MeetingDashboard.fxml\";","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(MeetingDashboard.class);","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    private ListView\u003cMeeting\u003e meetingListView;","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    public MeetingDashboard(ObservableList\u003cMeeting\u003e meetingObservableList) {","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        super(FXML);","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"        meetingListView.setItems(meetingObservableList);","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"        meetingListView.setCellFactory(listView -\u003e new MeetingListViewCell());","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Meeting} using a {@code MeetingCard}.","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    class MeetingListViewCell extends ListCell\u003cMeeting\u003e {","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"        protected void updateItem(Meeting meeting, boolean empty) {","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"            super.updateItem(meeting, empty);","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"            if (empty || meeting \u003d\u003d null) {","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"                setGraphic(null);","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"                setText(null);","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"            } else {","lastModifiedDate":"2021-03-13"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"                setGraphic(new MeetingCard(meeting, getIndex() + 1).getRoot());","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"            }","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"Maurice2n97":51}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.paint.ImagePattern;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.util.ImageRequestUtil;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.ProfilePicture;","lastModifiedDate":"2021-04-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"    private Circle circle;","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"     * Creates a {@code PersonCard} with the given {@code Person} and index to display.","lastModifiedDate":"2021-03-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"        person.getGroups().stream()","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"hengyiqun"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.groupName))","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"hengyiqun"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.groupName)));","lastModifiedDate":"2021-03-14"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"        setUpProfilePicture(person);","lastModifiedDate":"2021-04-08"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"    public void setUpProfilePicture(Person person) {","lastModifiedDate":"2021-04-08"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"        Image image;","lastModifiedDate":"2021-04-08"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"        ProfilePicture profilePicture \u003d person.getProfilePicture();","lastModifiedDate":"2021-04-08"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"        if (person.getProfilePicture() !\u003d null) {","lastModifiedDate":"2021-04-08"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"            image \u003d profilePicture.picture;","lastModifiedDate":"2021-04-08"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"            circle.setFill(new ImagePattern(image));","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"        } else {","lastModifiedDate":"2021-04-08"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"            circle.setFill(Color.BLUE);","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Maurice2n97":21,"hengyiqun":3,"-":73}},{"path":"src/main/java/seedu/address/ui/Test.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.*;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"public class Test {","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    public static final Meeting MEETING1 \u003d new Meeting(new MeetingName(\"Hello\"),","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"            new DateTime(\"2021-03-31 16:00\"),","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"            new DateTime(\"2021-03-31 18:00\"),","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"            new Priority(\"2\"),","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"            new Description(\"nah\"),","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"            new HashSet\u003c\u003e()","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    );","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    public static final Meeting MEETING2 \u003d new Meeting(new MeetingName(\"Nobody\"),","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"            new DateTime(\"2021-03-30 05:00\"),","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"            new DateTime(\"2021-03-30 14:00\"),","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"            new Priority(\"2\"),","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"            new Description(\"nah\"),","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"            new HashSet\u003c\u003e()","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    );","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    public static final Meeting MEETING3 \u003d new Meeting(new MeetingName(\"CS3244\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"            new DateTime(\"2021-04-02 20:00\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"            new DateTime(\"2021-04-02 23:00\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"            new Priority(\"2\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"            new Description(\"nah\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"            new HashSet\u003c\u003e()","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    );","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Maurice2n97":32}},{"path":"src/main/java/seedu/address/ui/TimetablePlacementPolicy.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.time.Duration;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.schedule.Schedulable;","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.schedule.SchedulableUtil;","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":" * In charge of putting meetings into the @code{TimetableView} given a certain meeting,","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":" * provides method to check if it can be placed in the timetable or","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":" * not.","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":" * Provides method to calculate how far down the column it should be placed,","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":" * and in which column for a timetable.","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":" *","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":" * The policy will have seven days. with the first day starting on a specified start date.","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":" * The start time (HH:mm) of the day is fixed to be 7:00 am. A day will end at 7:00 am on the next day.","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":" *","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":" * To check if it is valid to be scheduled, it just needs to overlap with the time range of this timetable.","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":" * To overlap it must intersect a positive length interval (i.e it cannot just overlap at the endpoints)","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":" *","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":" * The part which is overlapping between days will be broken up.","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":" *","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":" *","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"public class TimetablePlacementPolicy {","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    private static final int SECONDS_IN_A_MINUTE \u003d 60;","lastModifiedDate":"2021-04-02"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    private static final int SECONDS_IN_AN_HOUR \u003d 3600;","lastModifiedDate":"2021-04-02"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    private static final long SECONDS_IN_DAY \u003d 86400;","lastModifiedDate":"2021-04-02"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    public static final double TIMETABLE_DISPLAY_SIZE \u003d 5760;","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    private static int startHour \u003d 7;","lastModifiedDate":"2021-04-09"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    private static int startMinute \u003d 0;","lastModifiedDate":"2021-04-09"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    private LocalDateTime startDateTime;","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"    private LocalDateTime endDateTime;","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"     * Takes in a startDate that it should be used as a reference point. Initializes the start and end times","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"     * represented bu this timetable policy.","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"     * @param startDate","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"    public TimetablePlacementPolicy(LocalDate startDate) {","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"        this.startDateTime \u003d startDate.atTime(startHour, startMinute);","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"        this.endDateTime \u003d startDateTime.plusDays(TimetableView.NUMBER_OF_COLUMNS);","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"     * Tests if a Schedulable lies within the range of the timetable range.","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"     * @param schedulable","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"    public boolean isWithinRange(Schedulable schedulable) {","lastModifiedDate":"2021-04-09"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"        LocalDateTime startTimeOfSchedulable \u003d schedulable.getStartLocalDateTime();","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"        LocalDateTime endTimeOfSchedulable \u003d schedulable.getTerminateLocalDateTime();","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"        return !(endTimeOfSchedulable.compareTo(startDateTime) \u003c\u003d 0","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"                || startTimeOfSchedulable.compareTo(endDateTime) \u003e\u003d 0);","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the column to put a schedulable in.","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"     * The schedulable must lie within","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"     * Note the schedulable must lie within a day from 7am - 7pm, else it will just slot into the","lastModifiedDate":"2021-03-29"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"     * first available day of the schedulable. You can call the method breakIntoUnits first to get","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"     * the single day slots before calling this method on each schedule.","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"     * @param schedulable","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"    public TimetableView.Column getColumnPlacement(Schedulable schedulable) {","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"        LocalDateTime dateTimeToSchedule \u003d schedulable.getStartLocalDateTime();","lastModifiedDate":"2021-03-29"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"        int daysBetween \u003d (int) Duration.between(startDateTime, dateTimeToSchedule).toDays();","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"        switch(daysBetween) {","lastModifiedDate":"2021-03-29"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"        case 0:","lastModifiedDate":"2021-03-29"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"            return TimetableView.Column.ONE;","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"        case 1:","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"            return TimetableView.Column.TWO;","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"        case 2:","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"            return TimetableView.Column.THREE;","lastModifiedDate":"2021-03-29"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"        case 3:","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"            return TimetableView.Column.FOUR;","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"        case 4:","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"            return TimetableView.Column.FIVE;","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"        case 5:","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"            return TimetableView.Column.SIX;","lastModifiedDate":"2021-03-29"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"        case 6:","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"            return TimetableView.Column.SEVEN;","lastModifiedDate":"2021-03-29"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"        default:","lastModifiedDate":"2021-03-29"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"            assert false; // Cannot end up here.","lastModifiedDate":"2021-03-29"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"        return null;","lastModifiedDate":"2021-03-29"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the number of seconds so far in a day, starting from 00:00.","lastModifiedDate":"2021-04-09"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"     * @param localDateTime","lastModifiedDate":"2021-03-29"},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-03-29"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"    public static int getSecondsInDay(LocalDateTime localDateTime) {","lastModifiedDate":"2021-04-02"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"        return localDateTime.getHour() * SECONDS_IN_AN_HOUR + localDateTime.getMinute() * SECONDS_IN_A_MINUTE","lastModifiedDate":"2021-04-09"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"                + localDateTime.getSecond();","lastModifiedDate":"2021-04-09"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the y-coordinate position of a timetable slot to be placed within the column","lastModifiedDate":"2021-04-09"},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":"     * , with the coordinate of value 0 corresponding to the tip of the column.","lastModifiedDate":"2021-04-09"},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":"     * @param schedulable","lastModifiedDate":"2021-04-09"},{"lineNumber":121,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-04-09"},{"lineNumber":122,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"    public double getVerticalPosition(Schedulable schedulable) {","lastModifiedDate":"2021-03-29"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"        LocalDateTime startingDateTime \u003d schedulable.getStartLocalDateTime();","lastModifiedDate":"2021-03-29"},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"        int minutesSoFar \u003d getSecondsInDay(applyOffset(startingDateTime));","lastModifiedDate":"2021-04-02"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"        double ratio \u003d (double) minutesSoFar / SECONDS_IN_DAY;","lastModifiedDate":"2021-04-02"},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":"        return ratio * TIMETABLE_DISPLAY_SIZE;","lastModifiedDate":"2021-03-29"},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":132,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the size in pixels of the timetable cell to represent the Schedulable.","lastModifiedDate":"2021-03-29"},{"lineNumber":133,"author":{"gitId":"Maurice2n97"},"content":"     * We assume the schedulable must start and end on the same day.","lastModifiedDate":"2021-03-29"},{"lineNumber":134,"author":{"gitId":"Maurice2n97"},"content":"     * @param schedulable","lastModifiedDate":"2021-03-29"},{"lineNumber":135,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-03-29"},{"lineNumber":136,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":137,"author":{"gitId":"Maurice2n97"},"content":"    public double getLengthOfSlot(Schedulable schedulable) {","lastModifiedDate":"2021-03-29"},{"lineNumber":138,"author":{"gitId":"Maurice2n97"},"content":"        LocalDateTime offSetStartDate \u003d applyOffset(schedulable.getStartLocalDateTime());","lastModifiedDate":"2021-03-30"},{"lineNumber":139,"author":{"gitId":"Maurice2n97"},"content":"        LocalDateTime offSetEndDate \u003d applyOffset(schedulable.getTerminateLocalDateTime());","lastModifiedDate":"2021-03-30"},{"lineNumber":140,"author":{"gitId":"Maurice2n97"},"content":"        long startSecondsSoFar \u003d getSecondsInDay(offSetStartDate);","lastModifiedDate":"2021-04-02"},{"lineNumber":141,"author":{"gitId":"Maurice2n97"},"content":"        long endSecondsSoFar \u003d getSecondsInDay(offSetEndDate);","lastModifiedDate":"2021-04-02"},{"lineNumber":142,"author":{"gitId":"Maurice2n97"},"content":"        assert endSecondsSoFar \u003e\u003d startSecondsSoFar;","lastModifiedDate":"2021-04-02"},{"lineNumber":143,"author":{"gitId":"Maurice2n97"},"content":"        double ratio \u003d (double) (endSecondsSoFar - startSecondsSoFar) / SECONDS_IN_DAY;","lastModifiedDate":"2021-04-02"},{"lineNumber":144,"author":{"gitId":"Maurice2n97"},"content":"        return TIMETABLE_DISPLAY_SIZE * ratio;","lastModifiedDate":"2021-03-29"},{"lineNumber":145,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":146,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":147,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":148,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":149,"author":{"gitId":"Maurice2n97"},"content":"     * Splits a schedulable that overlaps across several days into parts which lie within one day. Each day is treated","lastModifiedDate":"2021-04-09"},{"lineNumber":150,"author":{"gitId":"Maurice2n97"},"content":"     * as a timeframe from  time (startHour:startMinute) to the next day (startHour:startMinute). For example in the","lastModifiedDate":"2021-04-09"},{"lineNumber":151,"author":{"gitId":"Maurice2n97"},"content":"     * case when startHour \u003d 7, startMinute \u003d 0, the day starts from 7 am to 7 am the next day.","lastModifiedDate":"2021-04-09"},{"lineNumber":152,"author":{"gitId":"Maurice2n97"},"content":"     * If a Schedulable object overlaps across several days, for example a schedulable","lastModifiedDate":"2021-04-09"},{"lineNumber":153,"author":{"gitId":"Maurice2n97"},"content":"     * that goes from 7 am to 5 pm the next day will be split into two schedulables, one from 7am to 6.599999 am, and","lastModifiedDate":"2021-04-09"},{"lineNumber":154,"author":{"gitId":"Maurice2n97"},"content":"     * one from the next day 7am to 5pm. Then all the schedulables which lie outside outside the time range of this","lastModifiedDate":"2021-04-09"},{"lineNumber":155,"author":{"gitId":"Maurice2n97"},"content":"     * timetable ( which spans 7 days), will be filtered out. The method retursn the resulting stream of broken down","lastModifiedDate":"2021-04-09"},{"lineNumber":156,"author":{"gitId":"Maurice2n97"},"content":"     * schedulables.","lastModifiedDate":"2021-04-09"},{"lineNumber":157,"author":{"gitId":"Maurice2n97"},"content":"     * @param schedulable to split into schedulables that span across a day","lastModifiedDate":"2021-04-09"},{"lineNumber":158,"author":{"gitId":"Maurice2n97"},"content":"     * @return the stream of schedulables split by day.","lastModifiedDate":"2021-04-09"},{"lineNumber":159,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":160,"author":{"gitId":"Maurice2n97"},"content":"    public Stream\u003cSchedulable\u003e breakIntoDayUnits(Schedulable schedulable) {","lastModifiedDate":"2021-03-30"},{"lineNumber":161,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":162,"author":{"gitId":"Maurice2n97"},"content":"        assert isWithinRange(schedulable);","lastModifiedDate":"2021-04-09"},{"lineNumber":163,"author":{"gitId":"Maurice2n97"},"content":"        Schedulable offSetSchedule \u003d SchedulableUtil.applyNegativeOffset(schedulable, startHour, startMinute);","lastModifiedDate":"2021-04-01"},{"lineNumber":164,"author":{"gitId":"Maurice2n97"},"content":"        List\u003cSchedulable\u003e splittedSchedulables \u003d SchedulableUtil.splitSchedulableByDay(offSetSchedule);","lastModifiedDate":"2021-04-01"},{"lineNumber":165,"author":{"gitId":"Maurice2n97"},"content":"        return splittedSchedulables","lastModifiedDate":"2021-04-01"},{"lineNumber":166,"author":{"gitId":"Maurice2n97"},"content":"                .stream()","lastModifiedDate":"2021-03-29"},{"lineNumber":167,"author":{"gitId":"Maurice2n97"},"content":"                .map(s -\u003e SchedulableUtil.applyPositiveOffset(s, startHour, startMinute))","lastModifiedDate":"2021-04-01"},{"lineNumber":168,"author":{"gitId":"Maurice2n97"},"content":"                .filter(this ::isWithinRange);","lastModifiedDate":"2021-04-09"},{"lineNumber":169,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":170,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":171,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":172,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":173,"author":{"gitId":"Maurice2n97"},"content":"     * apply negative offset by start hour and start minutes so each day period starts from 00:00  and ends at","lastModifiedDate":"2021-04-09"},{"lineNumber":174,"author":{"gitId":"Maurice2n97"},"content":"     * LocalTime.max the next day.","lastModifiedDate":"2021-04-09"},{"lineNumber":175,"author":{"gitId":"Maurice2n97"},"content":"     * @param localDateTime","lastModifiedDate":"2021-03-29"},{"lineNumber":176,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-03-29"},{"lineNumber":177,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":178,"author":{"gitId":"Maurice2n97"},"content":"    public LocalDateTime applyOffset(LocalDateTime localDateTime) {","lastModifiedDate":"2021-03-29"},{"lineNumber":179,"author":{"gitId":"Maurice2n97"},"content":"        return localDateTime.minusHours(startHour).minusMinutes(startMinute);","lastModifiedDate":"2021-03-29"},{"lineNumber":180,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":181,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":182,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":183,"author":{"gitId":"Maurice2n97"},"content":"     * remove the negative offset on a date Time which has previously been offset by amount startHour and startminute","lastModifiedDate":"2021-04-09"},{"lineNumber":184,"author":{"gitId":"Maurice2n97"},"content":"     * in @code{applyOffset}","lastModifiedDate":"2021-03-30"},{"lineNumber":185,"author":{"gitId":"Maurice2n97"},"content":"     *","lastModifiedDate":"2021-03-30"},{"lineNumber":186,"author":{"gitId":"Maurice2n97"},"content":"     * @param offSetDateTime","lastModifiedDate":"2021-03-30"},{"lineNumber":187,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-03-30"},{"lineNumber":188,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":189,"author":{"gitId":"Maurice2n97"},"content":"    public LocalDateTime removeOffset(LocalDateTime offSetDateTime) {","lastModifiedDate":"2021-03-30"},{"lineNumber":190,"author":{"gitId":"Maurice2n97"},"content":"        return offSetDateTime.plusHours(startHour).plusMinutes(startMinute);","lastModifiedDate":"2021-03-30"},{"lineNumber":191,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":192,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":193,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":194,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the local date time of the end of the day, right before 00:00.","lastModifiedDate":"2021-03-30"},{"lineNumber":195,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-03-29"},{"lineNumber":196,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":197,"author":{"gitId":"Maurice2n97"},"content":"    public LocalDateTime getEndOfTheDay(LocalDateTime localDateTime) {","lastModifiedDate":"2021-03-30"},{"lineNumber":198,"author":{"gitId":"Maurice2n97"},"content":"        return localDateTime.toLocalDate().atTime(LocalTime.MAX);","lastModifiedDate":"2021-03-30"},{"lineNumber":199,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":200,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":201,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":202,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the start of the day at 00:00.","lastModifiedDate":"2021-03-29"},{"lineNumber":203,"author":{"gitId":"Maurice2n97"},"content":"     * @param localDateTime","lastModifiedDate":"2021-03-29"},{"lineNumber":204,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-03-29"},{"lineNumber":205,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":206,"author":{"gitId":"Maurice2n97"},"content":"    public LocalDateTime getStartOfTheDay(LocalDateTime localDateTime) {","lastModifiedDate":"2021-03-29"},{"lineNumber":207,"author":{"gitId":"Maurice2n97"},"content":"        return localDateTime.toLocalDate().atTime(0,0);","lastModifiedDate":"2021-03-29"},{"lineNumber":208,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":209,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":210,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":211,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":212,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Maurice2n97":212}},{"path":"src/main/java/seedu/address/ui/TimetableSlot.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":" * Renders a slot in the timetable.","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"public class TimetableSlot extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    private static final String FXML \u003d \"TimetableSlot.fxml\";","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    private final double slotLength;","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    private StackPane meetingSlot;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    private Label meetingLabel;","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"     * Constructs the Ui for the slot given the (pixel) length of the slot and the header string.","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"     * @param slotLength","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"     * @param header","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    public TimetableSlot(double slotLength, String header) {","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        super(FXML);","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"        this.slotLength \u003d slotLength;","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"        if (slotLength \u003c 13) {","lastModifiedDate":"2021-04-02"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"            this.meetingLabel.setText(\"\"); // Prevent overflow of text","lastModifiedDate":"2021-04-02"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"        } else {","lastModifiedDate":"2021-04-02"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"            this.meetingLabel.setText(header);","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-04-02"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        meetingSlot.setPrefHeight(slotLength);","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"        meetingSlot.setMinHeight(slotLength);","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        meetingSlot.setMaxHeight(slotLength);","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"    @Override","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-04-09"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2021-04-09"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"            return false;","lastModifiedDate":"2021-04-09"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        } else if (obj instanceof TimetableSlot) {","lastModifiedDate":"2021-04-09"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"            TimetableSlot otherTimetableSlot \u003d (TimetableSlot) obj;","lastModifiedDate":"2021-04-09"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"            return otherTimetableSlot.slotLength \u003d\u003d this.slotLength \u0026\u0026 otherTimetableSlot","lastModifiedDate":"2021-04-09"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"                    .meetingLabel.getText().equals(meetingLabel.getText());","lastModifiedDate":"2021-04-09"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        } else {","lastModifiedDate":"2021-04-09"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"            return false;","lastModifiedDate":"2021-04-09"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-04-09"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Maurice2n97":54}},{"path":"src/main/java/seedu/address/ui/TimetableView.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import javafx.beans.value.ChangeListener;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import javafx.beans.value.ObservableValue;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import javafx.collections.ListChangeListener;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.GridPane;","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.DateTimeUtil;","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.schedule.Schedulable;","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":" * Renders a timetable onto the UI. note that a timetable consists of columns which represent a day in the","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":" * schedule.","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"public class TimetableView extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    public static final int NUMBER_OF_COLUMNS \u003d 7;","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    private static final String FXML \u003d \"TimetableWindow.fxml\";","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TimetableView.class);","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"    private GridPane timetableGrid;","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"    private AnchorPane dayScheduleOne;","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"    private AnchorPane dayScheduleTwo;","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"    private AnchorPane dayScheduleThree;","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"    private AnchorPane dayScheduleFour;","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"    private AnchorPane dayScheduleFive;","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"    private AnchorPane dayScheduleSix;","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"    private AnchorPane dayScheduleSeven;","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"    private Label firstDayLabel;","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"    private Label secondDayLabel;","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"    private Label thirdDayLabel;","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"    private Label fourthDayLabel;","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"    private Label fifthDayLabel;","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"    private Label sixthDayLabel;","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"    @FXML","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"    private Label seventhDayLabel;","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"     * Using strategy pattern. Logic for implementing timetable.","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"     * Used to determine node placement of a Schedulable object in the timetable UI.","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"     * it should also provide method to check if it can be scheduled or not.","lastModifiedDate":"2021-03-29"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"    private TimetablePlacementPolicy timetablePlacementPolicy;","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"    private ObservableList\u003c? extends Schedulable\u003e timetableSlots;","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"    private ObservableValue\u003cLocalDate\u003e firstDayOfTimetable;","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"    private final ListChangeListener\u003cSchedulable\u003e meetingsListener \u003d change -\u003e {","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"        while (change.next()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"            if (change.wasAdded() || change.wasRemoved()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"                this.populateWithData(change.getList());","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"    };","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"    private final ChangeListener\u003cLocalDate\u003e dateListener \u003d (observable, oldValue, newValue) -\u003e {","lastModifiedDate":"2021-03-30"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"        resetColumns();","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"        timetablePlacementPolicy \u003d new TimetablePlacementPolicy(newValue);","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"        populateWithData(timetableSlots);","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"        refreshDayLabels(newValue);","lastModifiedDate":"2021-03-30"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"    };","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"     * Renders an empty timetable.","lastModifiedDate":"2021-03-29"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"    public TimetableView() {","lastModifiedDate":"2021-03-28"},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"        super(FXML);","lastModifiedDate":"2021-03-27"},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":121,"author":{"gitId":"Maurice2n97"},"content":"     * Given an observable list, does the following","lastModifiedDate":"2021-03-29"},{"lineNumber":122,"author":{"gitId":"Maurice2n97"},"content":"     * -Filters out relevant meetings to be displayed","lastModifiedDate":"2021-03-29"},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":"     * -Finds the meeting position and column to slot in given the timeTablePlacementPolicy.","lastModifiedDate":"2021-03-29"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"     * -Puts it into the timetable.","lastModifiedDate":"2021-03-29"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"     * @param timetableSlots","lastModifiedDate":"2021-03-29"},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":"    public TimetableView(ObservableList\u003c? extends Schedulable\u003e timetableSlots,","lastModifiedDate":"2021-03-30"},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":"                         ObservableValue\u003cLocalDate\u003e firstDayOfTimetable) {","lastModifiedDate":"2021-03-30"},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"        super(FXML);","lastModifiedDate":"2021-03-29"},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":"        this.timetableSlots \u003d timetableSlots;","lastModifiedDate":"2021-03-29"},{"lineNumber":132,"author":{"gitId":"Maurice2n97"},"content":"        this.firstDayOfTimetable \u003d firstDayOfTimetable;","lastModifiedDate":"2021-03-30"},{"lineNumber":133,"author":{"gitId":"Maurice2n97"},"content":"        this.timetablePlacementPolicy \u003d new TimetablePlacementPolicy(firstDayOfTimetable.getValue());","lastModifiedDate":"2021-03-30"},{"lineNumber":134,"author":{"gitId":"Maurice2n97"},"content":"        populateWithData(timetableSlots);","lastModifiedDate":"2021-03-29"},{"lineNumber":135,"author":{"gitId":"Maurice2n97"},"content":"        refreshDayLabels(firstDayOfTimetable.getValue());","lastModifiedDate":"2021-03-30"},{"lineNumber":136,"author":{"gitId":"Maurice2n97"},"content":"        //add Listener","lastModifiedDate":"2021-03-30"},{"lineNumber":137,"author":{"gitId":"Maurice2n97"},"content":"        timetableSlots.addListener(this.meetingsListener);","lastModifiedDate":"2021-03-30"},{"lineNumber":138,"author":{"gitId":"Maurice2n97"},"content":"        firstDayOfTimetable.addListener(this.dateListener);","lastModifiedDate":"2021-03-30"},{"lineNumber":139,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":140,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":141,"author":{"gitId":"Maurice2n97"},"content":"    public void setTimetablePlacementPolicy(TimetablePlacementPolicy policy) {","lastModifiedDate":"2021-03-29"},{"lineNumber":142,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(policy);","lastModifiedDate":"2021-04-09"},{"lineNumber":143,"author":{"gitId":"Maurice2n97"},"content":"        this.timetablePlacementPolicy \u003d policy;","lastModifiedDate":"2021-03-29"},{"lineNumber":144,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":145,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":146,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":147,"author":{"gitId":"Maurice2n97"},"content":"     * Clears old data and populates the view with new data from a list of schedulables","lastModifiedDate":"2021-04-09"},{"lineNumber":148,"author":{"gitId":"Maurice2n97"},"content":"     * @param schedulables","lastModifiedDate":"2021-04-09"},{"lineNumber":149,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":150,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":151,"author":{"gitId":"Maurice2n97"},"content":"    public void populateWithData(List\u003c? extends Schedulable\u003e schedulables) {","lastModifiedDate":"2021-04-09"},{"lineNumber":152,"author":{"gitId":"Maurice2n97"},"content":"        resetColumns();","lastModifiedDate":"2021-03-30"},{"lineNumber":153,"author":{"gitId":"Maurice2n97"},"content":"        List\u003c? extends Schedulable\u003e processedSchedulables \u003d splitByDaysAndFilter(schedulables);","lastModifiedDate":"2021-04-09"},{"lineNumber":154,"author":{"gitId":"Maurice2n97"},"content":"        for (Schedulable schedulable : processedSchedulables) {","lastModifiedDate":"2021-04-09"},{"lineNumber":155,"author":{"gitId":"Maurice2n97"},"content":"            Column col \u003d timetablePlacementPolicy.getColumnPlacement(schedulable);","lastModifiedDate":"2021-04-09"},{"lineNumber":156,"author":{"gitId":"Maurice2n97"},"content":"            double position \u003d timetablePlacementPolicy.getVerticalPosition(schedulable);","lastModifiedDate":"2021-04-09"},{"lineNumber":157,"author":{"gitId":"Maurice2n97"},"content":"            TimetableSlot slotToAdd \u003d createTimetableSlot(schedulable);","lastModifiedDate":"2021-04-09"},{"lineNumber":158,"author":{"gitId":"Maurice2n97"},"content":"            putIntoSlot(slotToAdd, col, position);","lastModifiedDate":"2021-04-09"},{"lineNumber":159,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-04-09"},{"lineNumber":160,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":161,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":162,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":163,"author":{"gitId":"Maurice2n97"},"content":"     * Splits each Schedulable in a list of Schedulables into parts, where each part can be scheduled on the same day","lastModifiedDate":"2021-04-09"},{"lineNumber":164,"author":{"gitId":"Maurice2n97"},"content":"     * in the timetable.(Placed in the same column).","lastModifiedDate":"2021-04-09"},{"lineNumber":165,"author":{"gitId":"Maurice2n97"},"content":"     * See {@link#timetablePlacementPolicy ::breakIntoDayUnits (Schedulable)}","lastModifiedDate":"2021-04-09"},{"lineNumber":166,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-04-09"},{"lineNumber":167,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":168,"author":{"gitId":"Maurice2n97"},"content":"    private List\u003c? extends Schedulable\u003e splitByDaysAndFilter(List\u003c? extends Schedulable\u003e schedulables) {","lastModifiedDate":"2021-04-09"},{"lineNumber":169,"author":{"gitId":"Maurice2n97"},"content":"        return schedulables.stream()","lastModifiedDate":"2021-04-09"},{"lineNumber":170,"author":{"gitId":"Maurice2n97"},"content":"                .filter(timetablePlacementPolicy ::isWithinRange)","lastModifiedDate":"2021-04-09"},{"lineNumber":171,"author":{"gitId":"Maurice2n97"},"content":"                .flatMap(timetablePlacementPolicy :: breakIntoDayUnits)","lastModifiedDate":"2021-04-09"},{"lineNumber":172,"author":{"gitId":"Maurice2n97"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-04-09"},{"lineNumber":173,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":174,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":175,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":176,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":177,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":178,"author":{"gitId":"Maurice2n97"},"content":"     * Returns a timetable slot of the appropriate dimensions and header to insert into the timetable.","lastModifiedDate":"2021-04-09"},{"lineNumber":179,"author":{"gitId":"Maurice2n97"},"content":"     * @param schedulable","lastModifiedDate":"2021-04-09"},{"lineNumber":180,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-04-09"},{"lineNumber":181,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":182,"author":{"gitId":"Maurice2n97"},"content":"    public TimetableSlot createTimetableSlot(Schedulable schedulable) {","lastModifiedDate":"2021-04-09"},{"lineNumber":183,"author":{"gitId":"Maurice2n97"},"content":"        double slotLength \u003d timetablePlacementPolicy.getLengthOfSlot(schedulable);","lastModifiedDate":"2021-04-09"},{"lineNumber":184,"author":{"gitId":"Maurice2n97"},"content":"        String header \u003d getHeader(schedulable);","lastModifiedDate":"2021-04-09"},{"lineNumber":185,"author":{"gitId":"Maurice2n97"},"content":"        return new TimetableSlot(slotLength, header);","lastModifiedDate":"2021-04-09"},{"lineNumber":186,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":187,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":188,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":189,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":190,"author":{"gitId":"Maurice2n97"},"content":"     * Given the schedulable object, returns a nice header consisting of the name, followed by the timestamp below","lastModifiedDate":"2021-03-30"},{"lineNumber":191,"author":{"gitId":"Maurice2n97"},"content":"     * (h:mm a - h:mm a)","lastModifiedDate":"2021-03-30"},{"lineNumber":192,"author":{"gitId":"Maurice2n97"},"content":"     * @param schedulable","lastModifiedDate":"2021-03-30"},{"lineNumber":193,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-03-30"},{"lineNumber":194,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":195,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":196,"author":{"gitId":"Maurice2n97"},"content":"    public String getHeader(Schedulable schedulable) {","lastModifiedDate":"2021-03-30"},{"lineNumber":197,"author":{"gitId":"Maurice2n97"},"content":"        LocalTime startTime \u003d schedulable.getStartLocalDateTime().toLocalTime();","lastModifiedDate":"2021-03-30"},{"lineNumber":198,"author":{"gitId":"Maurice2n97"},"content":"        LocalTime endTime \u003d schedulable.getTerminateLocalDateTime().toLocalTime();","lastModifiedDate":"2021-03-30"},{"lineNumber":199,"author":{"gitId":"Maurice2n97"},"content":"        return schedulable.getNameString()","lastModifiedDate":"2021-03-30"},{"lineNumber":200,"author":{"gitId":"Maurice2n97"},"content":"                + \"\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":201,"author":{"gitId":"Maurice2n97"},"content":"                + DateTimeUtil.prettyPrintFormatLocalTime(startTime)","lastModifiedDate":"2021-03-30"},{"lineNumber":202,"author":{"gitId":"Maurice2n97"},"content":"                + \" - \"","lastModifiedDate":"2021-03-30"},{"lineNumber":203,"author":{"gitId":"Maurice2n97"},"content":"                + DateTimeUtil.prettyPrintFormatLocalTime(endTime);","lastModifiedDate":"2021-03-30"},{"lineNumber":204,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":205,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":206,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":207,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":208,"author":{"gitId":"Maurice2n97"},"content":"     * Enum representing an assigned column in the timetable.","lastModifiedDate":"2021-03-30"},{"lineNumber":209,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":210,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":211,"author":{"gitId":"Maurice2n97"},"content":"    public static enum Column {","lastModifiedDate":"2021-03-29"},{"lineNumber":212,"author":{"gitId":"Maurice2n97"},"content":"        ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN","lastModifiedDate":"2021-03-29"},{"lineNumber":213,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":214,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":215,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":216,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":217,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":218,"author":{"gitId":"Maurice2n97"},"content":"     * Puts a timetableSlot into the timetable to render, given the column to place it in","lastModifiedDate":"2021-03-29"},{"lineNumber":219,"author":{"gitId":"Maurice2n97"},"content":"     * and the position from the top we are supposed to place it. Note that the timetableSlots must be","lastModifiedDate":"2021-03-29"},{"lineNumber":220,"author":{"gitId":"Maurice2n97"},"content":"     * non clashing.","lastModifiedDate":"2021-03-29"},{"lineNumber":221,"author":{"gitId":"Maurice2n97"},"content":"     * @param timetableSlot","lastModifiedDate":"2021-03-29"},{"lineNumber":222,"author":{"gitId":"Maurice2n97"},"content":"     * @param col","lastModifiedDate":"2021-03-29"},{"lineNumber":223,"author":{"gitId":"Maurice2n97"},"content":"     * @param position","lastModifiedDate":"2021-03-29"},{"lineNumber":224,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":225,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":226,"author":{"gitId":"Maurice2n97"},"content":"    public void putIntoSlot(TimetableSlot timetableSlot, Column col, double position) {","lastModifiedDate":"2021-03-29"},{"lineNumber":227,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":228,"author":{"gitId":"Maurice2n97"},"content":"        AnchorPane scheduleToPut \u003d null;","lastModifiedDate":"2021-03-29"},{"lineNumber":229,"author":{"gitId":"Maurice2n97"},"content":"        switch(col) {","lastModifiedDate":"2021-03-29"},{"lineNumber":230,"author":{"gitId":"Maurice2n97"},"content":"        case ONE:","lastModifiedDate":"2021-03-29"},{"lineNumber":231,"author":{"gitId":"Maurice2n97"},"content":"            scheduleToPut \u003d dayScheduleOne;","lastModifiedDate":"2021-03-29"},{"lineNumber":232,"author":{"gitId":"Maurice2n97"},"content":"            break;","lastModifiedDate":"2021-03-29"},{"lineNumber":233,"author":{"gitId":"Maurice2n97"},"content":"        case TWO:","lastModifiedDate":"2021-03-29"},{"lineNumber":234,"author":{"gitId":"Maurice2n97"},"content":"            scheduleToPut \u003d dayScheduleTwo;","lastModifiedDate":"2021-03-29"},{"lineNumber":235,"author":{"gitId":"Maurice2n97"},"content":"            break;","lastModifiedDate":"2021-03-29"},{"lineNumber":236,"author":{"gitId":"Maurice2n97"},"content":"        case THREE:","lastModifiedDate":"2021-03-29"},{"lineNumber":237,"author":{"gitId":"Maurice2n97"},"content":"            scheduleToPut \u003d dayScheduleThree;","lastModifiedDate":"2021-03-29"},{"lineNumber":238,"author":{"gitId":"Maurice2n97"},"content":"            break;","lastModifiedDate":"2021-03-29"},{"lineNumber":239,"author":{"gitId":"Maurice2n97"},"content":"        case FOUR:","lastModifiedDate":"2021-03-29"},{"lineNumber":240,"author":{"gitId":"Maurice2n97"},"content":"            scheduleToPut \u003d dayScheduleFour;","lastModifiedDate":"2021-03-29"},{"lineNumber":241,"author":{"gitId":"Maurice2n97"},"content":"            break;","lastModifiedDate":"2021-03-29"},{"lineNumber":242,"author":{"gitId":"Maurice2n97"},"content":"        case FIVE:","lastModifiedDate":"2021-03-29"},{"lineNumber":243,"author":{"gitId":"Maurice2n97"},"content":"            scheduleToPut \u003d dayScheduleFive;","lastModifiedDate":"2021-03-29"},{"lineNumber":244,"author":{"gitId":"Maurice2n97"},"content":"            break;","lastModifiedDate":"2021-03-29"},{"lineNumber":245,"author":{"gitId":"Maurice2n97"},"content":"        case SIX:","lastModifiedDate":"2021-03-29"},{"lineNumber":246,"author":{"gitId":"Maurice2n97"},"content":"            scheduleToPut \u003d dayScheduleSix;","lastModifiedDate":"2021-03-29"},{"lineNumber":247,"author":{"gitId":"Maurice2n97"},"content":"            break;","lastModifiedDate":"2021-03-29"},{"lineNumber":248,"author":{"gitId":"Maurice2n97"},"content":"        case SEVEN:","lastModifiedDate":"2021-03-29"},{"lineNumber":249,"author":{"gitId":"Maurice2n97"},"content":"            scheduleToPut \u003d dayScheduleSeven;","lastModifiedDate":"2021-03-29"},{"lineNumber":250,"author":{"gitId":"Maurice2n97"},"content":"            break;","lastModifiedDate":"2021-03-29"},{"lineNumber":251,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":252,"author":{"gitId":"Maurice2n97"},"content":"        scheduleToPut.setTopAnchor(timetableSlot.getRoot(), position);","lastModifiedDate":"2021-03-29"},{"lineNumber":253,"author":{"gitId":"Maurice2n97"},"content":"        scheduleToPut.setLeftAnchor(timetableSlot.getRoot(), 0.0);","lastModifiedDate":"2021-03-29"},{"lineNumber":254,"author":{"gitId":"Maurice2n97"},"content":"        scheduleToPut.setRightAnchor(timetableSlot.getRoot(), 0.0);","lastModifiedDate":"2021-03-29"},{"lineNumber":255,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":256,"author":{"gitId":"Maurice2n97"},"content":"        scheduleToPut.getChildren().addAll(timetableSlot.getRoot());","lastModifiedDate":"2021-03-29"},{"lineNumber":257,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":258,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":259,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":260,"author":{"gitId":"Maurice2n97"},"content":"     * resets to an empty timetable.","lastModifiedDate":"2021-03-29"},{"lineNumber":261,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":262,"author":{"gitId":"Maurice2n97"},"content":"    public void resetColumns() {","lastModifiedDate":"2021-03-30"},{"lineNumber":263,"author":{"gitId":"Maurice2n97"},"content":"        dayScheduleOne.getChildren().clear();","lastModifiedDate":"2021-03-29"},{"lineNumber":264,"author":{"gitId":"Maurice2n97"},"content":"        dayScheduleTwo.getChildren().clear();","lastModifiedDate":"2021-03-29"},{"lineNumber":265,"author":{"gitId":"Maurice2n97"},"content":"        dayScheduleThree.getChildren().clear();","lastModifiedDate":"2021-03-29"},{"lineNumber":266,"author":{"gitId":"Maurice2n97"},"content":"        dayScheduleFour.getChildren().clear();","lastModifiedDate":"2021-03-29"},{"lineNumber":267,"author":{"gitId":"Maurice2n97"},"content":"        dayScheduleFive.getChildren().clear();","lastModifiedDate":"2021-03-29"},{"lineNumber":268,"author":{"gitId":"Maurice2n97"},"content":"        dayScheduleSix.getChildren().clear();","lastModifiedDate":"2021-03-29"},{"lineNumber":269,"author":{"gitId":"Maurice2n97"},"content":"        dayScheduleSeven.getChildren().clear();","lastModifiedDate":"2021-03-29"},{"lineNumber":270,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":271,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":272,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":273,"author":{"gitId":"Maurice2n97"},"content":"     * refreshes all day header labels display day of the week starting","lastModifiedDate":"2021-03-30"},{"lineNumber":274,"author":{"gitId":"Maurice2n97"},"content":"     * on the currentDate.","lastModifiedDate":"2021-03-30"},{"lineNumber":275,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":276,"author":{"gitId":"Maurice2n97"},"content":"    public void refreshDayLabels(LocalDate currentDate) {","lastModifiedDate":"2021-03-30"},{"lineNumber":277,"author":{"gitId":"Maurice2n97"},"content":"        firstDayLabel.setText(generateDayLabel(currentDate));","lastModifiedDate":"2021-03-30"},{"lineNumber":278,"author":{"gitId":"Maurice2n97"},"content":"        secondDayLabel.setText(generateDayLabel(currentDate.plusDays(1)));","lastModifiedDate":"2021-03-30"},{"lineNumber":279,"author":{"gitId":"Maurice2n97"},"content":"        thirdDayLabel.setText(generateDayLabel(currentDate.plusDays(2)));","lastModifiedDate":"2021-03-30"},{"lineNumber":280,"author":{"gitId":"Maurice2n97"},"content":"        fourthDayLabel.setText(generateDayLabel(currentDate.plusDays(3)));","lastModifiedDate":"2021-03-30"},{"lineNumber":281,"author":{"gitId":"Maurice2n97"},"content":"        fifthDayLabel.setText(generateDayLabel(currentDate.plusDays(4)));","lastModifiedDate":"2021-03-30"},{"lineNumber":282,"author":{"gitId":"Maurice2n97"},"content":"        sixthDayLabel.setText(generateDayLabel(currentDate.plusDays(5)));","lastModifiedDate":"2021-03-30"},{"lineNumber":283,"author":{"gitId":"Maurice2n97"},"content":"        seventhDayLabel.setText(generateDayLabel(currentDate.plusDays(6)));","lastModifiedDate":"2021-03-30"},{"lineNumber":284,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":285,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":286,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":287,"author":{"gitId":"Maurice2n97"},"content":"     * generate a nicely formatted String to display on the column headers","lastModifiedDate":"2021-03-30"},{"lineNumber":288,"author":{"gitId":"Maurice2n97"},"content":"     * @param date the date corresponding to the column to generate the header for","lastModifiedDate":"2021-03-30"},{"lineNumber":289,"author":{"gitId":"Maurice2n97"},"content":"     * @return","lastModifiedDate":"2021-03-30"},{"lineNumber":290,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":291,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":292,"author":{"gitId":"Maurice2n97"},"content":"    public String generateDayLabel(LocalDate date) {","lastModifiedDate":"2021-03-30"},{"lineNumber":293,"author":{"gitId":"Maurice2n97"},"content":"        return DateTimeUtil.prettyPrintFormatLocalDate(date)","lastModifiedDate":"2021-03-30"},{"lineNumber":294,"author":{"gitId":"Maurice2n97"},"content":"                + \"\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":295,"author":{"gitId":"Maurice2n97"},"content":"                + date.getDayOfWeek().name();","lastModifiedDate":"2021-03-30"},{"lineNumber":296,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":297,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":298,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":299,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":300,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":301,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":302,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"Maurice2n97":302}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"totoyoyo"},"content":"    -fx-border-color: transparent transparent derive(-fx-base, 80%) transparent;","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2018-01-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;","lastModifiedDate":"2017-03-02"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;","lastModifiedDate":"2017-03-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2017-03-02"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2017-03-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2017-03-02"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-05-09"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2017-05-09"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":139,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2018-12-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2017-03-02"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":152,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2017-03-02"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":230,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":284,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":287,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":289,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":292,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":294,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":298,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":302,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":306,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":309,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":311,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":316,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2017-03-02"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":325,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":327,"author":{"gitId":"Maurice2n97"},"content":"#filterField, #personListPanel, #personWebpage, #meetingDashboardPlaceholder {","lastModifiedDate":"2021-03-13"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":331,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":334,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":336,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":339,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":341,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":348,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":349,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":350,"author":{"gitId":"Maurice2n97"},"content":".meetingcard-header {","lastModifiedDate":"2021-04-02"},{"lineNumber":351,"author":{"gitId":"Maurice2n97"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-04-02"},{"lineNumber":352,"author":{"gitId":"Maurice2n97"},"content":"    -fx-background-color: #43613d;","lastModifiedDate":"2021-04-02"},{"lineNumber":353,"author":{"gitId":"Maurice2n97"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2021-04-02"},{"lineNumber":354,"author":{"gitId":"Maurice2n97"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2021-04-02"},{"lineNumber":355,"author":{"gitId":"Maurice2n97"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2021-04-02"},{"lineNumber":356,"author":{"gitId":"Maurice2n97"},"content":"    -fx-font-size: 18;","lastModifiedDate":"2021-04-02"},{"lineNumber":357,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-04-02"}],"authorContributionMap":{"totoyoyo":1,"Maurice2n97":10,"-":346}},{"path":"src/main/resources/view/Extensions.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":".error {","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".list-cell:empty {","lastModifiedDate":"2017-02-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /* Empty cells will not have alternating colours */","lastModifiedDate":"2017-02-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-background: #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":".tag-selector {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    -fx-border-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-border-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-background-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":".tooltip-text {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":".meeting-slot-header {","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    -fx-text-fill: midnightblue;","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    -fx-font-family: \"Arial Black 13px\";","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    -fx-wrap-text: true;","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":".meeting-slot-background {","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    -fx-background-color: orange;","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    -fx-background-radius: 8, 7, 6;","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    -fx-background-insets: 0, 1, 2;","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    -fx-effect: dropshadow( three-pass-box, rgba(0, 0, 0, 0.6), 5, 0.0, 0, 1);","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":".even-timetable-row {","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    -fx-background-color: #e0dddd;","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":".odd-timetable-row {","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    -fx-background-color: white;","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"Maurice2n97":21,"-":20}},{"path":"src/main/resources/view/HelpWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\"","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"         xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cicons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003c/icons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003cscene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        \u003cScene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            \u003cHBox alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"                \u003cchildren\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                        \u003cHBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                            \u003cInsets right\u003d\"5.0\"/\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                        \u003c/HBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                    \u003c/Label\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                        \u003cHBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                            \u003cInsets left\u003d\"5.0\"/\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                        \u003c/HBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                    \u003c/Button\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                \u003c/children\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                \u003copaqueInsets\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                \u003c/opaqueInsets\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                \u003cpadding\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                \u003c/padding\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        \u003c/Scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \u003c/scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-12-01"}],"authorContributionMap":{"totoyoyo":3,"-":37}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.control.Tab?\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.control.TabPane?\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.BorderPane?\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"MeetBuddy\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"      \u003cBorderPane prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\"\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        \u003ctop\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"            \u003cVBox prefHeight\u003d\"150.0\"\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"              \u003cMenuBar fx:id\u003d\"menuBar\" maxHeight\u003d\"25.0\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                  \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                  \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"              \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"              \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" maxHeight\u003d\"25.0\" prefHeight\u003d\"25.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"              \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"              \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" minHeight\u003d\"90.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"              \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"               \u003c/children\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        \u003c/top\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        \u003cbottom\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"            \u003cVBox maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\"\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"                 \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"               \u003c/children\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"        \u003c/bottom\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"        \u003cleft\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"        \u003cVBox fx:id\u003d\"personList\" prefHeight\u003d\"450.0\" prefWidth\u003d\"330.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2017-06-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"        \u003c/left\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"            \u003ccenter\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"               \u003cTabPane fx:id\u003d\"displayTabs\" tabClosingPolicy\u003d\"UNAVAILABLE\" BorderPane.alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"                  \u003ctabs\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"                     \u003cTab fx:id\u003d\"meetingsTab\" text\u003d\"Meetings\"\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"                        \u003ccontent\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"                           \u003cStackPane fx:id\u003d\"meetingDashboardPlaceholder\" /\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"                        \u003c/content\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"                     \u003c/Tab\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"                     \u003cTab fx:id\u003d\"timetableTab\" text\u003d\"Timetable\"\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"                        \u003ccontent\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"                           \u003cStackPane fx:id\u003d\"timetableHolder\" /\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"                        \u003c/content\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"                     \u003c/Tab\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"                  \u003c/tabs\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"               \u003c/TabPane\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"            \u003c/center\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"      \u003c/BorderPane\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"Maurice2n97":46,"-":41}},{"path":"src/main/resources/view/MeetingCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"\u003cHBox id\u003d\"meetingPane\" fx:id\u003d\"meetingPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"        \u003cVBox HBox.hgrow\u003d\"ALWAYS\" spacing\u003d\"10\"\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"                \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"10.0\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"                    \u003cchildren\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel fx:id\u003d\"id\" text\u003d\"Label\"/\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel fx:id\u003d\"name\" text\u003d\"A VERY LONG MEETING\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\" styleClass\u003d\"meetingcard-header\" stylesheets\u003d\"@DarkTheme.css\"/\u003e","lastModifiedDate":"2021-04-02"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"                    \u003c/children\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cInsets top\u003d\"5.0\"/\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"                \u003c/HBox\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"                \u003cHBox spacing\u003d\"10.0\"\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"                    \u003cLabel text\u003d\"Priority Level:\"/\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"                    \u003cLabel fx:id\u003d\"priority\" wrapText\u003d\"false\"/\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"                \u003c/HBox\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"                \u003cFlowPane fx:id\u003d\"tags\"/\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"                \u003cHBox spacing\u003d\"10.0\"\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"                    \u003cchildren\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel text\u003d\"From : \" HBox.hgrow\u003d\"NEVER\"/\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel fx:id\u003d\"startDate\" text\u003d\"start date\" wrapText\u003d\"true\" HBox.hgrow\u003d\"NEVER\"/\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel text\u003d\"to\" HBox.hgrow\u003d\"NEVER\"/\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel fx:id\u003d\"endDate\" text\u003d\"end date \" wrapText\u003d\"true\" HBox.hgrow\u003d\"NEVER\"/\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"                    \u003c/children\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"                \u003c/HBox\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"                \u003cLabel fx:id\u003d\"description\" text\u003d\"Description\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"            \u003c/children\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"            \u003cFlowPane fx:id\u003d\"personsRelated\"/\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"        \u003cInsets top\u003d\"5.0\" bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\"/\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"Maurice2n97":42,"skinnychenpi":1}},{"path":"src/main/resources/view/MeetingDashboard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"    \u003cListView fx:id\u003d\"meetingListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"Maurice2n97":7}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"   \u003cCircle fx:id\u003d\"circle\" fill\u003d\"#f0f4f8\" radius\u003d\"50.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Maurice2n97":12,"-":30}},{"path":"src/main/resources/view/TimetableSlot.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"\u003cStackPane fx:id\u003d\"meetingSlot\" alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"100.0\" styleClass\u003d\"meeting-slot-background\" stylesheets\u003d\"@Extensions.css\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"   \u003cchildren\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"      \u003cLabel fx:id\u003d\"meetingLabel\" styleClass\u003d\"meetingslotheader\" stylesheets\u003d\"@Extensions.css\" text\u003d\"Meeting 17:05-18:05\" textFill\u003d\"#496160\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"         \u003cfont\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"            \u003cFont name\u003d\"Arial Black\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"         \u003c/font\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"      \u003c/Label\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"   \u003c/children\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Maurice2n97":15}},{"path":"src/main/resources/view/TimetableWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.Cursor?\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.effect.Glow?\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"   \u003cchildren\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"      \u003cScrollPane fitToWidth\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"         \u003ccontent\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"            \u003cGridPane fx:id\u003d\"timetableGrid\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"              \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"                \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"120.0\" /\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"                \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"120.0\" /\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"120.0\" /\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"120.0\" /\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"120.0\" /\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"120.0\" /\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"120.0\" /\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"              \u003c/columnConstraints\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"              \u003crowConstraints\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"40.0\" vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"                \u003cRowConstraints vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"              \u003c/rowConstraints\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"200.0\" GridPane.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"                     \u003cchildren\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel fx:id\u003d\"firstDayLabel\" text\u003d\"Monday\" textAlignment\u003d\"CENTER\" textFill\u003d\"#6f387c\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"                           \u003cfont\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"                              \u003cFont name\u003d\"Corsiva Hebrew\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"                           \u003c/font\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"                           \u003ceffect\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"                              \u003cGlow /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"                           \u003c/effect\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"                        \u003c/Label\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"                     \u003c/children\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"                  \u003c/VBox\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"200.0\" GridPane.columnIndex\u003d\"1\" GridPane.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"                     \u003cchildren\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel fx:id\u003d\"secondDayLabel\" text\u003d\"Tuesday\" textAlignment\u003d\"CENTER\" textFill\u003d\"#89558a\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"                           \u003ceffect\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"                              \u003cGlow /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"                           \u003c/effect\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"                        \u003c/Label\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"                     \u003c/children\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"                  \u003c/VBox\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"200.0\" GridPane.columnIndex\u003d\"2\" GridPane.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"                     \u003cchildren\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel fx:id\u003d\"thirdDayLabel\" text\u003d\"Wednesday\" textAlignment\u003d\"CENTER\" textFill\u003d\"#844c90\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"                           \u003ceffect\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"                              \u003cGlow /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"                           \u003c/effect\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"                        \u003c/Label\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"                     \u003c/children\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"                  \u003c/VBox\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"200.0\" GridPane.columnIndex\u003d\"3\" GridPane.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"                     \u003cchildren\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel fx:id\u003d\"fourthDayLabel\" text\u003d\"Thursday\" textAlignment\u003d\"CENTER\" textFill\u003d\"#8d4a90\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"                           \u003ceffect\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"                              \u003cGlow /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"                           \u003c/effect\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"                        \u003c/Label\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"                     \u003c/children\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"                  \u003c/VBox\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"200.0\" GridPane.columnIndex\u003d\"4\" GridPane.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"                     \u003cchildren\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel fx:id\u003d\"fifthDayLabel\" text\u003d\"Friday\" textAlignment\u003d\"CENTER\" textFill\u003d\"#6e4275\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"                           \u003ceffect\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"                              \u003cGlow /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"                           \u003c/effect\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"                        \u003c/Label\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"                     \u003c/children\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"                  \u003c/VBox\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"200.0\" GridPane.columnIndex\u003d\"5\" GridPane.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"                     \u003cchildren\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel fx:id\u003d\"sixthDayLabel\" text\u003d\"Saturday\" textAlignment\u003d\"CENTER\" textFill\u003d\"#a4499a\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"                           \u003ceffect\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"                              \u003cGlow /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"                           \u003c/effect\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"                        \u003c/Label\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"                     \u003c/children\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"                  \u003c/VBox\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"200.0\" GridPane.columnIndex\u003d\"6\" GridPane.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"                     \u003cchildren\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel fx:id\u003d\"seventhDayLabel\" text\u003d\"Sunday\" textAlignment\u003d\"CENTER\" textFill\u003d\"#793e72\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"                           \u003ceffect\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"                              \u003cGlow /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"                           \u003c/effect\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"                           \u003ccursor\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"                              \u003cCursor fx:constant\u003d\"NONE\" /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"                           \u003c/cursor\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"                        \u003c/Label\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"                     \u003c/children\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"                  \u003c/VBox\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cAnchorPane fx:id\u003d\"dayScheduleOne\" minHeight\u003d\"550.0\" styleClass\u003d\"even-timetable-row\" stylesheets\u003d\"@Extensions.css\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-04-02"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cAnchorPane fx:id\u003d\"dayScheduleTwo\" minHeight\u003d\"550.0\" styleClass\u003d\"odd-timetable-row\" stylesheets\u003d\"@Extensions.css\" GridPane.columnIndex\u003d\"1\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-04-02"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cAnchorPane fx:id\u003d\"dayScheduleThree\" minHeight\u003d\"550.0\" styleClass\u003d\"even-timetable-row\" stylesheets\u003d\"@Extensions.css\" GridPane.columnIndex\u003d\"2\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-04-02"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cAnchorPane fx:id\u003d\"dayScheduleFour\" minHeight\u003d\"550.0\" styleClass\u003d\"odd-timetable-row\" stylesheets\u003d\"@Extensions.css\" GridPane.columnIndex\u003d\"3\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-04-02"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cAnchorPane fx:id\u003d\"dayScheduleFive\" minHeight\u003d\"550.0\" styleClass\u003d\"even-timetable-row\" stylesheets\u003d\"@Extensions.css\" GridPane.columnIndex\u003d\"4\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-04-02"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cAnchorPane fx:id\u003d\"dayScheduleSix\" minHeight\u003d\"550.0\" styleClass\u003d\"odd-timetable-row\" stylesheets\u003d\"@Extensions.css\" GridPane.columnIndex\u003d\"5\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-04-02"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cAnchorPane fx:id\u003d\"dayScheduleSeven\" minHeight\u003d\"550.0\" styleClass\u003d\"even-timetable-row\" stylesheets\u003d\"@Extensions.css\" GridPane.columnIndex\u003d\"6\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-04-02"},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"               \u003c/children\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"            \u003c/GridPane\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":"         \u003c/content\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"      \u003c/ScrollPane\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"   \u003c/children\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"Maurice2n97":114}},{"path":"src/test/data/JsonMeetingBookStorageTest/invalidAndValidMeetingMeetingBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"{","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"  \"meetings\" : [","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"  {","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"    \"name\" : \"INVALID START \u003e END TIME \",","lastModifiedDate":"2021-03-18"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"    \"startDateTime\" : \"2021-03-17 17:00\",","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"    \"endDateTime\" : \"2021-03-15 16:00\",","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"    \"description\" : \"Discuss proposal for an app\",","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"    \"priority\" : \"4\",","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    \"group\" : [\"business\", \"app\"]","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"  },","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    {","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"      \"name\" : \"HEY IT\u0027S a VALID MEETING \",","lastModifiedDate":"2021-03-18"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"      \"startDateTime\" : \"2021-03-17:00\",","lastModifiedDate":"2021-03-18"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"      \"endDateTime\" : \"2021-03-17 18:00\",","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"      \"description\" : \"Discuss proposal for an app\",","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"      \"priority\" : \"4\",","lastModifiedDate":"2021-03-18"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"      \"group\" : [\"business\", \"app\"]","lastModifiedDate":"2021-03-18"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"]","lastModifiedDate":"2021-03-18"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-18"}],"authorContributionMap":{"Maurice2n97":20}},{"path":"src/test/data/JsonMeetingBookStorageTest/invalidMeetingMeetingBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"{","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"  \"meetings\" : [","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"    {","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"      \"name\" : \"INVALID START TIME \",","lastModifiedDate":"2021-03-25"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"      \"startDateTime\" : \"2021-03-17:00\",","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"      \"endDateTime\" : \"2021-03-15 16:00\",","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"      \"description\" : \"Discuss proposal for an app\",","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"      \"priority\" : \"4\",","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"      \"group\" : [\"business\", \"app\"]","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"  ]","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-18"}],"authorContributionMap":{"Maurice2n97":12}},{"path":"src/test/data/JsonMeetingBookStorageTest/notJsonFormatMeetingBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"not Json format!","lastModifiedDate":"2021-03-18"}],"authorContributionMap":{"Maurice2n97":1}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ \"friends\" ]","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"hengyiqun":1,"-":13}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"  \"comment\":","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"  \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\",","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  \"persons\" : [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ \"table tennis\" ]","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\",","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ \"CS2106\", \"table tennis\" ]","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\",","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ ]","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\",","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ \"table tennis\" ]","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\",","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\",","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\",","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ ]","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\",","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\",","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ ]","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\",","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\",","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ ]","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"  } , {","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"    \"name\" : \"Jenny Li\",","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"    \"phone\" : \"9482432\",","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"    \"email\" : \"jenny@example.com\",","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"    \"address\" : \"5th road\",","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ \"badminton\", \"CS2106\" ]","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"  }, {","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"    \"name\" : \"Wendy Chen\",","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"    \"phone\" : \"9482222\",","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"    \"email\" : \"wendy@example.com\",","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"    \"address\" : \"7th way\",","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ \"badminton\", \"CS2103\", \"CS2106\" ]","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  }]","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Maurice2n97":2,"hengyiqun":19,"-":38}},{"path":"src/test/data/JsonSerializableMeetingBookTest/duplicateMeetingsMeetingBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"{","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"  \"meetings\" : [","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"    {","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"      \"name\" : \"Meeting with Gjeorfie\",","lastModifiedDate":"2021-03-18"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"      \"startDateTime\" : \"2021-04-15 16:00\",","lastModifiedDate":"2021-03-25"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"      \"endDateTime\" : \"2021-04-15 18:00\",","lastModifiedDate":"2021-03-25"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"      \"description\" : \"Discuss proposal for an app\",","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"      \"priority\" : \"4\",","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"      \"group\" : [\"business\", \"app\"]","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    },","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    {","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"      \"name\" : \"Meeting with Gjeorfie\",","lastModifiedDate":"2021-03-18"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"      \"startDateTime\" : \"2021-04-15 16:00\",","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"      \"endDateTime\" : \"2021-04-15 18:00\",","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"      \"description\" : \"Discuss proposal for an app\",","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"      \"priority\" : \"4\",","lastModifiedDate":"2021-03-18"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"      \"group\" : [\"business\", \"app\"]","lastModifiedDate":"2021-03-18"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"  ]","lastModifiedDate":"2021-03-18"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-18"}],"authorContributionMap":{"Maurice2n97":20}},{"path":"src/test/data/JsonSerializableMeetingBookTest/invalidMeetingsMeetingBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"{","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"  \"meetings\" : [","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"    {","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"      \"name\" : \"INVALID START TIME \",","lastModifiedDate":"2021-03-18"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"      \"startDateTime\" : \"2021-03-17\",","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"      \"endDateTime\" : \"2021-04-15 16:00\",","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"      \"description\" : \"Discuss proposal for an app\",","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"      \"priority\" : \"4\",","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"      \"group\" : [\"business\", \"app\"]","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"  ]","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-18"}],"authorContributionMap":{"Maurice2n97":12}},{"path":"src/test/data/JsonSerializableMeetingBookTest/sampleMeetingBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"{","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"  \"meetings\" : [","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"    {","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"      \"name\" : \"JCP Conference\",","lastModifiedDate":"2021-03-18"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"      \"startDateTime\" : \"2021-01-01 19:00\",","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"      \"endDateTime\" : \"2021-01-01 20:00\",","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"      \"description\" : \"JCP Conference Test\",","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"      \"priority\" : \"2\",","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"      \"group\" : [\"SoC\"]","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"  ]","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-18"}],"authorContributionMap":{"Maurice2n97":12}},{"path":"src/test/java/seedu/address/commons/util/MD5UtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"public class MD5UtilTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    public static final String TEST_STRING \u003d \"MY_WAY_OR_THE HIGHWAY\u003e\u003e\u003e\u003e\u003e ?4\";","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    public static final String HEX_OF_TEST_STRING \u003d \"4d595f5741595f4f525f54484520484947485741593e3e3e3e3e203f34\";","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    public static final String HEX_MD5_OF_TEST_STRING \u003d \"876f2076235e1a13906f886abbfa7597\";","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    public void convertStringToHex_givenString_returnsHex() {","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(HEX_OF_TEST_STRING, MD5Util.hex(TEST_STRING.getBytes()));","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    public void convertStringToMD5Hex_givenString_success() throws Exception {","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(HEX_MD5_OF_TEST_STRING, MD5Util.md5Hex(TEST_STRING));","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    //Exception not tested because it depends on external library.","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"Maurice2n97":24}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.persons.AddPersonCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.persons.ListPersonCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.addressbook.JsonAddressBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.connection.JsonConnectionStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.meetingbook.JsonMeetingBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.notebook.JsonNoteBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"        JsonMeetingBookStorage meetingBookStorage \u003d new JsonMeetingBookStorage(temporaryFolder.resolve(","lastModifiedDate":"2021-03-18"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"                \"meetingBook.json\"));","lastModifiedDate":"2021-03-18"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"        JsonNoteBookStorage noteBookStorage \u003d new JsonNoteBookStorage(temporaryFolder.resolve(","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"                \"noteBook.json\"));","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"        JsonConnectionStorage jsonConnectionStorage \u003d new JsonConnectionStorage(temporaryFolder.resolve(\"connections\" +","lastModifiedDate":"2021-04-09"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"                \".json\"));","lastModifiedDate":"2021-04-09"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, meetingBookStorage,","lastModifiedDate":"2021-04-01"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"                noteBookStorage, userPrefsStorage, jsonConnectionStorage);","lastModifiedDate":"2021-04-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        String listCommand \u003d ListPersonCommand.COMMAND_WORD;","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(listCommand, ListPersonCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"        JsonMeetingBookStorage meetingBookStorage \u003d","lastModifiedDate":"2021-03-18"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"                new JsonMeetingBookStorage(temporaryFolder.resolve(\"ioExceptionMeetingBook.json\"));","lastModifiedDate":"2021-03-18"},{"lineNumber":90,"author":{"gitId":"hengyiqun"},"content":"        JsonNoteBookStorage noteBookStorage \u003d","lastModifiedDate":"2021-04-01"},{"lineNumber":91,"author":{"gitId":"hengyiqun"},"content":"                new JsonNoteBookStorage(temporaryFolder.resolve(\"ioExceptionNoteBook.json\"));","lastModifiedDate":"2021-04-01"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"        JsonConnectionStorage jsonConnectionStorage \u003d new JsonConnectionStorage(temporaryFolder.resolve(","lastModifiedDate":"2021-04-09"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"                \"ioExceptionConnections.json\"));","lastModifiedDate":"2021-04-09"},{"lineNumber":94,"author":{"gitId":"hengyiqun"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, meetingBookStorage,","lastModifiedDate":"2021-04-01"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"                noteBookStorage, userPrefsStorage, jsonConnectionStorage);","lastModifiedDate":"2021-04-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"        String addCommand \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2021-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":101,"author":{"gitId":"hengyiqun"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withGroups().build();","lastModifiedDate":"2021-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"    public void getFilteredMeetingList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-03-18"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredMeetingList().remove(0));","lastModifiedDate":"2021-03-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Maurice2n97":22,"skinnychenpi":7,"hengyiqun":7,"-":148}},{"path":"src/test/java/seedu/address/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2017-06-08"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"Maurice2n97":1,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/FindGroupCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.testutil.TypicalPersons.JENNY;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.testutil.TypicalPersons.WENDY;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.persons.FindGroupCommand;","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.GroupContainsKeywordsPredicate;","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":" * Contains integration tests (interaction with the Model) for {@code FindGroupCommand}.","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"public class FindGroupCommandTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"    public void equals() {","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"        GroupContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"                new GroupContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"        GroupContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"                new GroupContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"        FindGroupCommand findFirstCommand \u003d new FindGroupCommand(firstPredicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"        FindGroupCommand findSecondCommand \u003d new FindGroupCommand(secondPredicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"        FindGroupCommand findFirstCommandCopy \u003d new FindGroupCommand(firstPredicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"hengyiqun"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"        GroupContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"hengyiqun"},"content":"        FindGroupCommand command \u003d new FindGroupCommand(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"hengyiqun"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"hengyiqun"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"hengyiqun"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"hengyiqun"},"content":"     * Correctly returns an empty collection when a non-existing group is inputted as keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"hengyiqun"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"hengyiqun"},"content":"    public void execute_wrongKeywords_noPersonFound() {","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"hengyiqun"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"hengyiqun"},"content":"        GroupContainsKeywordsPredicate predicate \u003d preparePredicate(\"test\");","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"hengyiqun"},"content":"        FindGroupCommand command \u003d new FindGroupCommand(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"hengyiqun"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"hengyiqun"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"hengyiqun"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"hengyiqun"},"content":"     * Correctly returns all people in the specified group - first test","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"hengyiqun"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"hengyiqun"},"content":"    public void execute_multipleGroupsFoundFirst() {","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"hengyiqun"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"hengyiqun"},"content":"        GroupContainsKeywordsPredicate predicate \u003d preparePredicate(\"table tennis\");","lastModifiedDate":"2021-03-15"},{"lineNumber":90,"author":{"gitId":"hengyiqun"},"content":"        FindGroupCommand command \u003d new FindGroupCommand(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"hengyiqun"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"hengyiqun"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"hengyiqun"},"content":"        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":95,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":97,"author":{"gitId":"hengyiqun"},"content":"     * Correctly returns all people in the specified group - second test","lastModifiedDate":"2021-03-15"},{"lineNumber":98,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":99,"author":{"gitId":"hengyiqun"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":100,"author":{"gitId":"hengyiqun"},"content":"    public void execute_multipleGroupsFoundSecond() {","lastModifiedDate":"2021-03-15"},{"lineNumber":101,"author":{"gitId":"hengyiqun"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-03-15"},{"lineNumber":102,"author":{"gitId":"hengyiqun"},"content":"        GroupContainsKeywordsPredicate predicate \u003d preparePredicate(\"CS2106\");","lastModifiedDate":"2021-03-15"},{"lineNumber":103,"author":{"gitId":"hengyiqun"},"content":"        FindGroupCommand command \u003d new FindGroupCommand(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":104,"author":{"gitId":"hengyiqun"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":105,"author":{"gitId":"hengyiqun"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-15"},{"lineNumber":106,"author":{"gitId":"hengyiqun"},"content":"        assertEquals(Arrays.asList(BENSON, JENNY, WENDY), model.getFilteredPersonList());","lastModifiedDate":"2021-03-15"},{"lineNumber":107,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":108,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":109,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":110,"author":{"gitId":"hengyiqun"},"content":"     * Correctly returns all people in groups with the partial keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":111,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":112,"author":{"gitId":"hengyiqun"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":113,"author":{"gitId":"hengyiqun"},"content":"    public void execute_partialGroupKeyword_multipleGroupsFound() {","lastModifiedDate":"2021-03-15"},{"lineNumber":114,"author":{"gitId":"hengyiqun"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-03-15"},{"lineNumber":115,"author":{"gitId":"hengyiqun"},"content":"        GroupContainsKeywordsPredicate predicate \u003d preparePredicate(\"table\");","lastModifiedDate":"2021-03-15"},{"lineNumber":116,"author":{"gitId":"hengyiqun"},"content":"        FindGroupCommand command \u003d new FindGroupCommand(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":117,"author":{"gitId":"hengyiqun"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":118,"author":{"gitId":"hengyiqun"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-15"},{"lineNumber":119,"author":{"gitId":"hengyiqun"},"content":"        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2021-03-15"},{"lineNumber":120,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":121,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":122,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":123,"author":{"gitId":"hengyiqun"},"content":"     * Parses {@code userInput} into a {@code GroupContainsKeywordsPredicate}.","lastModifiedDate":"2021-03-15"},{"lineNumber":124,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":125,"author":{"gitId":"hengyiqun"},"content":"    private GroupContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2021-03-15"},{"lineNumber":126,"author":{"gitId":"hengyiqun"},"content":"        return new GroupContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-03-15"},{"lineNumber":127,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":128,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-15"},{"lineNumber":129,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"skinnychenpi":1,"hengyiqun":128}},{"path":"src/test/java/seedu/address/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2017-06-08"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"Maurice2n97":1,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/connections/AddPersonToMeetingConnectionCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.connections;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import javafx.beans.value.ObservableValue;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-08"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-04-08"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-04-08"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-04-08"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.connection.PersonMeetingConnection;","lastModifiedDate":"2021-04-08"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-04-08"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-04-08"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-04-08"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.UniqueMeetingList;","lastModifiedDate":"2021-04-08"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.note.Note;","lastModifiedDate":"2021-04-08"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.note.ReadOnlyNoteBook;","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-04-08"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-04-08"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2021-04-08"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.reminder.ReadOnlyReminderBook;","lastModifiedDate":"2021-04-08"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-04-08"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-04-08"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-04-08"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"import java.util.*;","lastModifiedDate":"2021-04-08"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-04-08"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-08"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-04-08"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalMeetings.*;","lastModifiedDate":"2021-04-08"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-04-08"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-04-08"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"class AddPersonToMeetingConnectionCommandTest {","lastModifiedDate":"2021-04-08"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    private PersonMeetingConnection connection \u003d new PersonMeetingConnection();","lastModifiedDate":"2021-04-08"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    private Set\u003cPerson\u003e personSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-04-08"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    private Set\u003cMeeting\u003e meetingSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    private static String MESSAGE_SUCCESS \u003d \"Successfully add persons related to the meeting! \"","lastModifiedDate":"2021-04-08"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"            + \"The possible duplication of persons related is automatically removed.\";","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    public AddPersonToMeetingConnectionCommandTest() {","lastModifiedDate":"2021-04-08"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(AMY, MEETING1);","lastModifiedDate":"2021-04-08"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(AMY, MEETING2);","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(AMY, MEETING3);","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(BOB, MEETING1);","lastModifiedDate":"2021-04-08"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(BOB, MEETING2);","lastModifiedDate":"2021-04-08"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        personSet.add(AMY);","lastModifiedDate":"2021-04-08"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        personSet.add(BOB);","lastModifiedDate":"2021-04-08"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        meetingSet.add(MEETING1);","lastModifiedDate":"2021-04-08"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        meetingSet.add(MEETING2);","lastModifiedDate":"2021-04-08"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        meetingSet.add(MEETING3);","lastModifiedDate":"2021-04-08"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_nullConnection_throwsNullPointerException() {","lastModifiedDate":"2021-04-08"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddPersonToMeetingConnectionCommand(null, null));","lastModifiedDate":"2021-04-08"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"    public void execute_connectionAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-04-08"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"        Model modelStub \u003d new ModelStub(personSet, meetingSet, connection);","lastModifiedDate":"2021-04-08"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"        // Extract the index for BOB, which is NO.2.","lastModifiedDate":"2021-04-08"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"        Index personIndex \u003d ParserUtil.parseIndex(\"2\");","lastModifiedDate":"2021-04-08"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cIndex\u003e personIndexSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-04-08"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"        personIndexSet.add(personIndex);","lastModifiedDate":"2021-04-08"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"        // Extract the index for Meeting3, which is NO.3.","lastModifiedDate":"2021-04-08"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"        Index meetingIndex \u003d ParserUtil.parseIndex(\"3\");","lastModifiedDate":"2021-04-08"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"        CommandResult commandResult \u003d new AddPersonToMeetingConnectionCommand(meetingIndex, personIndexSet).execute(modelStub);","lastModifiedDate":"2021-04-08"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(MESSAGE_SUCCESS, commandResult.getFeedbackToUser());","lastModifiedDate":"2021-04-08"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"    public void execute_connectionAcceptedByModel_addFail() throws Exception {","lastModifiedDate":"2021-04-08"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"        Model modelStub \u003d new ModelStub(personSet, meetingSet, connection);","lastModifiedDate":"2021-04-08"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        // The meeting index is wrong.","lastModifiedDate":"2021-04-08"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"        Index invalidMeetingIndex1 \u003d ParserUtil.parseIndex(\"4\");","lastModifiedDate":"2021-04-08"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"0\"));","lastModifiedDate":"2021-04-08"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"        Index personIndex \u003d ParserUtil.parseIndex(\"2\");","lastModifiedDate":"2021-04-08"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cIndex\u003e personIndexSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-04-08"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"        personIndexSet.add(personIndex);","lastModifiedDate":"2021-04-08"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(CommandException.class, () -\u003e new AddPersonToMeetingConnectionCommand(invalidMeetingIndex1, personIndexSet).execute(modelStub));","lastModifiedDate":"2021-04-08"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"        // The person index is wrong.","lastModifiedDate":"2021-04-08"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"        Index invalidPersonIndex1 \u003d ParserUtil.parseIndex(\"3\");","lastModifiedDate":"2021-04-08"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"        Index meetingIndex \u003d ParserUtil.parseIndex(\"3\");","lastModifiedDate":"2021-04-08"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cIndex\u003e invalidPersonIndexSet1 \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-04-08"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cIndex\u003e invalidPersonIndexSet2 \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-04-08"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"        invalidPersonIndexSet1.add(invalidPersonIndex1);","lastModifiedDate":"2021-04-08"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(CommandException.class, () -\u003e new AddPersonToMeetingConnectionCommand(meetingIndex, invalidPersonIndexSet1).execute(modelStub));","lastModifiedDate":"2021-04-08"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(CommandException.class, () -\u003e new AddPersonToMeetingConnectionCommand(meetingIndex, invalidPersonIndexSet2).execute(modelStub));","lastModifiedDate":"2021-04-08"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-08"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2021-04-08"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-08"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2021-04-08"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"        private final List\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2021-04-08"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"        private final List\u003cMeeting\u003e filteredMeetings;","lastModifiedDate":"2021-04-08"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"        private final PersonMeetingConnection connection;","lastModifiedDate":"2021-04-08"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"        public ModelStub(Set\u003cPerson\u003e personSet, Set\u003cMeeting\u003e meetingSet, PersonMeetingConnection connection) {","lastModifiedDate":"2021-04-08"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"            filteredMeetings \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-08"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"            filteredPersons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-08"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"            filteredPersons.addAll(personSet);","lastModifiedDate":"2021-04-08"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"            filteredMeetings.addAll(meetingSet);","lastModifiedDate":"2021-04-08"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"            this.connection \u003d connection;","lastModifiedDate":"2021-04-08"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-04-08"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-04-08"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-04-08"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-04-08"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2021-04-08"},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":143,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":144,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2021-04-08"},{"lineNumber":147,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":148,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":149,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":150,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":151,"author":{"gitId":"skinnychenpi"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2021-04-08"},{"lineNumber":152,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":153,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":154,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":155,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":156,"author":{"gitId":"skinnychenpi"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2021-04-08"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":158,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":159,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":160,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":161,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-04-08"},{"lineNumber":162,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":163,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":164,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":165,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":166,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2021-04-08"},{"lineNumber":167,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":168,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":169,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":170,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":171,"author":{"gitId":"skinnychenpi"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2021-04-08"},{"lineNumber":172,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":173,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":174,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":175,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":176,"author":{"gitId":"skinnychenpi"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2021-04-08"},{"lineNumber":177,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":178,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":179,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":180,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":181,"author":{"gitId":"skinnychenpi"},"content":"        public Set\u003cPerson\u003e findPersonsInGroup(Group group) {","lastModifiedDate":"2021-04-08"},{"lineNumber":182,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":183,"author":{"gitId":"skinnychenpi"},"content":"        };","lastModifiedDate":"2021-04-08"},{"lineNumber":184,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":185,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":186,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2021-04-08"},{"lineNumber":187,"author":{"gitId":"skinnychenpi"},"content":"            UniquePersonList upl \u003d new UniquePersonList();","lastModifiedDate":"2021-04-08"},{"lineNumber":188,"author":{"gitId":"skinnychenpi"},"content":"            for (Person person : filteredPersons) {","lastModifiedDate":"2021-04-08"},{"lineNumber":189,"author":{"gitId":"skinnychenpi"},"content":"                upl.add(person);","lastModifiedDate":"2021-04-08"},{"lineNumber":190,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-04-08"},{"lineNumber":191,"author":{"gitId":"skinnychenpi"},"content":"            return upl.asUnmodifiableObservableList();","lastModifiedDate":"2021-04-08"},{"lineNumber":192,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":193,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":194,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":195,"author":{"gitId":"skinnychenpi"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2021-04-08"},{"lineNumber":196,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":197,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":198,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":199,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":200,"author":{"gitId":"skinnychenpi"},"content":"        public void sortFilteredPersonList(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2021-04-08"},{"lineNumber":201,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":202,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":203,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":204,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":205,"author":{"gitId":"skinnychenpi"},"content":"        public void setMeetingBook(ReadOnlyMeetingBook meetingBook) {","lastModifiedDate":"2021-04-08"},{"lineNumber":206,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":207,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":208,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":209,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":210,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyMeetingBook getMeetingBook() {","lastModifiedDate":"2021-04-08"},{"lineNumber":211,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":212,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":213,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":214,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":215,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasMeeting(Meeting meeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":216,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":217,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":218,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":219,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":220,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteMeeting(Meeting target) {","lastModifiedDate":"2021-04-08"},{"lineNumber":221,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":222,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":223,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":224,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":225,"author":{"gitId":"skinnychenpi"},"content":"        public void addMeeting(Meeting meeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":226,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":227,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":228,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":229,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":230,"author":{"gitId":"skinnychenpi"},"content":"        public void setMeeting(Meeting target, Meeting editedMeeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":231,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":232,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":233,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":234,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":235,"author":{"gitId":"skinnychenpi"},"content":"        public void updateMeeting(Meeting target, Meeting editedMeeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":236,"author":{"gitId":"skinnychenpi"},"content":"            filteredMeetings.remove(target);","lastModifiedDate":"2021-04-08"},{"lineNumber":237,"author":{"gitId":"skinnychenpi"},"content":"            filteredMeetings.add(editedMeeting);","lastModifiedDate":"2021-04-08"},{"lineNumber":238,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":239,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":240,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":241,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {","lastModifiedDate":"2021-04-08"},{"lineNumber":242,"author":{"gitId":"skinnychenpi"},"content":"            UniqueMeetingList uml \u003d new UniqueMeetingList();","lastModifiedDate":"2021-04-08"},{"lineNumber":243,"author":{"gitId":"skinnychenpi"},"content":"            for (Meeting meeting : filteredMeetings) {","lastModifiedDate":"2021-04-08"},{"lineNumber":244,"author":{"gitId":"skinnychenpi"},"content":"                uml.add(meeting);","lastModifiedDate":"2021-04-08"},{"lineNumber":245,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-04-08"},{"lineNumber":246,"author":{"gitId":"skinnychenpi"},"content":"            return uml.asUnmodifiableObservableList();","lastModifiedDate":"2021-04-08"},{"lineNumber":247,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":248,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":249,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":250,"author":{"gitId":"skinnychenpi"},"content":"        public void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate) {","lastModifiedDate":"2021-04-08"},{"lineNumber":251,"author":{"gitId":"skinnychenpi"},"content":"            requireNonNull(predicate);","lastModifiedDate":"2021-04-08"},{"lineNumber":252,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":253,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":254,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":255,"author":{"gitId":"skinnychenpi"},"content":"        public void sortFilteredMeetingList(Comparator\u003cMeeting\u003e comparator) {","lastModifiedDate":"2021-04-08"},{"lineNumber":256,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":257,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":258,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":259,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":260,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cMeeting\u003e getUnmodifiableMeetingList() {","lastModifiedDate":"2021-04-08"},{"lineNumber":261,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2021-04-08"},{"lineNumber":262,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":263,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":264,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":265,"author":{"gitId":"skinnychenpi"},"content":"         * Replaces person meeting connection data with the data in {@code PersonMeetingConnection}.","lastModifiedDate":"2021-04-08"},{"lineNumber":266,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":267,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":268,"author":{"gitId":"skinnychenpi"},"content":"        public void setPersonMeetingConnection(PersonMeetingConnection connection) {","lastModifiedDate":"2021-04-08"},{"lineNumber":269,"author":{"gitId":"skinnychenpi"},"content":"            requireNonNull(connection);","lastModifiedDate":"2021-04-08"},{"lineNumber":270,"author":{"gitId":"skinnychenpi"},"content":"            this.connection.resetData(connection);","lastModifiedDate":"2021-04-08"},{"lineNumber":271,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":272,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":273,"author":{"gitId":"skinnychenpi"},"content":"        /** Returns the connection */","lastModifiedDate":"2021-04-08"},{"lineNumber":274,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":275,"author":{"gitId":"skinnychenpi"},"content":"        public PersonMeetingConnection getPersonMeetingConnection() {","lastModifiedDate":"2021-04-08"},{"lineNumber":276,"author":{"gitId":"skinnychenpi"},"content":"            return connection;","lastModifiedDate":"2021-04-08"},{"lineNumber":277,"author":{"gitId":"skinnychenpi"},"content":"        };","lastModifiedDate":"2021-04-08"},{"lineNumber":278,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":279,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":280,"author":{"gitId":"skinnychenpi"},"content":"         * Returns true if a given person and a given meeting exist a connection.","lastModifiedDate":"2021-04-08"},{"lineNumber":281,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":282,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":283,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasPersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":284,"author":{"gitId":"skinnychenpi"},"content":"            return connection.existPersonMeetingConnection(person, meeting);","lastModifiedDate":"2021-04-08"},{"lineNumber":285,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":286,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":287,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":288,"author":{"gitId":"skinnychenpi"},"content":"         * Adds a connection between a person and a meeting.","lastModifiedDate":"2021-04-08"},{"lineNumber":289,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":290,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":291,"author":{"gitId":"skinnychenpi"},"content":"        public void addPersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":292,"author":{"gitId":"skinnychenpi"},"content":"            connection.addPersonMeetingConnection(person, meeting);","lastModifiedDate":"2021-04-08"},{"lineNumber":293,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":294,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":295,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":296,"author":{"gitId":"skinnychenpi"},"content":"         * This method delete a single connection between a meeting and a person.","lastModifiedDate":"2021-04-08"},{"lineNumber":297,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":298,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":299,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteSinglePersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":300,"author":{"gitId":"skinnychenpi"},"content":"            connection.deleteSinglePersonMeetingConnection(person, meeting);","lastModifiedDate":"2021-04-08"},{"lineNumber":301,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":302,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":303,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":304,"author":{"gitId":"skinnychenpi"},"content":"         * This method delete a all connections related to a given person.","lastModifiedDate":"2021-04-08"},{"lineNumber":305,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":306,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":307,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteAllPersonMeetingConnectionByPerson(Person person) {","lastModifiedDate":"2021-04-08"},{"lineNumber":308,"author":{"gitId":"skinnychenpi"},"content":"            connection.deleteAllPersonMeetingConnectionByPerson(person);","lastModifiedDate":"2021-04-08"},{"lineNumber":309,"author":{"gitId":"skinnychenpi"},"content":"        };","lastModifiedDate":"2021-04-08"},{"lineNumber":310,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":311,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":312,"author":{"gitId":"skinnychenpi"},"content":"         * This method delete a all connections related to a given meeting.","lastModifiedDate":"2021-04-08"},{"lineNumber":313,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":314,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":315,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteAllPersonMeetingConnectionByMeeting(Meeting meeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":316,"author":{"gitId":"skinnychenpi"},"content":"            connection.deleteAllPersonMeetingConnectionByMeeting(meeting);","lastModifiedDate":"2021-04-08"},{"lineNumber":317,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":318,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":319,"author":{"gitId":"skinnychenpi"},"content":"        //TODO: This two methods below may need further change because I don\u0027t know how it works with GUI.(Yuheng)","lastModifiedDate":"2021-04-08"},{"lineNumber":320,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":321,"author":{"gitId":"skinnychenpi"},"content":"         * Returns a Observable meeting list object with the person as the key.","lastModifiedDate":"2021-04-08"},{"lineNumber":322,"author":{"gitId":"skinnychenpi"},"content":"         * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-04-08"},{"lineNumber":323,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":324,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":325,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cMeeting\u003e getFilteredMeetingListByPersonConnection(Person person) {","lastModifiedDate":"2021-04-08"},{"lineNumber":326,"author":{"gitId":"skinnychenpi"},"content":"            UniqueMeetingList meetings \u003d connection.getMeetingsByPerson(person);","lastModifiedDate":"2021-04-08"},{"lineNumber":327,"author":{"gitId":"skinnychenpi"},"content":"            assert meetings !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":328,"author":{"gitId":"skinnychenpi"},"content":"            return meetings.asUnmodifiableObservableList();","lastModifiedDate":"2021-04-08"},{"lineNumber":329,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":330,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":331,"author":{"gitId":"skinnychenpi"},"content":"         * Returns a Observable person list object with the meeting as the key.","lastModifiedDate":"2021-04-08"},{"lineNumber":332,"author":{"gitId":"skinnychenpi"},"content":"         * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-04-08"},{"lineNumber":333,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":334,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonListByMeetingConnection(Meeting meeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":335,"author":{"gitId":"skinnychenpi"},"content":"            UniquePersonList persons \u003d connection.getPersonsByMeeting(meeting);","lastModifiedDate":"2021-04-08"},{"lineNumber":336,"author":{"gitId":"skinnychenpi"},"content":"            assert persons !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":337,"author":{"gitId":"skinnychenpi"},"content":"            return persons.asUnmodifiableObservableList();","lastModifiedDate":"2021-04-08"},{"lineNumber":338,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":339,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":340,"author":{"gitId":"skinnychenpi"},"content":"         * Returns a Unique meeting list object with the person as the key.","lastModifiedDate":"2021-04-08"},{"lineNumber":341,"author":{"gitId":"skinnychenpi"},"content":"         * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-04-08"},{"lineNumber":342,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":343,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":344,"author":{"gitId":"skinnychenpi"},"content":"        public UniqueMeetingList getUniqueMeetingListByPersonConnection(Person person) {","lastModifiedDate":"2021-04-08"},{"lineNumber":345,"author":{"gitId":"skinnychenpi"},"content":"            UniqueMeetingList meetings \u003d connection.getMeetingsByPerson(person);","lastModifiedDate":"2021-04-08"},{"lineNumber":346,"author":{"gitId":"skinnychenpi"},"content":"            return meetings;","lastModifiedDate":"2021-04-08"},{"lineNumber":347,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":348,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":349,"author":{"gitId":"skinnychenpi"},"content":"         * Returns a Unique person list object with the meeting as the key.","lastModifiedDate":"2021-04-08"},{"lineNumber":350,"author":{"gitId":"skinnychenpi"},"content":"         * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-04-08"},{"lineNumber":351,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":352,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":353,"author":{"gitId":"skinnychenpi"},"content":"        public UniquePersonList getUniquePersonListByMeetingConnection(Meeting meeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":354,"author":{"gitId":"skinnychenpi"},"content":"            UniquePersonList persons \u003d connection.getPersonsByMeeting(meeting);","lastModifiedDate":"2021-04-08"},{"lineNumber":355,"author":{"gitId":"skinnychenpi"},"content":"            return persons;","lastModifiedDate":"2021-04-08"},{"lineNumber":356,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":357,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":358,"author":{"gitId":"skinnychenpi"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Note methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-08"},{"lineNumber":359,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":360,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":361,"author":{"gitId":"skinnychenpi"},"content":"        public void setNoteBook(ReadOnlyNoteBook noteBook) {","lastModifiedDate":"2021-04-08"},{"lineNumber":362,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":363,"author":{"gitId":"skinnychenpi"},"content":"        };","lastModifiedDate":"2021-04-08"},{"lineNumber":364,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":365,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":366,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyNoteBook getNoteBook() {","lastModifiedDate":"2021-04-08"},{"lineNumber":367,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":368,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":369,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":370,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":371,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasNote(Note note) {","lastModifiedDate":"2021-04-08"},{"lineNumber":372,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":373,"author":{"gitId":"skinnychenpi"},"content":"        };","lastModifiedDate":"2021-04-08"},{"lineNumber":374,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":375,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":376,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteNote(Note target) {","lastModifiedDate":"2021-04-08"},{"lineNumber":377,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":378,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":379,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":380,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":381,"author":{"gitId":"skinnychenpi"},"content":"        public void addNote(Note note) {","lastModifiedDate":"2021-04-08"},{"lineNumber":382,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":383,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":384,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":385,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":386,"author":{"gitId":"skinnychenpi"},"content":"        public void setNote(Note target, Note editedNote) {","lastModifiedDate":"2021-04-08"},{"lineNumber":387,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":388,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":389,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":390,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":391,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cNote\u003e getFilteredNoteList() {","lastModifiedDate":"2021-04-08"},{"lineNumber":392,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":393,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":394,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":395,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":396,"author":{"gitId":"skinnychenpi"},"content":"        public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {","lastModifiedDate":"2021-04-08"},{"lineNumber":397,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":398,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":399,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":400,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":401,"author":{"gitId":"skinnychenpi"},"content":"        public Path getNoteBookFilePath() {","lastModifiedDate":"2021-04-08"},{"lineNumber":402,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":403,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":404,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":405,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":406,"author":{"gitId":"skinnychenpi"},"content":"        public void setNoteBookFilePath(Path noteBookFilePath) {","lastModifiedDate":"2021-04-08"},{"lineNumber":407,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":408,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":409,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":410,"author":{"gitId":"skinnychenpi"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dTimetable methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-08"},{"lineNumber":411,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":412,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":413,"author":{"gitId":"skinnychenpi"},"content":"        public void setTimetableStartDate(LocalDate localDate) {","lastModifiedDate":"2021-04-08"},{"lineNumber":414,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2021-04-08"},{"lineNumber":415,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":416,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":417,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":418,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableValue\u003cLocalDate\u003e getReadOnlyTimetableStartDate() {","lastModifiedDate":"2021-04-08"},{"lineNumber":419,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2021-04-08"},{"lineNumber":420,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":421,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":422,"author":{"gitId":"skinnychenpi"},"content":"        //-\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-08"},{"lineNumber":423,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":424,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":425,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":426,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":427,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyReminderBook getReminderBook() {","lastModifiedDate":"2021-04-08"},{"lineNumber":428,"author":{"gitId":"skinnychenpi"},"content":"            return null;","lastModifiedDate":"2021-04-08"},{"lineNumber":429,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":430,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":431,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":432,"author":{"gitId":"skinnychenpi"},"content":"        public void refreshReminderBook() {","lastModifiedDate":"2021-04-08"},{"lineNumber":433,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":434,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":435,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":436,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":437,"author":{"gitId":"skinnychenpi"},"content":"        public boolean clashes(Meeting toCheck) {","lastModifiedDate":"2021-04-08"},{"lineNumber":438,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":439,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":440,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":441,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":442,"author":{"gitId":"skinnychenpi"},"content":"        public boolean clashesExceptOne(Meeting meetingNotIncluded, Meeting toCheck) {","lastModifiedDate":"2021-04-08"},{"lineNumber":443,"author":{"gitId":"skinnychenpi"},"content":"            return false;","lastModifiedDate":"2021-04-08"},{"lineNumber":444,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":445,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":446,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":447,"author":{"gitId":"skinnychenpi"},"content":"         * Gets a list of meetings from the model that overlap with this meeting.","lastModifiedDate":"2021-04-08"},{"lineNumber":448,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":449,"author":{"gitId":"skinnychenpi"},"content":"        public List\u003cMeeting\u003e getClashes(Meeting toCheck) {","lastModifiedDate":"2021-04-08"},{"lineNumber":450,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":451,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":452,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":453,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":454,"author":{"gitId":"skinnychenpi"},"content":"         * Gets the meeting ( if any ) scheduled  at this point in time in the model.","lastModifiedDate":"2021-04-08"},{"lineNumber":455,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":456,"author":{"gitId":"skinnychenpi"},"content":"        public Optional\u003cMeeting\u003e getMeetingAtInstant(LocalDateTime localDateTime) {","lastModifiedDate":"2021-04-08"},{"lineNumber":457,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":458,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":459,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":460,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":461,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":462,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-04-08"}],"authorContributionMap":{"skinnychenpi":462}},{"path":"src/test/java/seedu/address/logic/commands/connections/DeletePersonToMeetingConnectionCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.connections;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import javafx.beans.value.ObservableValue;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-08"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-04-08"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-04-08"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-04-08"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.connection.PersonMeetingConnection;","lastModifiedDate":"2021-04-08"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-04-08"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-04-08"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-04-08"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.UniqueMeetingList;","lastModifiedDate":"2021-04-08"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.note.Note;","lastModifiedDate":"2021-04-08"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.note.ReadOnlyNoteBook;","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-04-08"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-04-08"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2021-04-08"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.reminder.ReadOnlyReminderBook;","lastModifiedDate":"2021-04-08"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-04-08"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-04-08"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-04-08"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"import java.util.*;","lastModifiedDate":"2021-04-08"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-04-08"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-08"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-04-08"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalMeetings.*;","lastModifiedDate":"2021-04-08"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING3;","lastModifiedDate":"2021-04-08"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-04-08"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"class DeletePersonToMeetingConnectionCommandTest {","lastModifiedDate":"2021-04-08"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    private PersonMeetingConnection connection \u003d new PersonMeetingConnection();","lastModifiedDate":"2021-04-08"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    private Set\u003cPerson\u003e personSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    private Set\u003cMeeting\u003e meetingSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-04-08"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    private static String MESSAGE_SUCCESS \u003d \"Successfully delete persons related to the meeting! \";","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    public DeletePersonToMeetingConnectionCommandTest() {","lastModifiedDate":"2021-04-08"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(AMY, MEETING1);","lastModifiedDate":"2021-04-08"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(AMY, MEETING2);","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(AMY, MEETING3);","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(BOB, MEETING1);","lastModifiedDate":"2021-04-08"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(BOB, MEETING2);","lastModifiedDate":"2021-04-08"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        personSet.add(AMY);","lastModifiedDate":"2021-04-08"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        personSet.add(BOB);","lastModifiedDate":"2021-04-08"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        meetingSet.add(MEETING1);","lastModifiedDate":"2021-04-08"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        meetingSet.add(MEETING2);","lastModifiedDate":"2021-04-08"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        meetingSet.add(MEETING3);","lastModifiedDate":"2021-04-08"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        MEETING1.setPersonMeetingConnection(connection);","lastModifiedDate":"2021-04-08"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        MEETING2.setPersonMeetingConnection(connection);","lastModifiedDate":"2021-04-08"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        MEETING3.setPersonMeetingConnection(connection);","lastModifiedDate":"2021-04-08"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_nullConnection_throwsNullPointerException() {","lastModifiedDate":"2021-04-08"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddPersonToMeetingConnectionCommand(null, null));","lastModifiedDate":"2021-04-08"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"    public void execute_connectionAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-04-08"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"        Model modelStub \u003d new ModelStub(personSet, meetingSet, connection);","lastModifiedDate":"2021-04-08"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"        // Extract the index for BOB, which is NO.2.","lastModifiedDate":"2021-04-08"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"        Index personIndex \u003d ParserUtil.parseIndex(\"2\");","lastModifiedDate":"2021-04-08"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cIndex\u003e personIndexSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-04-08"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"        personIndexSet.add(personIndex);","lastModifiedDate":"2021-04-08"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"        // Extract the index for Meeting2, which is NO.2.","lastModifiedDate":"2021-04-08"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"        Index meetingIndex \u003d ParserUtil.parseIndex(\"2\");","lastModifiedDate":"2021-04-08"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"        CommandResult commandResult \u003d new DeletePersonToMeetingConnectionCommand(meetingIndex, personIndexSet).execute(modelStub);","lastModifiedDate":"2021-04-08"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(MESSAGE_SUCCESS, commandResult.getFeedbackToUser());","lastModifiedDate":"2021-04-08"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"    public void execute_connectionAcceptedByModel_addFail() throws Exception {","lastModifiedDate":"2021-04-08"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"        Model modelStub \u003d new ModelStub(personSet, meetingSet, connection);","lastModifiedDate":"2021-04-08"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"        // The meeting index is out of bounds.","lastModifiedDate":"2021-04-08"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"        Index invalidMeetingIndex1 \u003d ParserUtil.parseIndex(\"4\");","lastModifiedDate":"2021-04-08"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"0\"));","lastModifiedDate":"2021-04-08"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"        Index personIndex \u003d ParserUtil.parseIndex(\"2\");","lastModifiedDate":"2021-04-08"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cIndex\u003e personIndexSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-04-08"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"        personIndexSet.add(personIndex);","lastModifiedDate":"2021-04-08"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(CommandException.class, () -\u003e new DeletePersonToMeetingConnectionCommand(invalidMeetingIndex1, personIndexSet).execute(modelStub));","lastModifiedDate":"2021-04-08"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"        // The person index is out of bounds.","lastModifiedDate":"2021-04-08"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        Index invalidPersonIndex1 \u003d ParserUtil.parseIndex(\"3\");","lastModifiedDate":"2021-04-08"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"        Index meetingIndex \u003d ParserUtil.parseIndex(\"3\");","lastModifiedDate":"2021-04-08"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cIndex\u003e invalidPersonIndexSet1 \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-04-08"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"        invalidPersonIndexSet1.add(invalidPersonIndex1);","lastModifiedDate":"2021-04-08"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(CommandException.class, () -\u003e new DeletePersonToMeetingConnectionCommand(meetingIndex, invalidPersonIndexSet1).execute(modelStub));","lastModifiedDate":"2021-04-08"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-04-08"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2021-04-08"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-04-08"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2021-04-08"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"        private final List\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2021-04-08"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"        private final List\u003cMeeting\u003e filteredMeetings;","lastModifiedDate":"2021-04-08"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"        private final PersonMeetingConnection connection;","lastModifiedDate":"2021-04-08"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"        public ModelStub(Set\u003cPerson\u003e personSet, Set\u003cMeeting\u003e meetingSet, PersonMeetingConnection connection) {","lastModifiedDate":"2021-04-08"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"            filteredMeetings \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-08"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"            filteredPersons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-08"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"            filteredPersons.addAll(personSet);","lastModifiedDate":"2021-04-08"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"            filteredMeetings.addAll(meetingSet);","lastModifiedDate":"2021-04-08"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"            this.connection \u003d connection;","lastModifiedDate":"2021-04-08"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-04-08"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-04-08"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-04-08"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-04-08"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2021-04-08"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":143,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":144,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2021-04-08"},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":147,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":148,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":149,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":150,"author":{"gitId":"skinnychenpi"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2021-04-08"},{"lineNumber":151,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":152,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":153,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":154,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":155,"author":{"gitId":"skinnychenpi"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2021-04-08"},{"lineNumber":156,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":158,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":159,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":160,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-04-08"},{"lineNumber":161,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":162,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":163,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":164,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":165,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2021-04-08"},{"lineNumber":166,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":167,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":168,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":169,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":170,"author":{"gitId":"skinnychenpi"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2021-04-08"},{"lineNumber":171,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":172,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":173,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":174,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":175,"author":{"gitId":"skinnychenpi"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2021-04-08"},{"lineNumber":176,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":177,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":178,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":179,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":180,"author":{"gitId":"skinnychenpi"},"content":"        public Set\u003cPerson\u003e findPersonsInGroup(Group group) {","lastModifiedDate":"2021-04-08"},{"lineNumber":181,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":182,"author":{"gitId":"skinnychenpi"},"content":"        };","lastModifiedDate":"2021-04-08"},{"lineNumber":183,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":184,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":185,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2021-04-08"},{"lineNumber":186,"author":{"gitId":"skinnychenpi"},"content":"            UniquePersonList upl \u003d new UniquePersonList();","lastModifiedDate":"2021-04-08"},{"lineNumber":187,"author":{"gitId":"skinnychenpi"},"content":"            for (Person person : filteredPersons) {","lastModifiedDate":"2021-04-08"},{"lineNumber":188,"author":{"gitId":"skinnychenpi"},"content":"                upl.add(person);","lastModifiedDate":"2021-04-08"},{"lineNumber":189,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-04-08"},{"lineNumber":190,"author":{"gitId":"skinnychenpi"},"content":"            return upl.asUnmodifiableObservableList();","lastModifiedDate":"2021-04-08"},{"lineNumber":191,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":192,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":193,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":194,"author":{"gitId":"skinnychenpi"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2021-04-08"},{"lineNumber":195,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":196,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":197,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":198,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":199,"author":{"gitId":"skinnychenpi"},"content":"        public void sortFilteredPersonList(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2021-04-08"},{"lineNumber":200,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":201,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":202,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":203,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":204,"author":{"gitId":"skinnychenpi"},"content":"        public void setMeetingBook(ReadOnlyMeetingBook meetingBook) {","lastModifiedDate":"2021-04-08"},{"lineNumber":205,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":206,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":207,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":208,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":209,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyMeetingBook getMeetingBook() {","lastModifiedDate":"2021-04-08"},{"lineNumber":210,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":211,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":212,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":213,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":214,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasMeeting(Meeting meeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":215,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":216,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":217,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":218,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":219,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteMeeting(Meeting target) {","lastModifiedDate":"2021-04-08"},{"lineNumber":220,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":221,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":222,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":223,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":224,"author":{"gitId":"skinnychenpi"},"content":"        public void addMeeting(Meeting meeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":225,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":226,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":227,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":228,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":229,"author":{"gitId":"skinnychenpi"},"content":"        public void setMeeting(Meeting target, Meeting editedMeeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":230,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":231,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":232,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":233,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":234,"author":{"gitId":"skinnychenpi"},"content":"        public void updateMeeting(Meeting target, Meeting editedMeeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":235,"author":{"gitId":"skinnychenpi"},"content":"            filteredMeetings.remove(target);","lastModifiedDate":"2021-04-08"},{"lineNumber":236,"author":{"gitId":"skinnychenpi"},"content":"            filteredMeetings.add(editedMeeting);","lastModifiedDate":"2021-04-08"},{"lineNumber":237,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":238,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":239,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":240,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {","lastModifiedDate":"2021-04-08"},{"lineNumber":241,"author":{"gitId":"skinnychenpi"},"content":"            UniqueMeetingList uml \u003d new UniqueMeetingList();","lastModifiedDate":"2021-04-08"},{"lineNumber":242,"author":{"gitId":"skinnychenpi"},"content":"            for (Meeting meeting : filteredMeetings) {","lastModifiedDate":"2021-04-08"},{"lineNumber":243,"author":{"gitId":"skinnychenpi"},"content":"                uml.add(meeting);","lastModifiedDate":"2021-04-08"},{"lineNumber":244,"author":{"gitId":"skinnychenpi"},"content":"            }","lastModifiedDate":"2021-04-08"},{"lineNumber":245,"author":{"gitId":"skinnychenpi"},"content":"            return uml.asUnmodifiableObservableList();","lastModifiedDate":"2021-04-08"},{"lineNumber":246,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":247,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":248,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":249,"author":{"gitId":"skinnychenpi"},"content":"        public void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate) {","lastModifiedDate":"2021-04-08"},{"lineNumber":250,"author":{"gitId":"skinnychenpi"},"content":"            requireNonNull(predicate);","lastModifiedDate":"2021-04-08"},{"lineNumber":251,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":252,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":253,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":254,"author":{"gitId":"skinnychenpi"},"content":"        public void sortFilteredMeetingList(Comparator\u003cMeeting\u003e comparator) {","lastModifiedDate":"2021-04-08"},{"lineNumber":255,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":256,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":257,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":258,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":259,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cMeeting\u003e getUnmodifiableMeetingList() {","lastModifiedDate":"2021-04-08"},{"lineNumber":260,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2021-04-08"},{"lineNumber":261,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":262,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":263,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":264,"author":{"gitId":"skinnychenpi"},"content":"         * Replaces person meeting connection data with the data in {@code PersonMeetingConnection}.","lastModifiedDate":"2021-04-08"},{"lineNumber":265,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":266,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":267,"author":{"gitId":"skinnychenpi"},"content":"        public void setPersonMeetingConnection(PersonMeetingConnection connection) {","lastModifiedDate":"2021-04-08"},{"lineNumber":268,"author":{"gitId":"skinnychenpi"},"content":"            requireNonNull(connection);","lastModifiedDate":"2021-04-08"},{"lineNumber":269,"author":{"gitId":"skinnychenpi"},"content":"            this.connection.resetData(connection);","lastModifiedDate":"2021-04-08"},{"lineNumber":270,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":271,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":272,"author":{"gitId":"skinnychenpi"},"content":"        /** Returns the connection */","lastModifiedDate":"2021-04-08"},{"lineNumber":273,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":274,"author":{"gitId":"skinnychenpi"},"content":"        public PersonMeetingConnection getPersonMeetingConnection() {","lastModifiedDate":"2021-04-08"},{"lineNumber":275,"author":{"gitId":"skinnychenpi"},"content":"            return connection;","lastModifiedDate":"2021-04-08"},{"lineNumber":276,"author":{"gitId":"skinnychenpi"},"content":"        };","lastModifiedDate":"2021-04-08"},{"lineNumber":277,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":278,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":279,"author":{"gitId":"skinnychenpi"},"content":"         * Returns true if a given person and a given meeting exist a connection.","lastModifiedDate":"2021-04-08"},{"lineNumber":280,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":281,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":282,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasPersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":283,"author":{"gitId":"skinnychenpi"},"content":"            return connection.existPersonMeetingConnection(person, meeting);","lastModifiedDate":"2021-04-08"},{"lineNumber":284,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":285,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":286,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":287,"author":{"gitId":"skinnychenpi"},"content":"         * Adds a connection between a person and a meeting.","lastModifiedDate":"2021-04-08"},{"lineNumber":288,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":289,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":290,"author":{"gitId":"skinnychenpi"},"content":"        public void addPersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":291,"author":{"gitId":"skinnychenpi"},"content":"            connection.addPersonMeetingConnection(person, meeting);","lastModifiedDate":"2021-04-08"},{"lineNumber":292,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":293,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":294,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":295,"author":{"gitId":"skinnychenpi"},"content":"         * This method delete a single connection between a meeting and a person.","lastModifiedDate":"2021-04-08"},{"lineNumber":296,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":297,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":298,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteSinglePersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":299,"author":{"gitId":"skinnychenpi"},"content":"            connection.deleteSinglePersonMeetingConnection(person, meeting);","lastModifiedDate":"2021-04-08"},{"lineNumber":300,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":301,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":302,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":303,"author":{"gitId":"skinnychenpi"},"content":"         * This method delete a all connections related to a given person.","lastModifiedDate":"2021-04-08"},{"lineNumber":304,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":305,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":306,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteAllPersonMeetingConnectionByPerson(Person person) {","lastModifiedDate":"2021-04-08"},{"lineNumber":307,"author":{"gitId":"skinnychenpi"},"content":"            connection.deleteAllPersonMeetingConnectionByPerson(person);","lastModifiedDate":"2021-04-08"},{"lineNumber":308,"author":{"gitId":"skinnychenpi"},"content":"        };","lastModifiedDate":"2021-04-08"},{"lineNumber":309,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":310,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":311,"author":{"gitId":"skinnychenpi"},"content":"         * This method delete a all connections related to a given meeting.","lastModifiedDate":"2021-04-08"},{"lineNumber":312,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":313,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":314,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteAllPersonMeetingConnectionByMeeting(Meeting meeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":315,"author":{"gitId":"skinnychenpi"},"content":"            connection.deleteAllPersonMeetingConnectionByMeeting(meeting);","lastModifiedDate":"2021-04-08"},{"lineNumber":316,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":317,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":318,"author":{"gitId":"skinnychenpi"},"content":"        //TODO: This two methods below may need further change because I don\u0027t know how it works with GUI.(Yuheng)","lastModifiedDate":"2021-04-08"},{"lineNumber":319,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":320,"author":{"gitId":"skinnychenpi"},"content":"         * Returns a Observable meeting list object with the person as the key.","lastModifiedDate":"2021-04-08"},{"lineNumber":321,"author":{"gitId":"skinnychenpi"},"content":"         * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-04-08"},{"lineNumber":322,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":323,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":324,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cMeeting\u003e getFilteredMeetingListByPersonConnection(Person person) {","lastModifiedDate":"2021-04-08"},{"lineNumber":325,"author":{"gitId":"skinnychenpi"},"content":"            UniqueMeetingList meetings \u003d connection.getMeetingsByPerson(person);","lastModifiedDate":"2021-04-08"},{"lineNumber":326,"author":{"gitId":"skinnychenpi"},"content":"            assert meetings !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":327,"author":{"gitId":"skinnychenpi"},"content":"            return meetings.asUnmodifiableObservableList();","lastModifiedDate":"2021-04-08"},{"lineNumber":328,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":329,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":330,"author":{"gitId":"skinnychenpi"},"content":"         * Returns a Observable person list object with the meeting as the key.","lastModifiedDate":"2021-04-08"},{"lineNumber":331,"author":{"gitId":"skinnychenpi"},"content":"         * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-04-08"},{"lineNumber":332,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":333,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonListByMeetingConnection(Meeting meeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":334,"author":{"gitId":"skinnychenpi"},"content":"            UniquePersonList persons \u003d connection.getPersonsByMeeting(meeting);","lastModifiedDate":"2021-04-08"},{"lineNumber":335,"author":{"gitId":"skinnychenpi"},"content":"            assert persons !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":336,"author":{"gitId":"skinnychenpi"},"content":"            return persons.asUnmodifiableObservableList();","lastModifiedDate":"2021-04-08"},{"lineNumber":337,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":338,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":339,"author":{"gitId":"skinnychenpi"},"content":"         * Returns a Unique meeting list object with the person as the key.","lastModifiedDate":"2021-04-08"},{"lineNumber":340,"author":{"gitId":"skinnychenpi"},"content":"         * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-04-08"},{"lineNumber":341,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":342,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":343,"author":{"gitId":"skinnychenpi"},"content":"        public UniqueMeetingList getUniqueMeetingListByPersonConnection(Person person) {","lastModifiedDate":"2021-04-08"},{"lineNumber":344,"author":{"gitId":"skinnychenpi"},"content":"            UniqueMeetingList meetings \u003d connection.getMeetingsByPerson(person);","lastModifiedDate":"2021-04-08"},{"lineNumber":345,"author":{"gitId":"skinnychenpi"},"content":"            return meetings;","lastModifiedDate":"2021-04-08"},{"lineNumber":346,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":347,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":348,"author":{"gitId":"skinnychenpi"},"content":"         * Returns a Unique person list object with the meeting as the key.","lastModifiedDate":"2021-04-08"},{"lineNumber":349,"author":{"gitId":"skinnychenpi"},"content":"         * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-04-08"},{"lineNumber":350,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":351,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":352,"author":{"gitId":"skinnychenpi"},"content":"        public UniquePersonList getUniquePersonListByMeetingConnection(Meeting meeting) {","lastModifiedDate":"2021-04-08"},{"lineNumber":353,"author":{"gitId":"skinnychenpi"},"content":"            UniquePersonList persons \u003d connection.getPersonsByMeeting(meeting);","lastModifiedDate":"2021-04-08"},{"lineNumber":354,"author":{"gitId":"skinnychenpi"},"content":"            return persons;","lastModifiedDate":"2021-04-08"},{"lineNumber":355,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":356,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":357,"author":{"gitId":"skinnychenpi"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Note methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-08"},{"lineNumber":358,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":359,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":360,"author":{"gitId":"skinnychenpi"},"content":"        public void setNoteBook(ReadOnlyNoteBook noteBook) {","lastModifiedDate":"2021-04-08"},{"lineNumber":361,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":362,"author":{"gitId":"skinnychenpi"},"content":"        };","lastModifiedDate":"2021-04-08"},{"lineNumber":363,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":364,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":365,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyNoteBook getNoteBook() {","lastModifiedDate":"2021-04-08"},{"lineNumber":366,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":367,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":368,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":369,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":370,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasNote(Note note) {","lastModifiedDate":"2021-04-08"},{"lineNumber":371,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":372,"author":{"gitId":"skinnychenpi"},"content":"        };","lastModifiedDate":"2021-04-08"},{"lineNumber":373,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":374,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":375,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteNote(Note target) {","lastModifiedDate":"2021-04-08"},{"lineNumber":376,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":377,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":378,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":379,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":380,"author":{"gitId":"skinnychenpi"},"content":"        public void addNote(Note note) {","lastModifiedDate":"2021-04-08"},{"lineNumber":381,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":382,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":383,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":384,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":385,"author":{"gitId":"skinnychenpi"},"content":"        public void setNote(Note target, Note editedNote) {","lastModifiedDate":"2021-04-08"},{"lineNumber":386,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":387,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":388,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":389,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":390,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cNote\u003e getFilteredNoteList() {","lastModifiedDate":"2021-04-08"},{"lineNumber":391,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":392,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":393,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":394,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":395,"author":{"gitId":"skinnychenpi"},"content":"        public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {","lastModifiedDate":"2021-04-08"},{"lineNumber":396,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":397,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":398,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":399,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":400,"author":{"gitId":"skinnychenpi"},"content":"        public Path getNoteBookFilePath() {","lastModifiedDate":"2021-04-08"},{"lineNumber":401,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":402,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":403,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":404,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":405,"author":{"gitId":"skinnychenpi"},"content":"        public void setNoteBookFilePath(Path noteBookFilePath) {","lastModifiedDate":"2021-04-08"},{"lineNumber":406,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":407,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":408,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":409,"author":{"gitId":"skinnychenpi"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dTimetable methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-08"},{"lineNumber":410,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":411,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":412,"author":{"gitId":"skinnychenpi"},"content":"        public void setTimetableStartDate(LocalDate localDate) {","lastModifiedDate":"2021-04-08"},{"lineNumber":413,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2021-04-08"},{"lineNumber":414,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":415,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":416,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":417,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableValue\u003cLocalDate\u003e getReadOnlyTimetableStartDate() {","lastModifiedDate":"2021-04-08"},{"lineNumber":418,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2021-04-08"},{"lineNumber":419,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":420,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":421,"author":{"gitId":"skinnychenpi"},"content":"        //-\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-08"},{"lineNumber":422,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":423,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":424,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":425,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":426,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyReminderBook getReminderBook() {","lastModifiedDate":"2021-04-08"},{"lineNumber":427,"author":{"gitId":"skinnychenpi"},"content":"            return null;","lastModifiedDate":"2021-04-08"},{"lineNumber":428,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":429,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":430,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":431,"author":{"gitId":"skinnychenpi"},"content":"        public void refreshReminderBook() {","lastModifiedDate":"2021-04-08"},{"lineNumber":432,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":433,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":434,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":435,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":436,"author":{"gitId":"skinnychenpi"},"content":"        public boolean clashes(Meeting toCheck) {","lastModifiedDate":"2021-04-08"},{"lineNumber":437,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":438,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":439,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":440,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-08"},{"lineNumber":441,"author":{"gitId":"skinnychenpi"},"content":"        public boolean clashesExceptOne(Meeting meetingNotIncluded, Meeting toCheck) {","lastModifiedDate":"2021-04-08"},{"lineNumber":442,"author":{"gitId":"skinnychenpi"},"content":"            return false;","lastModifiedDate":"2021-04-08"},{"lineNumber":443,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":444,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":445,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":446,"author":{"gitId":"skinnychenpi"},"content":"         * Gets a list of meetings from the model that overlap with this meeting.","lastModifiedDate":"2021-04-08"},{"lineNumber":447,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":448,"author":{"gitId":"skinnychenpi"},"content":"        public List\u003cMeeting\u003e getClashes(Meeting toCheck) {","lastModifiedDate":"2021-04-08"},{"lineNumber":449,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":450,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":451,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":452,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":453,"author":{"gitId":"skinnychenpi"},"content":"         * Gets the meeting ( if any ) scheduled  at this point in time in the model.","lastModifiedDate":"2021-04-08"},{"lineNumber":454,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":455,"author":{"gitId":"skinnychenpi"},"content":"        public Optional\u003cMeeting\u003e getMeetingAtInstant(LocalDateTime localDateTime) {","lastModifiedDate":"2021-04-08"},{"lineNumber":456,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-08"},{"lineNumber":457,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-08"},{"lineNumber":458,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":459,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":460,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":461,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-04-08"}],"authorContributionMap":{"skinnychenpi":461}},{"path":"src/test/java/seedu/address/logic/commands/meetings/AddMeetingCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.meetings;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import javafx.beans.value.ObservableValue;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.connection.PersonMeetingConnection;","lastModifiedDate":"2021-03-25"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.UniqueMeetingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Note;","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.ReadOnlyNoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.reminder.ReadOnlyReminderBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.testutil.MeetingBuilder;","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"import java.util.*;","lastModifiedDate":"2021-04-07"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-04-07"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"class AddMeetingCommandTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_nullMeeting_throwsNullPointerException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddMeetingCommand(null));","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public void execute_meetingAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"        AddMeetingCommandTest.MeetingModelStubAcceptingAdded modelStub \u003d","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"                new AddMeetingCommandTest.MeetingModelStubAcceptingAdded();","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        Meeting validMeeting \u003d new MeetingBuilder().build();","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        CommandResult commandResult \u003d new AddMeetingCommand(validMeeting).execute(modelStub);","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(String.format(AddMeetingCommand.MESSAGE_SUCCESS, validMeeting), commandResult.getFeedbackToUser());","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(Arrays.asList(validMeeting), modelStub.meetingsAdded);","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        Meeting validMeeting \u003d new MeetingBuilder().build();","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        AddMeetingCommand addMeetingCommand \u003d new AddMeetingCommand(validMeeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        AddMeetingCommandTest.ModelStub modelStub \u003d new AddMeetingCommandTest.MeetingModelStubWith(validMeeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"                AddMeetingCommand.MESSAGE_DUPLICATE_MEETING, () -\u003e addMeetingCommand.execute(modelStub));","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"    public void equals() {","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"        Meeting meeting1 \u003d new MeetingBuilder().withName(\"Meeting1\").build();","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"        Meeting meeting2 \u003d new MeetingBuilder().withName(\"Meeting2\").build();","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"        AddMeetingCommand addMeeting1Command \u003d new AddMeetingCommand(meeting1);","lastModifiedDate":"2021-03-16"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"        AddMeetingCommand addMeeting2Command \u003d new AddMeetingCommand(meeting2);","lastModifiedDate":"2021-03-16"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(addMeeting1Command.equals(addMeeting1Command));","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"        AddMeetingCommand addMeeting1CommandCopy \u003d new AddMeetingCommand(meeting1);","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(addMeeting1Command.equals(addMeeting1CommandCopy));","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(addMeeting1Command.equals(1));","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(addMeeting1Command.equals(null));","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(addMeeting1Command.equals(addMeeting2Command));","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-03-15"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-03-15"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-03-15"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2021-03-15"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2021-03-15"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2021-03-15"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2021-03-15"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-03-15"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2021-03-15"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2021-03-15"},{"lineNumber":143,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":144,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":147,"author":{"gitId":"skinnychenpi"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2021-03-15"},{"lineNumber":148,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":149,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":150,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":151,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":152,"author":{"gitId":"hengyiqun"},"content":"        public Set\u003cPerson\u003e findPersonsInGroup(Group group) {","lastModifiedDate":"2021-03-30"},{"lineNumber":153,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-30"},{"lineNumber":154,"author":{"gitId":"hengyiqun"},"content":"        };","lastModifiedDate":"2021-03-30"},{"lineNumber":155,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":156,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":158,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":159,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":160,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":161,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":162,"author":{"gitId":"skinnychenpi"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2021-03-15"},{"lineNumber":163,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":164,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":165,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":166,"author":{"gitId":"totoyoyo"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":167,"author":{"gitId":"totoyoyo"},"content":"        public void sortFilteredPersonList(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2021-03-28"},{"lineNumber":168,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":169,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":170,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":171,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":172,"author":{"gitId":"skinnychenpi"},"content":"        public void setMeetingBook(ReadOnlyMeetingBook meetingBook) {","lastModifiedDate":"2021-03-15"},{"lineNumber":173,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":174,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":175,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":176,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":177,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyMeetingBook getMeetingBook() {","lastModifiedDate":"2021-03-15"},{"lineNumber":178,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":179,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":180,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":181,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":182,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-15"},{"lineNumber":183,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":184,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":185,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":186,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":187,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteMeeting(Meeting target) {","lastModifiedDate":"2021-03-15"},{"lineNumber":188,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":189,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":190,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":191,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":192,"author":{"gitId":"skinnychenpi"},"content":"        public void addMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-15"},{"lineNumber":193,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":194,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":195,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":196,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":197,"author":{"gitId":"skinnychenpi"},"content":"        public void setMeeting(Meeting target, Meeting editedMeeting) {","lastModifiedDate":"2021-03-15"},{"lineNumber":198,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":199,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":200,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":201,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":202,"author":{"gitId":"hengyiqun"},"content":"        public void updateMeeting(Meeting target, Meeting editedMeeting) {","lastModifiedDate":"2021-03-28"},{"lineNumber":203,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":204,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":205,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":206,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":207,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":208,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":209,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":210,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":211,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":212,"author":{"gitId":"skinnychenpi"},"content":"        public void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate) {","lastModifiedDate":"2021-03-15"},{"lineNumber":213,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":214,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":215,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":216,"author":{"gitId":"totoyoyo"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":217,"author":{"gitId":"totoyoyo"},"content":"        public void sortFilteredMeetingList(Comparator\u003cMeeting\u003e comparator) {","lastModifiedDate":"2021-03-28"},{"lineNumber":218,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":219,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":220,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":221,"author":{"gitId":"Maurice2n97"},"content":"        @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":222,"author":{"gitId":"Maurice2n97"},"content":"        public ObservableList\u003cMeeting\u003e getUnmodifiableMeetingList() {","lastModifiedDate":"2021-03-30"},{"lineNumber":223,"author":{"gitId":"Maurice2n97"},"content":"            throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2021-03-30"},{"lineNumber":224,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":225,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":226,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":227,"author":{"gitId":"skinnychenpi"},"content":"        public void setPersonMeetingConnection(PersonMeetingConnection connection) {","lastModifiedDate":"2021-03-25"},{"lineNumber":228,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":229,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":230,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":231,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":232,"author":{"gitId":"skinnychenpi"},"content":"        public PersonMeetingConnection getPersonMeetingConnection() {","lastModifiedDate":"2021-03-25"},{"lineNumber":233,"author":{"gitId":"skinnychenpi"},"content":"            return new PersonMeetingConnection();","lastModifiedDate":"2021-03-31"},{"lineNumber":234,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":235,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":236,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":237,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasPersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-03-25"},{"lineNumber":238,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":239,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":240,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":241,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":242,"author":{"gitId":"skinnychenpi"},"content":"        public void addPersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-03-25"},{"lineNumber":243,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":244,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":245,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":246,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":247,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteSinglePersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-03-25"},{"lineNumber":248,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":249,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":250,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":251,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":252,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteAllPersonMeetingConnectionByPerson(Person person) {","lastModifiedDate":"2021-03-25"},{"lineNumber":253,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":254,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":255,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":256,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":257,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteAllPersonMeetingConnectionByMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-25"},{"lineNumber":258,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":259,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":260,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":261,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":262,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cMeeting\u003e getFilteredMeetingListByPersonConnection(Person person) {","lastModifiedDate":"2021-03-25"},{"lineNumber":263,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":264,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":265,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":266,"author":{"gitId":"hengyiqun"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Note methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-01"},{"lineNumber":267,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":268,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":269,"author":{"gitId":"hengyiqun"},"content":"        public void setNoteBook(ReadOnlyNoteBook noteBook) {","lastModifiedDate":"2021-04-01"},{"lineNumber":270,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":271,"author":{"gitId":"hengyiqun"},"content":"        };","lastModifiedDate":"2021-04-01"},{"lineNumber":272,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":273,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":274,"author":{"gitId":"hengyiqun"},"content":"        public ReadOnlyNoteBook getNoteBook() {","lastModifiedDate":"2021-04-01"},{"lineNumber":275,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":276,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":277,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":278,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":279,"author":{"gitId":"hengyiqun"},"content":"        public boolean hasNote(Note note) {","lastModifiedDate":"2021-04-01"},{"lineNumber":280,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":281,"author":{"gitId":"hengyiqun"},"content":"        };","lastModifiedDate":"2021-04-01"},{"lineNumber":282,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":283,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":284,"author":{"gitId":"hengyiqun"},"content":"        public void deleteNote(Note target) {","lastModifiedDate":"2021-04-01"},{"lineNumber":285,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":286,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":287,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":288,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":289,"author":{"gitId":"hengyiqun"},"content":"        public void addNote(Note note) {","lastModifiedDate":"2021-04-01"},{"lineNumber":290,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":291,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":292,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":293,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":294,"author":{"gitId":"hengyiqun"},"content":"        public void setNote(Note target, Note editedNote) {","lastModifiedDate":"2021-04-01"},{"lineNumber":295,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":296,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":297,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":298,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":299,"author":{"gitId":"hengyiqun"},"content":"        public ObservableList\u003cNote\u003e getFilteredNoteList() {","lastModifiedDate":"2021-04-01"},{"lineNumber":300,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":301,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":302,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":303,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":304,"author":{"gitId":"hengyiqun"},"content":"        public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {","lastModifiedDate":"2021-04-01"},{"lineNumber":305,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":306,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":307,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":308,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":309,"author":{"gitId":"hengyiqun"},"content":"        public Path getNoteBookFilePath() {","lastModifiedDate":"2021-04-01"},{"lineNumber":310,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":311,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":312,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":313,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":314,"author":{"gitId":"hengyiqun"},"content":"        public void setNoteBookFilePath(Path noteBookFilePath) {","lastModifiedDate":"2021-04-01"},{"lineNumber":315,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":316,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":317,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":318,"author":{"gitId":"Maurice2n97"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dTimetable methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":319,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":320,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":321,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonListByMeetingConnection(Meeting meeting) {","lastModifiedDate":"2021-03-25"},{"lineNumber":322,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":323,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":324,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":325,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-07"},{"lineNumber":326,"author":{"gitId":"skinnychenpi"},"content":"        public UniqueMeetingList getUniqueMeetingListByPersonConnection(Person person) {","lastModifiedDate":"2021-04-07"},{"lineNumber":327,"author":{"gitId":"skinnychenpi"},"content":"            return null;","lastModifiedDate":"2021-04-07"},{"lineNumber":328,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":329,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":330,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-07"},{"lineNumber":331,"author":{"gitId":"skinnychenpi"},"content":"        public UniquePersonList getUniquePersonListByMeetingConnection(Meeting meeting) {","lastModifiedDate":"2021-04-07"},{"lineNumber":332,"author":{"gitId":"skinnychenpi"},"content":"            return null;","lastModifiedDate":"2021-04-07"},{"lineNumber":333,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":334,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":335,"author":{"gitId":"Maurice2n97"},"content":"        @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":336,"author":{"gitId":"Maurice2n97"},"content":"        public void setTimetableStartDate(LocalDate localDate) {","lastModifiedDate":"2021-03-30"},{"lineNumber":337,"author":{"gitId":"Maurice2n97"},"content":"            throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2021-03-30"},{"lineNumber":338,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":339,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":340,"author":{"gitId":"Maurice2n97"},"content":"        @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":341,"author":{"gitId":"Maurice2n97"},"content":"        public ObservableValue\u003cLocalDate\u003e getReadOnlyTimetableStartDate() {","lastModifiedDate":"2021-03-30"},{"lineNumber":342,"author":{"gitId":"Maurice2n97"},"content":"            throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2021-03-30"},{"lineNumber":343,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":344,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":345,"author":{"gitId":"Maurice2n97"},"content":"        //-\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":346,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":347,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":348,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":349,"author":{"gitId":"totoyoyo"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":350,"author":{"gitId":"totoyoyo"},"content":"        public ReadOnlyReminderBook getReminderBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":351,"author":{"gitId":"totoyoyo"},"content":"            return null;","lastModifiedDate":"2021-03-27"},{"lineNumber":352,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":353,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":354,"author":{"gitId":"totoyoyo"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":355,"author":{"gitId":"totoyoyo"},"content":"        public void refreshReminderBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":356,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":357,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":358,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":359,"author":{"gitId":"Maurice2n97"},"content":"        @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":360,"author":{"gitId":"Maurice2n97"},"content":"        public boolean clashes(Meeting toCheck) {","lastModifiedDate":"2021-03-26"},{"lineNumber":361,"author":{"gitId":"Maurice2n97"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-26"},{"lineNumber":362,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":363,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":364,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":365,"author":{"gitId":"hengyiqun"},"content":"        public boolean clashesExceptOne(Meeting meetingNotIncluded, Meeting toCheck) {","lastModifiedDate":"2021-03-28"},{"lineNumber":366,"author":{"gitId":"hengyiqun"},"content":"            return false;","lastModifiedDate":"2021-03-28"},{"lineNumber":367,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":368,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":369,"author":{"gitId":"Maurice2n97"},"content":"        /**","lastModifiedDate":"2021-03-26"},{"lineNumber":370,"author":{"gitId":"Maurice2n97"},"content":"         * Gets a list of meetings from the model that overlap with this meeting.","lastModifiedDate":"2021-03-26"},{"lineNumber":371,"author":{"gitId":"Maurice2n97"},"content":"         */","lastModifiedDate":"2021-03-26"},{"lineNumber":372,"author":{"gitId":"Maurice2n97"},"content":"        public List\u003cMeeting\u003e getClashes(Meeting toCheck) {","lastModifiedDate":"2021-03-26"},{"lineNumber":373,"author":{"gitId":"Maurice2n97"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-26"},{"lineNumber":374,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":375,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":376,"author":{"gitId":"Maurice2n97"},"content":"        /**","lastModifiedDate":"2021-03-26"},{"lineNumber":377,"author":{"gitId":"Maurice2n97"},"content":"         * Gets the meeting ( if any ) scheduled  at this point in time in the model.","lastModifiedDate":"2021-03-26"},{"lineNumber":378,"author":{"gitId":"Maurice2n97"},"content":"         */","lastModifiedDate":"2021-03-26"},{"lineNumber":379,"author":{"gitId":"Maurice2n97"},"content":"        public Optional\u003cMeeting\u003e getMeetingAtInstant(LocalDateTime localDateTime) {","lastModifiedDate":"2021-03-26"},{"lineNumber":380,"author":{"gitId":"Maurice2n97"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-26"},{"lineNumber":381,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":382,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":383,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":384,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":385,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":386,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":387,"author":{"gitId":"skinnychenpi"},"content":"     * A Model stub that contains a single meeting.","lastModifiedDate":"2021-03-27"},{"lineNumber":388,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":389,"author":{"gitId":"skinnychenpi"},"content":"    private class MeetingModelStubWith extends AddMeetingCommandTest.ModelStub {","lastModifiedDate":"2021-03-15"},{"lineNumber":390,"author":{"gitId":"skinnychenpi"},"content":"        private final Meeting meeting;","lastModifiedDate":"2021-03-15"},{"lineNumber":391,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":392,"author":{"gitId":"skinnychenpi"},"content":"        MeetingModelStubWith(Meeting meeting) {","lastModifiedDate":"2021-03-15"},{"lineNumber":393,"author":{"gitId":"skinnychenpi"},"content":"            requireNonNull(meeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":394,"author":{"gitId":"skinnychenpi"},"content":"            this.meeting \u003d meeting;","lastModifiedDate":"2021-03-15"},{"lineNumber":395,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":396,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":397,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":398,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-15"},{"lineNumber":399,"author":{"gitId":"skinnychenpi"},"content":"            requireNonNull(meeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":400,"author":{"gitId":"skinnychenpi"},"content":"            return this.meeting.isSameMeeting(meeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":401,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":402,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":403,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":404,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":405,"author":{"gitId":"Maurice2n97"},"content":"     * A Model stub that always accept the meeting being added.","lastModifiedDate":"2021-03-26"},{"lineNumber":406,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":407,"author":{"gitId":"skinnychenpi"},"content":"    private class MeetingModelStubAcceptingAdded extends AddMeetingCommandTest.ModelStub {","lastModifiedDate":"2021-03-15"},{"lineNumber":408,"author":{"gitId":"skinnychenpi"},"content":"        final ArrayList\u003cMeeting\u003e meetingsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-15"},{"lineNumber":409,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":410,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":411,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-15"},{"lineNumber":412,"author":{"gitId":"skinnychenpi"},"content":"            requireNonNull(meeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":413,"author":{"gitId":"skinnychenpi"},"content":"            return meetingsAdded.stream().anyMatch(meeting::isSameMeeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":414,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":415,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":416,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":417,"author":{"gitId":"skinnychenpi"},"content":"        public void addMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-15"},{"lineNumber":418,"author":{"gitId":"skinnychenpi"},"content":"            requireNonNull(meeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":419,"author":{"gitId":"skinnychenpi"},"content":"            meetingsAdded.add(meeting);","lastModifiedDate":"2021-03-15"},{"lineNumber":420,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":421,"author":{"gitId":"Maurice2n97"},"content":"        @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":422,"author":{"gitId":"Maurice2n97"},"content":"        public boolean clashes(Meeting meeting) {","lastModifiedDate":"2021-03-26"},{"lineNumber":423,"author":{"gitId":"Maurice2n97"},"content":"            requireNonNull(meeting);","lastModifiedDate":"2021-03-26"},{"lineNumber":424,"author":{"gitId":"Maurice2n97"},"content":"            return meetingsAdded.stream().anyMatch(meeting :: isConflict);","lastModifiedDate":"2021-03-26"},{"lineNumber":425,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":426,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":427,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":428,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyMeetingBook getMeetingBook() {","lastModifiedDate":"2021-03-15"},{"lineNumber":429,"author":{"gitId":"skinnychenpi"},"content":"            return new MeetingBook();","lastModifiedDate":"2021-03-15"},{"lineNumber":430,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":431,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":432,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"totoyoyo":21,"Maurice2n97":60,"skinnychenpi":281,"hengyiqun":70}},{"path":"src/test/java/seedu/address/logic/commands/meetings/AddMeetingCommandWithConnectionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.meetings;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import javafx.beans.value.ObservableValue;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.AddPersonCommand;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.connection.PersonMeetingConnection;","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.UniqueMeetingList;","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Note;","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.NoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.ReadOnlyNoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.reminder.ReadOnlyReminderBook;","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.reminder.ReminderBook;","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.schedule.TimetablePrefs;","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.testutil.MeetingBuilder;","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"totoyoyo"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"public class AddMeetingCommandWithConnectionTest {","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"    public void execute_meetingPersonConnectionAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        // Add the person and the meeting separately","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        HashSet\u003cIndex\u003e connections \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        connections.add(Index.fromOneBased(1));","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        MeetingModelStubAcceptingAdded modelStub \u003d new MeetingModelStubAcceptingAdded();","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2021-03-27"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        Meeting validMeeting \u003d new MeetingBuilder().build();","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        Meeting validMeeting2 \u003d new MeetingBuilder().withName(\"Important Conference\").withStart(\"2222-01-01 19:00\")","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"            .withTerminate(\"2222-01-01 20:00\").build();","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"        CommandResult commandResult2 \u003d new AddPersonCommand(validPerson).execute(modelStub);","lastModifiedDate":"2021-03-27"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        CommandResult commandResult1 \u003d new AddMeetingCommand(validMeeting).setConnectionToPerson(connections).execute(modelStub);","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(String.format(AddMeetingCommand.MESSAGE_SUCCESS, validMeeting),","lastModifiedDate":"2021-03-27"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"            commandResult1.getFeedbackToUser());","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson),","lastModifiedDate":"2021-03-27"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"            commandResult2.getFeedbackToUser());","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expectedMeetings \u003d new UniqueMeetingList();","lastModifiedDate":"2021-03-27"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"        expectedMeetings.add(validMeeting);","lastModifiedDate":"2021-03-27"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"        UniquePersonList expectedPersons \u003d new UniquePersonList();","lastModifiedDate":"2021-03-27"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"        expectedPersons.add(validPerson);","lastModifiedDate":"2021-03-27"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"        // Check their connections","lastModifiedDate":"2021-03-27"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expectedMeetings.asUnmodifiableObservableList(),","lastModifiedDate":"2021-03-27"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"            modelStub.getFilteredMeetingListByPersonConnection(validPerson));","lastModifiedDate":"2021-03-27"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expectedPersons.asUnmodifiableObservableList(),","lastModifiedDate":"2021-03-27"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"            modelStub.getFilteredPersonListByMeetingConnection(validMeeting));","lastModifiedDate":"2021-03-27"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"        // Check more complex connections (2 meetings points to the same person)","lastModifiedDate":"2021-03-27"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"        expectedMeetings.add(validMeeting2);","lastModifiedDate":"2021-03-27"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        CommandResult commandResult3 \u003d new AddMeetingCommand(validMeeting2).setConnectionToPerson(connections).execute(modelStub);","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expectedMeetings.asUnmodifiableObservableList(),","lastModifiedDate":"2021-03-27"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"            modelStub.getFilteredMeetingListByPersonConnection(validPerson));","lastModifiedDate":"2021-03-27"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expectedPersons.asUnmodifiableObservableList(),","lastModifiedDate":"2021-03-27"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"            modelStub.getFilteredPersonListByMeetingConnection(validMeeting));","lastModifiedDate":"2021-03-27"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-27"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"    public void equals() {","lastModifiedDate":"2021-03-27"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"        Meeting meeting1 \u003d new MeetingBuilder().withName(\"Meeting1\").build();","lastModifiedDate":"2021-03-27"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"        Meeting meeting2 \u003d new MeetingBuilder().withName(\"Meeting2\").build();","lastModifiedDate":"2021-03-27"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"        AddMeetingCommand addMeeting1Command \u003d new AddMeetingCommand(meeting1);","lastModifiedDate":"2021-03-27"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        AddMeetingCommand addMeeting2Command \u003d new AddMeetingCommand(meeting2);","lastModifiedDate":"2021-03-27"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-27"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(addMeeting1Command.equals(addMeeting1Command));","lastModifiedDate":"2021-03-27"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-27"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"        AddMeetingCommand addMeeting1CommandCopy \u003d new AddMeetingCommand(meeting1);","lastModifiedDate":"2021-03-27"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(addMeeting1Command.equals(addMeeting1CommandCopy));","lastModifiedDate":"2021-03-27"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-27"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(addMeeting1Command.equals(1));","lastModifiedDate":"2021-03-27"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-27"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(addMeeting1Command.equals(null));","lastModifiedDate":"2021-03-27"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-27"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(addMeeting1Command.equals(addMeeting2Command));","lastModifiedDate":"2021-03-27"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2021-03-27"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"     * Also, should always accept meeting being added, as well as their connection.","lastModifiedDate":"2021-03-27"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"    private class MeetingModelStubAcceptingAdded implements Model {","lastModifiedDate":"2021-03-27"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"        private final AddressBook addressBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"        private final UserPrefs userPrefs;","lastModifiedDate":"2021-03-27"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"        private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2021-03-27"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"        // TODO: Modify the signature of ModelManager so that we can add meetings inside it.","lastModifiedDate":"2021-03-27"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"        private final MeetingBook meetingBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"        private final FilteredList\u003cMeeting\u003e filteredMeetings;","lastModifiedDate":"2021-03-27"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"        // TODO: Modify the signature of ModelManager so that we can add connection inside it.","lastModifiedDate":"2021-03-27"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"        private final PersonMeetingConnection connection;","lastModifiedDate":"2021-03-27"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":134,"author":{"gitId":"hengyiqun"},"content":"        private final NoteBook noteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":135,"author":{"gitId":"hengyiqun"},"content":"        private final FilteredList\u003cNote\u003e filteredNotes;","lastModifiedDate":"2021-04-01"},{"lineNumber":136,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":137,"author":{"gitId":"Maurice2n97"},"content":"        private final TimetablePrefs timetablePrefs;","lastModifiedDate":"2021-03-30"},{"lineNumber":138,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":"         * Initializes a ModelManager with the given addressBook, meetingBOok and userPrefs","lastModifiedDate":"2021-03-27"},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":143,"author":{"gitId":"skinnychenpi"},"content":"        public MeetingModelStubAcceptingAdded(ReadOnlyAddressBook addressBook, ReadOnlyMeetingBook meetingBook,","lastModifiedDate":"2021-03-27"},{"lineNumber":144,"author":{"gitId":"hengyiqun"},"content":"                                              ReadOnlyNoteBook noteBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-04-01"},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"            super();","lastModifiedDate":"2021-03-27"},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"            requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2021-03-27"},{"lineNumber":147,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":148,"author":{"gitId":"skinnychenpi"},"content":"            this.meetingBook \u003d new MeetingBook(meetingBook);","lastModifiedDate":"2021-03-27"},{"lineNumber":149,"author":{"gitId":"skinnychenpi"},"content":"            this.filteredMeetings \u003d new FilteredList\u003cMeeting\u003e(this.meetingBook.getMeetingList());","lastModifiedDate":"2021-03-27"},{"lineNumber":150,"author":{"gitId":"skinnychenpi"},"content":"            this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2021-03-27"},{"lineNumber":151,"author":{"gitId":"skinnychenpi"},"content":"            this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2021-03-27"},{"lineNumber":152,"author":{"gitId":"skinnychenpi"},"content":"            filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2021-03-27"},{"lineNumber":153,"author":{"gitId":"hengyiqun"},"content":"            this.noteBook \u003d new NoteBook(noteBook);","lastModifiedDate":"2021-04-01"},{"lineNumber":154,"author":{"gitId":"hengyiqun"},"content":"            this.filteredNotes \u003d new FilteredList\u003cNote\u003e(this.noteBook.getNoteList());","lastModifiedDate":"2021-04-01"},{"lineNumber":155,"author":{"gitId":"skinnychenpi"},"content":"            // TODO: Modify the signature of ModelManager so that we can add connection inside it.","lastModifiedDate":"2021-03-27"},{"lineNumber":156,"author":{"gitId":"skinnychenpi"},"content":"            this.connection \u003d new PersonMeetingConnection();","lastModifiedDate":"2021-03-27"},{"lineNumber":157,"author":{"gitId":"Maurice2n97"},"content":"            this.timetablePrefs \u003d new TimetablePrefs(LocalDate.of(2020,10,10));","lastModifiedDate":"2021-03-30"},{"lineNumber":158,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":159,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":160,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":161,"author":{"gitId":"skinnychenpi"},"content":"        public MeetingModelStubAcceptingAdded() {","lastModifiedDate":"2021-03-27"},{"lineNumber":162,"author":{"gitId":"hengyiqun"},"content":"            this(new AddressBook(), new MeetingBook(), new NoteBook(), new UserPrefs());","lastModifiedDate":"2021-04-01"},{"lineNumber":163,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":164,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":165,"author":{"gitId":"skinnychenpi"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-27"},{"lineNumber":166,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":167,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":168,"author":{"gitId":"skinnychenpi"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-03-27"},{"lineNumber":169,"author":{"gitId":"skinnychenpi"},"content":"            requireNonNull(userPrefs);","lastModifiedDate":"2021-03-27"},{"lineNumber":170,"author":{"gitId":"skinnychenpi"},"content":"            this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2021-03-27"},{"lineNumber":171,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":172,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":173,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":174,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-03-27"},{"lineNumber":175,"author":{"gitId":"skinnychenpi"},"content":"            return userPrefs;","lastModifiedDate":"2021-03-27"},{"lineNumber":176,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":177,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":178,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":179,"author":{"gitId":"skinnychenpi"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-03-27"},{"lineNumber":180,"author":{"gitId":"skinnychenpi"},"content":"            return userPrefs.getGuiSettings();","lastModifiedDate":"2021-03-27"},{"lineNumber":181,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":182,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":183,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":184,"author":{"gitId":"skinnychenpi"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-03-27"},{"lineNumber":185,"author":{"gitId":"skinnychenpi"},"content":"            requireNonNull(guiSettings);","lastModifiedDate":"2021-03-27"},{"lineNumber":186,"author":{"gitId":"skinnychenpi"},"content":"            userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2021-03-27"},{"lineNumber":187,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":188,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":189,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":190,"author":{"gitId":"skinnychenpi"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2021-03-27"},{"lineNumber":191,"author":{"gitId":"skinnychenpi"},"content":"            return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2021-03-27"},{"lineNumber":192,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":193,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":194,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":195,"author":{"gitId":"skinnychenpi"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2021-03-27"},{"lineNumber":196,"author":{"gitId":"skinnychenpi"},"content":"            requireNonNull(addressBookFilePath);","lastModifiedDate":"2021-03-27"},{"lineNumber":197,"author":{"gitId":"skinnychenpi"},"content":"            userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2021-03-27"},{"lineNumber":198,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":199,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":200,"author":{"gitId":"skinnychenpi"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-27"},{"lineNumber":201,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":202,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":203,"author":{"gitId":"skinnychenpi"},"content":"        public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2021-03-27"},{"lineNumber":204,"author":{"gitId":"skinnychenpi"},"content":"            this.addressBook.resetData(addressBook);","lastModifiedDate":"2021-03-27"},{"lineNumber":205,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":206,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":207,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":208,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":209,"author":{"gitId":"skinnychenpi"},"content":"            return addressBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":210,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":211,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":212,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":213,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2021-03-27"},{"lineNumber":214,"author":{"gitId":"skinnychenpi"},"content":"            requireNonNull(person);","lastModifiedDate":"2021-03-27"},{"lineNumber":215,"author":{"gitId":"skinnychenpi"},"content":"            return addressBook.hasPerson(person);","lastModifiedDate":"2021-03-27"},{"lineNumber":216,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":217,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":218,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":219,"author":{"gitId":"skinnychenpi"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2021-03-27"},{"lineNumber":220,"author":{"gitId":"skinnychenpi"},"content":"            addressBook.removePerson(target);","lastModifiedDate":"2021-03-27"},{"lineNumber":221,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":222,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":223,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":224,"author":{"gitId":"skinnychenpi"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2021-03-27"},{"lineNumber":225,"author":{"gitId":"skinnychenpi"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2021-03-27"},{"lineNumber":226,"author":{"gitId":"skinnychenpi"},"content":"            updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-03-27"},{"lineNumber":227,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":228,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":229,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":230,"author":{"gitId":"skinnychenpi"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2021-03-27"},{"lineNumber":231,"author":{"gitId":"skinnychenpi"},"content":"            requireAllNonNull(target, editedPerson);","lastModifiedDate":"2021-03-27"},{"lineNumber":232,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":233,"author":{"gitId":"skinnychenpi"},"content":"            addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2021-03-27"},{"lineNumber":234,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":235,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":236,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":237,"author":{"gitId":"hengyiqun"},"content":"        public Set\u003cPerson\u003e findPersonsInGroup(Group group) {","lastModifiedDate":"2021-03-30"},{"lineNumber":238,"author":{"gitId":"hengyiqun"},"content":"            return addressBook.findPersonsInGroup(group);","lastModifiedDate":"2021-03-30"},{"lineNumber":239,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":240,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":241,"author":{"gitId":"skinnychenpi"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MeetingBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-27"},{"lineNumber":242,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":243,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":244,"author":{"gitId":"skinnychenpi"},"content":"        public void setMeetingBook(ReadOnlyMeetingBook meetingBook) {","lastModifiedDate":"2021-03-27"},{"lineNumber":245,"author":{"gitId":"skinnychenpi"},"content":"            this.meetingBook.resetData(meetingBook);","lastModifiedDate":"2021-03-27"},{"lineNumber":246,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":247,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":248,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":249,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyMeetingBook getMeetingBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":250,"author":{"gitId":"skinnychenpi"},"content":"            return meetingBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":251,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":252,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":253,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":254,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-27"},{"lineNumber":255,"author":{"gitId":"skinnychenpi"},"content":"            requireNonNull(meeting);","lastModifiedDate":"2021-03-27"},{"lineNumber":256,"author":{"gitId":"skinnychenpi"},"content":"            return meetingBook.hasMeeting(meeting);","lastModifiedDate":"2021-03-27"},{"lineNumber":257,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":258,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":259,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":260,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteMeeting(Meeting target) {","lastModifiedDate":"2021-03-27"},{"lineNumber":261,"author":{"gitId":"skinnychenpi"},"content":"            meetingBook.removeMeeting(target);","lastModifiedDate":"2021-03-27"},{"lineNumber":262,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":263,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":264,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":265,"author":{"gitId":"skinnychenpi"},"content":"        public void addMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-27"},{"lineNumber":266,"author":{"gitId":"skinnychenpi"},"content":"            meetingBook.addMeeting(meeting);","lastModifiedDate":"2021-03-27"},{"lineNumber":267,"author":{"gitId":"skinnychenpi"},"content":"            updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);","lastModifiedDate":"2021-03-27"},{"lineNumber":268,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":269,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":270,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":271,"author":{"gitId":"skinnychenpi"},"content":"        public void setMeeting(Meeting target, Meeting editedMeeting) {","lastModifiedDate":"2021-03-27"},{"lineNumber":272,"author":{"gitId":"skinnychenpi"},"content":"            requireAllNonNull(target, editedMeeting);","lastModifiedDate":"2021-03-27"},{"lineNumber":273,"author":{"gitId":"skinnychenpi"},"content":"            meetingBook.setMeeting(target, editedMeeting);","lastModifiedDate":"2021-03-27"},{"lineNumber":274,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":275,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":276,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":277,"author":{"gitId":"hengyiqun"},"content":"        public void updateMeeting(Meeting target, Meeting editedMeeting) {","lastModifiedDate":"2021-03-28"},{"lineNumber":278,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":279,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":280,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":281,"author":{"gitId":"skinnychenpi"},"content":"        //TODO: Set MeetingBook file path in userPrefs? low priority feature(nice to have)","lastModifiedDate":"2021-03-27"},{"lineNumber":282,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":283,"author":{"gitId":"skinnychenpi"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Clashing Meetings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-27"},{"lineNumber":284,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":285,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":286,"author":{"gitId":"skinnychenpi"},"content":"         * Checks if there is a clash in meeting times within the model.","lastModifiedDate":"2021-03-27"},{"lineNumber":287,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":288,"author":{"gitId":"skinnychenpi"},"content":"        public boolean clashes(Meeting toCheck) {","lastModifiedDate":"2021-03-27"},{"lineNumber":289,"author":{"gitId":"skinnychenpi"},"content":"            return meetingBook.clashes(toCheck);","lastModifiedDate":"2021-03-27"},{"lineNumber":290,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":291,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":292,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":293,"author":{"gitId":"hengyiqun"},"content":"        public boolean clashesExceptOne(Meeting meetingNotIncluded, Meeting toCheck) {","lastModifiedDate":"2021-03-28"},{"lineNumber":294,"author":{"gitId":"hengyiqun"},"content":"            return false;","lastModifiedDate":"2021-03-28"},{"lineNumber":295,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":296,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":297,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":298,"author":{"gitId":"skinnychenpi"},"content":"         * Gets a list of meetings from the model that overlap with this meeting.","lastModifiedDate":"2021-03-27"},{"lineNumber":299,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":300,"author":{"gitId":"skinnychenpi"},"content":"        public List\u003cMeeting\u003e getClashes(Meeting toCheck) {","lastModifiedDate":"2021-03-27"},{"lineNumber":301,"author":{"gitId":"skinnychenpi"},"content":"            return meetingBook.getClashes(toCheck);","lastModifiedDate":"2021-03-27"},{"lineNumber":302,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":303,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":304,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":305,"author":{"gitId":"skinnychenpi"},"content":"         * Gets the meeting ( if any ) scheduled  at this point in time in the model.","lastModifiedDate":"2021-03-27"},{"lineNumber":306,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":307,"author":{"gitId":"skinnychenpi"},"content":"        public Optional\u003cMeeting\u003e getMeetingAtInstant(LocalDateTime localDateTime) {","lastModifiedDate":"2021-03-27"},{"lineNumber":308,"author":{"gitId":"skinnychenpi"},"content":"            return meetingBook.getMeetingAtInstant(localDateTime);","lastModifiedDate":"2021-03-27"},{"lineNumber":309,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":310,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":311,"author":{"gitId":"skinnychenpi"},"content":"        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PersonMeetingConnection \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-27"},{"lineNumber":312,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":313,"author":{"gitId":"skinnychenpi"},"content":"         * Replaces person meeting connection data with the data in {@code PersonMeetingConnection}.","lastModifiedDate":"2021-03-27"},{"lineNumber":314,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":315,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":316,"author":{"gitId":"skinnychenpi"},"content":"        public void setPersonMeetingConnection(PersonMeetingConnection connection) {","lastModifiedDate":"2021-03-27"},{"lineNumber":317,"author":{"gitId":"skinnychenpi"},"content":"            requireNonNull(connection);","lastModifiedDate":"2021-03-27"},{"lineNumber":318,"author":{"gitId":"skinnychenpi"},"content":"            this.connection.resetData(connection);","lastModifiedDate":"2021-03-27"},{"lineNumber":319,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":320,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":321,"author":{"gitId":"skinnychenpi"},"content":"        /** Returns the connection */","lastModifiedDate":"2021-03-27"},{"lineNumber":322,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":323,"author":{"gitId":"skinnychenpi"},"content":"        public PersonMeetingConnection getPersonMeetingConnection() {","lastModifiedDate":"2021-03-27"},{"lineNumber":324,"author":{"gitId":"skinnychenpi"},"content":"            return connection;","lastModifiedDate":"2021-03-27"},{"lineNumber":325,"author":{"gitId":"skinnychenpi"},"content":"        };","lastModifiedDate":"2021-03-27"},{"lineNumber":326,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":327,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":328,"author":{"gitId":"skinnychenpi"},"content":"         * Returns true if a given person and a given meeting exist a connection.","lastModifiedDate":"2021-03-27"},{"lineNumber":329,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":330,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":331,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasPersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-03-27"},{"lineNumber":332,"author":{"gitId":"skinnychenpi"},"content":"            return connection.existPersonMeetingConnection(person, meeting);","lastModifiedDate":"2021-03-27"},{"lineNumber":333,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":334,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":335,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":336,"author":{"gitId":"skinnychenpi"},"content":"         * Adds a connection between a person and a meeting.","lastModifiedDate":"2021-03-27"},{"lineNumber":337,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":338,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":339,"author":{"gitId":"skinnychenpi"},"content":"        public void addPersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-03-27"},{"lineNumber":340,"author":{"gitId":"skinnychenpi"},"content":"            connection.addPersonMeetingConnection(person, meeting);","lastModifiedDate":"2021-03-27"},{"lineNumber":341,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":342,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":343,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":344,"author":{"gitId":"skinnychenpi"},"content":"         * This method delete a single connection between a meeting and a person.","lastModifiedDate":"2021-03-27"},{"lineNumber":345,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":346,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":347,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteSinglePersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-03-27"},{"lineNumber":348,"author":{"gitId":"skinnychenpi"},"content":"            connection.deleteSinglePersonMeetingConnection(person, meeting);","lastModifiedDate":"2021-03-27"},{"lineNumber":349,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":350,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":351,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":352,"author":{"gitId":"skinnychenpi"},"content":"         * This method delete a all connections related to a given person.","lastModifiedDate":"2021-03-27"},{"lineNumber":353,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":354,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":355,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteAllPersonMeetingConnectionByPerson(Person person) {","lastModifiedDate":"2021-03-27"},{"lineNumber":356,"author":{"gitId":"skinnychenpi"},"content":"            connection.deleteAllPersonMeetingConnectionByPerson(person);","lastModifiedDate":"2021-03-27"},{"lineNumber":357,"author":{"gitId":"skinnychenpi"},"content":"        };","lastModifiedDate":"2021-03-27"},{"lineNumber":358,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":359,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":360,"author":{"gitId":"skinnychenpi"},"content":"         * This method delete a all connections related to a given meeting.","lastModifiedDate":"2021-03-27"},{"lineNumber":361,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":362,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":363,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteAllPersonMeetingConnectionByMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-27"},{"lineNumber":364,"author":{"gitId":"skinnychenpi"},"content":"            connection.deleteAllPersonMeetingConnectionByMeeting(meeting);","lastModifiedDate":"2021-03-27"},{"lineNumber":365,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":366,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":367,"author":{"gitId":"skinnychenpi"},"content":"        //TODO: This two methods below may need further change because I don\u0027t know how it works with GUI.(Yuheng)","lastModifiedDate":"2021-03-27"},{"lineNumber":368,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":369,"author":{"gitId":"skinnychenpi"},"content":"         * Returns a Observable meeting list object with the person as the key.","lastModifiedDate":"2021-03-27"},{"lineNumber":370,"author":{"gitId":"skinnychenpi"},"content":"         * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-03-27"},{"lineNumber":371,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":372,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":373,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cMeeting\u003e getFilteredMeetingListByPersonConnection(Person person) {","lastModifiedDate":"2021-03-27"},{"lineNumber":374,"author":{"gitId":"skinnychenpi"},"content":"            UniqueMeetingList meetings \u003d connection.getMeetingsByPerson(person);","lastModifiedDate":"2021-03-27"},{"lineNumber":375,"author":{"gitId":"skinnychenpi"},"content":"            assert meetings !\u003d null;","lastModifiedDate":"2021-03-27"},{"lineNumber":376,"author":{"gitId":"skinnychenpi"},"content":"            return meetings.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-27"},{"lineNumber":377,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":378,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":379,"author":{"gitId":"skinnychenpi"},"content":"         * Returns a Observable person list object with the meeting as the key.","lastModifiedDate":"2021-03-27"},{"lineNumber":380,"author":{"gitId":"skinnychenpi"},"content":"         * Empty list will be returned if there is no value found in the hashMap.","lastModifiedDate":"2021-03-27"},{"lineNumber":381,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":382,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":383,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonListByMeetingConnection(Meeting meeting) {","lastModifiedDate":"2021-03-27"},{"lineNumber":384,"author":{"gitId":"skinnychenpi"},"content":"            UniquePersonList persons \u003d connection.getPersonsByMeeting(meeting);","lastModifiedDate":"2021-03-27"},{"lineNumber":385,"author":{"gitId":"skinnychenpi"},"content":"            assert persons !\u003d null;","lastModifiedDate":"2021-03-27"},{"lineNumber":386,"author":{"gitId":"skinnychenpi"},"content":"            return persons.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-27"},{"lineNumber":387,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":388,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":389,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-07"},{"lineNumber":390,"author":{"gitId":"skinnychenpi"},"content":"        public UniqueMeetingList getUniqueMeetingListByPersonConnection(Person person) {","lastModifiedDate":"2021-04-07"},{"lineNumber":391,"author":{"gitId":"skinnychenpi"},"content":"            return null;","lastModifiedDate":"2021-04-07"},{"lineNumber":392,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":393,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":394,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-07"},{"lineNumber":395,"author":{"gitId":"skinnychenpi"},"content":"        public UniquePersonList getUniquePersonListByMeetingConnection(Meeting meeting) {","lastModifiedDate":"2021-04-07"},{"lineNumber":396,"author":{"gitId":"skinnychenpi"},"content":"            return null;","lastModifiedDate":"2021-04-07"},{"lineNumber":397,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":398,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":399,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":400,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyReminderBook getReminderBook() {","lastModifiedDate":"2021-03-28"},{"lineNumber":401,"author":{"gitId":"skinnychenpi"},"content":"            return new ReminderBook();","lastModifiedDate":"2021-03-28"},{"lineNumber":402,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":403,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":404,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":405,"author":{"gitId":"skinnychenpi"},"content":"        public void refreshReminderBook() {}","lastModifiedDate":"2021-03-28"},{"lineNumber":406,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":407,"author":{"gitId":"skinnychenpi"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-27"},{"lineNumber":408,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":409,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":410,"author":{"gitId":"skinnychenpi"},"content":"         * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2021-03-27"},{"lineNumber":411,"author":{"gitId":"skinnychenpi"},"content":"         * {@code versionedAddressBook}","lastModifiedDate":"2021-03-27"},{"lineNumber":412,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":413,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":414,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2021-03-27"},{"lineNumber":415,"author":{"gitId":"skinnychenpi"},"content":"            return filteredPersons;","lastModifiedDate":"2021-03-27"},{"lineNumber":416,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":417,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":418,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":419,"author":{"gitId":"skinnychenpi"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2021-03-27"},{"lineNumber":420,"author":{"gitId":"skinnychenpi"},"content":"            requireNonNull(predicate);","lastModifiedDate":"2021-03-27"},{"lineNumber":421,"author":{"gitId":"skinnychenpi"},"content":"            filteredPersons.setPredicate(predicate);","lastModifiedDate":"2021-03-27"},{"lineNumber":422,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":423,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":424,"author":{"gitId":"totoyoyo"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":425,"author":{"gitId":"totoyoyo"},"content":"        public void sortFilteredPersonList(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2021-03-28"},{"lineNumber":426,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":427,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":428,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":429,"author":{"gitId":"skinnychenpi"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Meeting List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-27"},{"lineNumber":430,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":431,"author":{"gitId":"skinnychenpi"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":432,"author":{"gitId":"skinnychenpi"},"content":"         * Returns an unmodifiable view of the list of {@code Meeting} backed by the internal list of","lastModifiedDate":"2021-03-27"},{"lineNumber":433,"author":{"gitId":"skinnychenpi"},"content":"         * {@code versionedMeetingBook}","lastModifiedDate":"2021-03-27"},{"lineNumber":434,"author":{"gitId":"skinnychenpi"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":435,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":436,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {","lastModifiedDate":"2021-03-27"},{"lineNumber":437,"author":{"gitId":"skinnychenpi"},"content":"            return filteredMeetings;","lastModifiedDate":"2021-03-27"},{"lineNumber":438,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":439,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":440,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":441,"author":{"gitId":"skinnychenpi"},"content":"        public void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate) {","lastModifiedDate":"2021-03-27"},{"lineNumber":442,"author":{"gitId":"skinnychenpi"},"content":"            requireNonNull(predicate);","lastModifiedDate":"2021-03-27"},{"lineNumber":443,"author":{"gitId":"skinnychenpi"},"content":"            filteredMeetings.setPredicate(predicate);","lastModifiedDate":"2021-03-27"},{"lineNumber":444,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":445,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":446,"author":{"gitId":"totoyoyo"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":447,"author":{"gitId":"totoyoyo"},"content":"        public void sortFilteredMeetingList(Comparator\u003cMeeting\u003e comparator) {","lastModifiedDate":"2021-03-28"},{"lineNumber":448,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":449,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":450,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":451,"author":{"gitId":"hengyiqun"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Note methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-01"},{"lineNumber":452,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":453,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":454,"author":{"gitId":"hengyiqun"},"content":"        public void setNoteBook(ReadOnlyNoteBook noteBook) {","lastModifiedDate":"2021-04-01"},{"lineNumber":455,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":456,"author":{"gitId":"hengyiqun"},"content":"        };","lastModifiedDate":"2021-04-01"},{"lineNumber":457,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":458,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":459,"author":{"gitId":"hengyiqun"},"content":"        public ReadOnlyNoteBook getNoteBook() {","lastModifiedDate":"2021-04-01"},{"lineNumber":460,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":461,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":462,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":463,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":464,"author":{"gitId":"hengyiqun"},"content":"        public boolean hasNote(Note note) {","lastModifiedDate":"2021-04-01"},{"lineNumber":465,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":466,"author":{"gitId":"hengyiqun"},"content":"        };","lastModifiedDate":"2021-04-01"},{"lineNumber":467,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":468,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":469,"author":{"gitId":"hengyiqun"},"content":"        public void deleteNote(Note target) {","lastModifiedDate":"2021-04-01"},{"lineNumber":470,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":471,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":472,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":473,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":474,"author":{"gitId":"hengyiqun"},"content":"        public void addNote(Note note) {","lastModifiedDate":"2021-04-01"},{"lineNumber":475,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":476,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":477,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":478,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":479,"author":{"gitId":"hengyiqun"},"content":"        public void setNote(Note target, Note editedNote) {","lastModifiedDate":"2021-04-01"},{"lineNumber":480,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":481,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":482,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":483,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":484,"author":{"gitId":"hengyiqun"},"content":"        public ObservableList\u003cNote\u003e getFilteredNoteList() {","lastModifiedDate":"2021-04-01"},{"lineNumber":485,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":486,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":487,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":488,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":489,"author":{"gitId":"hengyiqun"},"content":"        public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {","lastModifiedDate":"2021-04-01"},{"lineNumber":490,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":491,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":492,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":493,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":494,"author":{"gitId":"hengyiqun"},"content":"        public Path getNoteBookFilePath() {","lastModifiedDate":"2021-04-01"},{"lineNumber":495,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":496,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":497,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":498,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":499,"author":{"gitId":"hengyiqun"},"content":"        public void setNoteBookFilePath(Path noteBookFilePath) {","lastModifiedDate":"2021-04-01"},{"lineNumber":500,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":501,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":502,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":503,"author":{"gitId":"Maurice2n97"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Timetable methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":504,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":505,"author":{"gitId":"Maurice2n97"},"content":"        @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":506,"author":{"gitId":"Maurice2n97"},"content":"        public void setTimetableStartDate(LocalDate localDate) {","lastModifiedDate":"2021-03-30"},{"lineNumber":507,"author":{"gitId":"Maurice2n97"},"content":"            timetablePrefs.setTimetableStartDate(localDate);","lastModifiedDate":"2021-03-30"},{"lineNumber":508,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":509,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":510,"author":{"gitId":"Maurice2n97"},"content":"        @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":511,"author":{"gitId":"Maurice2n97"},"content":"        public ObservableValue\u003cLocalDate\u003e getReadOnlyTimetableStartDate() {","lastModifiedDate":"2021-03-30"},{"lineNumber":512,"author":{"gitId":"Maurice2n97"},"content":"            return timetablePrefs.getReadOnlyStartDate();","lastModifiedDate":"2021-03-30"},{"lineNumber":513,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":514,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":515,"author":{"gitId":"Maurice2n97"},"content":"        @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":516,"author":{"gitId":"Maurice2n97"},"content":"        public ObservableList\u003cMeeting\u003e getUnmodifiableMeetingList() {","lastModifiedDate":"2021-03-30"},{"lineNumber":517,"author":{"gitId":"Maurice2n97"},"content":"            return meetingBook.getMeetingList();","lastModifiedDate":"2021-03-30"},{"lineNumber":518,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":519,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":520,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":521,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":522,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"totoyoyo":11,"Maurice2n97":26,"skinnychenpi":407,"hengyiqun":78}},{"path":"src/test/java/seedu/address/logic/commands/meetings/DeleteMeetingCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.logic.commands.meetings;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.showMeetingAtIndex;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.testutil.TypicalNotes.getTypicalNoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.connection.PersonMeetingConnection;","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":" * {@code DeleteMeetingCommand}.","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"public class DeleteMeetingCommandTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"    private Model model \u003d new ModelManager(new AddressBook(), getTypicalMeetingBook(),","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"            getTypicalNoteBook(), new UserPrefs(), new PersonMeetingConnection());","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        Meeting meetingToDelete \u003d model.getFilteredMeetingList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"        DeleteMeetingCommand deleteMeetingCommand \u003d new DeleteMeetingCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d String.format(DeleteMeetingCommand.MESSAGE_DELETE_MEETING_SUCCESS, meetingToDelete);","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getMeetingBook(),","lastModifiedDate":"2021-04-01"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"                model.getNoteBook(), new UserPrefs(), new PersonMeetingConnection());","lastModifiedDate":"2021-04-09"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"        expectedModel.deleteMeeting(meetingToDelete);","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        assertCommandSuccess(deleteMeetingCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMeetingList().size() + 1);","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        DeleteMeetingCommand deleteMeetingCommand \u003d new DeleteMeetingCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"        assertCommandFailure(deleteMeetingCommand, model, Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"        showMeetingAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"        Meeting meetingToDelete \u003d model.getFilteredMeetingList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"        DeleteMeetingCommand deleteMeetingCommand \u003d new DeleteMeetingCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-17"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d String.format(DeleteMeetingCommand.MESSAGE_DELETE_MEETING_SUCCESS, meetingToDelete);","lastModifiedDate":"2021-03-17"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":65,"author":{"gitId":"hengyiqun"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getMeetingBook(),","lastModifiedDate":"2021-04-01"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"                model.getNoteBook(), new UserPrefs(), new PersonMeetingConnection());","lastModifiedDate":"2021-04-09"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"        expectedModel.deleteMeeting(meetingToDelete);","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"        showNoMeeting(expectedModel);","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"        assertCommandSuccess(deleteMeetingCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-17"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"    private void showNoMeeting(Model model) {","lastModifiedDate":"2021-03-17"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"        model.updateFilteredMeetingList(p -\u003e false);","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2021-03-17"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-03-17"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"        showMeetingAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-17"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;","lastModifiedDate":"2021-03-17"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"        // ensures that outOfBoundIndex is still in bounds of meeting book list","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMeetingBook().getMeetingList().size());","lastModifiedDate":"2021-03-17"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"        DeleteMeetingCommand deleteMeetingCommand \u003d new DeleteMeetingCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-17"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"        assertCommandFailure(deleteMeetingCommand, model, Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-17"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"    public void equals() {","lastModifiedDate":"2021-03-17"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"        DeleteMeetingCommand deleteFirstCommand \u003d new DeleteMeetingCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-17"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"        DeleteMeetingCommand deleteSecondCommand \u003d new DeleteMeetingCommand(INDEX_SECOND);","lastModifiedDate":"2021-03-17"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-17"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2021-03-17"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-17"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"        DeleteMeetingCommand deleteFirstCommandCopy \u003d new DeleteMeetingCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-17"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2021-03-17"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-17"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2021-03-17"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-17"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2021-03-17"},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-17"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2021-03-17"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"Maurice2n97":113,"hengyiqun":4}},{"path":"src/test/java/seedu/address/logic/commands/meetings/EditMeetingCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.logic.commands.meetings;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_NAME_MEETING1;","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_PRIORITY_MEETING1;","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_START_MEETING3;","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_TERMINATE_MEETING3;","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.showMeetingAtIndex;","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.meetings.EditMeetingCommand.EditMeetingDescriptor;","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.testutil.EditMeetingDescriptorBuilder;","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.testutil.MeetingBuilder;","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"public class EditMeetingCommandTest {","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"    private Model model \u003d new ModelManager(getTypicalMeetingBook(), new UserPrefs());","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"    @Test","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"        Index indexLastMeeting \u003d Index.fromOneBased(model.getFilteredMeetingList().size());","lastModifiedDate":"2021-04-09"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"        Meeting lastMeeting \u003d model.getFilteredMeetingList().get(indexLastMeeting.getZeroBased());","lastModifiedDate":"2021-04-09"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"        MeetingBuilder meetingInList \u003d new MeetingBuilder(lastMeeting);","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"        Meeting editedMeeting \u003d meetingInList.withName(VALID_NAME_MEETING1)","lastModifiedDate":"2021-04-09"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"                .withStart(VALID_START_MEETING3)","lastModifiedDate":"2021-04-09"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"                .withTerminate(VALID_TERMINATE_MEETING3)","lastModifiedDate":"2021-04-09"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"                .withPriority(VALID_PRIORITY_MEETING1)","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"                .build();","lastModifiedDate":"2021-04-09"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"        EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder()","lastModifiedDate":"2021-04-09"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"                .withName(VALID_NAME_MEETING1)","lastModifiedDate":"2021-04-09"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"                .withStart(VALID_START_MEETING3)","lastModifiedDate":"2021-04-09"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"                .withTerminate(VALID_TERMINATE_MEETING3)","lastModifiedDate":"2021-04-09"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"                .withPriority(VALID_PRIORITY_MEETING1)","lastModifiedDate":"2021-04-09"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"                .build();","lastModifiedDate":"2021-04-09"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"        EditMeetingCommand editMeetingCommand \u003d new EditMeetingCommand(indexLastMeeting, descriptor);","lastModifiedDate":"2021-04-09"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"        String expectedMessage \u003d String.format(EditMeetingCommand.MESSAGE_EDIT_MEETING_SUCCESS, editedMeeting);","lastModifiedDate":"2021-04-09"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"        Model expectedModel \u003d new ModelManager(new MeetingBook(model.getMeetingBook()), new UserPrefs());","lastModifiedDate":"2021-04-09"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"        expectedModel.setMeeting(lastMeeting, editedMeeting);","lastModifiedDate":"2021-04-09"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"        assertCommandSuccess(editMeetingCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-09"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"    @Test","lastModifiedDate":"2021-04-09"},{"lineNumber":62,"author":{"gitId":"hengyiqun"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-04-09"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"        EditMeetingCommand editMeetingCommand \u003d new EditMeetingCommand(INDEX_FIRST, new EditMeetingDescriptor());","lastModifiedDate":"2021-04-09"},{"lineNumber":64,"author":{"gitId":"hengyiqun"},"content":"        Meeting editedMeeting \u003d model.getFilteredMeetingList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-04-09"},{"lineNumber":65,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":66,"author":{"gitId":"hengyiqun"},"content":"        String expectedMessage \u003d String.format(EditMeetingCommand.MESSAGE_EDIT_MEETING_SUCCESS, editedMeeting);","lastModifiedDate":"2021-04-09"},{"lineNumber":67,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":68,"author":{"gitId":"hengyiqun"},"content":"        Model expectedModel \u003d new ModelManager(new MeetingBook(model.getMeetingBook()), new UserPrefs());","lastModifiedDate":"2021-04-09"},{"lineNumber":69,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":70,"author":{"gitId":"hengyiqun"},"content":"        assertCommandSuccess(editMeetingCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-09"},{"lineNumber":71,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":72,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":73,"author":{"gitId":"hengyiqun"},"content":"    @Test","lastModifiedDate":"2021-04-09"},{"lineNumber":74,"author":{"gitId":"hengyiqun"},"content":"    public void execute_duplicateMeetingUnfilteredList_failure() {","lastModifiedDate":"2021-04-09"},{"lineNumber":75,"author":{"gitId":"hengyiqun"},"content":"        Meeting firstMeeting \u003d model.getFilteredMeetingList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-04-09"},{"lineNumber":76,"author":{"gitId":"hengyiqun"},"content":"        EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder(firstMeeting).build();","lastModifiedDate":"2021-04-09"},{"lineNumber":77,"author":{"gitId":"hengyiqun"},"content":"        EditMeetingCommand editMeetingCommand \u003d new EditMeetingCommand(INDEX_SECOND, descriptor);","lastModifiedDate":"2021-04-09"},{"lineNumber":78,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":79,"author":{"gitId":"hengyiqun"},"content":"        assertCommandFailure(editMeetingCommand, model, EditMeetingCommand.MESSAGE_DUPLICATE_MEETING);","lastModifiedDate":"2021-04-09"},{"lineNumber":80,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":81,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":82,"author":{"gitId":"hengyiqun"},"content":"    @Test","lastModifiedDate":"2021-04-09"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"    public void execute_duplicateMeetingFilteredList_failure() {","lastModifiedDate":"2021-04-09"},{"lineNumber":84,"author":{"gitId":"hengyiqun"},"content":"        showMeetingAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-04-09"},{"lineNumber":85,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":86,"author":{"gitId":"hengyiqun"},"content":"        // edit meeting in filtered list into a duplicate in meeting book","lastModifiedDate":"2021-04-09"},{"lineNumber":87,"author":{"gitId":"hengyiqun"},"content":"        Meeting meetingInList \u003d model.getMeetingBook().getMeetingList().get(INDEX_SECOND.getZeroBased());","lastModifiedDate":"2021-04-09"},{"lineNumber":88,"author":{"gitId":"hengyiqun"},"content":"        EditMeetingCommand editMeetingCommand \u003d new EditMeetingCommand(INDEX_FIRST,","lastModifiedDate":"2021-04-09"},{"lineNumber":89,"author":{"gitId":"hengyiqun"},"content":"                new EditMeetingDescriptorBuilder(meetingInList).build());","lastModifiedDate":"2021-04-09"},{"lineNumber":90,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":91,"author":{"gitId":"hengyiqun"},"content":"        assertCommandFailure(editMeetingCommand, model, EditMeetingCommand.MESSAGE_DUPLICATE_MEETING);","lastModifiedDate":"2021-04-09"},{"lineNumber":92,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":93,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":94,"author":{"gitId":"hengyiqun"},"content":"    @Test","lastModifiedDate":"2021-04-09"},{"lineNumber":95,"author":{"gitId":"hengyiqun"},"content":"    public void execute_invalidMeetingIndexUnfilteredList_failure() {","lastModifiedDate":"2021-04-09"},{"lineNumber":96,"author":{"gitId":"hengyiqun"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMeetingList().size() + 1);","lastModifiedDate":"2021-04-09"},{"lineNumber":97,"author":{"gitId":"hengyiqun"},"content":"        EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder().withName(VALID_NAME_MEETING1).build();","lastModifiedDate":"2021-04-09"},{"lineNumber":98,"author":{"gitId":"hengyiqun"},"content":"        EditMeetingCommand editMeetingCommand \u003d new EditMeetingCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-04-09"},{"lineNumber":99,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":100,"author":{"gitId":"hengyiqun"},"content":"        assertCommandFailure(editMeetingCommand, model, Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);","lastModifiedDate":"2021-04-09"},{"lineNumber":101,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":102,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":103,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":104,"author":{"gitId":"hengyiqun"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2021-04-09"},{"lineNumber":105,"author":{"gitId":"hengyiqun"},"content":"     * but smaller than size of meeting book","lastModifiedDate":"2021-04-09"},{"lineNumber":106,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":107,"author":{"gitId":"hengyiqun"},"content":"    @Test","lastModifiedDate":"2021-04-09"},{"lineNumber":108,"author":{"gitId":"hengyiqun"},"content":"    public void execute_invalidMeetingIndexFilteredList_failure() {","lastModifiedDate":"2021-04-09"},{"lineNumber":109,"author":{"gitId":"hengyiqun"},"content":"        showMeetingAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-04-09"},{"lineNumber":110,"author":{"gitId":"hengyiqun"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;","lastModifiedDate":"2021-04-09"},{"lineNumber":111,"author":{"gitId":"hengyiqun"},"content":"        // ensures that outOfBoundIndex is still in bounds of meeting book list","lastModifiedDate":"2021-04-09"},{"lineNumber":112,"author":{"gitId":"hengyiqun"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMeetingBook().getMeetingList().size());","lastModifiedDate":"2021-04-09"},{"lineNumber":113,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":114,"author":{"gitId":"hengyiqun"},"content":"        EditMeetingCommand editMeetingCommand \u003d new EditMeetingCommand(outOfBoundIndex,","lastModifiedDate":"2021-04-09"},{"lineNumber":115,"author":{"gitId":"hengyiqun"},"content":"                new EditMeetingDescriptorBuilder().withName(VALID_NAME_MEETING1).build());","lastModifiedDate":"2021-04-09"},{"lineNumber":116,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":117,"author":{"gitId":"hengyiqun"},"content":"        MeetingCommandTestUtil.assertCommandFailure(editMeetingCommand, model, Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);","lastModifiedDate":"2021-04-09"},{"lineNumber":118,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":119,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-04-09"}],"authorContributionMap":{"hengyiqun":119}},{"path":"src/test/java/seedu/address/logic/commands/meetings/MeetingCommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.meetings;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_CONNECTION;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"import java.util.List;","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"/**","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":" */","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"public class MeetingCommandTestUtil {","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    public static final String VALID_NAME_MEETING1 \u003d \"JCP Conference\";","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_NAME_MEETING2 \u003d \"NUS Seminar\";","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_START_MEETING1 \u003d \"2021-01-01 19:00\";","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_START_MEETING2 \u003d \"2021-03-15 17:00\";","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"    public static final String VALID_START_MEETING3 \u003d \"2021-03-31 12:00\";","lastModifiedDate":"2021-04-09"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_TERMINATE_MEETING1 \u003d \"2021-01-01 20:00\";","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_TERMINATE_MEETING2 \u003d \"2021-03-15 18:00\";","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"    public static final String VALID_TERMINATE_MEETING3 \u003d \"2021-03-31 14:00\";","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_PRIORITY_MEETING1 \u003d \"2\";","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_PRIORITY_MEETING2 \u003d \"5\";","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"    public static final String VALID_DESCRIPTION_MEETING1 \u003d \"JCP Conference Test\";","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_DESCRIPTION_MEETING2 \u003d \"NUS Seminar Test\";","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"    public static final String VALID_GROUP_MEETING1 \u003d \"SoC\";","lastModifiedDate":"2021-04-09"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"    public static final String VALID_GROUP_MEETING2 \u003d \"University\";","lastModifiedDate":"2021-04-09"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_PERSON_CONNECTION_INDEX1 \u003d \"1\";","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_PERSON_CONNECTION_INDEX2 \u003d \"2\";","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"    public static final String NAME_DESC_MEETING1 \u003d \" \" + PREFIX_NAME + VALID_NAME_MEETING1;","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    public static final String NAME_DESC_MEETING2 \u003d \" \" + PREFIX_NAME + VALID_NAME_MEETING2;","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"    public static final String START_DESC_MEETING1 \u003d \" \" + PREFIX_START_TIME + VALID_START_MEETING1;","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    public static final String START_DESC_MEETING2 \u003d \" \" + PREFIX_START_TIME + VALID_START_MEETING2;","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"    public static final String END_DESC_MEETING1 \u003d \" \" + PREFIX_END_TIME + VALID_TERMINATE_MEETING1;","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"    public static final String END_DESC_MEETING2 \u003d \" \" + PREFIX_END_TIME + VALID_TERMINATE_MEETING2;","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    public static final String PRIORITY_DESC_MEETING1 \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_MEETING1;","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    public static final String PRIORITY_DESC_MEETING2 \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_MEETING2;","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"    public static final String DESCRIPTION_DESC_MEETING1 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_MEETING1;","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    public static final String DESCRIPTION_DESC_MEETING2 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_MEETING2;","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"    public static final String TAG_DESC_MEETING1 \u003d \" \" + PREFIX_GROUP + VALID_GROUP_MEETING1;","lastModifiedDate":"2021-04-09"},{"lineNumber":62,"author":{"gitId":"hengyiqun"},"content":"    public static final String TAG_DESC_MEETING2 \u003d \" \" + PREFIX_GROUP + VALID_GROUP_MEETING2;","lastModifiedDate":"2021-04-09"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"    public static final String CONNECTION1_DESC \u003d \" \" + PREFIX_PERSON_CONNECTION + VALID_PERSON_CONNECTION_INDEX1;","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"    public static final String CONNECTION2_DESC \u003d \" \" + PREFIX_PERSON_CONNECTION + VALID_PERSON_CONNECTION_INDEX2;","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Lectures\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"    public static final String INVALID_DATETIME_DESC \u003d \" \" + PREFIX_START_TIME + \"2020/02/03 09:00\";","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"-2\";","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_GROUP + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"    public static final String INVALID_CONNECTION1_DESC \u003d \" \" + PREFIX_PERSON_CONNECTION + \"a\";","lastModifiedDate":"2021-03-27"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"    public static final String INVALID_CONNECTION2_DESC \u003d \" \" + PREFIX_PERSON_CONNECTION + \"-1\";","lastModifiedDate":"2021-03-27"},{"lineNumber":75,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":76,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":77,"author":{"gitId":"hengyiqun"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":78,"author":{"gitId":"hengyiqun"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":79,"author":{"gitId":"hengyiqun"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2021-04-09"},{"lineNumber":80,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":81,"author":{"gitId":"hengyiqun"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2021-04-09"},{"lineNumber":82,"author":{"gitId":"hengyiqun"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2021-04-09"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"        try {","lastModifiedDate":"2021-04-09"},{"lineNumber":84,"author":{"gitId":"hengyiqun"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2021-04-09"},{"lineNumber":85,"author":{"gitId":"hengyiqun"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2021-04-09"},{"lineNumber":86,"author":{"gitId":"hengyiqun"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2021-04-09"},{"lineNumber":87,"author":{"gitId":"hengyiqun"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2021-04-09"},{"lineNumber":88,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2021-04-09"},{"lineNumber":89,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-09"},{"lineNumber":90,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":91,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":92,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":93,"author":{"gitId":"hengyiqun"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2021-04-09"},{"lineNumber":94,"author":{"gitId":"hengyiqun"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2021-04-09"},{"lineNumber":95,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":96,"author":{"gitId":"hengyiqun"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2021-04-09"},{"lineNumber":97,"author":{"gitId":"hengyiqun"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2021-04-09"},{"lineNumber":98,"author":{"gitId":"hengyiqun"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2021-04-09"},{"lineNumber":99,"author":{"gitId":"hengyiqun"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-04-09"},{"lineNumber":100,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":101,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":102,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":103,"author":{"gitId":"hengyiqun"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":104,"author":{"gitId":"hengyiqun"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":105,"author":{"gitId":"hengyiqun"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":106,"author":{"gitId":"hengyiqun"},"content":"     * - the meeting book, filtered meeting list and selected meeting in {@code actualModel} remain unchanged","lastModifiedDate":"2021-04-09"},{"lineNumber":107,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":108,"author":{"gitId":"hengyiqun"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2021-04-09"},{"lineNumber":109,"author":{"gitId":"hengyiqun"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2021-04-09"},{"lineNumber":110,"author":{"gitId":"hengyiqun"},"content":"        // only do so by copying its components.","lastModifiedDate":"2021-04-09"},{"lineNumber":111,"author":{"gitId":"hengyiqun"},"content":"        MeetingBook expectedMeetingBook \u003d new MeetingBook(actualModel.getMeetingBook());","lastModifiedDate":"2021-04-09"},{"lineNumber":112,"author":{"gitId":"hengyiqun"},"content":"        List\u003cMeeting\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredMeetingList());","lastModifiedDate":"2021-04-09"},{"lineNumber":113,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":114,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2021-04-09"},{"lineNumber":115,"author":{"gitId":"hengyiqun"},"content":"        assertEquals(expectedMeetingBook, actualModel.getMeetingBook());","lastModifiedDate":"2021-04-09"},{"lineNumber":116,"author":{"gitId":"hengyiqun"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredMeetingList());","lastModifiedDate":"2021-04-09"},{"lineNumber":117,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":118,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":"     * Updates {@code model}\u0027s filtered meetings list to show only the meeting at the given {@code targetIndex} in the","lastModifiedDate":"2021-03-17"},{"lineNumber":121,"author":{"gitId":"Maurice2n97"},"content":"     * {@code model}\u0027s meeting book. It is mandatory for this case meeting names are unique with respect to their first","lastModifiedDate":"2021-03-17"},{"lineNumber":122,"author":{"gitId":"Maurice2n97"},"content":"     * word in their name.","lastModifiedDate":"2021-03-17"},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":"    */","lastModifiedDate":"2021-03-17"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"    public static void showMeetingAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-03-17"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredMeetingList().size());","lastModifiedDate":"2021-03-17"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"        Meeting meeting \u003d model.getFilteredMeetingList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":"        final String[] splitName \u003d meeting.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2021-03-17"},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":"        model.updateFilteredMeetingList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2021-03-17"},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(1, model.getFilteredMeetingList().size());","lastModifiedDate":"2021-03-17"},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-11"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"Maurice2n97":26,"skinnychenpi":50,"hengyiqun":57}},{"path":"src/test/java/seedu/address/logic/commands/note/AddNoteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.logic.commands.note;","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"public class AddNoteCommandTest {","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"hengyiqun":4}},{"path":"src/test/java/seedu/address/logic/commands/persons/AddPersonCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":" * Contains integration tests (interaction with the Model) for {@code AddPersonCommand}.","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"public class AddPersonCommandIntegrationTest {","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(new AddPersonCommand(validPerson), model,","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"                String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandFailure(new AddPersonCommand(personInList), model, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"skinnychenpi":8,"-":37}},{"path":"src/test/java/seedu/address/logic/commands/persons/AddPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import javafx.beans.value.ObservableValue;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.connection.PersonMeetingConnection;","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.UniqueMeetingList;","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Note;","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.ReadOnlyNoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.reminder.ReadOnlyReminderBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"import java.util.*;","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-04-07"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"public class AddPersonCommandTest {","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddPersonCommand(null));","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        PersonModelStubAcceptingAdded modelStub \u003d new PersonModelStubAcceptingAdded();","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        CommandResult commandResult \u003d new AddPersonCommand(validPerson).execute(modelStub);","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        AddPersonCommand addPersonCommand \u003d new AddPersonCommand(validPerson);","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        ModelStub modelStub \u003d new PersonModelStubWith(validPerson);","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"                AddPersonCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addPersonCommand.execute(modelStub));","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"        AddPersonCommand addAliceCommand \u003d new AddPersonCommand(alice);","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"        AddPersonCommand addBobCommand \u003d new AddPersonCommand(bob);","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"        AddPersonCommand addAliceCommandCopy \u003d new AddPersonCommand(alice);","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":152,"author":{"gitId":"hengyiqun"},"content":"        public Set\u003cPerson\u003e findPersonsInGroup(Group group) {","lastModifiedDate":"2021-03-30"},{"lineNumber":153,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-30"},{"lineNumber":154,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":155,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":165,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":166,"author":{"gitId":"totoyoyo"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":167,"author":{"gitId":"totoyoyo"},"content":"        public void sortFilteredPersonList(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2021-03-28"},{"lineNumber":168,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":169,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":170,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":171,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":172,"author":{"gitId":"skinnychenpi"},"content":"        public void setMeetingBook(ReadOnlyMeetingBook meetingBook) {","lastModifiedDate":"2021-03-15"},{"lineNumber":173,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":174,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":175,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":176,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":177,"author":{"gitId":"skinnychenpi"},"content":"        public ReadOnlyMeetingBook getMeetingBook() {","lastModifiedDate":"2021-03-15"},{"lineNumber":178,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":179,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":180,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":181,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":182,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-15"},{"lineNumber":183,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":184,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":185,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":186,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":187,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteMeeting(Meeting target) {","lastModifiedDate":"2021-03-15"},{"lineNumber":188,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":189,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":190,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":191,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":192,"author":{"gitId":"skinnychenpi"},"content":"        public void addMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-15"},{"lineNumber":193,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":194,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":195,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":196,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":197,"author":{"gitId":"skinnychenpi"},"content":"        public void setMeeting(Meeting target, Meeting editedMeeting) {","lastModifiedDate":"2021-03-15"},{"lineNumber":198,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":199,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":200,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":201,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":202,"author":{"gitId":"hengyiqun"},"content":"        public void updateMeeting(Meeting target, Meeting editedMeeting) {","lastModifiedDate":"2021-03-28"},{"lineNumber":203,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":204,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":205,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":206,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":207,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":208,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":209,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":210,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":211,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":212,"author":{"gitId":"skinnychenpi"},"content":"        public void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate) {","lastModifiedDate":"2021-03-15"},{"lineNumber":213,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":214,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":215,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":216,"author":{"gitId":"totoyoyo"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":217,"author":{"gitId":"totoyoyo"},"content":"        public void sortFilteredMeetingList(Comparator\u003cMeeting\u003e comparator) {","lastModifiedDate":"2021-03-28"},{"lineNumber":218,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":219,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":220,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":221,"author":{"gitId":"Maurice2n97"},"content":"        @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":222,"author":{"gitId":"Maurice2n97"},"content":"        public ObservableList\u003cMeeting\u003e getUnmodifiableMeetingList() {","lastModifiedDate":"2021-03-30"},{"lineNumber":223,"author":{"gitId":"Maurice2n97"},"content":"            throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2021-03-30"},{"lineNumber":224,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":225,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":226,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":227,"author":{"gitId":"skinnychenpi"},"content":"        public void setPersonMeetingConnection(PersonMeetingConnection connection) {","lastModifiedDate":"2021-03-25"},{"lineNumber":228,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":229,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":230,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":231,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":232,"author":{"gitId":"skinnychenpi"},"content":"        public PersonMeetingConnection getPersonMeetingConnection() {","lastModifiedDate":"2021-03-25"},{"lineNumber":233,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":234,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":235,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":236,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":237,"author":{"gitId":"skinnychenpi"},"content":"        public boolean hasPersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-03-25"},{"lineNumber":238,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":239,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":240,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":241,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":242,"author":{"gitId":"skinnychenpi"},"content":"        public void addPersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-03-25"},{"lineNumber":243,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":244,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":245,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":246,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":247,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteSinglePersonMeetingConnection(Person person, Meeting meeting) {","lastModifiedDate":"2021-03-25"},{"lineNumber":248,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":249,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":250,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":251,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":252,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteAllPersonMeetingConnectionByPerson(Person person) {","lastModifiedDate":"2021-03-25"},{"lineNumber":253,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":254,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":255,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":256,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":257,"author":{"gitId":"skinnychenpi"},"content":"        public void deleteAllPersonMeetingConnectionByMeeting(Meeting meeting) {","lastModifiedDate":"2021-03-25"},{"lineNumber":258,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":259,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":260,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":261,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":262,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cMeeting\u003e getFilteredMeetingListByPersonConnection(Person person) {","lastModifiedDate":"2021-03-25"},{"lineNumber":263,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":264,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":265,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":266,"author":{"gitId":"hengyiqun"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Note methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-01"},{"lineNumber":267,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":268,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":269,"author":{"gitId":"hengyiqun"},"content":"        public void setNoteBook(ReadOnlyNoteBook noteBook) {","lastModifiedDate":"2021-04-01"},{"lineNumber":270,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":271,"author":{"gitId":"hengyiqun"},"content":"        };","lastModifiedDate":"2021-04-01"},{"lineNumber":272,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":273,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":274,"author":{"gitId":"hengyiqun"},"content":"        public ReadOnlyNoteBook getNoteBook() {","lastModifiedDate":"2021-04-01"},{"lineNumber":275,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":276,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":277,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":278,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":279,"author":{"gitId":"hengyiqun"},"content":"        public boolean hasNote(Note note) {","lastModifiedDate":"2021-04-01"},{"lineNumber":280,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":281,"author":{"gitId":"hengyiqun"},"content":"        };","lastModifiedDate":"2021-04-01"},{"lineNumber":282,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":283,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":284,"author":{"gitId":"hengyiqun"},"content":"        public void deleteNote(Note target) {","lastModifiedDate":"2021-04-01"},{"lineNumber":285,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":286,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":287,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":288,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":289,"author":{"gitId":"hengyiqun"},"content":"        public void addNote(Note note) {","lastModifiedDate":"2021-04-01"},{"lineNumber":290,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":291,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":292,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":293,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":294,"author":{"gitId":"hengyiqun"},"content":"        public void setNote(Note target, Note editedNote) {","lastModifiedDate":"2021-04-01"},{"lineNumber":295,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":296,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":297,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":298,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":299,"author":{"gitId":"hengyiqun"},"content":"        public ObservableList\u003cNote\u003e getFilteredNoteList() {","lastModifiedDate":"2021-04-01"},{"lineNumber":300,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":301,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":302,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":303,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":304,"author":{"gitId":"hengyiqun"},"content":"        public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {","lastModifiedDate":"2021-04-01"},{"lineNumber":305,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":306,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":307,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":308,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":309,"author":{"gitId":"hengyiqun"},"content":"        public Path getNoteBookFilePath() {","lastModifiedDate":"2021-04-01"},{"lineNumber":310,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":311,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":312,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":313,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":314,"author":{"gitId":"hengyiqun"},"content":"        public void setNoteBookFilePath(Path noteBookFilePath) {","lastModifiedDate":"2021-04-01"},{"lineNumber":315,"author":{"gitId":"hengyiqun"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-01"},{"lineNumber":316,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":317,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":318,"author":{"gitId":"Maurice2n97"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Timetable methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":319,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":320,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":321,"author":{"gitId":"skinnychenpi"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonListByMeetingConnection(Meeting meeting) {","lastModifiedDate":"2021-03-25"},{"lineNumber":322,"author":{"gitId":"skinnychenpi"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":323,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":324,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":325,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-07"},{"lineNumber":326,"author":{"gitId":"skinnychenpi"},"content":"        public UniqueMeetingList getUniqueMeetingListByPersonConnection(Person person) {","lastModifiedDate":"2021-04-07"},{"lineNumber":327,"author":{"gitId":"skinnychenpi"},"content":"            return null;","lastModifiedDate":"2021-04-07"},{"lineNumber":328,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":329,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":330,"author":{"gitId":"skinnychenpi"},"content":"        @Override","lastModifiedDate":"2021-04-07"},{"lineNumber":331,"author":{"gitId":"skinnychenpi"},"content":"        public UniquePersonList getUniquePersonListByMeetingConnection(Meeting meeting) {","lastModifiedDate":"2021-04-07"},{"lineNumber":332,"author":{"gitId":"skinnychenpi"},"content":"            return null;","lastModifiedDate":"2021-04-07"},{"lineNumber":333,"author":{"gitId":"skinnychenpi"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":334,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":335,"author":{"gitId":"Maurice2n97"},"content":"        @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":336,"author":{"gitId":"Maurice2n97"},"content":"        public void setTimetableStartDate(LocalDate localDate) {","lastModifiedDate":"2021-03-30"},{"lineNumber":337,"author":{"gitId":"Maurice2n97"},"content":"            throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2021-03-30"},{"lineNumber":338,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":339,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":340,"author":{"gitId":"Maurice2n97"},"content":"        @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":341,"author":{"gitId":"Maurice2n97"},"content":"        public ObservableValue\u003cLocalDate\u003e getReadOnlyTimetableStartDate() {","lastModifiedDate":"2021-03-30"},{"lineNumber":342,"author":{"gitId":"Maurice2n97"},"content":"            throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2021-03-30"},{"lineNumber":343,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":344,"author":{"gitId":"Maurice2n97"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":345,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":346,"author":{"gitId":"totoyoyo"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":347,"author":{"gitId":"totoyoyo"},"content":"        public ReadOnlyReminderBook getReminderBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":348,"author":{"gitId":"totoyoyo"},"content":"            return null;","lastModifiedDate":"2021-03-27"},{"lineNumber":349,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":350,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":351,"author":{"gitId":"totoyoyo"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":352,"author":{"gitId":"totoyoyo"},"content":"        public void refreshReminderBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":353,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":354,"author":{"gitId":"totoyoyo"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":355,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":356,"author":{"gitId":"Maurice2n97"},"content":"        @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":357,"author":{"gitId":"Maurice2n97"},"content":"        public boolean clashes(Meeting toCheck) {","lastModifiedDate":"2021-03-26"},{"lineNumber":358,"author":{"gitId":"Maurice2n97"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-26"},{"lineNumber":359,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":360,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":361,"author":{"gitId":"hengyiqun"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":362,"author":{"gitId":"hengyiqun"},"content":"        public boolean clashesExceptOne(Meeting meetingNotIncluded, Meeting toCheck) {","lastModifiedDate":"2021-03-28"},{"lineNumber":363,"author":{"gitId":"hengyiqun"},"content":"            return false;","lastModifiedDate":"2021-03-28"},{"lineNumber":364,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":365,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":366,"author":{"gitId":"Maurice2n97"},"content":"        @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":367,"author":{"gitId":"Maurice2n97"},"content":"        public List\u003cMeeting\u003e getClashes(Meeting toCheck) {","lastModifiedDate":"2021-03-26"},{"lineNumber":368,"author":{"gitId":"Maurice2n97"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-26"},{"lineNumber":369,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":370,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":371,"author":{"gitId":"Maurice2n97"},"content":"        @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":372,"author":{"gitId":"Maurice2n97"},"content":"        public Optional\u003cMeeting\u003e getMeetingAtInstant(LocalDateTime localDateTime) {","lastModifiedDate":"2021-03-26"},{"lineNumber":373,"author":{"gitId":"Maurice2n97"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-26"},{"lineNumber":374,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":375,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":378,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":379,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":380,"author":{"gitId":"skinnychenpi"},"content":"    private class PersonModelStubWith extends ModelStub {","lastModifiedDate":"2021-03-15"},{"lineNumber":381,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":383,"author":{"gitId":"skinnychenpi"},"content":"        PersonModelStubWith(Person person) {","lastModifiedDate":"2021-03-15"},{"lineNumber":384,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":385,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":386,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":388,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":389,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":390,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":391,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":393,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":395,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":396,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":397,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":398,"author":{"gitId":"skinnychenpi"},"content":"    private class PersonModelStubAcceptingAdded extends ModelStub {","lastModifiedDate":"2021-03-15"},{"lineNumber":399,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":401,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":402,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":403,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":404,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":405,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":406,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":408,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":409,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":410,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":411,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":412,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":413,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":414,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":415,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":416,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":417,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":418,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":419,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"totoyoyo":21,"Maurice2n97":38,"skinnychenpi":127,"hengyiqun":70,"-":163}},{"path":"src/test/java/seedu/address/logic/commands/persons/ClearPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"public class ClearPersonCommandTest {","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(new ClearPersonCommand(), model, ClearPersonCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(new ClearPersonCommand(), model, ClearPersonCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"Maurice2n97":1,"skinnychenpi":5,"-":26}},{"path":"src/test/java/seedu/address/logic/commands/persons/DeletePersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":" * {@code DeletePersonCommand}.","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"public class DeletePersonCommandTest {","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"        showPersonAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"        showPersonAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;","lastModifiedDate":"2021-03-17"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"        DeletePersonCommand deleteFirstCommand \u003d new DeletePersonCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-17"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"        DeletePersonCommand deleteSecondCommand \u003d new DeletePersonCommand(INDEX_SECOND);","lastModifiedDate":"2021-03-17"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"        DeletePersonCommand deleteFirstCommandCopy \u003d new DeletePersonCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-17"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"Maurice2n97":14,"skinnychenpi":14,"-":83}},{"path":"src/test/java/seedu/address/logic/commands/persons/EditPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_GROUP_HUSBAND;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-05-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditPersonCommand.","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"public class EditPersonCommandTest {","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST, descriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"                .withGroups(VALID_GROUP_HUSBAND).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"                .withPhone(VALID_PHONE_BOB).withGroups(VALID_GROUP_HUSBAND).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(indexLastPerson, descriptor);","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST, new EditPersonDescriptor());","lastModifiedDate":"2021-03-17"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"        showPersonAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-17"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST,","lastModifiedDate":"2021-03-17"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_SECOND, descriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"        showPersonAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-17"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND.getZeroBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST,","lastModifiedDate":"2021-03-17"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":138,"author":{"gitId":"Maurice2n97"},"content":"        showPersonAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-17"},{"lineNumber":139,"author":{"gitId":"Maurice2n97"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;","lastModifiedDate":"2021-03-17"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":143,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(outOfBoundIndex,","lastModifiedDate":"2021-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"Maurice2n97"},"content":"        final EditPersonCommand standardCommand \u003d new EditPersonCommand(INDEX_FIRST, DESC_AMY);","lastModifiedDate":"2021-03-17"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":155,"author":{"gitId":"Maurice2n97"},"content":"        EditPersonCommand commandWithSameValues \u003d new EditPersonCommand(INDEX_FIRST, copyDescriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(standardCommand.equals(new ClearPersonCommand()));","lastModifiedDate":"2021-03-14"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"Maurice2n97"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_SECOND, DESC_AMY)));","lastModifiedDate":"2021-03-17"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"Maurice2n97"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_FIRST, DESC_BOB)));","lastModifiedDate":"2021-03-17"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"Maurice2n97":21,"skinnychenpi":27,"hengyiqun":3,"-":122}},{"path":"src/test/java/seedu/address/logic/commands/persons/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_GROUP_HUSBAND;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"        // different groups -\u003e returns false","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withGroups(VALID_GROUP_HUSBAND).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"Maurice2n97":1,"skinnychenpi":8,"hengyiqun":2,"-":47}},{"path":"src/test/java/seedu/address/logic/commands/persons/FindPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":" * Contains integration tests (interaction with the Model) for {@code FindPersonCommand}.","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"public class FindPersonCommandTest {","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        FindPersonCommand findFirstCommand \u003d new FindPersonCommand(firstPredicate);","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        FindPersonCommand findSecondCommand \u003d new FindPersonCommand(secondPredicate);","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        FindPersonCommand findFirstCommandCopy \u003d new FindPersonCommand(firstPredicate);","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"        FindPersonCommand command \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"        FindPersonCommand command \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"skinnychenpi":9,"-":74}},{"path":"src/test/java/seedu/address/logic/commands/persons/ListPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListPersonCommand.","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"public class ListPersonCommandTest {","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(new ListPersonCommand(), model, ListPersonCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        showPersonAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(new ListPersonCommand(), model, ListPersonCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"Maurice2n97":2,"skinnychenpi":7,"-":30}},{"path":"src/test/java/seedu/address/logic/commands/persons/PersonCommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"public class PersonCommandTestUtil {","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"    public static final String VALID_GROUP_HUSBAND \u003d \"husband\";","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"    public static final String VALID_GROUP_FRIEND \u003d \"friend\";","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"    public static final String GROUP_DESC_FRIEND \u003d \" \" + PREFIX_GROUP + VALID_GROUP_FRIEND;","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"    public static final String GROUP_DESC_HUSBAND \u003d \" \" + PREFIX_GROUP + VALID_GROUP_HUSBAND;","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"    public static final String INVALID_GROUP_DESC \u003d \" \" + PREFIX_GROUP + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    public static final EditPersonCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"    public static final EditPersonCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"hengyiqun"},"content":"                .withGroups(VALID_GROUP_FRIEND).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"hengyiqun"},"content":"                .withGroups(VALID_GROUP_HUSBAND, VALID_GROUP_FRIEND).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"Maurice2n97":1,"skinnychenpi":7,"hengyiqun":7,"-":115}},{"path":"src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"        String argsString \u003d \"  some random string /g group with leading and trailing spaces \";","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"hengyiqun":1,"-":149}},{"path":"src/test/java/seedu/address/logic/parser/MeetBuddyParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.persons.AddPersonCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.persons.ClearPersonCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.persons.DeletePersonCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.persons.FindPersonCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.persons.ListPersonCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"public class MeetBuddyParserTest {","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    private final MeetBuddyParser parser \u003d new MeetBuddyParser();","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        AddPersonCommand command \u003d (AddPersonCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(new AddPersonCommand(person), command);","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(parser.parseCommand(ClearPersonCommand.COMMAND_WORD) instanceof ClearPersonCommand);","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(parser.parseCommand(ClearPersonCommand.COMMAND_WORD + \" 3\") instanceof ClearPersonCommand);","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        DeletePersonCommand command \u003d (DeletePersonCommand) parser.parseCommand(","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"                DeletePersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(new DeletePersonCommand(INDEX_FIRST), command);","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand command \u003d (EditPersonCommand) parser.parseCommand(EditPersonCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"                + INDEX_FIRST.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2021-03-17"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(new EditPersonCommand(INDEX_FIRST, descriptor), command);","lastModifiedDate":"2021-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"        FindPersonCommand command \u003d (FindPersonCommand) parser.parseCommand(","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"                FindPersonCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(new FindPersonCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(parser.parseCommand(ListPersonCommand.COMMAND_WORD) instanceof ListPersonCommand);","lastModifiedDate":"2021-03-14"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(parser.parseCommand(ListPersonCommand.COMMAND_WORD + \" 3\") instanceof ListPersonCommand);","lastModifiedDate":"2021-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"Maurice2n97":12,"skinnychenpi":13,"-":76}},{"path":"src/test/java/seedu/address/logic/parser/ParseDateUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.time.Month;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"public class ParseDateUtilTest {","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    private static final String INCORRECT_DATE_STRING \u003d \"22-09-04 7890\";","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    private static final String CORRECT_DATE_STRING \u003d \"2020-01-12 23:59\";","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    private static final LocalDateTime CORRECT_LOCAL_DATETIME \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"            LocalDateTime.of(2020, Month.JANUARY, 12, 23, 59, 0);","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    public void formatDateTime_validValue_returnsFormattedString() {","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        String formattedDateTime \u003d DateTimeUtil.formatDateTime(CORRECT_LOCAL_DATETIME);","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(formattedDateTime, CORRECT_DATE_STRING);","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    public void parseDateTime_validValue_returnsLocalDateTime() throws ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        LocalDateTime localDateTime \u003d DateTimeUtil.parseDateTime(CORRECT_DATE_STRING);","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(localDateTime, CORRECT_LOCAL_DATETIME);","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    public void parseDateTime_invalidValue_throwsParseException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(ParseException.class, ()-\u003e {","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"            DateTimeUtil.parseDateTime(INCORRECT_DATE_STRING);","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"        });","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"Maurice2n97":38}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.PersonName;","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"    private static final String INVALID_GROUP \u003d \"#friend\";","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"    private static final String VALID_GROUP_1 \u003d \"friend\";","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"    private static final String VALID_GROUP_2 \u003d \"neighbour\";","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"        PersonName expectedPersonName \u003d new PersonName(VALID_NAME);","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expectedPersonName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"        PersonName expectedPersonName \u003d new PersonName(VALID_NAME);","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expectedPersonName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"hengyiqun"},"content":"    public void parseGroup_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":153,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGroup(null));","lastModifiedDate":"2021-03-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"hengyiqun"},"content":"    public void parseGroup_invalidValue_throwsParseException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":158,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGroup(INVALID_GROUP));","lastModifiedDate":"2021-03-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"hengyiqun"},"content":"    public void parseGroup_validValueWithoutWhitespace_returnsGroup() throws Exception {","lastModifiedDate":"2021-03-14"},{"lineNumber":163,"author":{"gitId":"hengyiqun"},"content":"        Group expectedGroup \u003d new Group(VALID_GROUP_1);","lastModifiedDate":"2021-03-14"},{"lineNumber":164,"author":{"gitId":"hengyiqun"},"content":"        assertEquals(expectedGroup, ParserUtil.parseGroup(VALID_GROUP_1));","lastModifiedDate":"2021-03-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"hengyiqun"},"content":"    public void parseGroup_validValueWithWhitespace_returnsTrimmedGroup() throws Exception {","lastModifiedDate":"2021-03-14"},{"lineNumber":169,"author":{"gitId":"hengyiqun"},"content":"        String groupWithWhitespace \u003d WHITESPACE + VALID_GROUP_1 + WHITESPACE;","lastModifiedDate":"2021-03-14"},{"lineNumber":170,"author":{"gitId":"hengyiqun"},"content":"        Group expectedGroup \u003d new Group(VALID_GROUP_1);","lastModifiedDate":"2021-03-14"},{"lineNumber":171,"author":{"gitId":"hengyiqun"},"content":"        assertEquals(expectedGroup, ParserUtil.parseGroup(groupWithWhitespace));","lastModifiedDate":"2021-03-14"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"hengyiqun"},"content":"    public void parseGroups_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":176,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGroups(null));","lastModifiedDate":"2021-03-14"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":180,"author":{"gitId":"hengyiqun"},"content":"    public void parseGroups_collectionWithInvalidGroups_throwsParseException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":181,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGroups(Arrays.asList(VALID_GROUP_1, INVALID_GROUP)));","lastModifiedDate":"2021-03-14"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"hengyiqun"},"content":"    public void parseGroups_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2021-03-14"},{"lineNumber":186,"author":{"gitId":"hengyiqun"},"content":"        assertTrue(ParserUtil.parseGroups(Collections.emptyList()).isEmpty());","lastModifiedDate":"2021-03-14"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"hengyiqun"},"content":"    public void parseGroups_collectionWithValidGroups_returnsGroupSet() throws Exception {","lastModifiedDate":"2021-03-14"},{"lineNumber":191,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e actualGroupSet \u003d ParserUtil.parseGroups(Arrays.asList(VALID_GROUP_1, VALID_GROUP_2));","lastModifiedDate":"2021-03-14"},{"lineNumber":192,"author":{"gitId":"Maurice2n97"},"content":"        Set\u003cGroup\u003e expectedGroupSet \u003d new HashSet\u003cGroup\u003e(Arrays.asList(new Group(VALID_GROUP_1),","lastModifiedDate":"2021-03-16"},{"lineNumber":193,"author":{"gitId":"Maurice2n97"},"content":"                new Group(VALID_GROUP_2)));","lastModifiedDate":"2021-03-16"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"hengyiqun"},"content":"        assertEquals(expectedGroupSet, actualGroupSet);","lastModifiedDate":"2021-03-14"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"Maurice2n97":6,"skinnychenpi":5,"hengyiqun":23,"-":163}},{"path":"src/test/java/seedu/address/logic/parser/connections/AddPersonToMeetingConnectionParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.connections;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.connections.AddPersonToMeetingConnectionCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_CONNECTION;","lastModifiedDate":"2021-04-08"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-04-08"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"class AddPersonToMeetingConnectionParserTest {","lastModifiedDate":"2021-04-08"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    private AddPersonToMeetingConnectionParser parser \u003d new AddPersonToMeetingConnectionParser();","lastModifiedDate":"2021-04-08"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    private static final String VALID_INPUT1 \u003d \" \" + \"1 \" + PREFIX_PERSON_CONNECTION + \"1 \" + PREFIX_PERSON_CONNECTION + \"2\";","lastModifiedDate":"2021-04-08"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    private static final String INVALID_INPUT1 \u003d \" \" + PREFIX_PERSON_CONNECTION + \"1 \";","lastModifiedDate":"2021-04-08"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    private static final String INVALID_INPUT2 \u003d \" \" + \"1 \" + PREFIX_PERSON_CONNECTION + \"a\";","lastModifiedDate":"2021-04-08"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public void parse_success() throws Exception {","lastModifiedDate":"2021-04-08"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        Index validMeetingIndex \u003d ParserUtil.parseIndex(\"1\");","lastModifiedDate":"2021-04-08"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cIndex\u003e validPersonIndexSet1 \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-04-08"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        Index validPersonIndex1 \u003d ParserUtil.parseIndex(\"1\");","lastModifiedDate":"2021-04-08"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        Index validPersonIndex2 \u003d ParserUtil.parseIndex(\"2\");","lastModifiedDate":"2021-04-08"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        validPersonIndexSet1.add(validPersonIndex1);","lastModifiedDate":"2021-04-08"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        validPersonIndexSet1.add(validPersonIndex2);","lastModifiedDate":"2021-04-08"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        // whitespace only preamble","lastModifiedDate":"2021-04-08"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        //assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_INPUT1, new AddPersonToMeetingConnectionCommand(validMeetingIndex, validPersonIndexSet1));","lastModifiedDate":"2021-04-08"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        // Don\u0027t know why can\u0027t pass the test, while using the debugger to check it should be correct.","lastModifiedDate":"2021-04-08"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage1 \u003d \"Invalid command format! \\n\" + AddPersonToMeetingConnectionCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-04-08"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        // missing meeting index","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, INVALID_INPUT1, expectedMessage1);","lastModifiedDate":"2021-04-08"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        // Invalid index input","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d \"Index of a person or a meeting is not a non-zero unsigned integer.\";","lastModifiedDate":"2021-04-08"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, INVALID_INPUT2, expectedMessage);","lastModifiedDate":"2021-04-08"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-04-08"}],"authorContributionMap":{"skinnychenpi":55}},{"path":"src/test/java/seedu/address/logic/parser/connections/DeletePersonToMeetingConnectionParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.connections;","lastModifiedDate":"2021-04-08"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.connections.DeletePersonToMeetingConnectionCommand;","lastModifiedDate":"2021-04-08"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_CONNECTION;","lastModifiedDate":"2021-04-08"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-04-08"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-04-08"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"class DeletePersonToMeetingConnectionParserTest {","lastModifiedDate":"2021-04-08"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    private DeletePersonToMeetingConnectionParser parser \u003d new DeletePersonToMeetingConnectionParser();","lastModifiedDate":"2021-04-08"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    private static final String VALID_INPUT1 \u003d \"1 \" + PREFIX_PERSON_CONNECTION + \" 1\";","lastModifiedDate":"2021-04-08"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2021-04-08"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cIndex\u003e indexSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        indexSet.add(INDEX_FIRST);","lastModifiedDate":"2021-04-08"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        //Should be passed, but don\u0027t know why can\u0027t pass. (Use the actual product to test and it is good).","lastModifiedDate":"2021-04-08"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"        //assertParseSuccess(parser, VALID_INPUT1, new DeletePersonToMeetingConnectionCommand(INDEX_FIRST, indexSet));","lastModifiedDate":"2021-04-08"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-04-08"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2021-04-08"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonToMeetingConnectionCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-04-08"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-04-08"}],"authorContributionMap":{"skinnychenpi":31}},{"path":"src/test/java/seedu/address/logic/parser/meetings/AddMeetingCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.meetings;","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.CONNECTION1_DESC;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.CONNECTION2_DESC;","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.DESCRIPTION_DESC_MEETING1;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.DESCRIPTION_DESC_MEETING2;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.END_DESC_MEETING1;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.END_DESC_MEETING2;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.INVALID_CONNECTION1_DESC;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.INVALID_DATETIME_DESC;","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.INVALID_PRIORITY_DESC;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.NAME_DESC_MEETING1;","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.NAME_DESC_MEETING2;","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.PRIORITY_DESC_MEETING1;","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.PRIORITY_DESC_MEETING2;","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.START_DESC_MEETING1;","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.START_DESC_MEETING2;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.TAG_DESC_MEETING1;","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.TAG_DESC_MEETING2;","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_NAME_MEETING1;","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_START_MEETING1;","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_GROUP_MEETING1;","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_GROUP_MEETING2;","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_TERMINATE_MEETING1;","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.GROUP_DESC_FRIEND;","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.INVALID_GROUP_DESC;","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING1;","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.meetings.AddMeetingCommand;","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.DateTime;","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.MeetingName;","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Priority;","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.testutil.MeetingBuilder;","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"class AddMeetingCommandParserTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    private AddMeetingCommandParser parser \u003d new AddMeetingCommandParser();","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"        Meeting expectedMeeting \u003d new MeetingBuilder(MEETING1).withGroups(VALID_GROUP_MEETING1).build();","lastModifiedDate":"2021-04-09"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        // whitespace only preamble","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_MEETING1","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"                + START_DESC_MEETING1 + END_DESC_MEETING1","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"                + PRIORITY_DESC_MEETING1 + DESCRIPTION_DESC_MEETING1","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"                + TAG_DESC_MEETING1, new AddMeetingCommand(expectedMeeting));","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"        assertParseSuccess(parser, NAME_DESC_MEETING2 + NAME_DESC_MEETING1 + START_DESC_MEETING1","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"                + END_DESC_MEETING1 + PRIORITY_DESC_MEETING1 + DESCRIPTION_DESC_MEETING1","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"                + TAG_DESC_MEETING1, new AddMeetingCommand(expectedMeeting));","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"        // multiple start time - last start time accepted","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"        assertParseSuccess(parser, NAME_DESC_MEETING1 + START_DESC_MEETING2 + START_DESC_MEETING1","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"                + END_DESC_MEETING1 + PRIORITY_DESC_MEETING1 + DESCRIPTION_DESC_MEETING1","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"                + TAG_DESC_MEETING1, new AddMeetingCommand(expectedMeeting));","lastModifiedDate":"2021-03-16"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"        // multiple end time - last end time accepted","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"        assertParseSuccess(parser, NAME_DESC_MEETING1 + START_DESC_MEETING1 + END_DESC_MEETING2","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"                + END_DESC_MEETING1 + PRIORITY_DESC_MEETING1 + DESCRIPTION_DESC_MEETING1","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"                + TAG_DESC_MEETING1, new AddMeetingCommand(expectedMeeting));","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"        // multiple priorities - last priority accepted","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"        assertParseSuccess(parser, NAME_DESC_MEETING1 + START_DESC_MEETING1 + END_DESC_MEETING1","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"                + PRIORITY_DESC_MEETING2 + PRIORITY_DESC_MEETING1 + DESCRIPTION_DESC_MEETING1","lastModifiedDate":"2021-03-16"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"                + TAG_DESC_MEETING1, new AddMeetingCommand(expectedMeeting));","lastModifiedDate":"2021-03-16"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        // multiple descriptions - last description accepted","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"        assertParseSuccess(parser, NAME_DESC_MEETING1 + START_DESC_MEETING1","lastModifiedDate":"2021-03-16"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"                + END_DESC_MEETING1 + PRIORITY_DESC_MEETING1 + DESCRIPTION_DESC_MEETING2","lastModifiedDate":"2021-03-16"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"                + DESCRIPTION_DESC_MEETING1 + TAG_DESC_MEETING1, new AddMeetingCommand(expectedMeeting));","lastModifiedDate":"2021-03-16"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        // multiple groups - all accepted","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"hengyiqun"},"content":"        Meeting expectedMeetingMultipleGroups \u003d new MeetingBuilder(MEETING1).withGroups(VALID_GROUP_MEETING1,","lastModifiedDate":"2021-04-09"},{"lineNumber":86,"author":{"gitId":"hengyiqun"},"content":"                VALID_GROUP_MEETING2)","lastModifiedDate":"2021-04-09"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"                .build();","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"        assertParseSuccess(parser, NAME_DESC_MEETING1 + START_DESC_MEETING1 + END_DESC_MEETING1","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"                + PRIORITY_DESC_MEETING1 + DESCRIPTION_DESC_MEETING1","lastModifiedDate":"2021-03-15"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"                + TAG_DESC_MEETING1 + TAG_DESC_MEETING2, new AddMeetingCommand(expectedMeetingMultipleGroups));","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-27"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"    public void parse_personMeetingConnection() {","lastModifiedDate":"2021-03-27"},{"lineNumber":96,"author":{"gitId":"hengyiqun"},"content":"        Meeting expectedMeeting \u003d new MeetingBuilder(MEETING1).withGroups(VALID_GROUP_MEETING1).build();","lastModifiedDate":"2021-04-09"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"        // parse one connection will not influence the meeting object.","lastModifiedDate":"2021-03-27"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"        assertParseSuccess(parser, NAME_DESC_MEETING1 + START_DESC_MEETING1","lastModifiedDate":"2021-03-27"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"            + END_DESC_MEETING1 + PRIORITY_DESC_MEETING1 + DESCRIPTION_DESC_MEETING2","lastModifiedDate":"2021-03-27"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"            + DESCRIPTION_DESC_MEETING1 + TAG_DESC_MEETING1 + CONNECTION1_DESC, new AddMeetingCommand(expectedMeeting));","lastModifiedDate":"2021-03-27"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"        assertParseSuccess(parser, NAME_DESC_MEETING1 + START_DESC_MEETING1","lastModifiedDate":"2021-03-27"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"            + END_DESC_MEETING1 + PRIORITY_DESC_MEETING1 + DESCRIPTION_DESC_MEETING2","lastModifiedDate":"2021-03-27"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"            + DESCRIPTION_DESC_MEETING1 + TAG_DESC_MEETING1 + CONNECTION1_DESC + CONNECTION2_DESC,","lastModifiedDate":"2021-03-27"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"            new AddMeetingCommand(expectedMeeting));","lastModifiedDate":"2021-03-27"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"        // parse two connection will not influence the meeting object.","lastModifiedDate":"2021-03-27"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"        assertParseSuccess(parser, NAME_DESC_MEETING1 + START_DESC_MEETING1","lastModifiedDate":"2021-03-27"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"            + END_DESC_MEETING1 + PRIORITY_DESC_MEETING1 + DESCRIPTION_DESC_MEETING2","lastModifiedDate":"2021-03-27"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"            + DESCRIPTION_DESC_MEETING1 + TAG_DESC_MEETING1 + CONNECTION1_DESC + CONNECTION2_DESC,","lastModifiedDate":"2021-03-27"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"            new AddMeetingCommand(expectedMeeting));","lastModifiedDate":"2021-03-27"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"        // parse invalid connection statement will raise an exception","lastModifiedDate":"2021-03-27"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, NAME_DESC_MEETING1 + START_DESC_MEETING1","lastModifiedDate":"2021-03-27"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"            + END_DESC_MEETING1 + PRIORITY_DESC_MEETING1 + DESCRIPTION_DESC_MEETING2","lastModifiedDate":"2021-03-27"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"            + DESCRIPTION_DESC_MEETING1 + TAG_DESC_MEETING1 + INVALID_CONNECTION1_DESC,","lastModifiedDate":"2021-03-27"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"            \"Index of a person or a meeting is not a non-zero unsigned integer.\");","lastModifiedDate":"2021-03-27"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"        // as long as there is one invalid input of index, it will raise an error","lastModifiedDate":"2021-03-27"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, NAME_DESC_MEETING1 + START_DESC_MEETING1","lastModifiedDate":"2021-03-27"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"                + END_DESC_MEETING1 + PRIORITY_DESC_MEETING1 + DESCRIPTION_DESC_MEETING2","lastModifiedDate":"2021-03-27"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"                + DESCRIPTION_DESC_MEETING1 + TAG_DESC_MEETING1 + CONNECTION1_DESC + INVALID_CONNECTION1_DESC,","lastModifiedDate":"2021-03-27"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"            \"Index of a person or a meeting is not a non-zero unsigned integer.\");","lastModifiedDate":"2021-03-27"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2021-03-15"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"        // zero group","lastModifiedDate":"2021-03-15"},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"        Meeting expectedMeeting \u003d new MeetingBuilder(MEETING1).withPriority(\"1\").withDescription(\"\")","lastModifiedDate":"2021-03-16"},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":"                .withGroups().build();","lastModifiedDate":"2021-03-16"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"        assertParseSuccess(parser, NAME_DESC_MEETING1 + START_DESC_MEETING1 + END_DESC_MEETING1,","lastModifiedDate":"2021-03-15"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"                new AddMeetingCommand(expectedMeeting));","lastModifiedDate":"2021-03-15"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-03-15"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMeetingCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-15"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"        // missing name prefix","lastModifiedDate":"2021-03-15"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, VALID_NAME_MEETING1 + START_DESC_MEETING1 + END_DESC_MEETING1,","lastModifiedDate":"2021-03-15"},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-15"},{"lineNumber":143,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":144,"author":{"gitId":"skinnychenpi"},"content":"        // missing start prefix","lastModifiedDate":"2021-03-15"},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, NAME_DESC_MEETING1 + VALID_START_MEETING1 + END_DESC_MEETING1,","lastModifiedDate":"2021-03-15"},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-15"},{"lineNumber":147,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":148,"author":{"gitId":"skinnychenpi"},"content":"        // missing end prefix","lastModifiedDate":"2021-03-15"},{"lineNumber":149,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, NAME_DESC_MEETING1 + START_DESC_MEETING1 + VALID_TERMINATE_MEETING1,","lastModifiedDate":"2021-03-15"},{"lineNumber":150,"author":{"gitId":"skinnychenpi"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-15"},{"lineNumber":151,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":152,"author":{"gitId":"skinnychenpi"},"content":"        // all prefixes missing","lastModifiedDate":"2021-03-15"},{"lineNumber":153,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, VALID_NAME_MEETING1 + VALID_START_MEETING1 + VALID_TERMINATE_MEETING1,","lastModifiedDate":"2021-03-15"},{"lineNumber":154,"author":{"gitId":"skinnychenpi"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-15"},{"lineNumber":155,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":156,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":158,"author":{"gitId":"skinnychenpi"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-03-15"},{"lineNumber":159,"author":{"gitId":"skinnychenpi"},"content":"        // invalid name","lastModifiedDate":"2021-03-15"},{"lineNumber":160,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + START_DESC_MEETING1 + END_DESC_MEETING1","lastModifiedDate":"2021-03-15"},{"lineNumber":161,"author":{"gitId":"skinnychenpi"},"content":"                + PRIORITY_DESC_MEETING1 + DESCRIPTION_DESC_MEETING1","lastModifiedDate":"2021-03-15"},{"lineNumber":162,"author":{"gitId":"skinnychenpi"},"content":"                + TAG_DESC_MEETING1, MeetingName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":163,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":164,"author":{"gitId":"skinnychenpi"},"content":"        // invalid date time","lastModifiedDate":"2021-03-15"},{"lineNumber":165,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, NAME_DESC_MEETING1 + INVALID_DATETIME_DESC + END_DESC_MEETING1","lastModifiedDate":"2021-03-15"},{"lineNumber":166,"author":{"gitId":"skinnychenpi"},"content":"                + PRIORITY_DESC_MEETING1 + DESCRIPTION_DESC_MEETING1","lastModifiedDate":"2021-03-15"},{"lineNumber":167,"author":{"gitId":"skinnychenpi"},"content":"                + TAG_DESC_MEETING1, DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":168,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":169,"author":{"gitId":"skinnychenpi"},"content":"        // invalid priority","lastModifiedDate":"2021-03-15"},{"lineNumber":170,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, NAME_DESC_MEETING1 + START_DESC_MEETING1 + END_DESC_MEETING1","lastModifiedDate":"2021-03-15"},{"lineNumber":171,"author":{"gitId":"skinnychenpi"},"content":"                + INVALID_PRIORITY_DESC + DESCRIPTION_DESC_MEETING1","lastModifiedDate":"2021-03-15"},{"lineNumber":172,"author":{"gitId":"skinnychenpi"},"content":"                + TAG_DESC_MEETING1, Priority.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":173,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":174,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":175,"author":{"gitId":"skinnychenpi"},"content":"        // invalid group","lastModifiedDate":"2021-03-15"},{"lineNumber":176,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, NAME_DESC_MEETING1 + START_DESC_MEETING1 + END_DESC_MEETING1","lastModifiedDate":"2021-03-15"},{"lineNumber":177,"author":{"gitId":"skinnychenpi"},"content":"                + PRIORITY_DESC_MEETING1 + DESCRIPTION_DESC_MEETING1","lastModifiedDate":"2021-03-15"},{"lineNumber":178,"author":{"gitId":"skinnychenpi"},"content":"                + INVALID_GROUP_DESC, Group.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":179,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":180,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":181,"author":{"gitId":"skinnychenpi"},"content":"        // non-empty preamble","lastModifiedDate":"2021-03-15"},{"lineNumber":182,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_MEETING1 + START_DESC_MEETING1","lastModifiedDate":"2021-03-16"},{"lineNumber":183,"author":{"gitId":"skinnychenpi"},"content":"                        + END_DESC_MEETING1 + PRIORITY_DESC_MEETING1 + DESCRIPTION_DESC_MEETING1","lastModifiedDate":"2021-03-16"},{"lineNumber":184,"author":{"gitId":"skinnychenpi"},"content":"                        + GROUP_DESC_FRIEND,","lastModifiedDate":"2021-03-15"},{"lineNumber":185,"author":{"gitId":"skinnychenpi"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMeetingCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":186,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":187,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"Maurice2n97":35,"skinnychenpi":146,"hengyiqun":6}},{"path":"src/test/java/seedu/address/logic/parser/meetings/DeleteMeetingCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.logic.parser.meetings;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.commands.meetings.DeleteMeetingCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"/**","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":" * outside of the DeletePersonCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":" * same path through the DeletePersonCommand, and therefore we test only one of them.","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":" */","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"public class DeleteMeetingCommandParserTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    private DeleteMeetingCommandParser parser \u003d new DeleteMeetingCommandParser();","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        assertParseSuccess(parser, \"1\", new DeleteMeetingCommand(INDEX_FIRST));","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMeetingCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"Maurice2n97":33}},{"path":"src/test/java/seedu/address/logic/parser/note/AddNoteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.logic.parser.note;","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"public class AddNoteCommandParserTest {","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"hengyiqun":4}},{"path":"src/test/java/seedu/address/logic/parser/persons/AddPersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.persons;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.GROUP_DESC_FRIEND;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.GROUP_DESC_HUSBAND;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.INVALID_GROUP_DESC;","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_GROUP_FRIEND;","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_GROUP_HUSBAND;","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"totoyoyo"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-07-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-07-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"totoyoyo"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.AddPersonCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.PersonName;","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"public class AddPersonCommandParserTest {","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    private AddPersonCommandParser parser \u003d new AddPersonCommandParser();","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withGroups(VALID_GROUP_FRIEND).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":67,"author":{"gitId":"hengyiqun"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"hengyiqun"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":73,"author":{"gitId":"hengyiqun"},"content":"        // multiple groups - all accepted","lastModifiedDate":"2021-03-14"},{"lineNumber":74,"author":{"gitId":"hengyiqun"},"content":"        Person expectedPersonMultipleGroups \u003d new PersonBuilder(BOB).withGroups(VALID_GROUP_FRIEND, VALID_GROUP_HUSBAND)","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":77,"author":{"gitId":"hengyiqun"},"content":"                + GROUP_DESC_HUSBAND + GROUP_DESC_FRIEND, new AddPersonCommand(expectedPersonMultipleGroups));","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"        // zero group","lastModifiedDate":"2021-03-14"},{"lineNumber":84,"author":{"gitId":"hengyiqun"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withGroups().build();","lastModifiedDate":"2021-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,","lastModifiedDate":"2017-12-23"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"                new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-03-14"},{"lineNumber":87,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":88,"author":{"gitId":"totoyoyo"},"content":"        Person expectedPersonOptional \u003d new Person(new PersonName(VALID_NAME_AMY), new Phone(Phone.PLACE_HOLDER),","lastModifiedDate":"2021-03-17"},{"lineNumber":89,"author":{"gitId":"totoyoyo"},"content":"                new Email(Email.PLACE_HOLDER), new Address(Address.PLACE_HOLDER), new HashSet\u003c\u003e());","lastModifiedDate":"2021-03-17"},{"lineNumber":90,"author":{"gitId":"totoyoyo"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY,","lastModifiedDate":"2021-03-17"},{"lineNumber":91,"author":{"gitId":"totoyoyo"},"content":"                new AddPersonCommand(expectedPersonOptional));","lastModifiedDate":"2021-03-17"},{"lineNumber":92,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"                + GROUP_DESC_HUSBAND + GROUP_DESC_FRIEND, PersonName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":115,"author":{"gitId":"hengyiqun"},"content":"                + GROUP_DESC_HUSBAND + GROUP_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":119,"author":{"gitId":"hengyiqun"},"content":"                + GROUP_DESC_HUSBAND + GROUP_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":123,"author":{"gitId":"hengyiqun"},"content":"                + GROUP_DESC_HUSBAND + GROUP_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":125,"author":{"gitId":"hengyiqun"},"content":"        // invalid group","lastModifiedDate":"2021-03-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":127,"author":{"gitId":"hengyiqun"},"content":"                + INVALID_GROUP_DESC + VALID_GROUP_FRIEND, Group.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,","lastModifiedDate":"2017-12-23"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"                PersonName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":135,"author":{"gitId":"hengyiqun"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_HUSBAND + GROUP_DESC_FRIEND,","lastModifiedDate":"2021-03-14"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"totoyoyo":9,"Maurice2n97":10,"skinnychenpi":27,"hengyiqun":19,"-":73}},{"path":"src/test/java/seedu/address/logic/parser/persons/DeletePersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.persons;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.DeletePersonCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":" * outside of the DeletePersonCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":" * same path through the DeletePersonCommand, and therefore we test only one of them.","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"public class DeletePersonCommandParserTest {","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    private DeletePersonCommandParser parser \u003d new DeletePersonCommandParser();","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        assertParseSuccess(parser, \"1\", new DeletePersonCommand(INDEX_FIRST));","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"Maurice2n97":4,"skinnychenpi":6,"-":23}},{"path":"src/test/java/seedu/address/logic/parser/persons/EditPersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.persons;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-05-04"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.GROUP_DESC_FRIEND;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.GROUP_DESC_HUSBAND;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.INVALID_GROUP_DESC;","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_GROUP_FRIEND;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_GROUP_HUSBAND;","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.PersonName;","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"public class EditPersonCommandParserTest {","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"    private static final String GROUP_EMPTY \u003d \" \" + PREFIX_GROUP;","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"    private EditPersonCommandParser parser \u003d new EditPersonCommandParser();","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, \"1\", EditPersonCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, PersonName.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"hengyiqun"},"content":"        assertParseFailure(parser, \"1\" + INVALID_GROUP_DESC, Group.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2021-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"hengyiqun"},"content":"        // while parsing {@code PREFIX_GROUP} alone will reset the groups of the {@code Person} being edited,","lastModifiedDate":"2021-03-14"},{"lineNumber":98,"author":{"gitId":"hengyiqun"},"content":"        // parsing it together with a valid group results in error","lastModifiedDate":"2021-03-14"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"        assertParseFailure(parser, \"1\" + GROUP_DESC_FRIEND","lastModifiedDate":"2021-03-16"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"                + GROUP_DESC_HUSBAND + GROUP_EMPTY, Group.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-16"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"        assertParseFailure(parser, \"1\" + GROUP_DESC_FRIEND","lastModifiedDate":"2021-03-16"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"                + GROUP_EMPTY + GROUP_DESC_HUSBAND, Group.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-16"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, \"1\" + GROUP_EMPTY + GROUP_DESC_FRIEND","lastModifiedDate":"2021-03-16"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"                + GROUP_DESC_HUSBAND, Group.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC","lastModifiedDate":"2021-03-16"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"                        + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2021-03-16"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"                        PersonName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"        Index targetIndex \u003d INDEX_SECOND;","lastModifiedDate":"2021-03-17"},{"lineNumber":115,"author":{"gitId":"hengyiqun"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + GROUP_DESC_HUSBAND","lastModifiedDate":"2021-03-14"},{"lineNumber":116,"author":{"gitId":"hengyiqun"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + GROUP_DESC_FRIEND;","lastModifiedDate":"2021-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"hengyiqun"},"content":"                .withGroups(VALID_GROUP_HUSBAND, VALID_GROUP_FRIEND).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":121,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":"        Index targetIndex \u003d INDEX_FIRST;","lastModifiedDate":"2021-03-17"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":142,"author":{"gitId":"Maurice2n97"},"content":"        Index targetIndex \u003d INDEX_THIRD;","lastModifiedDate":"2021-03-17"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":151,"author":{"gitId":"skinnychenpi"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-14"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":163,"author":{"gitId":"skinnychenpi"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"hengyiqun"},"content":"        userInput \u003d targetIndex.getOneBased() + GROUP_DESC_FRIEND;","lastModifiedDate":"2021-03-14"},{"lineNumber":168,"author":{"gitId":"hengyiqun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withGroups(VALID_GROUP_FRIEND).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":169,"author":{"gitId":"skinnychenpi"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-14"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":175,"author":{"gitId":"Maurice2n97"},"content":"        Index targetIndex \u003d INDEX_FIRST;","lastModifiedDate":"2021-03-17"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":177,"author":{"gitId":"hengyiqun"},"content":"                + GROUP_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + GROUP_DESC_FRIEND","lastModifiedDate":"2021-03-14"},{"lineNumber":178,"author":{"gitId":"hengyiqun"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + GROUP_DESC_HUSBAND;","lastModifiedDate":"2021-03-14"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":181,"author":{"gitId":"Maurice2n97"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2021-03-16"},{"lineNumber":182,"author":{"gitId":"Maurice2n97"},"content":"                .withGroups(VALID_GROUP_FRIEND, VALID_GROUP_HUSBAND)","lastModifiedDate":"2021-03-16"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-14"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":192,"author":{"gitId":"Maurice2n97"},"content":"        Index targetIndex \u003d INDEX_FIRST;","lastModifiedDate":"2021-03-17"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":195,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-14"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":200,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":203,"author":{"gitId":"skinnychenpi"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-14"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":209,"author":{"gitId":"Maurice2n97"},"content":"        Index targetIndex \u003d INDEX_THIRD;","lastModifiedDate":"2021-03-17"},{"lineNumber":210,"author":{"gitId":"hengyiqun"},"content":"        String userInput \u003d targetIndex.getOneBased() + GROUP_EMPTY;","lastModifiedDate":"2021-03-14"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":212,"author":{"gitId":"hengyiqun"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withGroups().build();","lastModifiedDate":"2021-03-14"},{"lineNumber":213,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-14"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":217,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"Maurice2n97":21,"skinnychenpi":43,"hengyiqun":15,"-":138}},{"path":"src/test/java/seedu/address/logic/parser/persons/FindPersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.persons;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.FindPersonCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"public class FindPersonCommandParserTest {","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    private FindPersonCommandParser parser \u003d new FindPersonCommandParser();","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        FindPersonCommand expectedFindPersonCommand \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"                new FindPersonCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindPersonCommand);","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindPersonCommand);","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"Maurice2n97":2,"skinnychenpi":8,"-":25}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_GROUP_HUSBAND;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.PersonName;","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.testutil.Assert;","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withGroups(VALID_GROUP_HUSBAND)","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"hengyiqun"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withGroups(VALID_GROUP_HUSBAND)","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"        @Override","lastModifiedDate":"2021-04-09"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"        public Person getPersonByName(PersonName name) {","lastModifiedDate":"2021-04-09"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"            throw new AssertionError(\"this method should not be called\");","lastModifiedDate":"2021-04-09"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-04-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"Maurice2n97":7,"skinnychenpi":4,"hengyiqun":2,"-":98}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-03-18"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(new MeetingBook(), new MeetingBook(modelManager.getMeetingBook()));","lastModifiedDate":"2021-03-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"hengyiqun"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"hengyiqun"},"content":"    public void findPersonsInGroup_returnsTrue() {","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"hengyiqun"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"hengyiqun"},"content":"        modelManager.addPerson(BENSON);","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"hengyiqun"},"content":"        Group tableTennis \u003d new Group(\"table tennis\");","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"hengyiqun"},"content":"        assertTrue(modelManager.findPersonsInGroup(tableTennis).contains(ALICE));","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"hengyiqun"},"content":"        assertTrue(modelManager.findPersonsInGroup(tableTennis).contains(BENSON));","lastModifiedDate":"2021-03-30"},{"lineNumber":102,"author":{"gitId":"hengyiqun"},"content":"        Group cs2106 \u003d new Group(\"CS2106\");","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"hengyiqun"},"content":"        assertTrue(modelManager.findPersonsInGroup(cs2106).contains(BENSON));","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"hengyiqun"},"content":"        Group random \u003d new Group(\"sdddfs\");","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"hengyiqun"},"content":"        assertTrue(modelManager.findPersonsInGroup(random).isEmpty());","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"hengyiqun"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"hengyiqun"},"content":"    public void findPersonsInGroup_returnsFalse() {","lastModifiedDate":"2021-03-30"},{"lineNumber":110,"author":{"gitId":"hengyiqun"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"hengyiqun"},"content":"        modelManager.addPerson(BENSON);","lastModifiedDate":"2021-03-30"},{"lineNumber":112,"author":{"gitId":"hengyiqun"},"content":"        Group badminton \u003d new Group(\"badminton\");","lastModifiedDate":"2021-03-30"},{"lineNumber":113,"author":{"gitId":"hengyiqun"},"content":"        assertFalse(modelManager.findPersonsInGroup(badminton).contains(ALICE));","lastModifiedDate":"2021-03-30"},{"lineNumber":114,"author":{"gitId":"hengyiqun"},"content":"        assertFalse(modelManager.findPersonsInGroup(badminton).contains(BENSON));","lastModifiedDate":"2021-03-30"},{"lineNumber":115,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":116,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"Maurice2n97":2,"skinnychenpi":1,"hengyiqun":23,"-":132}},{"path":"src/test/java/seedu/address/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    public void setMeetingBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2021-03-18"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2021-03-18"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMeetingBookFilePath(null));","lastModifiedDate":"2021-03-18"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"Maurice2n97":5,"-":21}},{"path":"src/test/java/seedu/address/model/connection/PersonMeetingConnectionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.connection;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING1;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING2;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING3;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING4;","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.connection.exceptions.DuplicateConnectionException;","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.UniqueMeetingList;","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"class PersonMeetingConnectionTest {","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    private PersonMeetingConnection connection \u003d new PersonMeetingConnection();","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    private PersonMeetingConnection connectionCopy;","lastModifiedDate":"2021-03-25"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    private PersonMeetingConnectionTest() {","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(AMY, MEETING1);","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(AMY, MEETING2);","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(AMY, MEETING3);","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(BOB, MEETING1);","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(BOB, MEETING2);","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(BOB, MEETING3);","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        connectionCopy \u003d new PersonMeetingConnection(connection);","lastModifiedDate":"2021-03-25"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-25"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    void resetData() {","lastModifiedDate":"2021-03-25"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        PersonMeetingConnection reset \u003d new PersonMeetingConnection();","lastModifiedDate":"2021-03-25"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        reset.resetData(connection);","lastModifiedDate":"2021-03-25"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expected \u003d new UniqueMeetingList();","lastModifiedDate":"2021-03-25"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        expected.add(MEETING1);","lastModifiedDate":"2021-03-25"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        expected.add(MEETING2);","lastModifiedDate":"2021-03-25"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        expected.add(MEETING3);","lastModifiedDate":"2021-03-25"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getMeetingsByPerson(AMY), expected);","lastModifiedDate":"2021-03-25"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getMeetingsByPerson(BOB), expected);","lastModifiedDate":"2021-03-25"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        assertNotEquals(connection.getMeetingsByPerson(CARL), expected);","lastModifiedDate":"2021-03-25"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        assertNotEquals(connection.getMeetingsByPerson(HOON), null);","lastModifiedDate":"2021-03-25"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"    void getMeetingsByPerson() {","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expected \u003d new UniqueMeetingList();","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        expected.add(MEETING1);","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        expected.add(MEETING2);","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        expected.add(MEETING3);","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getMeetingsByPerson(AMY), expected);","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getMeetingsByPerson(BOB), expected);","lastModifiedDate":"2021-03-24"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"        assertNotEquals(connection.getMeetingsByPerson(CARL), expected);","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"        assertNotEquals(connection.getMeetingsByPerson(HOON), null);","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connectionCopy.getMeetingsByPerson(AMY), expected);","lastModifiedDate":"2021-03-25"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connectionCopy.getMeetingsByPerson(BOB), expected);","lastModifiedDate":"2021-03-25"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"        assertNotEquals(connectionCopy.getMeetingsByPerson(CARL), expected);","lastModifiedDate":"2021-03-25"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"        assertNotEquals(connectionCopy.getMeetingsByPerson(HOON), null);","lastModifiedDate":"2021-03-25"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"    void getPersonsByMeeting() {","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"        UniquePersonList expected \u003d new UniquePersonList();","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"        expected.add(AMY);","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"        expected.add(BOB);","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getPersonsByMeeting(MEETING1), expected);","lastModifiedDate":"2021-03-24"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getPersonsByMeeting(MEETING2), expected);","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getPersonsByMeeting(MEETING3), expected);","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"        assertNotEquals(connection.getPersonsByMeeting(MEETING4), expected);","lastModifiedDate":"2021-03-24"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        assertNotEquals(connection.getPersonsByMeeting(MEETING4), null);","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connectionCopy.getPersonsByMeeting(MEETING1), expected);","lastModifiedDate":"2021-03-25"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connectionCopy.getPersonsByMeeting(MEETING2), expected);","lastModifiedDate":"2021-03-25"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connectionCopy.getPersonsByMeeting(MEETING3), expected);","lastModifiedDate":"2021-03-25"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        assertNotEquals(connectionCopy.getPersonsByMeeting(MEETING4), expected);","lastModifiedDate":"2021-03-25"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"        assertNotEquals(connectionCopy.getPersonsByMeeting(MEETING4), null);","lastModifiedDate":"2021-03-25"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"    void addPersonMeetingConnection() {","lastModifiedDate":"2021-03-24"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(AMY, MEETING4);","lastModifiedDate":"2021-03-24"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"        connection.addPersonMeetingConnection(BOB, MEETING4);","lastModifiedDate":"2021-03-24"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expectedMeetings \u003d new UniqueMeetingList();","lastModifiedDate":"2021-03-24"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"        expectedMeetings.add(MEETING1);","lastModifiedDate":"2021-03-24"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"        expectedMeetings.add(MEETING2);","lastModifiedDate":"2021-03-24"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        expectedMeetings.add(MEETING3);","lastModifiedDate":"2021-03-24"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"        expectedMeetings.add(MEETING4);","lastModifiedDate":"2021-03-24"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getMeetingsByPerson(AMY), expectedMeetings);","lastModifiedDate":"2021-03-24"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getMeetingsByPerson(BOB), expectedMeetings);","lastModifiedDate":"2021-03-24"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"        assertNotEquals(connection.getMeetingsByPerson(CARL), expectedMeetings);","lastModifiedDate":"2021-03-24"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"        assertNotEquals(connection.getMeetingsByPerson(HOON), null);","lastModifiedDate":"2021-03-24"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"        UniquePersonList expectedPersons \u003d new UniquePersonList();","lastModifiedDate":"2021-03-24"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"        expectedPersons.add(AMY);","lastModifiedDate":"2021-03-24"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"        expectedPersons.add(BOB);","lastModifiedDate":"2021-03-24"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getPersonsByMeeting(MEETING1), expectedPersons);","lastModifiedDate":"2021-03-24"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getPersonsByMeeting(MEETING2), expectedPersons);","lastModifiedDate":"2021-03-24"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getPersonsByMeeting(MEETING3), expectedPersons);","lastModifiedDate":"2021-03-24"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getPersonsByMeeting(MEETING4), expectedPersons);","lastModifiedDate":"2021-03-24"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"    void deleteSinglePersonMeetingConnection() {","lastModifiedDate":"2021-03-24"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"        connection.deleteSinglePersonMeetingConnection(BOB, MEETING3);","lastModifiedDate":"2021-03-24"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"        connection.deleteSinglePersonMeetingConnection(AMY, MEETING3);","lastModifiedDate":"2021-03-24"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expectedMeetings \u003d new UniqueMeetingList();","lastModifiedDate":"2021-03-24"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"        expectedMeetings.add(MEETING1);","lastModifiedDate":"2021-03-24"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"        expectedMeetings.add(MEETING2);","lastModifiedDate":"2021-03-24"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getMeetingsByPerson(AMY), expectedMeetings);","lastModifiedDate":"2021-03-24"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getMeetingsByPerson(BOB), expectedMeetings);","lastModifiedDate":"2021-03-24"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"        assertNotEquals(connection.getMeetingsByPerson(CARL), expectedMeetings);","lastModifiedDate":"2021-03-24"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"        assertNotEquals(connection.getMeetingsByPerson(HOON), null);","lastModifiedDate":"2021-03-24"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"        UniquePersonList expectedPersons \u003d new UniquePersonList();","lastModifiedDate":"2021-03-24"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"        expectedPersons.add(AMY);","lastModifiedDate":"2021-03-24"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"        expectedPersons.add(BOB);","lastModifiedDate":"2021-03-24"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getPersonsByMeeting(MEETING1), expectedPersons);","lastModifiedDate":"2021-03-24"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getPersonsByMeeting(MEETING2), expectedPersons);","lastModifiedDate":"2021-03-24"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"        assertNotEquals(connection.getPersonsByMeeting(MEETING4), expectedPersons);","lastModifiedDate":"2021-03-24"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"        assertNotEquals(connection.getPersonsByMeeting(MEETING4), null);","lastModifiedDate":"2021-03-24"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"    void deleteAllPersonMeetingConnectionByPerson() {","lastModifiedDate":"2021-03-24"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":"        connection.deleteAllPersonMeetingConnectionByPerson(AMY);","lastModifiedDate":"2021-03-24"},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":"        connection.deleteAllPersonMeetingConnectionByPerson(CARL);","lastModifiedDate":"2021-03-24"},{"lineNumber":143,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":144,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expectedMeetings \u003d new UniqueMeetingList();","lastModifiedDate":"2021-03-24"},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"        expectedMeetings.add(MEETING1);","lastModifiedDate":"2021-03-24"},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"        expectedMeetings.add(MEETING2);","lastModifiedDate":"2021-03-24"},{"lineNumber":147,"author":{"gitId":"skinnychenpi"},"content":"        expectedMeetings.add(MEETING3);","lastModifiedDate":"2021-03-24"},{"lineNumber":148,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getMeetingsByPerson(AMY), new UniqueMeetingList());","lastModifiedDate":"2021-03-24"},{"lineNumber":149,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getMeetingsByPerson(BOB), expectedMeetings);","lastModifiedDate":"2021-03-24"},{"lineNumber":150,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getMeetingsByPerson(CARL), new UniqueMeetingList());","lastModifiedDate":"2021-03-24"},{"lineNumber":151,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":152,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":153,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":154,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":155,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":156,"author":{"gitId":"skinnychenpi"},"content":"    void deleteAllPersonMeetingConnectionByMeeting() {","lastModifiedDate":"2021-03-24"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":"        connection.deleteAllPersonMeetingConnectionByMeeting(MEETING1);","lastModifiedDate":"2021-03-24"},{"lineNumber":158,"author":{"gitId":"skinnychenpi"},"content":"        connection.deleteAllPersonMeetingConnectionByMeeting(MEETING4);","lastModifiedDate":"2021-03-24"},{"lineNumber":159,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":160,"author":{"gitId":"skinnychenpi"},"content":"        UniquePersonList expectedPersons \u003d new UniquePersonList();","lastModifiedDate":"2021-03-24"},{"lineNumber":161,"author":{"gitId":"skinnychenpi"},"content":"        expectedPersons.add(AMY);","lastModifiedDate":"2021-03-24"},{"lineNumber":162,"author":{"gitId":"skinnychenpi"},"content":"        expectedPersons.add(BOB);","lastModifiedDate":"2021-03-24"},{"lineNumber":163,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":164,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getPersonsByMeeting(MEETING1), new UniquePersonList());","lastModifiedDate":"2021-03-24"},{"lineNumber":165,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getPersonsByMeeting(MEETING2), expectedPersons);","lastModifiedDate":"2021-03-24"},{"lineNumber":166,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getPersonsByMeeting(MEETING3), expectedPersons);","lastModifiedDate":"2021-03-24"},{"lineNumber":167,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(connection.getPersonsByMeeting(MEETING4), new UniquePersonList());","lastModifiedDate":"2021-03-24"},{"lineNumber":168,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":169,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":170,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-27"},{"lineNumber":171,"author":{"gitId":"skinnychenpi"},"content":"    void duplicatePersonMeetingConnection_throwsDuplicateConnectionException() {","lastModifiedDate":"2021-03-27"},{"lineNumber":172,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(DuplicateConnectionException.class, ()-\u003econnection.addPersonMeetingConnection(AMY, MEETING1));","lastModifiedDate":"2021-03-27"},{"lineNumber":173,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":174,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"skinnychenpi":174}},{"path":"src/test/java/seedu/address/model/group/GroupTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.model.group;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"public class GroupTest {","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Group(null));","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"    public void constructor_invalidGroupName_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"        String invalidGroupName \u003d \"\";","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Group(invalidGroupName));","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"    public void isValidGroupName() {","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"        // null tag name","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(NullPointerException.class, () -\u003e Group.isValidGroupName(null));","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"hengyiqun":26}},{"path":"src/test/java/seedu/address/model/meeting/DateTimeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"class DateTimeTest {","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DateTime((String) null));","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_invalidDateTime_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        String invalidDateTime \u003d \"\";","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(invalidDateTime));","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    public void isValidDateTime() {","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        // null address","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateTime.isValidDateTime(null));","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        // invalid DateTime","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(DateTime.isValidDateTime(\" \")); // spaces only","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(DateTime.isValidDateTime(\"2020/01/02 19:00\"));","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(DateTime.isValidDateTime(\"2021-13-02 18:00\"));","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(DateTime.isValidDateTime(\"2021-11-02 25:00\"));","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        // valid DateTime","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(DateTime.isValidDateTime(\"2021-11-02 23:00\"));","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"Maurice2n97":5,"skinnychenpi":32}},{"path":"src/test/java/seedu/address/model/meeting/MeetingTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"class MeetingTest {","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    private static final MeetingName MEETING_NAME \u003d new MeetingName(\"CS2103 seminar\");","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    private static final DateTime START \u003d new DateTime(\"2021-03-11 15:04\");","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    private static final DateTime TERMINATE \u003d new DateTime(\"2021-03-11 16:04\");","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    private static final Priority PRIORITY \u003d new Priority(\"4\");","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    private static final Description DESCRIPTION \u003d new Description(\"This is the time skinnychenpi write this test.\");","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"    private static final Group GROUP \u003d new Group(\"MeetingTest\");","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    private Set\u003cGroup\u003e groups \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    public void isSameMeeting() {","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        Meeting meeting \u003d new Meeting(MEETING_NAME, START, TERMINATE, PRIORITY, DESCRIPTION, groups);","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        Meeting meeting2 \u003d new Meeting(MEETING_NAME, START, TERMINATE, new Priority(\"1\"),","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"                new Description(\"Test\"), groups);","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(meeting.isSameMeeting(meeting2));","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"        Meeting meeting3 \u003d new Meeting(MEETING_NAME, new DateTime(\"2021-03-11 15:05\"),","lastModifiedDate":"2021-03-25"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"                TERMINATE, PRIORITY, DESCRIPTION, groups);","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(meeting.isSameMeeting(meeting3));","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    public void isValidMeeting() {","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Meeting(MEETING_NAME, TERMINATE, TERMINATE,","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"                PRIORITY, DESCRIPTION, groups));","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        // Check if start time later than terminate time will throw an error.","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Meeting(MEETING_NAME, TERMINATE, START,","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"                PRIORITY, DESCRIPTION, groups));","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    //    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    //    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"    //        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"    //        assertThrows(UnsupportedOperationException.class, () -\u003e person.getGroups().remove(0));","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"    //    }","lastModifiedDate":"2021-03-11"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"Maurice2n97":15,"skinnychenpi":34,"hengyiqun":3}},{"path":"src/test/java/seedu/address/model/meeting/PriorityTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class PriorityTest {","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Priority(null));","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_invalidPriority_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        String invalidPriority \u003d \"\";","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_outOfRangePriority_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        String invalidPriority \u003d \"6\";","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public void isValidPriority() {","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        // null priority","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e Priority.isValidPriority(null));","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        // invalid priority","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(Priority.isValidPriority(\" \")); // spaces only","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(Priority.isValidPriority(\"0\"));","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(Priority.isValidPriority(\"9\"));","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(Priority.isValidPriority(\"2.2\"));","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        // valid priority","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(Priority.isValidPriority(\"1\"));","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(Priority.isValidPriority(\"3\")); // one character","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"skinnychenpi":44}},{"path":"src/test/java/seedu/address/model/meeting/UniqueMeetingListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING1;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING2;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.exceptions.DuplicateMeetingException;","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.exceptions.MeetingNotFoundException;","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.testutil.MeetingBuilder;","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"class UniqueMeetingListTest {","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    private final UniqueMeetingList uniqueMeetingList \u003d new UniqueMeetingList();","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.contains(null));","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(uniqueMeetingList.contains(MEETING1));","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(uniqueMeetingList.contains(MEETING1));","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"        Meeting editedMeeting1 \u003d new MeetingBuilder(MEETING1).withPriority(\"1\").withGroups(\"RandomTag\")","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"                .build();","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(uniqueMeetingList.contains(editedMeeting1));","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.add(null));","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.add(MEETING1));","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeeting(null, MEETING1));","lastModifiedDate":"2021-03-11"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeeting(MEETING1, null));","lastModifiedDate":"2021-03-11"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(MeetingNotFoundException.class, () -\u003e uniqueMeetingList.setMeeting(MEETING1, MEETING1));","lastModifiedDate":"2021-03-11"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_editedPersonIsSamePerson_success() {","lastModifiedDate":"2021-03-11"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);","lastModifiedDate":"2021-03-11"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.setMeeting(MEETING1, MEETING1);","lastModifiedDate":"2021-03-11"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();","lastModifiedDate":"2021-03-11"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        expecteduniqueMeetingList.add(MEETING1);","lastModifiedDate":"2021-03-11"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);","lastModifiedDate":"2021-03-11"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2021-03-11"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);","lastModifiedDate":"2021-03-11"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"        Meeting editedMeeting1 \u003d new MeetingBuilder(MEETING1).withPriority(\"1\").withGroups(\"randomTag\")","lastModifiedDate":"2021-03-16"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"                .build();","lastModifiedDate":"2021-03-11"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"        uniqueMeetingList.setMeeting(MEETING1, editedMeeting1);","lastModifiedDate":"2021-03-16"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();","lastModifiedDate":"2021-03-11"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"        expecteduniqueMeetingList.add(editedMeeting1);","lastModifiedDate":"2021-03-16"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);","lastModifiedDate":"2021-03-11"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2021-03-11"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);","lastModifiedDate":"2021-03-11"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.setMeeting(MEETING1, MEETING2);","lastModifiedDate":"2021-03-11"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();","lastModifiedDate":"2021-03-11"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"        expecteduniqueMeetingList.add(MEETING2);","lastModifiedDate":"2021-03-11"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);","lastModifiedDate":"2021-03-11"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);","lastModifiedDate":"2021-03-11"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING2);","lastModifiedDate":"2021-03-11"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.setMeeting(MEETING1, MEETING2));","lastModifiedDate":"2021-03-11"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.remove(null));","lastModifiedDate":"2021-03-11"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(MeetingNotFoundException.class, () -\u003e uniqueMeetingList.remove(MEETING1));","lastModifiedDate":"2021-03-11"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2021-03-11"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);","lastModifiedDate":"2021-03-11"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.remove(MEETING1);","lastModifiedDate":"2021-03-11"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();","lastModifiedDate":"2021-03-11"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);","lastModifiedDate":"2021-03-11"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings_nulluniqueMeetingList_throwsNullPointerException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeetings((UniqueMeetingList) null));","lastModifiedDate":"2021-03-11"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings_uniqueMeetingList_replacesOwnListWithProvideduniqueMeetingList() {","lastModifiedDate":"2021-03-11"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);","lastModifiedDate":"2021-03-11"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();","lastModifiedDate":"2021-03-11"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"        expecteduniqueMeetingList.add(MEETING2);","lastModifiedDate":"2021-03-11"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.setMeetings(expecteduniqueMeetingList);","lastModifiedDate":"2021-03-11"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);","lastModifiedDate":"2021-03-11"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":143,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings_nullList_throwsNullPointerException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":144,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeetings((List\u003cMeeting\u003e) null));","lastModifiedDate":"2021-03-11"},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":147,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":148,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2021-03-11"},{"lineNumber":149,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);","lastModifiedDate":"2021-03-11"},{"lineNumber":150,"author":{"gitId":"skinnychenpi"},"content":"        List\u003cMeeting\u003e personList \u003d Collections.singletonList(MEETING2);","lastModifiedDate":"2021-03-11"},{"lineNumber":151,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.setMeetings(personList);","lastModifiedDate":"2021-03-11"},{"lineNumber":152,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();","lastModifiedDate":"2021-03-11"},{"lineNumber":153,"author":{"gitId":"skinnychenpi"},"content":"        expecteduniqueMeetingList.add(MEETING2);","lastModifiedDate":"2021-03-11"},{"lineNumber":154,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);","lastModifiedDate":"2021-03-11"},{"lineNumber":155,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":156,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":158,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":159,"author":{"gitId":"skinnychenpi"},"content":"        List\u003cMeeting\u003e listWithDuplicatePersons \u003d Arrays.asList(MEETING1, MEETING1);","lastModifiedDate":"2021-03-11"},{"lineNumber":160,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.setMeetings(listWithDuplicatePersons));","lastModifiedDate":"2021-03-11"},{"lineNumber":161,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":162,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":163,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-11"},{"lineNumber":164,"author":{"gitId":"skinnychenpi"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":165,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e","lastModifiedDate":"2021-03-16"},{"lineNumber":166,"author":{"gitId":"Maurice2n97"},"content":"                uniqueMeetingList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2021-03-16"},{"lineNumber":167,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":168,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"Maurice2n97":16,"skinnychenpi":151,"hengyiqun":1}},{"path":"src/test/java/seedu/address/model/person/PersonNameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"public class PersonNameContainsKeywordsPredicateTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"skinnychenpi":1,"-":74}},{"path":"src/test/java/seedu/address/model/person/PersonNameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"public class PersonNameTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e new PersonName(null));","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new PersonName(invalidName));","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    public void isValidName() {","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        // null name","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e PersonName.isValidName(null));","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        // invalid name","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(PersonName.isValidName(\"\")); // empty string","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(PersonName.isValidName(\" \")); // spaces only","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(PersonName.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(PersonName.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        // valid name","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(PersonName.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(PersonName.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(PersonName.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(PersonName.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(PersonName.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"skinnychenpi":40}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_GROUP_HUSBAND;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getGroups().remove(0));","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"                .withAddress(VALID_ADDRESS_BOB).withGroups(VALID_GROUP_HUSBAND).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":87,"author":{"gitId":"hengyiqun"},"content":"        // different groups -\u003e returns false","lastModifiedDate":"2021-03-14"},{"lineNumber":88,"author":{"gitId":"hengyiqun"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withGroups(VALID_GROUP_HUSBAND).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"skinnychenpi":5,"hengyiqun":4,"-":82}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-08-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_GROUP_HUSBAND;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withGroups(VALID_GROUP_HUSBAND)","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"hengyiqun"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withGroups(VALID_GROUP_HUSBAND)","lastModifiedDate":"2021-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"skinnychenpi":2,"hengyiqun":2,"-":166}},{"path":"src/test/java/seedu/address/model/reminder/ReminderTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"package seedu.address.model.reminder;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.DateTime;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.MeetingName;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"import seedu.address.model.meeting.Priority;","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"class ReminderTest {","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"    Reminder sampleReminder \u003d new Reminder(new MeetingName(\"meeting\"),","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"            new DateTime(\"2021-04-05 17:00\"),","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"            new Priority(\"2\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"    void getMeetingName() {","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":"        MeetingName name \u003d sampleReminder.getMeetingName();","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"        assertEquals(name.fullName, \"meeting\");","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"totoyoyo"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":"    void getStartDate() {","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"totoyoyo"},"content":"    void getPriority() {","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"totoyoyo"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"totoyoyo"},"content":"    void updateTimeAndDaysUntil() {","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"totoyoyo"},"content":"//    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"totoyoyo"},"content":"//    void yearTimeUntilToString() {","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"totoyoyo"},"content":"//        String out \u003d sampleReminder.yearTimeUntilToString();","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"totoyoyo"},"content":"//        assertTrue(out.contains(\"years\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"totoyoyo"},"content":"//        assertTrue(out.contains(\"months\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"totoyoyo"},"content":"//        assertTrue(out.contains(\"days\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"totoyoyo"},"content":"//        assertTrue(out.contains(\"hours\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"totoyoyo"},"content":"//        assertTrue(out.contains(\"minutes\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"totoyoyo"},"content":"//        assertTrue(out.contains(\"seconds\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"totoyoyo"},"content":"//        assertEquals(\"hey\", out);","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"totoyoyo"},"content":"//    }","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"totoyoyo"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"totoyoyo"},"content":"    void dayTimeUntilToString() {","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"totoyoyo"},"content":"        String out \u003d sampleReminder.dayTimeUntilToString();","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"totoyoyo"},"content":"        assertFalse(out.contains(\"years\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"totoyoyo"},"content":"        assertFalse(out.contains(\"months\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"totoyoyo"},"content":"        assertTrue(out.contains(\"days\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"totoyoyo"},"content":"        assertTrue(out.contains(\"hours\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"totoyoyo"},"content":"        assertTrue(out.contains(\"minutes\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"totoyoyo"},"content":"        assertTrue(out.contains(\"seconds\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"totoyoyo"},"content":"//        assertEquals(\"hey\", out);","lastModifiedDate":"2021-03-25"},{"lineNumber":57,"author":{"gitId":"totoyoyo"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"totoyoyo"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"totoyoyo"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"totoyoyo":59}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedMeetingTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING1;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.DateTime;","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Description;","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.MeetingName;","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Priority;","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.PersonName;","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.addressbook.JsonAdaptedGroup;","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.meetingbook.JsonAdaptedMeeting;","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"public class JsonAdaptedMeetingTest {","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    private static final String INVALID_NAME \u003d \"NANI%\";","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    private static final String INVALID_PRIORITY \u003d \"7\";","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    private static final String INVALID_START \u003d \"2020:5:6 42:25\";","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    private static final String INVALID_END \u003d \"2020-4-0 99:99\";","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    private static final String INVALID_TAG \u003d \"@What\";","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    private static final String VALID_NAME \u003d MEETING1.getName().fullName;","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    private static final String VALID_DESCRIPTION \u003d MEETING1.getDescription().fullDescription;","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    private static final String VALID_START \u003d MEETING1.getStart().toIsoFormatString();","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    private static final String VALID_END \u003d MEETING1.getTerminate().toIsoFormatString();","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    private static final String VALID_PRIORITY \u003d MEETING1.getPriority().toString();","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"    private static final List\u003cJsonAdaptedGroup\u003e VALID_TAGS \u003d MEETING1.getGroups().stream()","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"            .map(JsonAdaptedGroup::new)","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_validMeetingDetails_success() throws Exception {","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d new JsonAdaptedMeeting(MEETING1);","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(jsonMeeting.toModelType(), MEETING1);","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(INVALID_NAME, VALID_START, VALID_END,","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, VALID_PRIORITY, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d PersonName.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(null, VALID_START, VALID_END,","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, VALID_PRIORITY, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"                JsonAdaptedMeeting.MISSING_FIELD_MESSAGE_FORMAT, MeetingName.class.getSimpleName());","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_invalidStartTime_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME, INVALID_START, VALID_END,","lastModifiedDate":"2021-03-14"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, VALID_PRIORITY, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d DateTime.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-14"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_nullStartTime_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME , null, VALID_END,","lastModifiedDate":"2021-03-14"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, VALID_PRIORITY, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-03-14"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"                JsonAdaptedMeeting.MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName());","lastModifiedDate":"2021-03-14"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_invalidEndTime_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME, VALID_START, INVALID_END,","lastModifiedDate":"2021-03-14"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, VALID_PRIORITY, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d DateTime.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-14"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_nullEndTime_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME , VALID_START, null,","lastModifiedDate":"2021-03-14"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, VALID_PRIORITY, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-03-14"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"                JsonAdaptedMeeting.MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName());","lastModifiedDate":"2021-03-14"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_nullDescription_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME , VALID_START, VALID_END,","lastModifiedDate":"2021-03-14"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"                        null, VALID_PRIORITY, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-03-14"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"                JsonAdaptedMeeting.MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());","lastModifiedDate":"2021-03-14"},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_invalidPriority_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME, VALID_START, VALID_END,","lastModifiedDate":"2021-03-14"},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, INVALID_PRIORITY, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-14"},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":121,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":122,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_nullPriority_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME , VALID_START, VALID_END,","lastModifiedDate":"2021-03-14"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, null, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2021-03-14"},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":"                JsonAdaptedMeeting.MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());","lastModifiedDate":"2021-03-14"},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":132,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":133,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":134,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":135,"author":{"gitId":"hengyiqun"},"content":"        List\u003cJsonAdaptedGroup\u003e invalidJsonGroups \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":136,"author":{"gitId":"hengyiqun"},"content":"        invalidJsonGroups.add(new JsonAdaptedGroup(INVALID_TAG));","lastModifiedDate":"2021-03-14"},{"lineNumber":137,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":138,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME, VALID_START, VALID_END,","lastModifiedDate":"2021-03-14"},{"lineNumber":139,"author":{"gitId":"hengyiqun"},"content":"                        VALID_DESCRIPTION, VALID_PRIORITY, invalidJsonGroups);","lastModifiedDate":"2021-03-14"},{"lineNumber":140,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-14"},{"lineNumber":141,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, jsonMeeting::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":142,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":143,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":144,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":145,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_swappedStartEndTimes_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":146,"author":{"gitId":"Maurice2n97"},"content":"        assertTrue(VALID_END.compareTo(VALID_START) \u003d\u003d 1);","lastModifiedDate":"2021-03-14"},{"lineNumber":147,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":148,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME , VALID_END, VALID_START,","lastModifiedDate":"2021-03-14"},{"lineNumber":149,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, VALID_PRIORITY, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":150,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d Meeting.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-14"},{"lineNumber":151,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":152,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":153,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":154,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":155,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":156,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"Maurice2n97":148,"skinnychenpi":3,"hengyiqun":5}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.storage.addressbook.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.PersonName;","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.addressbook.JsonAdaptedGroup;","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.addressbook.JsonAdaptedPerson;","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"    private static final List\u003cJsonAdaptedGroup\u003e VALID_TAGS \u003d BENSON.getGroups().stream()","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"            .map(JsonAdaptedGroup::new)","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d PersonName.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PersonName.class.getSimpleName());","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"hengyiqun"},"content":"        List\u003cJsonAdaptedGroup\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":106,"author":{"gitId":"hengyiqun"},"content":"        invalidTags.add(new JsonAdaptedGroup(INVALID_TAG));","lastModifiedDate":"2021-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Maurice2n97":3,"skinnychenpi":3,"hengyiqun":4,"-":102}},{"path":"src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.addressbook.JsonAddressBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Maurice2n97":1,"skinnychenpi":2,"-":108}},{"path":"src/test/java/seedu/address/storage/JsonMeetingBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-18"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING1;","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING6;","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-18"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-18"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-18"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.ReadOnlyMeetingBook;","lastModifiedDate":"2021-03-18"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.meetingbook.JsonMeetingBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"public class JsonMeetingBookStorageTest {","lastModifiedDate":"2021-03-18"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonMeetingBookStorageTest\");","lastModifiedDate":"2021-03-18"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    @TempDir","lastModifiedDate":"2021-03-18"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    public Path testFolder;","lastModifiedDate":"2021-03-18"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    public void readMeetingsBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-03-18"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(NullPointerException.class, () -\u003e readMeetingBook(null));","lastModifiedDate":"2021-03-18"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    private java.util.Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook(String filePath) throws Exception {","lastModifiedDate":"2021-03-18"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"        return new JsonMeetingBookStorage(Paths.get(filePath)).readMeetingBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-03-18"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2021-03-18"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2021-03-18"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2021-03-18"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"                : null;","lastModifiedDate":"2021-03-18"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"    public void readMeetingBook_missingFile_returnsEmptyOptional() throws Exception {","lastModifiedDate":"2021-03-18"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(readMeetingBook(\"NonExistentFile.json\"), Optional.empty());","lastModifiedDate":"2021-03-18"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"    public void readMeetingBook_invalidMeetingFile_throwsDataConversionException() throws Exception {","lastModifiedDate":"2021-03-18"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(DataConversionException.class, () -\u003e readMeetingBook(\"invalidMeetingMeetingBook.json\"));","lastModifiedDate":"2021-03-18"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"    public void readMeetingBook_invalidJsonFormatFile_throwsDataConversionException() throws Exception {","lastModifiedDate":"2021-03-18"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(DataConversionException.class, () -\u003e readMeetingBook(\"notJsonFormatMeetingBook.json\"));","lastModifiedDate":"2021-03-18"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"    public void readMeetingBook_invalidAndValidMeetingFile_throwsDataConversionException() throws Exception {","lastModifiedDate":"2021-03-18"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(DataConversionException.class, () -\u003e readMeetingBook(\"invalidAndValidMeetingMeetingBook.json\"));","lastModifiedDate":"2021-03-18"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"    public void readAndSaveMeetingBook_allInOrder_success() throws Exception {","lastModifiedDate":"2021-03-18"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2021-03-18"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"        MeetingBook original \u003d getTypicalMeetingBook();","lastModifiedDate":"2021-03-18"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"        JsonMeetingBookStorage jsonMeetingBookStorage \u003d new JsonMeetingBookStorage(filePath);","lastModifiedDate":"2021-03-18"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"        // Save in new file and read back","lastModifiedDate":"2021-03-18"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"        jsonMeetingBookStorage.saveMeetingBook(original, filePath);","lastModifiedDate":"2021-03-18"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"        ReadOnlyMeetingBook readBack \u003d jsonMeetingBookStorage.readMeetingBook(filePath).get();","lastModifiedDate":"2021-03-18"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(original, new MeetingBook(readBack));","lastModifiedDate":"2021-03-18"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2021-03-18"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"        original.addMeeting(MEETING6);","lastModifiedDate":"2021-03-18"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"        original.removeMeeting(MEETING1);","lastModifiedDate":"2021-03-18"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"        jsonMeetingBookStorage.saveMeetingBook(original, filePath);","lastModifiedDate":"2021-03-18"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"        readBack \u003d jsonMeetingBookStorage.readMeetingBook(filePath).get();","lastModifiedDate":"2021-03-18"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(original, new MeetingBook(readBack));","lastModifiedDate":"2021-03-18"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2021-03-18"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"        original.addMeeting(MEETING1);","lastModifiedDate":"2021-03-18"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"        jsonMeetingBookStorage.saveMeetingBook(original); // file path not specified","lastModifiedDate":"2021-03-18"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"        readBack \u003d jsonMeetingBookStorage.readMeetingBook().get(); // file path not specified","lastModifiedDate":"2021-03-18"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(original, new MeetingBook(readBack));","lastModifiedDate":"2021-03-18"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"    public void saveMeetingBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2021-03-18"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveMeetingBook(null, \"SomeFile.json\"));","lastModifiedDate":"2021-03-18"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"     * Saves {@code MeetingBook} at the specified {@code filePath}.","lastModifiedDate":"2021-03-18"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"    private void saveMeetingBook(ReadOnlyMeetingBook meetingBook, String filePath) {","lastModifiedDate":"2021-03-18"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"        try {","lastModifiedDate":"2021-03-18"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"            new JsonMeetingBookStorage(Paths.get(filePath))","lastModifiedDate":"2021-03-18"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"                    .saveMeetingBook(meetingBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-03-18"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-03-18"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2021-03-18"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-03-18"},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveMeetingBook(new MeetingBook(), null));","lastModifiedDate":"2021-03-18"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-18"}],"authorContributionMap":{"Maurice2n97":113}},{"path":"src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.addressbook.JsonSerializableAddressBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.testutil.TypicalPersons;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Maurice2n97":1,"skinnychenpi":1,"-":46}},{"path":"src/test/java/seedu/address/storage/JsonSerializableMeetingBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-18"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2021-03-18"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-03-18"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.meetingbook.JsonSerializableMeetingBook;","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.testutil.TypicalMeetings;","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"public class JsonSerializableMeetingBookTest {","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableMeetingBookTest\");","lastModifiedDate":"2021-03-18"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    private static final Path TYPICAL_MEETINGS_FILE \u003d TEST_DATA_FOLDER.resolve(\"sampleMeetingBook.json\");","lastModifiedDate":"2021-03-18"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    private static final Path INVALID_MEETINGS_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidMeetingsMeetingBook.json\");","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    private static final Path DUPLICATE_MEETINGS_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateMeetingsMeetingBook.json\");","lastModifiedDate":"2021-03-18"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2021-03-18"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        JsonSerializableMeetingBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_MEETINGS_FILE,","lastModifiedDate":"2021-03-18"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"                JsonSerializableMeetingBook.class).get();","lastModifiedDate":"2021-03-18"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        MeetingBook meetingBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2021-03-18"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        MeetingBook typicalPersonsAddressBook \u003d TypicalMeetings.getSampleMeetingBook();","lastModifiedDate":"2021-03-18"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(meetingBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2021-03-18"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_invalidMeetingFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-03-18"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"        JsonSerializableMeetingBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_MEETINGS_FILE,","lastModifiedDate":"2021-03-18"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"                JsonSerializableMeetingBook.class).get();","lastModifiedDate":"2021-03-18"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2021-03-18"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-03-18"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"        JsonSerializableMeetingBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MEETINGS_FILE,","lastModifiedDate":"2021-03-18"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"                JsonSerializableMeetingBook.class).get();","lastModifiedDate":"2021-03-18"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableMeetingBook.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2021-03-18"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2021-03-18"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-03-18"}],"authorContributionMap":{"Maurice2n97":49}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.addressbook.JsonAddressBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.connection.JsonConnectionStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.meetingbook.JsonMeetingBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.storage.notebook.JsonNoteBookStorage;","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"        JsonMeetingBookStorage meetingBookStorage \u003d new JsonMeetingBookStorage(getTempFilePath(\"mb\"));","lastModifiedDate":"2021-03-18"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"        JsonNoteBookStorage noteBookStorage \u003d new JsonNoteBookStorage(getTempFilePath(\"nb\"));","lastModifiedDate":"2021-04-09"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"        JsonConnectionStorage jsonConnectionStorage \u003d new JsonConnectionStorage(getTempFilePath(\"connections\"));","lastModifiedDate":"2021-04-09"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, meetingBookStorage,","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"                noteBookStorage, userPrefsStorage, jsonConnectionStorage);","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Maurice2n97":7,"skinnychenpi":2,"hengyiqun":2,"-":65}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2018-03-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2016-09-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook build() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"skinnychenpi":1,"-":33}},{"path":"src/test/java/seedu/address/testutil/EditMeetingDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import java.util.Date;","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import java.util.Set;","lastModifiedDate":"2021-04-09"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-04-09"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-04-09"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.logic.commands.meetings.EditMeetingCommand.EditMeetingDescriptor;","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.meeting.DateTime;","lastModifiedDate":"2021-04-09"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.meeting.Description;","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.meeting.MeetingName;","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.meeting.Priority;","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"public class EditMeetingDescriptorBuilder {","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"    private EditMeetingDescriptor descriptor;","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"    public EditMeetingDescriptorBuilder() {","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"        descriptor \u003d new EditMeetingDescriptor();","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"    public EditMeetingDescriptorBuilder(EditMeetingDescriptor descriptor) {","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"        this.descriptor \u003d new EditMeetingDescriptor(descriptor);","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"     * Returns an {@code EditMeetingDescriptor} with fields containing {@code meeting}\u0027s details","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"    public EditMeetingDescriptorBuilder(Meeting meeting) {","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"        descriptor \u003d new EditMeetingDescriptor();","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"        descriptor.setName(meeting.getName());","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"        descriptor.setStart(meeting.getStart());","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"        descriptor.setTerminate(meeting.getTerminate());","lastModifiedDate":"2021-04-09"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"        descriptor.setPriority(meeting.getPriority());","lastModifiedDate":"2021-04-09"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"        descriptor.setDescription(meeting.getDescription());","lastModifiedDate":"2021-04-09"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"        descriptor.setGroups(meeting.getGroups());","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"     * Sets the {@code MeetingName} of the {@code EditMeetingDescriptor} that we are building.","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"    public EditMeetingDescriptorBuilder withName(String name) {","lastModifiedDate":"2021-04-09"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"        descriptor.setName(new MeetingName(name));","lastModifiedDate":"2021-04-09"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"        return this;","lastModifiedDate":"2021-04-09"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"     * Sets the {@code Start} of the {@code EditMeetingDescriptor} that we are building.","lastModifiedDate":"2021-04-09"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"    public EditMeetingDescriptorBuilder withStart(String start) {","lastModifiedDate":"2021-04-09"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"        descriptor.setStart(new DateTime(start));","lastModifiedDate":"2021-04-09"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"        return this;","lastModifiedDate":"2021-04-09"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"     * Sets the {@code Terminate} of the {@code EditMeetingDescriptor} that we are building.","lastModifiedDate":"2021-04-09"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"    public EditMeetingDescriptorBuilder withTerminate(String terminate) {","lastModifiedDate":"2021-04-09"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"        descriptor.setTerminate(new DateTime(terminate));","lastModifiedDate":"2021-04-09"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"        return this;","lastModifiedDate":"2021-04-09"},{"lineNumber":62,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":64,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":65,"author":{"gitId":"hengyiqun"},"content":"     * Sets the {@code Priority} of the {@code EditMeetingDescriptor} that we are building.","lastModifiedDate":"2021-04-09"},{"lineNumber":66,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":67,"author":{"gitId":"hengyiqun"},"content":"    public EditMeetingDescriptorBuilder withPriority(String priority) {","lastModifiedDate":"2021-04-09"},{"lineNumber":68,"author":{"gitId":"hengyiqun"},"content":"        descriptor.setPriority(new Priority(priority));","lastModifiedDate":"2021-04-09"},{"lineNumber":69,"author":{"gitId":"hengyiqun"},"content":"        return this;","lastModifiedDate":"2021-04-09"},{"lineNumber":70,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":71,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":72,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":73,"author":{"gitId":"hengyiqun"},"content":"     * Sets the {@code Priority} of the {@code EditMeetingDescriptor} that we are building.","lastModifiedDate":"2021-04-09"},{"lineNumber":74,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":75,"author":{"gitId":"hengyiqun"},"content":"    public EditMeetingDescriptorBuilder withDescription(String description) {","lastModifiedDate":"2021-04-09"},{"lineNumber":76,"author":{"gitId":"hengyiqun"},"content":"        descriptor.setDescription(new Description(description));","lastModifiedDate":"2021-04-09"},{"lineNumber":77,"author":{"gitId":"hengyiqun"},"content":"        return this;","lastModifiedDate":"2021-04-09"},{"lineNumber":78,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":79,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":80,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-09"},{"lineNumber":81,"author":{"gitId":"hengyiqun"},"content":"     * Parses the {@code groups} into a {@code Set\u003cGroup\u003e} and set it to the {@code EditMeetingDescriptor}","lastModifiedDate":"2021-04-09"},{"lineNumber":82,"author":{"gitId":"hengyiqun"},"content":"     * that we are building.","lastModifiedDate":"2021-04-09"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-09"},{"lineNumber":84,"author":{"gitId":"hengyiqun"},"content":"    public EditMeetingDescriptorBuilder withGroups(String... groups) {","lastModifiedDate":"2021-04-09"},{"lineNumber":85,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e groupSet \u003d Stream.of(groups).map(Group::new).collect(Collectors.toSet());","lastModifiedDate":"2021-04-09"},{"lineNumber":86,"author":{"gitId":"hengyiqun"},"content":"        descriptor.setGroups(groupSet);","lastModifiedDate":"2021-04-09"},{"lineNumber":87,"author":{"gitId":"hengyiqun"},"content":"        return this;","lastModifiedDate":"2021-04-09"},{"lineNumber":88,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":89,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":90,"author":{"gitId":"hengyiqun"},"content":"    public EditMeetingDescriptor build() {","lastModifiedDate":"2021-04-09"},{"lineNumber":91,"author":{"gitId":"hengyiqun"},"content":"        return descriptor;","lastModifiedDate":"2021-04-09"},{"lineNumber":92,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-09"},{"lineNumber":93,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":94,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-04-09"}],"authorContributionMap":{"hengyiqun":94}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-12-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-12-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.PersonName;","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-12-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"        descriptor.setGroups(person.getGroups());","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the {@code PersonName} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        descriptor.setName(new PersonName(name));","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"hengyiqun"},"content":"     * Parses the {@code groups} into a {@code Set\u003cGroup\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"hengyiqun"},"content":"    public EditPersonDescriptorBuilder withGroups(String... groups) {","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e groupSet \u003d Stream.of(groups).map(Group::new).collect(Collectors.toSet());","lastModifiedDate":"2021-03-14"},{"lineNumber":80,"author":{"gitId":"hengyiqun"},"content":"        descriptor.setGroups(groupSet);","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"Maurice2n97":2,"skinnychenpi":3,"hengyiqun":5,"-":77}},{"path":"src/test/java/seedu/address/testutil/MeetingBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.DateTime;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Description;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.MeetingName;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Priority;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"/**","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":" * A utility class to help with building Meeting objects.","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":" */","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"public class MeetingBuilder {","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    public static final String DEFAULT_NAME \u003d \"CS2103 Lectures\";","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    public static final String DEFAULT_START \u003d \"2021-03-12 14:00\";","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public static final String DEFAULT_TERMINATE \u003d \"2021-03-12 16:00\";","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    public static final String DEFAULT_PRIORITY \u003d \"5\";","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Taught by Mr.Damith.\";","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    private MeetingName meetingName;","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    private DateTime start;","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    private DateTime terminate;","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    private Priority priority;","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    private Description description;","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"    private Set\u003cGroup\u003e groups;","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * Creates a {@code MeetingBuilder} with the default details.","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder() {","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        meetingName \u003d new MeetingName(DEFAULT_NAME);","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        start \u003d new DateTime(DEFAULT_START);","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        terminate \u003d new DateTime(DEFAULT_TERMINATE);","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        priority \u003d new Priority(DEFAULT_PRIORITY);","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        description \u003d new Description(DEFAULT_DESCRIPTION);","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"        groups \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"     * Initializes the MeetingBuilder with the data of {@code MeetingToCopy}.","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder(Meeting meetingToCopy) {","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        meetingName \u003d meetingToCopy.getName();","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        start \u003d meetingToCopy.getStart();","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        terminate \u003d meetingToCopy.getTerminate();","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        priority \u003d meetingToCopy.getPriority();","lastModifiedDate":"2021-03-11"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        description \u003d meetingToCopy.getDescription();","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"        groups \u003d new HashSet\u003c\u003e(meetingToCopy.getGroups());","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the {@code PersonName} of the {@code Meeting} that we are building.","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder withName(String name) {","lastModifiedDate":"2021-03-11"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"        this.meetingName \u003d new MeetingName(name);","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"        return this;","lastModifiedDate":"2021-03-11"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":65,"author":{"gitId":"hengyiqun"},"content":"     * Parses the {@code groups} into a {@code Set\u003cGroup\u003e} and set it to the {@code Meeting} that we are building.","lastModifiedDate":"2021-03-14"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":67,"author":{"gitId":"hengyiqun"},"content":"    public MeetingBuilder withGroups(String ... groups) {","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"hengyiqun"},"content":"        this.groups \u003d SampleDataUtil.getGroupSet(groups);","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"        return this;","lastModifiedDate":"2021-03-11"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the start date time of the {@code Meeting} that we are building.","lastModifiedDate":"2021-03-11"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder withStart(String start) {","lastModifiedDate":"2021-03-11"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"        this.start \u003d new DateTime(start);","lastModifiedDate":"2021-03-11"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        return this;","lastModifiedDate":"2021-03-11"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the terminate date time of the {@code Meeting} that we are building.","lastModifiedDate":"2021-03-11"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder withTerminate(String terminate) {","lastModifiedDate":"2021-03-11"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        this.terminate \u003d new DateTime(terminate);","lastModifiedDate":"2021-03-11"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"        return this;","lastModifiedDate":"2021-03-11"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the {@code Priority} of the {@code Meeting} that we are building.","lastModifiedDate":"2021-03-11"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder withPriority(String priority) {","lastModifiedDate":"2021-03-11"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"        this.priority \u003d new Priority(priority);","lastModifiedDate":"2021-03-11"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"        return this;","lastModifiedDate":"2021-03-11"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the {@code Description} of the {@code Meeting} that we are building.","lastModifiedDate":"2021-03-11"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder withDescription(String description) {","lastModifiedDate":"2021-03-11"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"        this.description \u003d new Description(description);","lastModifiedDate":"2021-03-11"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"        return this;","lastModifiedDate":"2021-03-11"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"    public Meeting build() {","lastModifiedDate":"2021-03-11"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"        return new Meeting(meetingName, start, terminate, priority, description, groups);","lastModifiedDate":"2021-03-15"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"Maurice2n97":5,"skinnychenpi":96,"hengyiqun":7}},{"path":"src/test/java/seedu/address/testutil/NoteBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.meeting.Priority;","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Content;","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Note;","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"/**","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":" * A utility class to help with building Note objects.","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":" */","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"public class NoteBuilder {","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"    public static final String DEFAULT_CONTENT \u003d \"Complete CS2103 Tutorial\";","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"    public static final String DEFAULT_PRIORITY \u003d \"1\";","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"    private Content content;","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"    private Priority priority;","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"     * Creates a {@code NoteBuilder} with the default details.","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"    public NoteBuilder() {","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"        content \u003d new Content(DEFAULT_CONTENT);","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"        priority \u003d new Priority(DEFAULT_PRIORITY);","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"     * Initializes the NoteBuilder with the data of {@code noteToCopy}.","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"    public NoteBuilder(Note noteToCopy) {","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"        content \u003d noteToCopy.getContent();","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"        priority \u003d noteToCopy.getPriority();","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"     * Sets the {@code Content} of the {@code Note} that we are building.","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"    public NoteBuilder withContent(String content) {","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"        this.content \u003d new Content(content);","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"        return this;","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"     * Sets the {@code Priority} of the {@code Note} that we are building.","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"    public NoteBuilder withPriority(String priority) {","lastModifiedDate":"2021-04-01"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"        this.priority \u003d new Priority(priority);","lastModifiedDate":"2021-04-01"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"        return this;","lastModifiedDate":"2021-04-01"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"    public Note build() {","lastModifiedDate":"2021-04-01"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"        return new Note(content, priority);","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"hengyiqun":54}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-04-05"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.PersonName;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    private PersonName personName;","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"    private Set\u003cGroup\u003e groups;","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        personName \u003d new PersonName(DEFAULT_NAME);","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"        groups \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        personName \u003d personToCopy.getName();","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"        groups \u003d new HashSet\u003c\u003e(personToCopy.getGroups());","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the {@code PersonName} of the {@code Person} that we are building.","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        this.personName \u003d new PersonName(name);","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"    public PersonBuilder withGroups(String ... tags) {","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"hengyiqun"},"content":"        this.groups \u003d SampleDataUtil.getGroupSet(tags);","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"        return new Person(personName, phone, email, address, groups);","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"Maurice2n97":2,"skinnychenpi":6,"hengyiqun":5,"-":83}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.AddPersonCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        return AddPersonCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"        person.getGroups().stream().forEach(","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"            s -\u003e sb.append(PREFIX_GROUP + s.groupName + \" \")","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"        if (descriptor.getGroups().isPresent()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"            Set\u003cGroup\u003e tags \u003d descriptor.getGroups().get();","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"                sb.append(PREFIX_GROUP);","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_GROUP).append(s.groupName).append(\" \"));","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"Maurice2n97":1,"skinnychenpi":3,"hengyiqun":7,"-":51}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-08-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"Maurice2n97":3,"-":9}},{"path":"src/test/java/seedu/address/testutil/TypicalMeetings.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_DESCRIPTION_MEETING1;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_DESCRIPTION_MEETING2;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_NAME_MEETING1;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_NAME_MEETING2;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_PRIORITY_MEETING1;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_PRIORITY_MEETING2;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_START_MEETING1;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_START_MEETING2;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_GROUP_MEETING1;","lastModifiedDate":"2021-04-09"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_GROUP_MEETING2;","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_TERMINATE_MEETING1;","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.meetings.MeetingCommandTestUtil.VALID_TERMINATE_MEETING2;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Meeting;","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.MeetingBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"/**","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":" */","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"public class TypicalMeetings {","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    // Manually added - Meeting\u0027s details found in {@code PersonCommandTestUtil}","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    public static final Meeting MEETING1 \u003d new MeetingBuilder().withName(VALID_NAME_MEETING1)","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"            .withStart(VALID_START_MEETING1)","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"            .withTerminate(VALID_TERMINATE_MEETING1).withPriority(VALID_PRIORITY_MEETING1)","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"            .withDescription(VALID_DESCRIPTION_MEETING1)","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"            .withGroups(VALID_GROUP_MEETING1).build();","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    public static final Meeting MEETING2 \u003d new MeetingBuilder().withName(VALID_NAME_MEETING2)","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"            .withStart(VALID_START_MEETING2)","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"            .withTerminate(VALID_TERMINATE_MEETING2).withPriority(VALID_PRIORITY_MEETING2)","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"            .withDescription(VALID_DESCRIPTION_MEETING2)","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"            .withGroups(VALID_GROUP_MEETING2).build();","lastModifiedDate":"2021-04-09"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    public static final Meeting MEETING3 \u003d new MeetingBuilder().withName(\"CS2103 ONLINE Lecture\")","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            .withStart(\"2020-03-11 14:00\").withTerminate(\"2020-03-11 16:00\")","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            .withPriority(\"5\").withDescription(\"Taught by Damith\")","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"            .withGroups(\"Lectures\").build();","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    public static final Meeting MEETING4 \u003d new MeetingBuilder().withName(\"CS2106 ONLINE Lecture\")","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"            .withStart(\"2020-03-10 10:00\").withTerminate(\"2020-03-10 12:00\")","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"            .withPriority(\"5\").withDescription(\"Taught by Djordje\")","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"            .withGroups(\"Lectures\").build();","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    public static final Meeting MEETING5 \u003d new MeetingBuilder().withName(\"Chess Club Meetings\")","lastModifiedDate":"2021-03-11"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"            .withStart(\"2020-03-17 10:00\").withTerminate(\"2020-03-17 12:00\")","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"            .withPriority(\"3\").withDescription(\"Bring your chess board\")","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"            .withGroups(\"Extracurricular\").build();","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"    public static final Meeting MEETING6 \u003d new MeetingBuilder().withName(\"Badminton\")","lastModifiedDate":"2021-03-18"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"            .withStart(\"2020-09-01 18:00\")","lastModifiedDate":"2021-03-18"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"            .withTerminate(\"2020-09-01 19:00\")","lastModifiedDate":"2021-03-25"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"            .withPriority(\"3\")","lastModifiedDate":"2021-03-18"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"            .withDescription(\"Court 6 @ Tampines Hub\")","lastModifiedDate":"2021-03-18"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"            .withGroups(\"badminton\", \"friends\").build();","lastModifiedDate":"2021-03-18"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"    //Still don\u0027t know what this part is doing, will check later.","lastModifiedDate":"2021-03-11"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    //public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2021-03-11"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"    //    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"    //    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    //     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2021-03-11"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"    //     */","lastModifiedDate":"2021-03-11"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"    //    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2021-03-11"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"    //        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2021-03-11"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"    //        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2021-03-11"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"    //            ab.addPerson(person);","lastModifiedDate":"2021-03-11"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"    //        }","lastModifiedDate":"2021-03-11"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"    //        return ab;","lastModifiedDate":"2021-03-11"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"    //    }","lastModifiedDate":"2021-03-11"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"    public static MeetingBook getTypicalMeetingBook() {","lastModifiedDate":"2021-03-17"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"        MeetingBook mb \u003d new MeetingBook();","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"        for (Meeting meeting : getTypicalMeetings()) {","lastModifiedDate":"2021-03-17"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"            mb.addMeeting(meeting);","lastModifiedDate":"2021-03-17"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"        return mb;","lastModifiedDate":"2021-03-17"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"    public static List\u003cMeeting\u003e getTypicalMeetings() {","lastModifiedDate":"2021-03-11"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(MEETING1, MEETING2, MEETING3, MEETING4, MEETING5));","lastModifiedDate":"2021-03-11"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"    public static MeetingBook getSampleMeetingBook() {","lastModifiedDate":"2021-03-18"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"        MeetingBook mb \u003d new MeetingBook();","lastModifiedDate":"2021-03-18"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"        mb.addMeeting(MEETING1);","lastModifiedDate":"2021-03-18"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"        return mb;","lastModifiedDate":"2021-03-18"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"Maurice2n97":36,"skinnychenpi":50,"hengyiqun":7}},{"path":"src/test/java/seedu/address/testutil/TypicalNotes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import java.util.List;","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.Note;","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.note.NoteBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"public class TypicalNotes {","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"    public static final Note NOTE1 \u003d new NoteBuilder().withContent(\"Complete CS2103 Tutorial\")","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"            .withPriority(\"5\").build();","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"    public static final Note NOTE2 \u003d new NoteBuilder().withContent(\"CS2106 Lab\")","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"            .withPriority(\"5\").build();","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"    public static final Note NOTE3 \u003d new NoteBuilder().withContent(\"Lunch with JC friends\")","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"            .withPriority(\"4\").build();","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"    public static final Note NOTE4 \u003d new NoteBuilder().withContent(\"Play badminton\")","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"            .withPriority(\"3\").build();","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"    public static final Note NOTE5 \u003d new NoteBuilder().withContent(\"Play table tennis\")","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"            .withPriority(\"3\").build();","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"    public static final Note NOTE6 \u003d new NoteBuilder().withContent(\"Borrow books\")","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"            .withPriority(\"2\").build();","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"    public static final Note NOTE7 \u003d new NoteBuilder().withContent(\"Hiking\")","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"            .withPriority(\"1\").build();","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"    private TypicalNotes() {} // prevents instantiation","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"     * Returns an {@code NoteBook} with all the typical persons.","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"    public static NoteBook getTypicalNoteBook() {","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"        NoteBook nb \u003d new NoteBook();","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"        for (Note note : getTypicalNotes()) {","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"            nb.addNote(note);","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"        return nb;","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"    public static List\u003cNote\u003e getTypicalNotes() {","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(NOTE1, NOTE2, NOTE3, NOTE4, NOTE5, NOTE6, NOTE7));","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"}","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"hengyiqun":46}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_GROUP_FRIEND;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_GROUP_HUSBAND;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.persons.PersonCommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.AddressBook;","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"            .withGroups(\"table tennis\").build();","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"            .withGroups(\"CS2106\", \"table tennis\").build();","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"            .withGroups(\"table tennis\").build();","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"    public static final Person JENNY \u003d new PersonBuilder().withName(\"Jenny Li\").withPhone(\"9482432\")","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"            .withEmail(\"jenny@example.com\").withAddress(\"5th road\")","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"            .withGroups(\"badminton\", \"CS2106\").build();","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"    public static final Person WENDY \u003d new PersonBuilder().withName(\"Wendy Chen\").withPhone(\"9482222\")","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"            .withEmail(\"wendy@example.com\").withAddress(\"7th way\")","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"            .withGroups(\"badminton\", \"CS2103\", \"CS2106\").build();","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    // Manually added - Person\u0027s details found in {@code PersonCommandTestUtil}","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withGroups(VALID_GROUP_FRIEND).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"            .withGroups(VALID_GROUP_HUSBAND, VALID_GROUP_FRIEND)","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":82,"author":{"gitId":"hengyiqun"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE, JENNY, WENDY));","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"Maurice2n97":4,"skinnychenpi":10,"hengyiqun":12,"-":58}},{"path":"src/test/java/seedu/address/ui/TimetablePlacementPolicyTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"public class TimetablePlacementPolicyTest {","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-04-09"}],"authorContributionMap":{"Maurice2n97":4}},{"path":"src/test/java/seedu/address/ui/TimetableViewTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-04-09"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"public class TimetableViewTest {","lastModifiedDate":"2021-04-09"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"}","lastModifiedDate":"2021-04-09"}],"authorContributionMap":{"Maurice2n97":4}}]
