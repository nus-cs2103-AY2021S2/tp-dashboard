[{"path":".vscode/settings.json","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"ong6"},"content":"{"},{"lineNumber":2,"author":{"gitId":"ong6"},"content":"    \"java.configuration.updateBuildConfiguration\": \"interactive\""},{"lineNumber":3,"author":{"gitId":"ong6"},"content":"}"}],"authorContributionMap":{"ong6":3}},{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"\u003cp align\u003d\"center\"\u003e"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":"  \u003cimg src\u003d\"docs/images/imPoster.png\" width\u003d\"300px\" /\u003e"},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"  \u003ch1 align\u003d\"center\"\u003eimPoster\u003c/h1\u003e"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"\u003c/p\u003e"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"\u003cp align\u003d\"center\"\u003e"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"  \u003ca href\u003d\"https://github.com/AY2021S2-CS2103T-T12-4/tp/actions\"\u003e \u003cimg src\u003d\"https://github.com/AY2021S2-CS2103T-T12-4/tp/workflows/Java%20CI/badge.svg\" /\u003e \u003c/a\u003e"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"  \u003ca href\u003d\"https://codecov.io/gh/AY2021S2-CS2103T-T12-4/tp\"\u003e \u003cimg src\u003d\"https://codecov.io/gh/AY2021S2-CS2103T-T12-4/tp/branch/master/graph/badge.svg\" /\u003e \u003c/a\u003e"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"\u003c/p\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"ong6"},"content":"## Table of Contents"},{"lineNumber":12,"author":{"gitId":"ong6"},"content":""},{"lineNumber":13,"author":{"gitId":"ong6"},"content":"- [Introduction](#introduction)"},{"lineNumber":14,"author":{"gitId":"ong6"},"content":"- [Features](#features)"},{"lineNumber":15,"author":{"gitId":"ong6"},"content":"- [Technologies](#technologies)"},{"lineNumber":16,"author":{"gitId":"ong6"},"content":"- [Setup](#setup)"},{"lineNumber":17,"author":{"gitId":"tlylt"},"content":"- [Team](#about-us)"},{"lineNumber":18,"author":{"gitId":"ong6"},"content":"- [Contributing](#contributing)"},{"lineNumber":19,"author":{"gitId":"ong6"},"content":"- [Acknowledgement](#Acknowledgement)"},{"lineNumber":20,"author":{"gitId":"ong6"},"content":""},{"lineNumber":21,"author":{"gitId":"ong6"},"content":"## Introduction"},{"lineNumber":22,"author":{"gitId":"ong6"},"content":""},{"lineNumber":23,"author":{"gitId":"ong6"},"content":"imPoster contains most of the features of [postman](https://www.postman.com/)"},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"and is implemented in a simple and minimalistic style that is easy for anyone to"},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"pick up. The latest releases for download are available"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"[here](https://github.com/AY2021S2-CS2103T-T12-4/tp/releases)."},{"lineNumber":27,"author":{"gitId":"ong6"},"content":""},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"## Features"},{"lineNumber":29,"author":{"gitId":"ong6"},"content":""},{"lineNumber":30,"author":{"gitId":"ong6"},"content":"imPoster runs locally on your computer and simplifies the process of"},{"lineNumber":31,"author":{"gitId":"ong6"},"content":"building/testing an API. We offer support for the following tasks:"},{"lineNumber":32,"author":{"gitId":"ong6"},"content":""},{"lineNumber":33,"author":{"gitId":"ong6"},"content":"1. Create, send and save API requests"},{"lineNumber":34,"author":{"gitId":"ong6"},"content":"2. View status code, response size, and response time"},{"lineNumber":35,"author":{"gitId":"ong6"},"content":"3. View response headers"},{"lineNumber":36,"author":{"gitId":"ong6"},"content":"4. View response body in pretty or raw view"},{"lineNumber":37,"author":{"gitId":"ong6"},"content":"5. Save response to a file."},{"lineNumber":38,"author":{"gitId":"ong6"},"content":""},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"For more details on the features and their usage, please refer to the"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"[user guide](https://ay2021s2-cs2103t-t12-4.github.io/tp/UserGuide.html)."},{"lineNumber":41,"author":{"gitId":"ong6"},"content":""},{"lineNumber":42,"author":{"gitId":"ong6"},"content":"## Technologies"},{"lineNumber":43,"author":{"gitId":"ong6"},"content":""},{"lineNumber":44,"author":{"gitId":"ong6"},"content":"Technologies used by imPoster are:"},{"lineNumber":45,"author":{"gitId":"ong6"},"content":""},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"#### Made with:"},{"lineNumber":47,"author":{"gitId":"ong6"},"content":""},{"lineNumber":48,"author":{"gitId":"ong6"},"content":"\u003cp align\u003d\"center\"\u003e"},{"lineNumber":49,"author":{"gitId":"ong6"},"content":"  \u003cimg height\u003d\"150\" width\u003d\"150\" src\u003d\"https://i.imgur.com/5zlrxVc.png\"/\u003e"},{"lineNumber":50,"author":{"gitId":"ong6"},"content":"\u003c/p\u003e"},{"lineNumber":51,"author":{"gitId":"ong6"},"content":"\u003cp align\u003d\"center\"\u003e"},{"lineNumber":52,"author":{"gitId":"ong6"},"content":"Java"},{"lineNumber":53,"author":{"gitId":"ong6"},"content":"\u003c/p\u003e"},{"lineNumber":54,"author":{"gitId":"ong6"},"content":""},{"lineNumber":55,"author":{"gitId":"ong6"},"content":"#### Deployed on:"},{"lineNumber":56,"author":{"gitId":"ong6"},"content":""},{"lineNumber":57,"author":{"gitId":"ong6"},"content":"\u003cp align\u003d\"center\"\u003e"},{"lineNumber":58,"author":{"gitId":"ong6"},"content":"None (Local Application)"},{"lineNumber":59,"author":{"gitId":"ong6"},"content":"\u003c/p\u003e"},{"lineNumber":60,"author":{"gitId":"ong6"},"content":""},{"lineNumber":61,"author":{"gitId":"ong6"},"content":"#### Project Repository"},{"lineNumber":62,"author":{"gitId":"ong6"},"content":""},{"lineNumber":63,"author":{"gitId":"ong6"},"content":"```"},{"lineNumber":64,"author":{"gitId":"ong6"},"content":"https://github.com/AY2021S2-CS2103T-T12-4/tp"},{"lineNumber":65,"author":{"gitId":"ong6"},"content":"```"},{"lineNumber":66,"author":{"gitId":"ong6"},"content":""},{"lineNumber":67,"author":{"gitId":"ong6"},"content":"## Setup"},{"lineNumber":68,"author":{"gitId":"ong6"},"content":""},{"lineNumber":69,"author":{"gitId":"ong6"},"content":"Download the JAR file and run it."},{"lineNumber":70,"author":{"gitId":"ong6"},"content":""},{"lineNumber":71,"author":{"gitId":"ong6"},"content":"\u003c!-- To elaborate on in the future. --\u003e"},{"lineNumber":72,"author":{"gitId":"ong6"},"content":""},{"lineNumber":73,"author":{"gitId":"ong6"},"content":"\u003c!-- add pic here --\u003e"},{"lineNumber":74,"author":{"gitId":"ong6"},"content":""},{"lineNumber":75,"author":{"gitId":"ong6"},"content":"## About Us"},{"lineNumber":76,"author":{"gitId":"ong6"},"content":""},{"lineNumber":77,"author":{"gitId":"ong6"},"content":"View the details about our team [here](docs/AboutUs.md)"},{"lineNumber":78,"author":{"gitId":"ong6"},"content":""},{"lineNumber":79,"author":{"gitId":"ong6"},"content":"## Contributing"},{"lineNumber":80,"author":{"gitId":"ong6"},"content":""},{"lineNumber":81,"author":{"gitId":"ong6"},"content":"If you have code to contribute to the project, open a pull request and describe"},{"lineNumber":82,"author":{"gitId":"ong6"},"content":"clearly the changes and what they are intended to do (enhancement, bug fixes"},{"lineNumber":83,"author":{"gitId":"ong6"},"content":"etc). Alternatively, you may simply raise bugs or suggestions by opening an"},{"lineNumber":84,"author":{"gitId":"ong6"},"content":"issue."},{"lineNumber":85,"author":{"gitId":"ong6"},"content":""},{"lineNumber":86,"author":{"gitId":"ong6"},"content":"## Acknowledgement"},{"lineNumber":87,"author":{"gitId":"ong6"},"content":""},{"lineNumber":88,"author":{"gitId":"ong6"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"ong6":76,"tlylt":1,"tjtanjin":10,"-":1}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"mainClassName \u003d \u0027seedu.us.among.Main\u0027"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":"    implementation group: \u0027org.apache.httpcomponents\u0027, name: \u0027httpclient\u0027, version: \u00274.5.13\u0027"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":71,"author":{"gitId":"ong6"},"content":"    archiveName \u003d \u0027imPoster.jar\u0027"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027"}],"authorContributionMap":{"ong6":1,"-":70,"tjtanjin":3}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"ong6"},"content":"ImPoster developer team is based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"You can reach us at the email `imposter@comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"JulietTeoh"},"content":"### Juliet Teoh"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"JulietTeoh"},"content":"\u003cimg src\u003d\"images/julietteoh.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"[[Github](http://github.com/JulietTeoh)]"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"[[Portfolio](team/julietteoh.md)]"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"ong6"},"content":"* Role: Developer"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"* Responsibilities: Update existing AB3 commands and documentation"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"### Liu Yongliang"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"tlylt"},"content":"\u003cimg src\u003d\"images/tlylt.png\" width\u003d\"200px\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"[[Github](http://github.com/tlylt)]"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"[[Portfolio](team/tlylt.md)]"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"ong6"},"content":"* Role: Developer"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"* Responsibilities: Update new features and ensure code quality"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"### Ong Jun Xiong"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"ong6"},"content":"\u003cimg src\u003d\"images/ong6.png\" width\u003d\"200px\"\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"[[Github](http://github.com/ong6)]"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"[[Portfolio](team/ong6.md)]"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"* Responsibilities: Update existing AB3 commands and documentation"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"### Tan Jin"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"\u003cimg src\u003d\"images/tjtanjin.png\" width\u003d\"200px\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"[[Github](http://github.com/tjtanjin)]"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"[[Portfolio](team/tjtanjin.md)]"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"[[Homepage](https://tjtanjin.com)]"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"* Responsibilities: Update new features and ensure smooth integrations"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"### Warren Ng"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"NightRaven49"},"content":"\u003cimg src\u003d\"images/nightraven49.png\" width\u003d\"200px\"\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"[[Github](http://github.com/nightraven49)]"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"[[Portfolio](team/nightraven49.md)]"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"* Responsibilities: Update user interface and provide quality assurance"}],"authorContributionMap":{"NightRaven49":1,"ong6":4,"tlylt":2,"-":31,"tjtanjin":21,"JulietTeoh":2}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":"* Table of Contents "},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"{:toc}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":"---"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"## **Appendix A: Product Scope**"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"ong6"},"content":"- has a need to test a significant number of APIs"},{"lineNumber":16,"author":{"gitId":"ong6"},"content":"- prefers a quick means of testing APIs"},{"lineNumber":17,"author":{"gitId":"ong6"},"content":"- can type fast"},{"lineNumber":18,"author":{"gitId":"ong6"},"content":"- prefers typing to mouse interactions"},{"lineNumber":19,"author":{"gitId":"ong6"},"content":"- is reasonably comfortable with APIs"},{"lineNumber":20,"author":{"gitId":"ong6"},"content":"- is keen to develop software products that involve APIs"},{"lineNumber":21,"author":{"gitId":"ong6"},"content":"- requires testing of APIs in projects or work-related tasks"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":"**Value proposition**:"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"- beautify response"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"- save requests for quick execution again"},{"lineNumber":27,"author":{"gitId":"ong6"},"content":"- general analysis/recommendation system based on certain metrics"},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"- no need to create any account"},{"lineNumber":29,"author":{"gitId":"ong6"},"content":"- simple and easy to get started"},{"lineNumber":30,"author":{"gitId":"ong6"},"content":"- unintrusive"},{"lineNumber":31,"author":{"gitId":"ong6"},"content":"- great user experience"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"## **Appendix B: User Stories**"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"ong6"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low"},{"lineNumber":36,"author":{"gitId":"ong6"},"content":"(unlikely to have) - `*`"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"| Priority | As a …​               | I want to …​                              | So that I can…​                                                 |"},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"| -------- | --------------------- | ----------------------------------------- | --------------------------------------------------------------- |"},{"lineNumber":40,"author":{"gitId":"tlylt"},"content":"| `* * *`  | new user              | view a quick description of APIs          | quickly review the concepts of APIs                             |"},{"lineNumber":41,"author":{"gitId":"tlylt"},"content":"| `* * *`  | long time user        | test my APIs on the fly                   | run API tests anytime                                           |"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"| `* * *`  | long time user        | quickly load my previous APIs             | save time and not have to type them all out again               |"},{"lineNumber":43,"author":{"gitId":"JulietTeoh"},"content":"| `* * *`  | experienced developer | test out my API multiple times repeatedly | know if my API can cope under significant traffic               |"},{"lineNumber":44,"author":{"gitId":"tlylt"},"content":"| `* * *`  | new API developer     | clear error messages                      | quickly learn where I went wrong                                |"},{"lineNumber":45,"author":{"gitId":"tlylt"},"content":"| `* * *`  | API tester            | a focused simple design                   | quickly validate the state of an endpoint                       |"},{"lineNumber":46,"author":{"gitId":"tlylt"},"content":"| `* * *`  | new user              | have an optional features walkthrough     | have a broad overview of functionalities                        |"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"| `* * *`  | moderate user         | find/locate saved API endpoints           | can easily view the information for the endpoint of my interest |"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"| `*`      | experienced developer | export my saved API endpoints             | can easily port or integrate the data with other platforms      |"},{"lineNumber":49,"author":{"gitId":"tlylt"},"content":"| `*`      | expert user           | have API recommendations                  | help to optimise or are more suited for my product              |"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"| `*`      | moderate user         | learn to optimise my usage                | can have a faster and smoother workflow                         |"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"ong6"},"content":"_{More to be added}_"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"## **Appendix C: Use Cases**"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"ong6"},"content":"(For all use cases below, the **System** is the `imPoster` and the **Actor** is"},{"lineNumber":57,"author":{"gitId":"ong6"},"content":"the `user`, unless specified otherwise)"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"### \u003cins\u003eGeneral Use Cases\u003c/ins\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"**Use case G01 - View Help**"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"1.  User requests for help with using the application"},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":"2.  User enters help command into command box"},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":"3.  imPoster returns a help link for the user to click"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"ong6"},"content":"- 2a. The given command/format is invalid"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":"  - 2a1. imPoster shows an error message to the user"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"tjtanjin"},"content":"    Use case resumes at step 2."},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"tjtanjin"},"content":"**Use case G02 - Exit imPoster**"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"tlylt"},"content":"**MSS**"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":"1.  User requests to exit the application"},{"lineNumber":84,"author":{"gitId":"tjtanjin"},"content":"2.  User enters exit command into command box"},{"lineNumber":85,"author":{"gitId":"tjtanjin"},"content":"3.  imPoster exits"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"tlylt"},"content":"**Extensions**"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"tjtanjin"},"content":"- 2a. The given command/format is invalid"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"tjtanjin"},"content":"  - 2a1. imPoster shows an error message to the user"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"tjtanjin"},"content":"    Use case resumes at step 2."},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"tjtanjin"},"content":"### \u003cins\u003eEndpoint Use Cases\u003c/ins\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"tjtanjin"},"content":"**Use case E01 - Add an API endpoint**"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"JulietTeoh"},"content":"**MSS**"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"tjtanjin"},"content":"1.  User requests to add an API endpoint"},{"lineNumber":104,"author":{"gitId":"tjtanjin"},"content":"2.  User enters add command into command box"},{"lineNumber":105,"author":{"gitId":"tjtanjin"},"content":"3.  imPoster saves the API endpoint to the API endpoint list"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"JulietTeoh"},"content":"    Use case ends."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"JulietTeoh"},"content":"**Extensions**"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"tjtanjin"},"content":"- 2a. The given command/format is invalid"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"tjtanjin"},"content":"  - 2a1. imPoster shows an error message to the user"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"tjtanjin"},"content":"    Use case resumes at step 2."},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"tjtanjin"},"content":"**Use case E02 - Edit an API endpoint**"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"tjtanjin"},"content":"**MSS**"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"tjtanjin"},"content":"1.  User requests to edit an API endpoint"},{"lineNumber":122,"author":{"gitId":"tjtanjin"},"content":"2.  User enters edit command into command box"},{"lineNumber":123,"author":{"gitId":"tjtanjin"},"content":"3.  imPoster edits the API endpoint and updates the API endpoint list"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"tjtanjin"},"content":"    Use case ends."},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"tjtanjin"},"content":"**Extensions**"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"tjtanjin"},"content":"- 2a. The given command/format is invalid"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"tjtanjin"},"content":"  - 2a1. imPoster shows an error message to the user"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"tjtanjin"},"content":"    Use case resumes at step 2."},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"tjtanjin"},"content":"- 2b. The given index is invalid"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"tjtanjin"},"content":"  - 2b1. imPoster shows an error message to the user"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"tjtanjin"},"content":"    Use case resumes at step 2."},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"tjtanjin"},"content":"**Use case E03 - Remove an API endpoint**"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"tjtanjin"},"content":"**MSS**"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"tjtanjin"},"content":"1.  User requests to remove an API endpoint"},{"lineNumber":146,"author":{"gitId":"tjtanjin"},"content":"2.  User enters remove command into command box"},{"lineNumber":147,"author":{"gitId":"tjtanjin"},"content":"3.  imPoster removes the API endpoint and updates the API endpoint list"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"tjtanjin"},"content":"    Use case ends."},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"tjtanjin"},"content":"**Extensions**"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"tjtanjin"},"content":"- 2a. The given command/format is invalid"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"tjtanjin"},"content":"  - 2a1. imPoster shows an error message to the user"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"tjtanjin"},"content":"    Use case resumes at step 2."},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"tjtanjin"},"content":"- 2b. The given index is invalid"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"tjtanjin"},"content":"  - 2b1. imPoster shows an error message to the user"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"tjtanjin"},"content":"    Use case resumes at step 2."},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"tjtanjin"},"content":"**Use case E04 - Find a saved API endpoint**"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"tjtanjin"},"content":"**MSS**"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"tjtanjin"},"content":"1.  User requests to find a saved API endpoint"},{"lineNumber":170,"author":{"gitId":"tjtanjin"},"content":"2.  User enters find command into command box"},{"lineNumber":171,"author":{"gitId":"tjtanjin"},"content":"3.  imPoster searches the existing records"},{"lineNumber":172,"author":{"gitId":"tjtanjin"},"content":"4.  imPoster returns a list of matching API endpoints"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"tjtanjin"},"content":"    Use case ends."},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"tjtanjin"},"content":"**Extensions**"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"tjtanjin"},"content":"- 2a. The given command/format is invalid"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"tjtanjin"},"content":"  - 2a1. imPoster shows an error message to the user"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"tjtanjin"},"content":"    Use case resumes at step 2."},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"tjtanjin"},"content":"- 2b. The given search result is empty"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"tjtanjin"},"content":"  - 2b1. imPoster shows a friendly message about mistyped keywords to the user"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"tjtanjin"},"content":"    Use case resumes at step 1."},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"tjtanjin"},"content":"**Use case E05 - List all saved API endpoints**"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"tjtanjin"},"content":"**MSS**"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"tjtanjin"},"content":"1.  User requests to view all saved API endpoints"},{"lineNumber":195,"author":{"gitId":"tjtanjin"},"content":"2.  User enters list command into command box"},{"lineNumber":196,"author":{"gitId":"tjtanjin"},"content":"3.  imPoster displays all existing records"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"tjtanjin"},"content":"    Use case ends."},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"tjtanjin"},"content":"**Extensions**"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"tjtanjin"},"content":"- 2a. The given command/format is invalid"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"tjtanjin"},"content":"  - 2a1. imPoster shows an error message to the user"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"tjtanjin"},"content":"    Use case resumes at step 2."},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"tjtanjin"},"content":"**Use case E06 - Clear all saved API endpoints**"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"tjtanjin"},"content":"**MSS**"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"tjtanjin"},"content":"1.  User requests to clear all saved API endpoints"},{"lineNumber":213,"author":{"gitId":"tjtanjin"},"content":"2.  User enters clear command into command box"},{"lineNumber":214,"author":{"gitId":"tjtanjin"},"content":"3.  imPoster clears all existing records"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"tjtanjin"},"content":"    Use case ends."},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"tjtanjin"},"content":"**Extensions**"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"tjtanjin"},"content":"- 2a. The given command/format is invalid"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"tjtanjin"},"content":"  - 2a1. imPoster shows an error message to the user"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"tjtanjin"},"content":"    Use case resumes at step 2."},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"tjtanjin"},"content":"**Use case E07 - Call a saved API endpoint**"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"tjtanjin"},"content":"**MSS**"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"tjtanjin"},"content":"1.  User requests to call a saved API endpoint"},{"lineNumber":231,"author":{"gitId":"tjtanjin"},"content":"2.  User enters send command into command box"},{"lineNumber":232,"author":{"gitId":"tjtanjin"},"content":"3.  imPoster makes a call to the desired API endpoint"},{"lineNumber":233,"author":{"gitId":"tjtanjin"},"content":"4.  API call is successful and response is shown to the user"},{"lineNumber":234,"author":{"gitId":"tjtanjin"},"content":"5.  imPoster saves the response to a file that the user can view"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"tjtanjin"},"content":"    Use case ends."},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"tjtanjin"},"content":"**Extensions**"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"tjtanjin"},"content":"- 2a. The given command/format is invalid"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"tjtanjin"},"content":"  - 2a1. imPoster shows an error message to the user"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"tjtanjin"},"content":"    Use case resumes at step 2."},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"tjtanjin"},"content":"- 2b. imPoster receives an invalid index"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"tjtanjin"},"content":"  - 2b1. imPoster shows an error message to the user"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"tjtanjin"},"content":"    Use case resumes at step 2."},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"tjtanjin"},"content":"- 3a. imPoster receives a status code indicating an error"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"tjtanjin"},"content":"  - 3a1. imPoster forwards and shows the error message (from the server, if any)"},{"lineNumber":255,"author":{"gitId":"ong6"},"content":"    to the user"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"JulietTeoh"},"content":"    Use case resumes at step 1."},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"tjtanjin"},"content":"**Use case E08 - Call an API endpoint directly without saving**"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"tjtanjin"},"content":"1.  User requests to call a saved API endpoint"},{"lineNumber":264,"author":{"gitId":"tjtanjin"},"content":"2.  User enters run command into command box"},{"lineNumber":265,"author":{"gitId":"tjtanjin"},"content":"3.  imPoster makes a call to the desired API endpoint"},{"lineNumber":266,"author":{"gitId":"tjtanjin"},"content":"4.  API call is successful and response is shown to the user"},{"lineNumber":267,"author":{"gitId":"tjtanjin"},"content":"5.  imPoster saves the response to a file that the user can view"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"tjtanjin"},"content":"- 2a. The given command/format is invalid"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"tjtanjin"},"content":"  - 2a1. imPoster shows an error message to the user"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"tjtanjin"},"content":"    Use case resumes at step 2."},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"tjtanjin"},"content":"- 3a. imPoster receives a status code indicating an error"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"tjtanjin"},"content":"  - 3a1. imPoster forwards and shows the error message (from the server, if any)"},{"lineNumber":282,"author":{"gitId":"tjtanjin"},"content":"    to the user"},{"lineNumber":283,"author":{"gitId":"JulietTeoh"},"content":""},{"lineNumber":284,"author":{"gitId":"JulietTeoh"},"content":"    Use case resumes at step 1."},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"ong6"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above"},{"lineNumber":291,"author":{"gitId":"ong6"},"content":"    installed."},{"lineNumber":292,"author":{"gitId":"ong6"},"content":"2.  Should be able to hold up to 1000 API endpoints without a noticeable"},{"lineNumber":293,"author":{"gitId":"ong6"},"content":"    sluggishness in performance for typical usage."},{"lineNumber":294,"author":{"gitId":"ong6"},"content":"3.  A user with above average typing speed for regular English text (i.e. not"},{"lineNumber":295,"author":{"gitId":"ong6"},"content":"    code, not system admin commands) should be able to accomplish most of the"},{"lineNumber":296,"author":{"gitId":"ong6"},"content":"    tasks faster using commands than using the mouse."},{"lineNumber":297,"author":{"gitId":"tjtanjin"},"content":"4.  Should feel simple and easy to use as compared to existing"},{"lineNumber":298,"author":{"gitId":"tjtanjin"},"content":"    solutions such as [Postman](https://www.postman.com/)."},{"lineNumber":299,"author":{"gitId":"tjtanjin"},"content":"5.  Should be able to provide a proper response even if a call to an API"},{"lineNumber":300,"author":{"gitId":"tjtanjin"},"content":"    endpoint fails due to third-party unavailability."},{"lineNumber":301,"author":{"gitId":"tjtanjin"},"content":"6.  Should not crash or throw unexpected errors when internet connection is"},{"lineNumber":302,"author":{"gitId":"tjtanjin"},"content":"    unavailable."},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"ong6"},"content":"_{More to be added}_"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"ong6"},"content":"- **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":309,"author":{"gitId":"tjtanjin"},"content":"- **Endpoint/API endpoint**: The point of entry in a communication channel for two"},{"lineNumber":310,"author":{"gitId":"ong6"},"content":"  systems to interact"},{"lineNumber":311,"author":{"gitId":"tjtanjin"},"content":"- **API Call/Call**: A process where information is transferred, processed and a response is returned"},{"lineNumber":312,"author":{"gitId":"tjtanjin"},"content":"- **Postman**: An existing API client for developers"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"ong6"},"content":"_{More to be added}_"}],"authorContributionMap":{"ong6":33,"tlylt":12,"-":135,"tjtanjin":127,"JulietTeoh":7}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   1. Run the `seedu.address.Main` and try a few commands."},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"ong6"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [imPoster’s architecture](DeveloperGuide.md#architecture)."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)"}],"authorContributionMap":{"ong6":1,"-":54}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"ong6"},"content":"imPoster is a **desktop application for running and testing APIs, optimized for"},{"lineNumber":7,"author":{"gitId":"ong6"},"content":"use via a Command Line Interface** (CLI) while still having the benefits of a"},{"lineNumber":8,"author":{"gitId":"ong6"},"content":"Graphical User Interface (GUI). If you can type fast, imPoster can enable you to"},{"lineNumber":9,"author":{"gitId":"ong6"},"content":"test your APIs more conveniently than traditional GUI applications."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":"* Table of Contents "},{"lineNumber":12,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"ong6"},"content":"---"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"ong6"},"content":"1. Download the latest `imposter.jar` from"},{"lineNumber":21,"author":{"gitId":"ong6"},"content":"   [here](https://github.com/AY2021S2-CS2103T-T12-4/tp/releases)."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"ong6"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for"},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"   imPoster."},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"1. Double-click the file to start the application. A GUI similar to the one"},{"lineNumber":27,"author":{"gitId":"ong6"},"content":"   shown below should appear in a few seconds. Note how the application contains"},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"   some sample data.\u003cbr\u003e ![Ui](images/Ui.png)"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"1. Type the command in the command box and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it. Some example commands you can try:"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"   - **`help`** : Get a help link for the application."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"   - **`add -x GET -u https://www.google.com`** : Adds an API endpoint to the"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"     API endpoint list."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"   - **`edit 1 -x -u https://www.facebook.com`** : Edits the API endpoint with index `1` shown in the"},{"lineNumber":38,"author":{"gitId":"ong6"},"content":"     API endpoint list."},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"   - **`remove 3`** : Removes the API endpoint with index `3` shown in the API endpoint list."},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"   - **`find facebook google`** : Finds all the API endpoints with fields containing `facebook` and `google`."},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"   - **`send 2`** : Calls the API endpoint with index `2` shown in the API"},{"lineNumber":45,"author":{"gitId":"ong6"},"content":"     endpoint list."},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"   - **`run -x GET -u https://www.google.com`** : Calls the API endpoint with information "},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"     given in the command box."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"   - **`list`** : Lists all API endpoints in the API endpoint list."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"   - **`clear`** : Clears all API endpoints in the API endpoint list."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"ong6"},"content":"   - **`exit`** : Exits the application."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"ong6"},"content":"---"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"ong6"},"content":"- Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e e.g."},{"lineNumber":67,"author":{"gitId":"ong6"},"content":"  in `add -x METHOD`, `METHOD` is a parameter which can be used as `add -x GET`."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"ong6"},"content":"- Items in square brackets are optional.\u003cbr\u003e e.g."},{"lineNumber":70,"author":{"gitId":"ong6"},"content":"  `edit INDEX [-x METHOD] [-u URL]` can be used as `edit 1 -x GET` or"},{"lineNumber":71,"author":{"gitId":"ong6"},"content":"  `edit 1 -u https://www.google.com`."},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"ong6"},"content":"- Items with `…`​ after them can be used multiple times including zero"},{"lineNumber":74,"author":{"gitId":"ong6"},"content":"  times.\u003cbr\u003e e.g. `find [KEYWORD 1] [KEYWORD 2]…​` can be used as"},{"lineNumber":75,"author":{"gitId":"ong6"},"content":"  `find KEYWORD1` or `find KEYWORD1 KEYWORD2 KEYWORD3`."},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"ong6"},"content":"- Parameters can be in any order.\u003cbr\u003e e.g. if the command specifies"},{"lineNumber":78,"author":{"gitId":"ong6"},"content":"  `-x METHOD -u URL`, `-u URL -x METHOD` is also acceptable."},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"ong6"},"content":"- If a parameter is expected only once in the command but you specified it"},{"lineNumber":81,"author":{"gitId":"ong6"},"content":"  multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":82,"author":{"gitId":"tjtanjin"},"content":"  e.g. if you specify `-x GET -x POST`, only `-x POST` will be taken."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"ong6"},"content":"- Extraneous parameters for commands that do not take in parameters (such as"},{"lineNumber":85,"author":{"gitId":"ong6"},"content":"  `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e e.g. if the command"},{"lineNumber":86,"author":{"gitId":"ong6"},"content":"  specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"tjtanjin"},"content":"### \u003cins\u003eGeneral Commands\u003c/ins\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"tjtanjin"},"content":"#### View help: `help`"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"tjtanjin"},"content":"Description: Get the link to the user guide to the application in the form of a pop up window."},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"tjtanjin"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"tjtanjin"},"content":"#### Exit program: `exit`"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"tjtanjin"},"content":"Description: Exit the application."},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"tjtanjin"},"content":"Format: `exit`"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"tjtanjin"},"content":"### \u003cins\u003eEndpoint Commands\u003c/ins\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"tjtanjin"},"content":"#### Add an API endpoint: `add`"},{"lineNumber":109,"author":{"gitId":"JulietTeoh"},"content":""},{"lineNumber":110,"author":{"gitId":"tjtanjin"},"content":"Description: Add an API endpoint to the API endpoint list."},{"lineNumber":111,"author":{"gitId":"JulietTeoh"},"content":""},{"lineNumber":112,"author":{"gitId":"tjtanjin"},"content":"Format: `add -x METHOD -u URL -t TAG`"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":115,"author":{"gitId":"tjtanjin"},"content":"- `add -x GET -u https://www.google.com`"},{"lineNumber":116,"author":{"gitId":"tjtanjin"},"content":"- `add -x GET -u https://www.yahoo.com -t important`"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"tjtanjin"},"content":"**Tip:** An endpoint can have any number of tags (including 0)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"tjtanjin"},"content":"#### Edit an API endpoint: `edit`"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"tjtanjin"},"content":"Description: Edit the API endpoint at the specified index shown in the API endpoint list (at least one optional argument must be provided)."},{"lineNumber":123,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":124,"author":{"gitId":"tjtanjin"},"content":"Format: `edit INDEX [-x METHOD] [-u URL] [-t TAG]…`"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"tjtanjin"},"content":"Examples:"},{"lineNumber":127,"author":{"gitId":"tjtanjin"},"content":"- `edit 1 -u https://facebook.com`"},{"lineNumber":128,"author":{"gitId":"tjtanjin"},"content":"- `edit 2 -x POST`"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"tjtanjin"},"content":"#### Remove an API endpoint: `remove`"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"tjtanjin"},"content":"Description: Remove the API endpoint at the specified index showin in the API endpoint list."},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"tjtanjin"},"content":"Format: `remove INDEX`"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":137,"author":{"gitId":"tjtanjin"},"content":"- `remove 1`"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"tjtanjin"},"content":"#### Find a saved API endpoint: `find`"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"tjtanjin"},"content":"Description: Find API routes containing the search word in any of its fields."},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"tjtanjin"},"content":"- `find google`"},{"lineNumber":148,"author":{"gitId":"tjtanjin"},"content":"- `find facebook yahoo`"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"tjtanjin"},"content":"#### List all saved API endpoints: `list`"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"tjtanjin"},"content":"Description: Show a list of all API endpoints in the API endpoint list."},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"tjtanjin"},"content":"Format: `list`"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"tjtanjin"},"content":"#### Clear all saved API endpoints: `clear`"},{"lineNumber":157,"author":{"gitId":"ong6"},"content":""},{"lineNumber":158,"author":{"gitId":"tjtanjin"},"content":"Description: Clear all API endpoints in the API endpoint list."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"tjtanjin"},"content":"Format: `clear`"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"tjtanjin"},"content":"#### Call a saved API endpoint: `send`"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"tjtanjin"},"content":"Description: Call an API endpoint from the API endpoint list."},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"tjtanjin"},"content":"Format: `send INDEX`"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"tjtanjin"},"content":"- `send 1`"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"tjtanjin"},"content":"#### Call an API endpoint directly without saving: `run`"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"tjtanjin"},"content":"Description: Call an API endpoint on the fly (without saving)."},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"tjtanjin"},"content":"Format: `run -x METHOD -u URL`"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"tjtanjin"},"content":"Examples:"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"tjtanjin"},"content":"- `run -x GET -u https://www.google.com`"},{"lineNumber":181,"author":{"gitId":"tjtanjin"},"content":"- `run -x GET -u https://www.yahoo.com`"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"tjtanjin"},"content":"### Miscellaneous Information"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"tjtanjin"},"content":"#### Autosave"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"ong6"},"content":"imposter data are saved in the hard disk automatically after any command that"},{"lineNumber":188,"author":{"gitId":"ong6"},"content":"changes the data. There is no need to save manually."},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"tjtanjin"},"content":"#### Data file"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"ong6"},"content":"imPoster data are saved as a JSON file `[JAR file location]/data/imposter.json`."},{"lineNumber":193,"author":{"gitId":"ong6"},"content":"Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":196,"author":{"gitId":"ong6"},"content":"If your changes to the data file makes its format invalid, imPoster will discard all data and start with an empty data file at the next run."},{"lineNumber":197,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"tjtanjin"},"content":"#### Archiving data files `[coming in v2.0]`"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"ong6"},"content":"---"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"ong6"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e **A**: Install the"},{"lineNumber":208,"author":{"gitId":"ong6"},"content":"application in the other computer and overwrite the empty data file it creates"},{"lineNumber":209,"author":{"gitId":"ong6"},"content":"with the file that contains the data of your previous imPoster home folder."},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"ong6"},"content":"---"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"tjtanjin"},"content":"### \u003cins\u003eGeneral Commands\u003c/ins\u003e"},{"lineNumber":216,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":217,"author":{"gitId":"tjtanjin"},"content":"| Action     | Format                                | Example                                |"},{"lineNumber":218,"author":{"gitId":"tjtanjin"},"content":"| ---------- | ------------------------------------- | -------------------------------------- |"},{"lineNumber":219,"author":{"gitId":"tjtanjin"},"content":"| **Help**   | `help`                                | `help`                                 |"},{"lineNumber":220,"author":{"gitId":"tjtanjin"},"content":"| **Exit**   | `exit`                                | `exit`                                 |"},{"lineNumber":221,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":222,"author":{"gitId":"tjtanjin"},"content":"### \u003cins\u003eEndpoint Commands\u003c/ins\u003e"},{"lineNumber":223,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":224,"author":{"gitId":"ong6"},"content":"| Action     | Format                                | Example                                |"},{"lineNumber":225,"author":{"gitId":"ong6"},"content":"| ---------- | ------------------------------------- | -------------------------------------- |"},{"lineNumber":226,"author":{"gitId":"JulietTeoh"},"content":"| **Add**    | `add -x METHOD -u URL [t/TAG]…` \u003cbr\u003e  | `add -x GET -u https://www.google.com` |"},{"lineNumber":227,"author":{"gitId":"JulietTeoh"},"content":"| **Edit**   | `edit INDEX [-x METHOD] [-u URL] [t/TAG]`\u003cbr\u003e | `edit 1 -u https://facebook.com` |"},{"lineNumber":228,"author":{"gitId":"tjtanjin"},"content":"| **Remove** | `remove INDEX`\u003cbr\u003e                    | `remove 3`                             |"},{"lineNumber":229,"author":{"gitId":"JulietTeoh"},"content":"| **Find**   | `find KEYWORD [MORE_KEYWORDS]…`\u003cbr\u003e  | `find maps`                            |"},{"lineNumber":230,"author":{"gitId":"ong6"},"content":"| **List**   | `list`                                | `list`                                 |"},{"lineNumber":231,"author":{"gitId":"tjtanjin"},"content":"| **Clear**  | `clear`                               | `clear`                                |"},{"lineNumber":232,"author":{"gitId":"tjtanjin"},"content":"| **Send**   | `send INDEX` \u003cbr\u003e                     | `send 1`                               |"},{"lineNumber":233,"author":{"gitId":"tjtanjin"},"content":"| **Run**    | `run -x METHOD -u URL` \u003cbr\u003e           | `run -x GET -u https://www.yahoo.com`  |"},{"lineNumber":234,"author":{"gitId":"JulietTeoh"},"content":""}],"authorContributionMap":{"ong6":45,"tlylt":1,"-":107,"tjtanjin":75,"JulietTeoh":6}},{"path":"docs/WorkflowGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"\u003cp align\u003d\"center\"\u003e"},{"lineNumber":2,"author":{"gitId":"ong6"},"content":"  \u003cimg src\u003d\"images/imPoster.png\" width\u003d\"300px\" /\u003e"},{"lineNumber":3,"author":{"gitId":"ong6"},"content":"  \u003ch1 align\u003d\"center\"\u003eimPoster Workflow Guide\u003c/h1\u003e"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"\u003c/p\u003e"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"## Table of Contents"},{"lineNumber":7,"author":{"gitId":"ong6"},"content":""},{"lineNumber":8,"author":{"gitId":"ong6"},"content":"- [Introduction](#introduction)"},{"lineNumber":9,"author":{"gitId":"ong6"},"content":"- [Forking Workflow](#forking-workflow)"},{"lineNumber":10,"author":{"gitId":"ong6"},"content":"- [Issues](#issues)"},{"lineNumber":11,"author":{"gitId":"ong6"},"content":"- [Pull Requests](#pull-requests-pr)"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"### Introduction"},{"lineNumber":14,"author":{"gitId":"ong6"},"content":""},{"lineNumber":15,"author":{"gitId":"ong6"},"content":"imPoster Workflow Guide documents the team\u0027s agreed upon standardisation of"},{"lineNumber":16,"author":{"gitId":"ong6"},"content":"workflow practices to adhere to in the development of the project."},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"### Forking Workflow"},{"lineNumber":19,"author":{"gitId":"ong6"},"content":""},{"lineNumber":20,"author":{"gitId":"ong6"},"content":"The team will adopt the"},{"lineNumber":21,"author":{"gitId":"ong6"},"content":"[forking workflow](https://nus-cs2103-ay2021s2.github.io/website/schedule/week7/topics.html#w7-7-project-mgt-workflows)"},{"lineNumber":22,"author":{"gitId":"ong6"},"content":"in accordance with the requirements of the module. In general, before working on"},{"lineNumber":23,"author":{"gitId":"ong6"},"content":"a new issue, an individual will first update their fork\u0027s master branch with the"},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"master branch of the team\u0027s repository. Typically, the command to do so would be"},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"as such (the second step is only necessary for the first time):"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":""},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"```"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"git checkout master"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"git remote add upstream https://github.com/AY2021S2-CS2103T-T12-4/tp.git"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"git fetch upstream"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"git merge upstream/master"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"git push"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"```"},{"lineNumber":34,"author":{"gitId":"ong6"},"content":""},{"lineNumber":35,"author":{"gitId":"ong6"},"content":"Running the script `sync.sh` within the scripts folder will also achieve the"},{"lineNumber":36,"author":{"gitId":"ong6"},"content":"same affect. Following which, the branch for the new issue will be checked out"},{"lineNumber":37,"author":{"gitId":"ong6"},"content":"from the master branch and development work can begin. By this point, an"},{"lineNumber":38,"author":{"gitId":"ong6"},"content":"[issue](#issues) should also have been created to match what a PR from this new"},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"branch will be able to address."},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"### Issues"},{"lineNumber":42,"author":{"gitId":"ong6"},"content":""},{"lineNumber":43,"author":{"gitId":"ong6"},"content":"Apart from listing user stories, issues will be used as the primary way to track"},{"lineNumber":44,"author":{"gitId":"ong6"},"content":"in detail the tasks being worked on (the broad overview is also captured in the"},{"lineNumber":45,"author":{"gitId":"ong6"},"content":"[gantt chart](https://docs.google.com/spreadsheets/d/10HzmFh2pCHIu-8VpJSCRy0jzpVehnYpm/edit#gid\u003d577662797))."},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"When adding new issues, the following format will be adhered to:"},{"lineNumber":47,"author":{"gitId":"ong6"},"content":""},{"lineNumber":48,"author":{"gitId":"ong6"},"content":"- Issues will be labelled with a type and priority (e.g. type.Task,"},{"lineNumber":49,"author":{"gitId":"ong6"},"content":"  priority.High)"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"- Issues will be tagged with a milestone"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"- Issues will be assigned with an assignee"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"### Pull Requests (PR)"},{"lineNumber":54,"author":{"gitId":"ong6"},"content":""},{"lineNumber":55,"author":{"gitId":"ong6"},"content":"For code that is ready to be merged, a pull request will be opened from the"},{"lineNumber":56,"author":{"gitId":"ong6"},"content":"working branch on the individual fork of the project to the master branch of the"},{"lineNumber":57,"author":{"gitId":"ong6"},"content":"team repository. This follows the [forking workflow](#forking-workflow)"},{"lineNumber":58,"author":{"gitId":"ong6"},"content":"highlighted above. In addition, all pull requests will have the following"},{"lineNumber":59,"author":{"gitId":"ong6"},"content":"format:"},{"lineNumber":60,"author":{"gitId":"ong6"},"content":""},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"- PRs will be labelled with only a priority label (e.g. priority.High)"},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":"- PRs will be tagged with a milestone"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"- PRs will have no assignees which defaults to the author of the PR"},{"lineNumber":64,"author":{"gitId":"ong6"},"content":"- PRs will link clearly at the bottom of the PR message the issue it will"},{"lineNumber":65,"author":{"gitId":"ong6"},"content":"  address (e.g. Closes #34)"},{"lineNumber":66,"author":{"gitId":"ong6"},"content":"- PRs will need to pass all CI checks and require approval of at least one"},{"lineNumber":67,"author":{"gitId":"ong6"},"content":"  reviewer before merging"},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"- PRs will be merged by the PR author after an approval from a reviewer"},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":"### Reviews"},{"lineNumber":71,"author":{"gitId":"ong6"},"content":""},{"lineNumber":72,"author":{"gitId":"ong6"},"content":"Reviews may be done by any members of the team except for the PR author. An"},{"lineNumber":73,"author":{"gitId":"ong6"},"content":"approval will be given only when the PR is deemed fully ready to be merged."},{"lineNumber":74,"author":{"gitId":"ong6"},"content":"### Unfinished Work"},{"lineNumber":75,"author":{"gitId":"ong6"},"content":""},{"lineNumber":76,"author":{"gitId":"ong6"},"content":"If there is any unfinished work/ work that needs to be improved upon, add the keyword `//to-do` behind it followed by a comment on the actions that need to be pursued afterwards. An example is as follows:"},{"lineNumber":77,"author":{"gitId":"ong6"},"content":""},{"lineNumber":78,"author":{"gitId":"ong6"},"content":"```//to-do work on adding more Tests```"},{"lineNumber":79,"author":{"gitId":"ong6"},"content":""},{"lineNumber":80,"author":{"gitId":"ong6"},"content":"Optionally, the author may write their name behind to signal that they will be continuing work on this `//to-do` so that other members do not write unnecessary code. An example would be as follows:"},{"lineNumber":81,"author":{"gitId":"ong6"},"content":""},{"lineNumber":82,"author":{"gitId":"ong6"},"content":"```//to-do Jun Xiong work on adding more Tests```"}],"authorContributionMap":{"ong6":55,"tjtanjin":27}},{"path":"docs/diagrams/RemoveSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"box Logic LOGIC_COLOR_T1"},{"lineNumber":5,"author":{"gitId":"-"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR"},{"lineNumber":6,"author":{"gitId":"-"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"},{"lineNumber":7,"author":{"gitId":"JulietTeoh"},"content":"participant \":RemoveCommandParser\" as RemoveCommandParser LOGIC_COLOR"},{"lineNumber":8,"author":{"gitId":"JulietTeoh"},"content":"participant \"d:RemoveCommand\" as RemoveCommand LOGIC_COLOR"},{"lineNumber":9,"author":{"gitId":"-"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR"},{"lineNumber":10,"author":{"gitId":"-"},"content":"end box"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"box Model MODEL_COLOR_T1"},{"lineNumber":13,"author":{"gitId":"-"},"content":"participant \":Model\" as Model MODEL_COLOR"},{"lineNumber":14,"author":{"gitId":"-"},"content":"end box"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"[-\u003e LogicManager : execute(\"delete 1\")"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate LogicManager"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"delete 1\")"},{"lineNumber":20,"author":{"gitId":"-"},"content":"activate AddressBookParser"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"create DeleteCommandParser"},{"lineNumber":23,"author":{"gitId":"-"},"content":"AddressBookParser -\u003e DeleteCommandParser"},{"lineNumber":24,"author":{"gitId":"-"},"content":"activate DeleteCommandParser"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"DeleteCommandParser --\u003e AddressBookParser"},{"lineNumber":27,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"AddressBookParser -\u003e DeleteCommandParser : parse(\"1\")"},{"lineNumber":30,"author":{"gitId":"-"},"content":"activate DeleteCommandParser"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"create DeleteCommand"},{"lineNumber":33,"author":{"gitId":"-"},"content":"DeleteCommandParser -\u003e DeleteCommand"},{"lineNumber":34,"author":{"gitId":"-"},"content":"activate DeleteCommand"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e DeleteCommandParser : d"},{"lineNumber":37,"author":{"gitId":"-"},"content":"deactivate DeleteCommand"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"DeleteCommandParser --\u003e AddressBookParser : d"},{"lineNumber":40,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser"},{"lineNumber":41,"author":{"gitId":"-"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar."},{"lineNumber":42,"author":{"gitId":"-"},"content":"DeleteCommandParser -[hidden]-\u003e AddressBookParser"},{"lineNumber":43,"author":{"gitId":"-"},"content":"destroy DeleteCommandParser"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"AddressBookParser --\u003e LogicManager : d"},{"lineNumber":46,"author":{"gitId":"-"},"content":"deactivate AddressBookParser"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"LogicManager -\u003e DeleteCommand : execute()"},{"lineNumber":49,"author":{"gitId":"-"},"content":"activate DeleteCommand"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"DeleteCommand -\u003e Model : deletePerson(1)"},{"lineNumber":52,"author":{"gitId":"-"},"content":"activate Model"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"Model --\u003e DeleteCommand"},{"lineNumber":55,"author":{"gitId":"-"},"content":"deactivate Model"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"create CommandResult"},{"lineNumber":58,"author":{"gitId":"-"},"content":"DeleteCommand -\u003e CommandResult"},{"lineNumber":59,"author":{"gitId":"-"},"content":"activate CommandResult"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"CommandResult --\u003e DeleteCommand"},{"lineNumber":62,"author":{"gitId":"-"},"content":"deactivate CommandResult"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e LogicManager : result"},{"lineNumber":65,"author":{"gitId":"-"},"content":"deactivate DeleteCommand"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"[\u003c--LogicManager"},{"lineNumber":68,"author":{"gitId":"-"},"content":"deactivate LogicManager"},{"lineNumber":69,"author":{"gitId":"-"},"content":"@enduml"}],"authorContributionMap":{"-":67,"JulietTeoh":2}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"title: imPoster"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-T12-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-T12-4/tp/actions)"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-T12-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103T-T12-4/tp)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"**imPoster contains most of the features of [Postman](https://www.postman.com/) and is implemented in a simple and minimalistic style** that is easy for anyone to pick up. The latest releases for download are available [here](https://github.com/AY2021S2-CS2103T-T12-4/tp/releases)."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"* If you are interested in using imPoster, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"* If you are interested about developing imPoster, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"-":12,"tjtanjin":7}},{"path":"docs/team/julietteoh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JulietTeoh"},"content":"---"},{"lineNumber":2,"author":{"gitId":"JulietTeoh"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"JulietTeoh"},"content":"title: Juliet Teoh\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"JulietTeoh"},"content":"---"},{"lineNumber":5,"author":{"gitId":"JulietTeoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JulietTeoh"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"JulietTeoh"},"content":""},{"lineNumber":8,"author":{"gitId":"ong6"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching"},{"lineNumber":9,"author":{"gitId":"ong6"},"content":"Software Engineering principles. The user interacts with it using a CLI, and it"},{"lineNumber":10,"author":{"gitId":"ong6"},"content":"has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":11,"author":{"gitId":"JulietTeoh"},"content":""},{"lineNumber":12,"author":{"gitId":"JulietTeoh"},"content":"Given below are my contributions to the project."},{"lineNumber":13,"author":{"gitId":"JulietTeoh"},"content":""},{"lineNumber":14,"author":{"gitId":"ong6"},"content":"- **New Feature**:"},{"lineNumber":15,"author":{"gitId":"JulietTeoh"},"content":""},{"lineNumber":16,"author":{"gitId":"ong6"},"content":"- **Code contributed**: [RepoSense link]()"},{"lineNumber":17,"author":{"gitId":"JulietTeoh"},"content":""},{"lineNumber":18,"author":{"gitId":"ong6"},"content":"- **Project management**:"},{"lineNumber":19,"author":{"gitId":"JulietTeoh"},"content":""},{"lineNumber":20,"author":{"gitId":"ong6"},"content":"- **Enhancements to existing features**:"},{"lineNumber":21,"author":{"gitId":"JulietTeoh"},"content":""},{"lineNumber":22,"author":{"gitId":"ong6"},"content":"- **Documentation**:"},{"lineNumber":23,"author":{"gitId":"JulietTeoh"},"content":""},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"  - User Guide:"},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"    - Added documentation for the features `add`, `remove`, `edit`, `find`,"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"      `list`, `clear`, `help`"},{"lineNumber":27,"author":{"gitId":"ong6"},"content":"  - Developer Guide:"},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"    -"},{"lineNumber":29,"author":{"gitId":"JulietTeoh"},"content":""},{"lineNumber":30,"author":{"gitId":"ong6"},"content":"- **Community**:"},{"lineNumber":31,"author":{"gitId":"ong6"},"content":""},{"lineNumber":32,"author":{"gitId":"ong6"},"content":"- **Tools**:"}],"authorContributionMap":{"ong6":16,"JulietTeoh":16}},{"path":"docs/team/nightraven49.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"NightRaven49"},"content":"title: Warren Ng\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"NightRaven49":1,"-":45}},{"path":"docs/team/ong6.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ong6"},"content":"---"},{"lineNumber":2,"author":{"gitId":"ong6"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"ong6"},"content":"title: Jun Xiong\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"ong6"},"content":"---"},{"lineNumber":5,"author":{"gitId":"ong6"},"content":""},{"lineNumber":6,"author":{"gitId":"ong6"},"content":"## Project: imPoster"},{"lineNumber":7,"author":{"gitId":"ong6"},"content":""},{"lineNumber":8,"author":{"gitId":"ong6"},"content":"imPoster, imPoster, Your new API Tester!"},{"lineNumber":9,"author":{"gitId":"ong6"},"content":""},{"lineNumber":10,"author":{"gitId":"ong6"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"ong6"},"content":""},{"lineNumber":12,"author":{"gitId":"ong6"},"content":"\\*Below is the template that will be updating overtime, stay tuned!"},{"lineNumber":13,"author":{"gitId":"ong6"},"content":""},{"lineNumber":14,"author":{"gitId":"ong6"},"content":"- **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":15,"author":{"gitId":"ong6"},"content":""},{"lineNumber":16,"author":{"gitId":"ong6"},"content":"  - What it does: allows the user to undo all previous commands one at a time."},{"lineNumber":17,"author":{"gitId":"ong6"},"content":"    Preceding undo commands can be reversed by using the redo command."},{"lineNumber":18,"author":{"gitId":"ong6"},"content":"  - Justification: This feature improves the product significantly because a"},{"lineNumber":19,"author":{"gitId":"ong6"},"content":"    user can make mistakes in commands and the app should provide a convenient"},{"lineNumber":20,"author":{"gitId":"ong6"},"content":"    way to rectify them."},{"lineNumber":21,"author":{"gitId":"ong6"},"content":"  - Highlights: This enhancement affects existing commands and commands to be"},{"lineNumber":22,"author":{"gitId":"ong6"},"content":"    added in future. It required an in-depth analysis of design alternatives."},{"lineNumber":23,"author":{"gitId":"ong6"},"content":"    The implementation too was challenging as it required changes to existing"},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"    commands."},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"  - Credits: _{mention here if you reused any code/ideas from elsewhere or if a"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"    third-party library is heavily used in the feature so that a reader can make"},{"lineNumber":27,"author":{"gitId":"ong6"},"content":"    a more accurate judgement of how much effort went into the feature}_"},{"lineNumber":28,"author":{"gitId":"ong6"},"content":""},{"lineNumber":29,"author":{"gitId":"ong6"},"content":"- **New Feature**: Added a history command that allows the user to navigate to"},{"lineNumber":30,"author":{"gitId":"ong6"},"content":"  previous commands using up/down keys."},{"lineNumber":31,"author":{"gitId":"ong6"},"content":""},{"lineNumber":32,"author":{"gitId":"ong6"},"content":"- **Code contributed**: [RepoSense link]()"},{"lineNumber":33,"author":{"gitId":"ong6"},"content":""},{"lineNumber":34,"author":{"gitId":"ong6"},"content":"- **Project management**:"},{"lineNumber":35,"author":{"gitId":"ong6"},"content":""},{"lineNumber":36,"author":{"gitId":"ong6"},"content":"  - Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":37,"author":{"gitId":"ong6"},"content":""},{"lineNumber":38,"author":{"gitId":"ong6"},"content":"- **Enhancements to existing features**:"},{"lineNumber":39,"author":{"gitId":"ong6"},"content":""},{"lineNumber":40,"author":{"gitId":"ong6"},"content":"  - Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":41,"author":{"gitId":"ong6"},"content":"  - Wrote additional tests for existing features to increase coverage from 88%"},{"lineNumber":42,"author":{"gitId":"ong6"},"content":"    to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":43,"author":{"gitId":"ong6"},"content":""},{"lineNumber":44,"author":{"gitId":"ong6"},"content":"- **Documentation**:"},{"lineNumber":45,"author":{"gitId":"ong6"},"content":""},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"  - User Guide:"},{"lineNumber":47,"author":{"gitId":"ong6"},"content":"    - Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":48,"author":{"gitId":"ong6"},"content":"    - Did cosmetic tweaks to existing documentation of features `clear`, `exit`:"},{"lineNumber":49,"author":{"gitId":"ong6"},"content":"      [\\#74]()"},{"lineNumber":50,"author":{"gitId":"ong6"},"content":"  - Developer Guide:"},{"lineNumber":51,"author":{"gitId":"ong6"},"content":"    - Added implementation details of the `delete` feature."},{"lineNumber":52,"author":{"gitId":"ong6"},"content":""},{"lineNumber":53,"author":{"gitId":"ong6"},"content":"- **Community**:"},{"lineNumber":54,"author":{"gitId":"ong6"},"content":""},{"lineNumber":55,"author":{"gitId":"ong6"},"content":"  - PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](),"},{"lineNumber":56,"author":{"gitId":"ong6"},"content":"    [\\#19](), [\\#42]()"},{"lineNumber":57,"author":{"gitId":"ong6"},"content":"  - Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":58,"author":{"gitId":"ong6"},"content":"  - Reported bugs and suggestions for other teams in the class (examples: [1](),"},{"lineNumber":59,"author":{"gitId":"ong6"},"content":"    [2](), [3]())"},{"lineNumber":60,"author":{"gitId":"ong6"},"content":"  - Some parts of the history feature I added was adopted by several other class"},{"lineNumber":61,"author":{"gitId":"ong6"},"content":"    mates ([1](), [2]())"},{"lineNumber":62,"author":{"gitId":"ong6"},"content":""},{"lineNumber":63,"author":{"gitId":"ong6"},"content":"- **Tools**:"},{"lineNumber":64,"author":{"gitId":"ong6"},"content":""},{"lineNumber":65,"author":{"gitId":"ong6"},"content":"  - Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":66,"author":{"gitId":"ong6"},"content":"  - Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":67,"author":{"gitId":"ong6"},"content":""},{"lineNumber":68,"author":{"gitId":"ong6"},"content":"- _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"ong6":68}},{"path":"docs/team/tjtanjin.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"---"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"title: Tan Jin\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"---"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":6,"author":{"gitId":"ong6"},"content":"## Project: imPoster"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":8,"author":{"gitId":"ong6"},"content":"imPoster, imPoster, Your new API Tester!"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":12,"author":{"gitId":"ong6"},"content":"\\*Below is the template that will be updating overtime, stay tuned!"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":14,"author":{"gitId":"ong6"},"content":"- **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":16,"author":{"gitId":"ong6"},"content":"  - What it does: allows the user to undo all previous commands one at a time."},{"lineNumber":17,"author":{"gitId":"ong6"},"content":"    Preceding undo commands can be reversed by using the redo command."},{"lineNumber":18,"author":{"gitId":"ong6"},"content":"  - Justification: This feature improves the product significantly because a"},{"lineNumber":19,"author":{"gitId":"ong6"},"content":"    user can make mistakes in commands and the app should provide a convenient"},{"lineNumber":20,"author":{"gitId":"ong6"},"content":"    way to rectify them."},{"lineNumber":21,"author":{"gitId":"ong6"},"content":"  - Highlights: This enhancement affects existing commands and commands to be"},{"lineNumber":22,"author":{"gitId":"ong6"},"content":"    added in future. It required an in-depth analysis of design alternatives."},{"lineNumber":23,"author":{"gitId":"ong6"},"content":"    The implementation too was challenging as it required changes to existing"},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"    commands."},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"  - Credits: _{mention here if you reused any code/ideas from elsewhere or if a"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"    third-party library is heavily used in the feature so that a reader can make"},{"lineNumber":27,"author":{"gitId":"ong6"},"content":"    a more accurate judgement of how much effort went into the feature}_"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":29,"author":{"gitId":"ong6"},"content":"- **New Feature**: Added a history command that allows the user to navigate to"},{"lineNumber":30,"author":{"gitId":"ong6"},"content":"  previous commands using up/down keys."},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":32,"author":{"gitId":"ong6"},"content":"- **Code contributed**:"},{"lineNumber":33,"author":{"gitId":"ong6"},"content":"  [RepoSense link](https://nus-cs2103-ay2021s2.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2021-02-19\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dtjtanjin\u0026tabRepo\u003dAY2021S2-CS2103T-T12-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003d)"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":35,"author":{"gitId":"ong6"},"content":"- **Project management**:"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":37,"author":{"gitId":"ong6"},"content":"  - Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"- **Enhancements to existing features**:"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":41,"author":{"gitId":"ong6"},"content":"  - Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":42,"author":{"gitId":"ong6"},"content":"  - Wrote additional tests for existing features to increase coverage from 88%"},{"lineNumber":43,"author":{"gitId":"ong6"},"content":"    to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":44,"author":{"gitId":"ong6"},"content":""},{"lineNumber":45,"author":{"gitId":"ong6"},"content":"- **Documentation**:"},{"lineNumber":46,"author":{"gitId":"ong6"},"content":""},{"lineNumber":47,"author":{"gitId":"ong6"},"content":"  - User Guide:"},{"lineNumber":48,"author":{"gitId":"ong6"},"content":"    - Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":49,"author":{"gitId":"ong6"},"content":"    - Did cosmetic tweaks to existing documentation of features `clear`, `exit`:"},{"lineNumber":50,"author":{"gitId":"ong6"},"content":"      [\\#74]()"},{"lineNumber":51,"author":{"gitId":"ong6"},"content":"  - Developer Guide:"},{"lineNumber":52,"author":{"gitId":"ong6"},"content":"    - Added implementation details of the `delete` feature."},{"lineNumber":53,"author":{"gitId":"ong6"},"content":""},{"lineNumber":54,"author":{"gitId":"ong6"},"content":"- **Community**:"},{"lineNumber":55,"author":{"gitId":"ong6"},"content":""},{"lineNumber":56,"author":{"gitId":"ong6"},"content":"  - PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](),"},{"lineNumber":57,"author":{"gitId":"ong6"},"content":"    [\\#19](), [\\#42]()"},{"lineNumber":58,"author":{"gitId":"ong6"},"content":"  - Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":59,"author":{"gitId":"ong6"},"content":"  - Reported bugs and suggestions for other teams in the class (examples: [1](),"},{"lineNumber":60,"author":{"gitId":"ong6"},"content":"    [2](), [3]())"},{"lineNumber":61,"author":{"gitId":"ong6"},"content":"  - Some parts of the history feature I added was adopted by several other class"},{"lineNumber":62,"author":{"gitId":"ong6"},"content":"    mates ([1](), [2]())"},{"lineNumber":63,"author":{"gitId":"ong6"},"content":""},{"lineNumber":64,"author":{"gitId":"ong6"},"content":"- **Tools**:"},{"lineNumber":65,"author":{"gitId":"ong6"},"content":""},{"lineNumber":66,"author":{"gitId":"ong6"},"content":"  - Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":67,"author":{"gitId":"ong6"},"content":"  - Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":68,"author":{"gitId":"ong6"},"content":""},{"lineNumber":69,"author":{"gitId":"ong6"},"content":"- _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"ong6":52,"tjtanjin":17}},{"path":"docs/team/tlylt.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"---"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"title: Yongliang\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":"---"},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":6,"author":{"gitId":"ong6"},"content":"## Project: imPoster"},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":8,"author":{"gitId":"ong6"},"content":"imPoster, imPoster, Your new API Tester!"},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":12,"author":{"gitId":"ong6"},"content":"\\*Below is the template that will be updating overtime, stay tuned!"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":14,"author":{"gitId":"ong6"},"content":"- **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":16,"author":{"gitId":"ong6"},"content":"  - What it does: allows the user to undo all previous commands one at a time."},{"lineNumber":17,"author":{"gitId":"ong6"},"content":"    Preceding undo commands can be reversed by using the redo command."},{"lineNumber":18,"author":{"gitId":"ong6"},"content":"  - Justification: This feature improves the product significantly because a"},{"lineNumber":19,"author":{"gitId":"ong6"},"content":"    user can make mistakes in commands and the app should provide a convenient"},{"lineNumber":20,"author":{"gitId":"ong6"},"content":"    way to rectify them."},{"lineNumber":21,"author":{"gitId":"ong6"},"content":"  - Highlights: This enhancement affects existing commands and commands to be"},{"lineNumber":22,"author":{"gitId":"ong6"},"content":"    added in future. It required an in-depth analysis of design alternatives."},{"lineNumber":23,"author":{"gitId":"ong6"},"content":"    The implementation too was challenging as it required changes to existing"},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"    commands."},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"  - Credits: _{mention here if you reused any code/ideas from elsewhere or if a"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"    third-party library is heavily used in the feature so that a reader can make"},{"lineNumber":27,"author":{"gitId":"ong6"},"content":"    a more accurate judgement of how much effort went into the feature}_"},{"lineNumber":28,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":29,"author":{"gitId":"ong6"},"content":"- **New Feature**: Added a history command that allows the user to navigate to"},{"lineNumber":30,"author":{"gitId":"ong6"},"content":"  previous commands using up/down keys."},{"lineNumber":31,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":32,"author":{"gitId":"ong6"},"content":"- **Code contributed**: [RepoSense link]()"},{"lineNumber":33,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":34,"author":{"gitId":"ong6"},"content":"- **Project management**:"},{"lineNumber":35,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":36,"author":{"gitId":"ong6"},"content":"  - Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":37,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":38,"author":{"gitId":"ong6"},"content":"- **Enhancements to existing features**:"},{"lineNumber":39,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":40,"author":{"gitId":"ong6"},"content":"  - Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":41,"author":{"gitId":"ong6"},"content":"  - Wrote additional tests for existing features to increase coverage from 88%"},{"lineNumber":42,"author":{"gitId":"ong6"},"content":"    to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":43,"author":{"gitId":"ong6"},"content":""},{"lineNumber":44,"author":{"gitId":"ong6"},"content":"- **Documentation**:"},{"lineNumber":45,"author":{"gitId":"ong6"},"content":""},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"  - User Guide:"},{"lineNumber":47,"author":{"gitId":"ong6"},"content":"    - Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":48,"author":{"gitId":"ong6"},"content":"    - Did cosmetic tweaks to existing documentation of features `clear`, `exit`:"},{"lineNumber":49,"author":{"gitId":"ong6"},"content":"      [\\#74]()"},{"lineNumber":50,"author":{"gitId":"ong6"},"content":"  - Developer Guide:"},{"lineNumber":51,"author":{"gitId":"ong6"},"content":"    - Added implementation details of the `delete` feature."},{"lineNumber":52,"author":{"gitId":"ong6"},"content":""},{"lineNumber":53,"author":{"gitId":"ong6"},"content":"- **Community**:"},{"lineNumber":54,"author":{"gitId":"ong6"},"content":""},{"lineNumber":55,"author":{"gitId":"ong6"},"content":"  - PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](),"},{"lineNumber":56,"author":{"gitId":"ong6"},"content":"    [\\#19](), [\\#42]()"},{"lineNumber":57,"author":{"gitId":"ong6"},"content":"  - Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":58,"author":{"gitId":"ong6"},"content":"  - Reported bugs and suggestions for other teams in the class (examples: [1](),"},{"lineNumber":59,"author":{"gitId":"ong6"},"content":"    [2](), [3]())"},{"lineNumber":60,"author":{"gitId":"ong6"},"content":"  - Some parts of the history feature I added was adopted by several other class"},{"lineNumber":61,"author":{"gitId":"ong6"},"content":"    mates ([1](), [2]())"},{"lineNumber":62,"author":{"gitId":"ong6"},"content":""},{"lineNumber":63,"author":{"gitId":"ong6"},"content":"- **Tools**:"},{"lineNumber":64,"author":{"gitId":"ong6"},"content":""},{"lineNumber":65,"author":{"gitId":"ong6"},"content":"  - Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":66,"author":{"gitId":"ong6"},"content":"  - Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":67,"author":{"gitId":"ong6"},"content":""},{"lineNumber":68,"author":{"gitId":"ong6"},"content":"- _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"ong6":51,"tlylt":17}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"ong6"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1."},{"lineNumber":7,"author":{"gitId":"ong6"},"content":"\u003e We are constantly reading old code as part of the effort to write new code."},{"lineNumber":8,"author":{"gitId":"ong6"},"content":"\u003e …​\\[Therefore,\\] making it easy to read makes it easier to write."},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003e — Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"ong6"},"content":"When trying to understand an unfamiliar code base, one common strategy used is"},{"lineNumber":13,"author":{"gitId":"ong6"},"content":"to trace some representative execution path through the code base. One easy way"},{"lineNumber":14,"author":{"gitId":"ong6"},"content":"to trace an execution path is to use a debugger to step through the code. In"},{"lineNumber":15,"author":{"gitId":"ong6"},"content":"this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the"},{"lineNumber":16,"author":{"gitId":"ong6"},"content":"execution path of a specific user command."},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"ong6"},"content":"- Table of Contents {:toc}"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"## Before we start"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"ong6"},"content":"Before we jump into the code, it is useful to get an idea of the overall"},{"lineNumber":23,"author":{"gitId":"ong6"},"content":"structure and the high-level behavior of the application. This is provided in"},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"the \u0027Architecture\u0027 section of the developer guide. In particular, the"},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"architecture diagram (reproduced below), tells us that the App consists of"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"several components."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"ong6"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command"},{"lineNumber":31,"author":{"gitId":"ong6"},"content":"propagates through the App."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"![Architecture sequence diagram from the developer"},{"lineNumber":34,"author":{"gitId":"-"},"content":"guide](../images/ArchitectureSequenceDiagram.png)"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"ong6"},"content":"Note how the diagram shows only how the execution flows _between_ the main"},{"lineNumber":37,"author":{"gitId":"ong6"},"content":"components. That is, it does not show details of the execution path _inside_"},{"lineNumber":38,"author":{"gitId":"ong6"},"content":"each component. By hiding those details, the diagram succeeds in informing the"},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"reader about the overall execution path of a command without overwhelming the"},{"lineNumber":40,"author":{"gitId":"ong6"},"content":"reader with too much details. In this tutorial, you aim to find those omitted"},{"lineNumber":41,"author":{"gitId":"ong6"},"content":"details so that you get a more in-depth understanding of the code base."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:"},{"lineNumber":44,"author":{"gitId":"ong6"},"content":""},{"lineNumber":45,"author":{"gitId":"ong6"},"content":"1. Read the"},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"   [_Architecture_ section of the DG](../DeveloperGuide.md#architecture)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"## Setting a break point"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"ong6"},"content":"As you know, the first step of debugging is to put in a breakpoint where you"},{"lineNumber":53,"author":{"gitId":"ong6"},"content":"want the debugger to pause the execution. For example, if you are trying to"},{"lineNumber":54,"author":{"gitId":"ong6"},"content":"understand how the App starts up, you would put a breakpoint in the first"},{"lineNumber":55,"author":{"gitId":"ong6"},"content":"statement of the `main` method. In our case, we would want to begin the tracing"},{"lineNumber":56,"author":{"gitId":"ong6"},"content":"at the very point where the App start processing user input (i.e., somewhere in"},{"lineNumber":57,"author":{"gitId":"ong6"},"content":"the UI component), and then trace through how the execution proceeds through the"},{"lineNumber":58,"author":{"gitId":"ong6"},"content":"UI component. However, the execution path through a GUI is often somewhat"},{"lineNumber":59,"author":{"gitId":"ong6"},"content":"obscure due to various _event-driven mechanisms_ used by GUI frameworks, which"},{"lineNumber":60,"author":{"gitId":"ong6"},"content":"happens to be the case here too. Therefore, let us put the breakpoint where the"},{"lineNumber":61,"author":{"gitId":"ong6"},"content":"UI transfers control to the Logic component. According to the sequence diagram,"},{"lineNumber":62,"author":{"gitId":"ong6"},"content":"the UI component yields control to the Logic component through a method named"},{"lineNumber":63,"author":{"gitId":"ong6"},"content":"`execute`. Searching through the code base for `execute()` yields a promising"},{"lineNumber":64,"author":{"gitId":"ong6"},"content":"candidate in `seedu.address.ui.CommandBox.CommandExecutor`."},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"ong6"},"content":"![Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`.](../images/tracing/Execute.png)"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"ong6"},"content":"A quick look at the class confirms that this is indeed close to what we’re"},{"lineNumber":69,"author":{"gitId":"ong6"},"content":"looking for. However, it is just an `Interface`. Let’s delve further and find"},{"lineNumber":70,"author":{"gitId":"ong6"},"content":"the implementation of the interface by using the `Find Usages` feature in"},{"lineNumber":71,"author":{"gitId":"ong6"},"content":"IntelliJ IDEA."},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"ong6"},"content":"![`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`.](../images/tracing/FindUsages.png)"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"ong6"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking"},{"lineNumber":76,"author":{"gitId":"ong6"},"content":"for\\!"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"ong6"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the"},{"lineNumber":79,"author":{"gitId":"ong6"},"content":"corresponding code. Once there, click on the left gutter to set a breakpoint, as"},{"lineNumber":80,"author":{"gitId":"ong6"},"content":"shown below. ![LeftGutter](../images/tracing/LeftGutter.png)"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"## Tracing the execution path"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"ong6"},"content":"Recall from the User Guide that the `edit` command has the format:"},{"lineNumber":85,"author":{"gitId":"ong6"},"content":"`edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this"},{"lineNumber":86,"author":{"gitId":"ong6"},"content":"tutorial we will be issuing the command `edit 1 n/GET Yeoh`."},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"ong6"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter"},{"lineNumber":91,"author":{"gitId":"ong6"},"content":"every major component in the application. Try to jot down what happens inside"},{"lineNumber":92,"author":{"gitId":"ong6"},"content":"the component and where the execution transfers to another component."},{"lineNumber":93,"author":{"gitId":"ong6"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"ong6"},"content":"1. Enter `edit 1 n/GET Yeoh` into the command box and press `Enter`."},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"ong6"},"content":"1. Use the `Show execution point` feature to jump to the line of code that we"},{"lineNumber":104,"author":{"gitId":"ong6"},"content":"   stopped at:\u003cbr\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"ong6"},"content":"1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that"},{"lineNumber":108,"author":{"gitId":"ong6"},"content":"   you end up at."},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"ong6"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so"},{"lineNumber":111,"author":{"gitId":"ong6"},"content":"   let’s `Step in` into that method call:\u003cbr\u003e"},{"lineNumber":112,"author":{"gitId":"-"},"content":"   ![StepInto](../images/tracing/StepInto.png)"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"ong6"},"content":"1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the"},{"lineNumber":115,"author":{"gitId":"ong6"},"content":"   method and annotate what we can deduce."},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"   ```java"},{"lineNumber":120,"author":{"gitId":"-"},"content":"   @Override"},{"lineNumber":121,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)"},{"lineNumber":122,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here."},{"lineNumber":136,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"ong6"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to"},{"lineNumber":146,"author":{"gitId":"ong6"},"content":"   other components. Let’s take a closer look at each one."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"ong6"},"content":"1. `Step over` the logging code since it is of no interest to us now."},{"lineNumber":149,"author":{"gitId":"ong6"},"content":"   ![StepOver](../images/tracing/StepOver.png)"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"1. `Step into` the line where user input in parsed from a String to a Command."},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"   **`AddressBookParser\\#parseCommand()`**"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"   ```java"},{"lineNumber":156,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":158,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":159,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":160,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":161,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"ong6"},"content":"1. `Step over` until you reach the `switch` statement. The `Variables` window"},{"lineNumber":164,"author":{"gitId":"ong6"},"content":"   now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":"   ![Variables](../images/tracing/Variables.png)"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"ong6"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still"},{"lineNumber":168,"author":{"gitId":"ong6"},"content":"   not processed in any meaningful way."},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"ong6"},"content":"1. Stepping into the `switch`, we obviously stop at"},{"lineNumber":171,"author":{"gitId":"ong6"},"content":"   **`AddressBookParser\\#parseCommand()`.**"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"   ```java"},{"lineNumber":174,"author":{"gitId":"-"},"content":"   ..."},{"lineNumber":175,"author":{"gitId":"-"},"content":"   case EditCommand.COMMAND_WORD:"},{"lineNumber":176,"author":{"gitId":"-"},"content":"       return new EditCommandParser().parse(arguments);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"   ..."},{"lineNumber":178,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it."},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"ong6"},"content":"1. Stepping through the method shows that it calls"},{"lineNumber":183,"author":{"gitId":"ong6"},"content":"   `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the"},{"lineNumber":184,"author":{"gitId":"ong6"},"content":"   arguments and index required."},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"ong6"},"content":"1. The rest of the method seems to exhaustively check for the existence of each"},{"lineNumber":190,"author":{"gitId":"ong6"},"content":"   possible parameter of the `edit` command and store any possible changes in an"},{"lineNumber":191,"author":{"gitId":"ong6"},"content":"   `EditPersonDescriptor`. Recall that we can verify the contents of"},{"lineNumber":192,"author":{"gitId":"ong6"},"content":"   `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`."},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"ong6"},"content":"   The sequence diagram below shows the details of the execution path through"},{"lineNumber":198,"author":{"gitId":"ong6"},"content":"   the Logic component. Does the execution path you traced in the code so far"},{"lineNumber":199,"author":{"gitId":"ong6"},"content":"   matches with the diagram?\u003cbr\u003e"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"1. Now let’s see what happens when we call `command#execute()`\\!"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"   **`EditCommand\\#execute()`:**"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"   ```java"},{"lineNumber":207,"author":{"gitId":"-"},"content":"   @Override"},{"lineNumber":208,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":210,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":211,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"       }"},{"lineNumber":215,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);"},{"lineNumber":216,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":217,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":218,"author":{"gitId":"-"},"content":"   }"},{"lineNumber":219,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to `model`."},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"ong6"},"content":"1. We can a closer look at how storage works by repeatedly stepping into the"},{"lineNumber":224,"author":{"gitId":"ong6"},"content":"   code until we arrive at `JsonAddressBook#saveAddressBook()`."},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"ong6"},"content":"1. Again, it appears that the heavy lifting is delegated. Let’s take a look at"},{"lineNumber":227,"author":{"gitId":"ong6"},"content":"   `JsonSerializableAddressBook`\u0027s constructor."},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"   **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"   ```java"},{"lineNumber":232,"author":{"gitId":"-"},"content":"   /**"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."},{"lineNumber":234,"author":{"gitId":"-"},"content":"    *"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    * @param source future changes to this will not affect the created"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    * {@code JsonSerializableAddressBook}."},{"lineNumber":237,"author":{"gitId":"-"},"content":"    */"},{"lineNumber":238,"author":{"gitId":"-"},"content":"   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"},{"lineNumber":239,"author":{"gitId":"-"},"content":"       persons.addAll("},{"lineNumber":240,"author":{"gitId":"-"},"content":"           source.getPersonList()"},{"lineNumber":241,"author":{"gitId":"-"},"content":"                 .stream()"},{"lineNumber":242,"author":{"gitId":"-"},"content":"                 .map(JsonAdaptedPerson::new)"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                 .collect(Collectors.toList()));"},{"lineNumber":244,"author":{"gitId":"-"},"content":"   }"},{"lineNumber":245,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"ong6"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then"},{"lineNumber":248,"author":{"gitId":"ong6"},"content":"   added to the `JsonSerializableAddressBook`."},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"ong6"},"content":"1. We can continue to step through until we return to"},{"lineNumber":251,"author":{"gitId":"ong6"},"content":"   `MainWindow#executeCommand()`."},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"ong6"},"content":"1. Stepping into"},{"lineNumber":254,"author":{"gitId":"ong6"},"content":"   `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end"},{"lineNumber":255,"author":{"gitId":"ong6"},"content":"   up in:"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"   **`ResultDisplay\\#setFeedbackToUser()`**"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"   ```java"},{"lineNumber":260,"author":{"gitId":"-"},"content":"   public void setFeedbackToUser(String feedbackToUser) {"},{"lineNumber":261,"author":{"gitId":"-"},"content":"       requireNonNull(feedbackToUser);"},{"lineNumber":262,"author":{"gitId":"-"},"content":"       resultDisplay.setText(feedbackToUser);"},{"lineNumber":263,"author":{"gitId":"-"},"content":"   }"},{"lineNumber":264,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"1. Finally, we step through until we reach the end of"},{"lineNumber":267,"author":{"gitId":"-"},"content":"   `MainWindow#executeCommand()`."},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"## Conclusion"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"ong6"},"content":"In this tutorial, we traced a valid edit command from raw user input to the"},{"lineNumber":272,"author":{"gitId":"ong6"},"content":"result being displayed to the user. From this tutorial, you learned more about"},{"lineNumber":273,"author":{"gitId":"ong6"},"content":"the inner workings of AddressBook and how the various components mesh together"},{"lineNumber":274,"author":{"gitId":"ong6"},"content":"to form one cohesive product."},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"ong6"},"content":"Here are some quick questions you can try to answer based on your execution path"},{"lineNumber":277,"author":{"gitId":"ong6"},"content":"tracing. In some cases, you can do further tracing for the given commands to"},{"lineNumber":278,"author":{"gitId":"ong6"},"content":"find exactly what happens."},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"ong6"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you"},{"lineNumber":281,"author":{"gitId":"ong6"},"content":"    think will happen if we traced the following commands instead? What"},{"lineNumber":282,"author":{"gitId":"ong6"},"content":"    exceptions do you think will be thrown(if any), where will the exceptions be"},{"lineNumber":283,"author":{"gitId":"ong6"},"content":"    thrown and where will they be handled?"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"ong6"},"content":"    1.  `redit 1 n/GET Yu`"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"ong6"},"content":"    2.  `edit 0 n/GET Yu`"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"    4.  `edit 1`"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    enhancements to the application?"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"    4.  Add a new command"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book"}],"authorContributionMap":{"ong6":109,"-":201}},{"path":"scripts/sync.sh","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"#!/bin/bash"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"#usage on terminal: sh sync.sh [branch to sync]"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"#if no branch is specified, master is used as default."},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"if [[ $1 \u003d\u003d \"\" ]];"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"then"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"    echo \"Branch to sync defaulted to master.\""},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"    BRANCH_TO_SYNC\u003d\"master\""},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"else"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"    BRANCH_TO_SYNC\u003d$1"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"fi"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"BRANCH_EXIST\u003d$(git branch --list $BRANCH_TO_SYNC)"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"if [[ -z ${BRANCH_EXIST} ]];"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"then"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"    echo \"Branch to sync does not exist.\""},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"    exit"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"CURRENT_BRANCH\u003d`git branch`"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"if [[ $CURRENT_BRANCH !\u003d *\"*    $BRANCH_TO_SYNC\"* ]];"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"then"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    echo \"Switching to branch $BRANCH_TO_SYNC...\""},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"    git checkout $BRANCH_TO_SYNC"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"    if [ ! $? -eq 0 ]; then"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"        echo \"Unable to switch branch.\""},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"        exit"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"    fi"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"fi"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"REMOTE\u003d`git remote -v`"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"if [[ $REMOTE \u003d\u003d *\"upstream https://github.com/AY2021S2-CS2103T-T12-4/tp.git (fetch)\"*"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"    \u0026\u0026 $REMOTE \u003d\u003d *\"upstream    https://github.com/AY2021S2-CS2103T-T12-4/tp.git (push)\"* ]];"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"then"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"    echo \"Upstream found...\""},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"else"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"    echo \"Upstream not found\""},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"    echo \"Adding upstream...\""},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"    git remote add upstream https://github.com/AY2021S2-CS2103T-T12-4/tp.git"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"fi"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"echo \"Fetching upstream...\""},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"git fetch upstream"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"echo \"Merging upstream master with local branch $BRANCH_TO_SYNC...\""},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"git merge upstream/master"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"if [ ! $? -eq 0 ]; then"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"    echo \"Unable to merge branch.\""},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"    exit"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"fi"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"echo \"Pushing local master to remote repository...\""},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"git push"}],"authorContributionMap":{"tjtanjin":55}},{"path":"src/main/java/seedu/us/among/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.util.FileUtil;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":3,"-":61}},{"path":"src/main/java/seedu/us/among/ImPoster.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.EndpointList;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyEndpointList;"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.util.SampleDataUtil;"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.storage.EndpointListStorage;"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.storage.JsonEndpointListStorage;"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.storage.JsonUserPrefsStorage;"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.storage.Storage;"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.storage.StorageManager;"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.storage.UserPrefsStorage;"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.ui.Ui;"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.ui.UiManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class ImPoster extends Application {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ImPoster.class);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing imPoster ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"        EndpointListStorage endpointListStorage \u003d new JsonEndpointListStorage(userPrefs.getEndpointListFilePath());"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"        storage \u003d new StorageManager(endpointListStorage, userPrefsStorage);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s API endpoint list and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":"     * The data from the sample API endpoint list will be used instead if {@code storage}\u0027s API endpoint list is not"},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"     * found, or an empty API endpoint list will be used instead if errors occur when reading {@code storage}\u0027s API"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":"     * endpoint list."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":"        Optional\u003cReadOnlyEndpointList\u003e endpointListOptional;"},{"lineNumber":79,"author":{"gitId":"tjtanjin"},"content":"        ReadOnlyEndpointList initialData;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"tjtanjin"},"content":"            endpointListOptional \u003d storage.readEndpointList();"},{"lineNumber":82,"author":{"gitId":"tjtanjin"},"content":"            if (!endpointListOptional.isPresent()) {"},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":"                logger.info(\"Data file not found. Will be starting with a sample EndpointList\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"tjtanjin"},"content":"            initialData \u003d endpointListOptional.orElseGet(SampleDataUtil::getSampleEndpointList);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty EndpointList\");"},{"lineNumber":88,"author":{"gitId":"tjtanjin"},"content":"            initialData \u003d new EndpointList();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":90,"author":{"gitId":"tjtanjin"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty EndpointList\");"},{"lineNumber":91,"author":{"gitId":"tjtanjin"},"content":"            initialData \u003d new EndpointList();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":124,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":152,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":155,"author":{"gitId":"tjtanjin"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty EndpointList\");"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":171,"author":{"gitId":"tjtanjin"},"content":"        logger.info(\"Starting EndpointList \" + ImPoster.VERSION);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":177,"author":{"gitId":"ong6"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping imPoster ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":1,"tjtanjin":43,"-":140}},{"path":"src/main/java/seedu/us/among/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application."},{"lineNumber":7,"author":{"gitId":"-"},"content":" *"},{"lineNumber":8,"author":{"gitId":"ong6"},"content":" * This is a workaround for the following error when imPoster is made the"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *"},{"lineNumber":11,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *"},{"lineNumber":13,"author":{"gitId":"ong6"},"content":" * The reason is that imPoster extends Application. In that case, the"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted."},{"lineNumber":17,"author":{"gitId":"-"},"content":" *"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(ImPoster.class, args);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":2,"tjtanjin":1,"-":22}},{"path":"src/main/java/seedu/us/among/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":62}},{"path":"src/main/java/seedu/us/among/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings."},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well."},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":78}},{"path":"src/main/java/seedu/us/among/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"    private static final String LOG_FILE \u003d \"imposter.log\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":2,"-":110}},{"path":"src/main/java/seedu/us/among/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.core;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_INVALID_ENDPOINT_DISPLAYED_INDEX \u003d \"The API endpoint index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_ENDPOINTS_LISTED_OVERVIEW \u003d \"%1$d API endpoints listed!\";"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":13}},{"path":"src/main/java/seedu/us/among/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":115}},{"path":"src/main/java/seedu/us/among/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.core.index;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index."},{"lineNumber":5,"author":{"gitId":"-"},"content":" *"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":53}},{"path":"src/main/java/seedu/us/among/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":10}},{"path":"src/main/java/seedu/us/among/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":20}},{"path":"src/main/java/seedu/us/among/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.ImPoster;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(ImPoster.class.getResourceAsStream(imagePath));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":2,"-":40}},{"path":"src/main/java/seedu/us/among/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":34}},{"path":"src/main/java/seedu/us/among/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.Config;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":3,"-":20}},{"path":"src/main/java/seedu/us/among/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":82}},{"path":"src/main/java/seedu/us/among/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.LogsCenter;"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.DataConversionException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        T jsonFile;"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"tlylt"},"content":"     * Converts a given string representation of a HTTP entity into its pretty formatted"},{"lineNumber":115,"author":{"gitId":"tlylt"},"content":"     * JSON data string representation"},{"lineNumber":116,"author":{"gitId":"tlylt"},"content":"     * @param httpEntityString The String representation of a HTTP entity to be converted into the JSON string"},{"lineNumber":117,"author":{"gitId":"tlylt"},"content":"     * @return JSON data representation of the given HTTP entity, in string"},{"lineNumber":118,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"tlylt"},"content":"    public static String toPrettyPrintJsonString(String httpEntityString) throws IOException {"},{"lineNumber":120,"author":{"gitId":"tlylt"},"content":"        Object jsonObject \u003d fromJsonString(httpEntityString, Object.class);"},{"lineNumber":121,"author":{"gitId":"tlylt"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonObject);"},{"lineNumber":122,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            super(vc);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString"},{"lineNumber":140,"author":{"gitId":"-"},"content":"         * \u003cp\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches"},{"lineNumber":142,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":143,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            return Level.class;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tlylt":11,"tjtanjin":3,"-":140}},{"path":"src/main/java/seedu/us/among/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":69,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"tlylt"},"content":"     * Returns a number to 3 decimal place, in string"},{"lineNumber":71,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"tlylt"},"content":"    public static String get3DecimalPlace(Double value) {"},{"lineNumber":73,"author":{"gitId":"tlylt"},"content":"        requireNonNull(value);"},{"lineNumber":74,"author":{"gitId":"tlylt"},"content":"        return String.format(\"%.03f\", value);"},{"lineNumber":75,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tlylt":9,"tjtanjin":2,"-":66}},{"path":"src/main/java/seedu/us/among/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyEndpointList;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"     * Returns the EndpointList."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"     * @see Model#getEndpointList()"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"    ReadOnlyEndpointList getEndpointList();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"    /** Returns an unmodifiable view of the filtered list of endpoints */"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"    ObservableList\u003cEndpoint\u003e getFilteredEndpointList();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"     * Returns the user prefs\u0027 API endpoint list file path."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"    Path getEndpointListFilePath();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":15,"-":36}},{"path":"src/main/java/seedu/us/among/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.parser.ImposterParser;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyEndpointList;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.storage.Storage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"    private final ImposterParser imposterParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"        imposterParser \u003d new ImposterParser();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"        Command command \u003d imposterParser.parseCommand(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"            storage.saveEndpointList(model.getEndpointList());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"    public ReadOnlyEndpointList getEndpointList() {"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"        return model.getEndpointList();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"    public ObservableList\u003cEndpoint\u003e getFilteredEndpointList() {"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"        return model.getFilteredEndpointList();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"    public Path getEndpointListFilePath() {"},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":"        return model.getEndpointListFilePath();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":22,"-":59}},{"path":"src/main/java/seedu/us/among/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_METHOD;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":" * Adds an API endpoint to the API endpoint list."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an API endpoint to the API endpoint list. \""},{"lineNumber":20,"author":{"gitId":"ong6"},"content":"            + \"Parameters: \""},{"lineNumber":21,"author":{"gitId":"ong6"},"content":"            + PREFIX_METHOD + \"METHOD \""},{"lineNumber":22,"author":{"gitId":"ong6"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":23,"author":{"gitId":"ong6"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"            + PREFIX_METHOD + \"get \""},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"            + PREFIX_ADDRESS + \"https://cat-fact.herokuapp.com/facts/random?animal_type\u003dcat\u0026amount\u003d2 \""},{"lineNumber":27,"author":{"gitId":"ong6"},"content":"            + PREFIX_TAG + \"cat \""},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"            + PREFIX_TAG + \"fact\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New API endpoint added: %1$s\";"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_DUPLICATE_ENDPOINT \u003d \"This API endpoint already exists in the API endpoint list\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"    private final Endpoint toAdd;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"     * Creates an AddCommand to add the specified {@code Endpoint}"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"    public AddCommand(Endpoint endpoint) {"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(endpoint);"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"        toAdd \u003d endpoint;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"        if (model.hasEndpoint(toAdd)) {"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ENDPOINT);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"        model.addEndpoint(toAdd);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                        \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":10,"tjtanjin":18,"-":33}},{"path":"src/main/java/seedu/us/among/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.EndpointList;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":" * Clears the API endpoint list."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"API endpoint list has been cleared!\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"        model.setEndpointList(new EndpointList());"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":6,"-":17}},{"path":"src/main/java/seedu/us/among/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":3,"-":17}},{"path":"src/main/java/seedu/us/among/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents the result of a command execution."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class CommandResult {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final boolean showHelp;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /** The application should exit. */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final boolean exit;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"    /** API response should be shown to the user. */"},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":"    private final boolean isApiResponse;"},{"lineNumber":24,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":25,"author":{"gitId":"tlylt"},"content":"    /** API endpoint to be consumed by the UI for displaying response. */"},{"lineNumber":26,"author":{"gitId":"tlylt"},"content":"    private final Endpoint endpoint;"},{"lineNumber":27,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":28,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;"},{"lineNumber":36,"author":{"gitId":"tlylt"},"content":"        this.isApiResponse \u003d false;"},{"lineNumber":37,"author":{"gitId":"tlylt"},"content":"        this.endpoint \u003d null;"},{"lineNumber":38,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":40,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"tlylt"},"content":"     * Constructs a {@code CommandResult} with the specified fields, including the newly added isApiResponse."},{"lineNumber":42,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"tlylt"},"content":"    public CommandResult(String feedbackToUser, Endpoint endpoint, boolean showHelp, boolean exit,"},{"lineNumber":44,"author":{"gitId":"tlylt"},"content":"                         boolean isApiResponse) {"},{"lineNumber":45,"author":{"gitId":"tlylt"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":46,"author":{"gitId":"tlylt"},"content":"        this.showHelp \u003d showHelp;"},{"lineNumber":47,"author":{"gitId":"tlylt"},"content":"        this.exit \u003d exit;"},{"lineNumber":48,"author":{"gitId":"tlylt"},"content":"        this.isApiResponse \u003d isApiResponse;"},{"lineNumber":49,"author":{"gitId":"tlylt"},"content":"        this.endpoint \u003d endpoint;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * and other fields set to their default value."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return feedbackToUser;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"tlylt"},"content":"    public Endpoint getEndpoint() {"},{"lineNumber":65,"author":{"gitId":"tlylt"},"content":"        return endpoint;"},{"lineNumber":66,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return showHelp;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public boolean isExit() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return exit;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"tlylt"},"content":"    public boolean isApiResponse() {"},{"lineNumber":77,"author":{"gitId":"tlylt"},"content":"        return isApiResponse;"},{"lineNumber":78,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"},{"lineNumber":94,"author":{"gitId":"tlylt"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"},{"lineNumber":95,"author":{"gitId":"tlylt"},"content":"                \u0026\u0026 isApiResponse \u003d\u003d otherCommandResult.isApiResponse"},{"lineNumber":96,"author":{"gitId":"tlylt"},"content":"                \u0026\u0026 endpoint \u003d\u003d otherCommandResult.endpoint;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tlylt":34,"tjtanjin":1,"-":69}},{"path":"src/main/java/seedu/us/among/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_METHOD;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.util.CollectionUtil;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Address;"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":21,"author":{"gitId":"ong6"},"content":"import seedu.us.among.model.endpoint.Method;"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.tag.Tag;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"ong6"},"content":" * Edits the details of an existing API endpoint identified using it\u0027s displayed"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":" * index from the API endpoint list."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of an existing API endpoint \""},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"            + \"identified using it\u0027s displayed index from the API endpoint list. \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":35,"author":{"gitId":"ong6"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":36,"author":{"gitId":"ong6"},"content":"            + \"[\" + PREFIX_METHOD + \"METHOD] \""},{"lineNumber":37,"author":{"gitId":"ong6"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":38,"author":{"gitId":"ong6"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":40,"author":{"gitId":"ong6"},"content":"            + PREFIX_ADDRESS + \"wall street \";"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_EDIT_ENDPOINT_SUCCESS \u003d \"Edited endpoint: %1$s\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_DUPLICATE_ENDPOINT \u003d \"This API endpoint already exists in the \""},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"            + \"API endpoint list.\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"    private final EditEndpointDescriptor editEndpointDescriptor;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"ong6"},"content":"     * @param index of the endpoint in the filtered endpoint list to edit"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"     * @param editEndpointDescriptor details to edit the endpoint with"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"    public EditCommand(Index index, EditEndpointDescriptor editEndpointDescriptor) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(editEndpointDescriptor);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"        this.editEndpointDescriptor \u003d new EditEndpointDescriptor(editEndpointDescriptor);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"        List\u003cEndpoint\u003e lastShownList \u003d model.getFilteredEndpointList();"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ENDPOINT_DISPLAYED_INDEX);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"        Endpoint endpointToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":"        Endpoint editedEndpoint \u003d createEditedEndpoint(endpointToEdit, editEndpointDescriptor);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"        if (!endpointToEdit.isSameEndpoint(editedEndpoint) \u0026\u0026 model.hasEndpoint(editedEndpoint)) {"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ENDPOINT);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":"        model.setEndpoint(endpointToEdit, editedEndpoint);"},{"lineNumber":79,"author":{"gitId":"tjtanjin"},"content":"        model.updateFilteredEndpointList(Model.PREDICATE_SHOW_ALL_ENDPOINTS);"},{"lineNumber":80,"author":{"gitId":"tjtanjin"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_ENDPOINT_SUCCESS, editedEndpoint));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"ong6"},"content":"     * Creates and returns a {@code Endpoint} with the details of"},{"lineNumber":85,"author":{"gitId":"ong6"},"content":"     * {@code endpointToEdit} edited with {@code editEndpointDescriptor}."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":"    private static Endpoint createEditedEndpoint(Endpoint endpointToEdit,"},{"lineNumber":88,"author":{"gitId":"tjtanjin"},"content":"            EditEndpointDescriptor editEndpointDescriptor) {"},{"lineNumber":89,"author":{"gitId":"tjtanjin"},"content":"        assert endpointToEdit !\u003d null;"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"ong6"},"content":"        Method updatedMethod \u003d editEndpointDescriptor.getMethod().orElse(endpointToEdit.getMethod());"},{"lineNumber":92,"author":{"gitId":"tjtanjin"},"content":"        Address updatedAddress \u003d editEndpointDescriptor.getAddress().orElse(endpointToEdit.getAddress());"},{"lineNumber":93,"author":{"gitId":"tjtanjin"},"content":"        Set\u003cTag\u003e updatedTags \u003d editEndpointDescriptor.getTags().orElse(endpointToEdit.getTags());"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"ong6"},"content":"        return new Endpoint(updatedMethod, updatedAddress, updatedTags);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":112,"author":{"gitId":"ong6"},"content":"        return index.equals(e.index) \u0026\u0026 editEndpointDescriptor.equals(e.editEndpointDescriptor);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"ong6"},"content":"     * Stores the details to edit the endpoint with. Each non-empty field value will"},{"lineNumber":117,"author":{"gitId":"ong6"},"content":"     * replace the corresponding field value of the endpoint."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"tjtanjin"},"content":"    public static class EditEndpointDescriptor {"},{"lineNumber":120,"author":{"gitId":"ong6"},"content":"        private Method method;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"ong6"},"content":"        public EditEndpointDescriptor() {"},{"lineNumber":125,"author":{"gitId":"ong6"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":128,"author":{"gitId":"ong6"},"content":"         * Copy constructor. A defensive copy of {@code tags} is used internally."},{"lineNumber":129,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":130,"author":{"gitId":"tjtanjin"},"content":"        public EditEndpointDescriptor(EditEndpointDescriptor toCopy) {"},{"lineNumber":131,"author":{"gitId":"ong6"},"content":"            setMethod(toCopy.method);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":138,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":140,"author":{"gitId":"ong6"},"content":"            return CollectionUtil.isAnyNonNull(method, address, tags);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"ong6"},"content":"        public void setMethod(Method method) {"},{"lineNumber":144,"author":{"gitId":"ong6"},"content":"            this.method \u003d method;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"ong6"},"content":"        public Optional\u003cMethod\u003e getMethod() {"},{"lineNumber":148,"author":{"gitId":"ong6"},"content":"            return Optional.ofNullable(method);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":160,"author":{"gitId":"ong6"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of"},{"lineNumber":161,"author":{"gitId":"ong6"},"content":"         * {@code tags} is used internally."},{"lineNumber":162,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":168,"author":{"gitId":"ong6"},"content":"         * Returns an unmodifiable tag set, which throws"},{"lineNumber":169,"author":{"gitId":"ong6"},"content":"         * {@code UnsupportedOperationException} if modification is attempted. Returns"},{"lineNumber":170,"author":{"gitId":"ong6"},"content":"         * {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":171,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":184,"author":{"gitId":"tjtanjin"},"content":"            if (!(other instanceof EditEndpointDescriptor)) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":189,"author":{"gitId":"tjtanjin"},"content":"            EditEndpointDescriptor e \u003d (EditEndpointDescriptor) other;"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"ong6"},"content":"            return getMethod().equals(e.getMethod()) \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":34,"tjtanjin":39,"-":122}},{"path":"src/main/java/seedu/us/among/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"ong6"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting imPoster as requested ...\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":1,"tjtanjin":2,"-":16}},{"path":"src/main/java/seedu/us/among/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.NameContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":" * Finds and lists all API endpoints whose fields contain any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all API endpoints whose fields contain any of \""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"            + \"Example: \" + COMMAND_WORD + \" get facebook google\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"        model.updateFilteredEndpointList(predicate);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"                String.format(Messages.MESSAGE_ENDPOINTS_LISTED_OVERVIEW, model.getFilteredEndpointList().size()));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":9,"-":33}},{"path":"src/main/java/seedu/us/among/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":2,"-":19}},{"path":"src/main/java/seedu/us/among/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":" * Lists all API endpoints in the API endpoint list to the user."},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all API endpoints\";"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"        model.updateFilteredEndpointList(Model.PREDICATE_SHOW_ALL_ENDPOINTS);"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":23}},{"path":"src/main/java/seedu/us/among/logic/commands/RemoveCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"JulietTeoh"},"content":" * Removes an API endpoint identified using it\u0027s displayed index from the API endpoint list."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"JulietTeoh"},"content":"public class RemoveCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"JulietTeoh"},"content":"    public static final String COMMAND_WORD \u003d \"remove\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"JulietTeoh"},"content":"            + \": Remove an API endpoint identified using it\u0027s displayed index from the API endpoint list.\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"JulietTeoh"},"content":"    public static final String MESSAGE_REMOVE_ENDPOINT_SUCCESS \u003d \"Remove endpoint: %1$s\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"JulietTeoh"},"content":"    public RemoveCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"        List\u003cEndpoint\u003e lastShownList \u003d model.getFilteredEndpointList();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ENDPOINT_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"JulietTeoh"},"content":"        Endpoint endpointToRemove \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitId":"JulietTeoh"},"content":"        model.removeEndpoint(endpointToRemove);"},{"lineNumber":44,"author":{"gitId":"JulietTeoh"},"content":"        return new CommandResult(String.format(MESSAGE_REMOVE_ENDPOINT_SUCCESS, endpointToRemove));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"JulietTeoh"},"content":"                || (other instanceof RemoveCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"JulietTeoh"},"content":"                \u0026\u0026 targetIndex.equals(((RemoveCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":8,"-":34,"JulietTeoh":11}},{"path":"src/main/java/seedu/us/among/logic/commands/SendCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.Messages;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.endpoint.EndpointCaller;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Address;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Method;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Response;"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":" * Calls a saved API endpoint using it\u0027s displayed index from the API endpoints list."},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"public class SendCommand extends Command {"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"    public static final String COMMAND_WORD \u003d \"send\";"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"            + \": Calls a saved API endpoint using the displayed index from the API endpoints list.\\n\""},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_CALL_ENDPOINT_SUCCESS \u003d \"Called endpoint: %1$s\";"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_CALL_ENDPOINT_FAILED \u003d \"Endpoint call failed: Check your endpoint\""},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"            + \" fields and try again.\";"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"    private final Index index;"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"     * @param index of the endpoint in the API endpoints list to call"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"    public SendCommand(Index index) {"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"        requireAllNonNull(index);"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"        this.index \u003d index;"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"        List\u003cEndpoint\u003e lastShownList \u003d model.getFilteredEndpointList();"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ENDPOINT_DISPLAYED_INDEX);"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"        Endpoint endpointToSend \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"        EndpointCaller epc \u003d new EndpointCaller(endpointToSend);"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":"        Response response;"},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"            response \u003d epc.callEndpoint();"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"        } catch (IOException e) {"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"            throw new CommandException(MESSAGE_CALL_ENDPOINT_FAILED);"},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"        System.out.println(response);"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":"        Endpoint endpointWithResponse \u003d createEndpointWithResponse(endpointToSend, response);"},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"        model.setEndpoint(endpointToSend, endpointWithResponse);"},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":70,"author":{"gitId":"tlylt"},"content":"        return new CommandResult(endpointWithResponse.getResponse().getResponseEntity(),"},{"lineNumber":71,"author":{"gitId":"tlylt"},"content":"                endpointWithResponse,"},{"lineNumber":72,"author":{"gitId":"tlylt"},"content":"                false,"},{"lineNumber":73,"author":{"gitId":"tlylt"},"content":"                false,"},{"lineNumber":74,"author":{"gitId":"tlylt"},"content":"                true);"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":77,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":"     * Creates and returns a {@code Endpoint} with the details of {@code endpointToEdit}"},{"lineNumber":79,"author":{"gitId":"tjtanjin"},"content":"     * edited with {@code editEndpointDescriptor}."},{"lineNumber":80,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"tjtanjin"},"content":"    private static Endpoint createEndpointWithResponse(Endpoint endpointToSend, Response endpointResponse) {"},{"lineNumber":82,"author":{"gitId":"tjtanjin"},"content":"        assert endpointToSend !\u003d null;"},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":84,"author":{"gitId":"tjtanjin"},"content":"        Method method \u003d endpointToSend.getMethod();"},{"lineNumber":85,"author":{"gitId":"tjtanjin"},"content":"        Address address \u003d endpointToSend.getAddress();"},{"lineNumber":86,"author":{"gitId":"tjtanjin"},"content":"        Set\u003cTag\u003e tags \u003d endpointToSend.getTags();"},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":88,"author":{"gitId":"tjtanjin"},"content":"        return new Endpoint(method, address, tags, endpointResponse);"},{"lineNumber":89,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":91,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"tjtanjin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":93,"author":{"gitId":"tjtanjin"},"content":"        // short circuit if same object"},{"lineNumber":94,"author":{"gitId":"tjtanjin"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":95,"author":{"gitId":"tjtanjin"},"content":"            return true;"},{"lineNumber":96,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":98,"author":{"gitId":"tjtanjin"},"content":"        // instanceof handles nulls"},{"lineNumber":99,"author":{"gitId":"tjtanjin"},"content":"        if (!(other instanceof SendCommand)) {"},{"lineNumber":100,"author":{"gitId":"tjtanjin"},"content":"            return false;"},{"lineNumber":101,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":103,"author":{"gitId":"tjtanjin"},"content":"        // state check"},{"lineNumber":104,"author":{"gitId":"tjtanjin"},"content":"        SendCommand e \u003d (SendCommand) other;"},{"lineNumber":105,"author":{"gitId":"tjtanjin"},"content":"        return index.equals(e.index);"},{"lineNumber":106,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tlylt":5,"tjtanjin":102}},{"path":"src/main/java/seedu/us/among/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":16}},{"path":"src/main/java/seedu/us/among/logic/endpoint/EndpointCaller.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.endpoint;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.MethodType;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Response;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":" * Contains the logic for making API calls."},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"public class EndpointCaller {"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"    private final Endpoint endpointToSend;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"     * Constructor for Endpointcaller."},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"     * @param endpointToSend endpoint to make API call on"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"    public EndpointCaller(Endpoint endpointToSend) {"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"        this.endpointToSend \u003d endpointToSend;"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"     * Sends the appropriate request based on attributes provided in EndpointCaller."},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"     * @return response of API call"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"    public Response callEndpoint() throws IOException {"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"        Response response \u003d new Response();"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"        MethodType requestMethod \u003d this.endpointToSend.getMethod().getMethodType();"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"        switch (requestMethod) {"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"        case GET:"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"            response \u003d new GetRequest(endpointToSend).send();"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"            break;"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"        case POST:"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"            //to-do"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"            break;"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"        case PUT:"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"            //to-do"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"            break;"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"        case DELETE:"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"            //to-do"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"            break;"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"        case HEAD:"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"            //to-do"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"            break;"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"        case OPTIONS:"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"            //to-do"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"            break;"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"        case PATCH:"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"            //to-do"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"        default:"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":"            break;"},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"        return response;"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":61}},{"path":"src/main/java/seedu/us/among/logic/endpoint/GetRequest.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.endpoint;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import org.apache.http.HttpEntity;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import org.apache.http.client.methods.CloseableHttpResponse;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import org.apache.http.client.methods.HttpGet;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import org.apache.http.impl.client.CloseableHttpClient;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import org.apache.http.impl.client.HttpClients;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import org.apache.http.util.EntityUtils;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"import seedu.us.among.commons.util.JsonUtil;"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"import seedu.us.among.commons.util.StringUtil;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Response;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":" * Contains the logic for sending get requests."},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"public class GetRequest extends Request {"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"     * Constructor for GetRequest."},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"     * @param endpoint endpoint to make API call on"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"    public GetRequest(Endpoint endpoint) {"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"        super(endpoint.getMethod().getMethodType(), endpoint.getAddress().value);"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"     * Executes the API call with a get request."},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"     * @return returns the response from the API call"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"    public Response send() throws IOException {"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"        //solution adapted from https://mkyong.com/java/apache-httpclient-examples/"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"        CloseableHttpClient httpClient \u003d HttpClients.createDefault();"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"        CloseableHttpResponse response;"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"        String responseEntity \u003d \"\";"},{"lineNumber":42,"author":{"gitId":"tlylt"},"content":"        double responseTimeInSecond;"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"            HttpGet request \u003d new HttpGet(this.getAddress());"},{"lineNumber":45,"author":{"gitId":"tlylt"},"content":"            //to-do"},{"lineNumber":46,"author":{"gitId":"tlylt"},"content":"            //abstract timing into a function"},{"lineNumber":47,"author":{"gitId":"tlylt"},"content":"            long start \u003d System.nanoTime();"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"            response \u003d httpClient.execute(request);"},{"lineNumber":49,"author":{"gitId":"tlylt"},"content":"            long end \u003d System.nanoTime();"},{"lineNumber":50,"author":{"gitId":"tlylt"},"content":"            long duration \u003d end - start;"},{"lineNumber":51,"author":{"gitId":"tlylt"},"content":"            responseTimeInSecond \u003d (double) duration / 1_000_000_000;"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"            try {"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"                HttpEntity entity \u003d response.getEntity();"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"                if (entity !\u003d null) {"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":"                    //return data as string"},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"                    responseEntity \u003d EntityUtils.toString(entity);"},{"lineNumber":58,"author":{"gitId":"tlylt"},"content":"                    responseEntity \u003d JsonUtil.toPrettyPrintJsonString(responseEntity);"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"                }"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"            } finally {"},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":"                response.close();"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"        } finally {"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"            httpClient.close();"},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"        return new Response(response.getProtocolVersion().toString(),"},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":"                String.valueOf(response.getStatusLine().getStatusCode()),"},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":"                response.getStatusLine().getReasonPhrase(),"},{"lineNumber":71,"author":{"gitId":"tlylt"},"content":"                response.getStatusLine().toString(),"},{"lineNumber":72,"author":{"gitId":"tlylt"},"content":"                responseEntity,"},{"lineNumber":73,"author":{"gitId":"tlylt"},"content":"                StringUtil.get3DecimalPlace(responseTimeInSecond));"},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tlylt":13,"tjtanjin":62}},{"path":"src/main/java/seedu/us/among/logic/endpoint/Request.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.endpoint;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.MethodType;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Response;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":" * Parent class of request sending classes. Contains the two compulsory fields method and address."},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"public abstract class Request {"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"    private final MethodType method;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"    private final String address;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"     * Constructor for Request."},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"     * @param method request method"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"     * @param address request address"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"    public Request(MethodType method, String address) {"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"        this.method \u003d method;"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"        this.address \u003d address;"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    public MethodType getMethodType() {"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"        return this.method;"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"    public String getAddress() {"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"        return this.address;"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"     * Executes the API call by sending the appropriate request."},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"     * @return returns the response from the API call"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"    public abstract Response send() throws IOException;"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":40}},{"path":"src/main/java/seedu/us/among/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_METHOD;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Address;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":15,"author":{"gitId":"ong6"},"content":"import seedu.us.among.model.endpoint.Method;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitId":"ong6"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_METHOD, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"ong6"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_METHOD, PREFIX_ADDRESS) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"ong6"},"content":"        Method method \u003d ParserUtil.parseMethod(argMultimap.getValue(PREFIX_METHOD).get());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"        Endpoint endpoint \u003d new Endpoint(method, address, tagList);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"        return new AddCommand(endpoint);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"ong6"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values"},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"     * in the given {@code ArgumentMultimap}."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":8,"tjtanjin":11,"-":33}},{"path":"src/main/java/seedu/us/among/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values."},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":59}},{"path":"src/main/java/seedu/us/among/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":147}},{"path":"src/main/java/seedu/us/among/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ong6"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple"},{"lineNumber":5,"author":{"gitId":"ong6"},"content":" * commands"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":10,"author":{"gitId":"ong6"},"content":"    public static final Prefix PREFIX_METHOD \u003d new Prefix(\"-x \");"},{"lineNumber":11,"author":{"gitId":"ong6"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"-u \");"},{"lineNumber":12,"author":{"gitId":"ong6"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"-t \");"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":5,"tjtanjin":1,"-":8}},{"path":"src/main/java/seedu/us/among/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_METHOD;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.EditCommand;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.EditCommand.EditEndpointDescriptor;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"     * Parses the given {@code String} of arguments in the context of the"},{"lineNumber":27,"author":{"gitId":"ong6"},"content":"     * EditCommand and returns an EditCommand object for execution."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":32,"author":{"gitId":"ong6"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_METHOD, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"        EditEndpointDescriptor editEndpointDescriptor \u003d new EditEndpointDescriptor();"},{"lineNumber":43,"author":{"gitId":"ong6"},"content":"        if (argMultimap.getValue(PREFIX_METHOD).isPresent()) {"},{"lineNumber":44,"author":{"gitId":"ong6"},"content":"            editEndpointDescriptor.setMethod(ParserUtil.parseMethod(argMultimap.getValue(PREFIX_METHOD).get()));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"            editEndpointDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editEndpointDescriptor::setTags);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"        if (!editEndpointDescriptor.isAnyFieldEdited()) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"        return new EditCommand(index, editEndpointDescriptor);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"ong6"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if"},{"lineNumber":60,"author":{"gitId":"ong6"},"content":"     * {@code tags} is non-empty. If {@code tags} contain only one element which is"},{"lineNumber":61,"author":{"gitId":"ong6"},"content":"     * an empty string, it will be parsed into a {@code Set\u003cTag\u003e} containing zero"},{"lineNumber":62,"author":{"gitId":"ong6"},"content":"     * tags."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":11,"tjtanjin":14,"-":49}},{"path":"src/main/java/seedu/us/among/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.FindCommand;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.NameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":5,"-":28}},{"path":"src/main/java/seedu/us/among/logic/parser/ImposterParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.EditCommand;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.ExitCommand;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.FindCommand;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.ListCommand;"},{"lineNumber":17,"author":{"gitId":"JulietTeoh"},"content":"import seedu.us.among.logic.commands.RemoveCommand;"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.SendCommand;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"public class ImposterParser {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"JulietTeoh"},"content":"        case RemoveCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitId":"JulietTeoh"},"content":"            return new RemoveCommandParser().parse(arguments);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":"        case SendCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":"            return new SendCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":17,"-":60,"JulietTeoh":3}},{"path":"src/main/java/seedu/us/among/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.parser.exceptions.ParseException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":3,"-":13}},{"path":"src/main/java/seedu/us/among/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Address;"},{"lineNumber":13,"author":{"gitId":"ong6"},"content":"import seedu.us.among.model.endpoint.Method;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"ong6"},"content":" * Contains utility methods used for parsing strings in the various *Parser"},{"lineNumber":18,"author":{"gitId":"ong6"},"content":" * classes."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"     * and trailing whitespaces will be trimmed."},{"lineNumber":27,"author":{"gitId":"ong6"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero"},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"     *                        unsigned integer)."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"     * Parses a {@code String method} into a {@code Method}. Leading and trailing"},{"lineNumber":40,"author":{"gitId":"ong6"},"content":"     * whitespaces will be trimmed."},{"lineNumber":41,"author":{"gitId":"ong6"},"content":"     * @throws ParseException if the given {@code method} is invalid."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"ong6"},"content":"    public static Method parseMethod(String method) throws ParseException {"},{"lineNumber":44,"author":{"gitId":"ong6"},"content":"        requireNonNull(method);"},{"lineNumber":45,"author":{"gitId":"ong6"},"content":"        String trimmedMethod \u003d method.trim();"},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"        if (!Method.isValidMethod(trimmedMethod)) {"},{"lineNumber":47,"author":{"gitId":"ong6"},"content":"            throw new ParseException(Method.MESSAGE_CONSTRAINTS);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"ong6"},"content":"        return new Method(trimmedMethod);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"ong6"},"content":"     * Parses a {@code String address} into an {@code Address}. Leading and trailing"},{"lineNumber":54,"author":{"gitId":"ong6"},"content":"     * whitespaces will be trimmed."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"ong6"},"content":"     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing"},{"lineNumber":68,"author":{"gitId":"ong6"},"content":"     * whitespaces will be trimmed."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":20,"tjtanjin":6,"-":65}},{"path":"src/main/java/seedu/us/among/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string."},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":38}},{"path":"src/main/java/seedu/us/among/logic/parser/RemoveCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"JulietTeoh"},"content":"import seedu.us.among.logic.commands.RemoveCommand;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"JulietTeoh"},"content":" * Parses input arguments and creates a new RemoveCommand object"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"JulietTeoh"},"content":"public class RemoveCommandParser implements Parser\u003cRemoveCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JulietTeoh"},"content":"     * Parses the given {@code String} of arguments in the context of the RemoveCommand"},{"lineNumber":16,"author":{"gitId":"JulietTeoh"},"content":"     * and returns a RemoveCommand object for execution."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JulietTeoh"},"content":"    public RemoveCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":22,"author":{"gitId":"JulietTeoh"},"content":"            return new RemoveCommand(index);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"JulietTeoh"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE), pe);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":5,"-":16,"JulietTeoh":8}},{"path":"src/main/java/seedu/us/among/logic/parser/SendCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.SendCommand;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"public class SendCommandParser {"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"     * Parses the given {@code String} of arguments in the context of the SendCommand"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"     * and returns a SendCommand object for execution."},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"    public SendCommand parse(String args) throws ParseException {"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"            return new SendCommand(index);"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"        } catch (ParseException pe) {"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"            throw new ParseException("},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SendCommand.MESSAGE_USAGE), pe);"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":24}},{"path":"src/main/java/seedu/us/among/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":2,"-":15}},{"path":"src/main/java/seedu/us/among/model/EndpointList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.UniqueEndpointList;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":" * Wraps all data at the API endpoint list level"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":" * Duplicates are not allowed (by .isSameEndpoint comparison)"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"public class EndpointList implements ReadOnlyEndpointList {"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"    private final UniqueEndpointList endpoints;"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"    /*"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"     *   among constructors."},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    {"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"        endpoints \u003d new UniqueEndpointList();"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"    public EndpointList() {}"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"     * Creates an EndpointList using the API endpoints in the {@code toBeCopied}"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"    public EndpointList(ReadOnlyEndpointList toBeCopied) {"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"        this();"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"        resetData(toBeCopied);"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"    //// list overwrite operations"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"     * Replaces the contents of the endpoint list with {@code endpoints}."},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"     * {@code endpoints} must not contain duplicate endpoints."},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"    public void setEndpoints(List\u003cEndpoint\u003e endpoints) {"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"        this.endpoints.setEndpoints(endpoints);"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"     * Resets the existing data of this {@code EndpointList} with {@code newData}."},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"    public void resetData(ReadOnlyEndpointList newData) {"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(newData);"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":"        setEndpoints(newData.getEndpointList());"},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"    //// endpoint-level operations"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":"     * Returns true if a endpoint with the same identity as {@code endpoint} exists in the API endpoint list."},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"    public boolean hasEndpoint(Endpoint endpoint) {"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(endpoint);"},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":"        return endpoints.contains(endpoint);"},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":"     * Adds a endpoint to the API endpoint list."},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"     * The endpoint must not already exist in the API endpoint list."},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":"    public void addEndpoint(Endpoint p) {"},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"        endpoints.add(p);"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":77,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":"     * Replaces the given endpoint {@code target} in the list with {@code editedEndpoint}."},{"lineNumber":79,"author":{"gitId":"tjtanjin"},"content":"     * {@code target} must exist in the API endpoint list."},{"lineNumber":80,"author":{"gitId":"tjtanjin"},"content":"     * The endpoint identity of {@code editedEndpoint} must not be the same as another existing endpoint in the"},{"lineNumber":81,"author":{"gitId":"tjtanjin"},"content":"     * API endpoint list."},{"lineNumber":82,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":"    public void setEndpoint(Endpoint target, Endpoint editedEndpoint) {"},{"lineNumber":84,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(editedEndpoint);"},{"lineNumber":85,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":86,"author":{"gitId":"tjtanjin"},"content":"        endpoints.setEndpoint(target, editedEndpoint);"},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":89,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"tjtanjin"},"content":"     * Removes {@code key} from this {@code EndpointList}."},{"lineNumber":91,"author":{"gitId":"tjtanjin"},"content":"     * {@code key} must exist in the API endpoint list."},{"lineNumber":92,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"tjtanjin"},"content":"    public void removeEndpoint(Endpoint key) {"},{"lineNumber":94,"author":{"gitId":"tjtanjin"},"content":"        endpoints.remove(key);"},{"lineNumber":95,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":97,"author":{"gitId":"tjtanjin"},"content":"    //// util methods"},{"lineNumber":98,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":99,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"tjtanjin"},"content":"    public String toString() {"},{"lineNumber":101,"author":{"gitId":"tjtanjin"},"content":"        return endpoints.asUnmodifiableObservableList().size() + \" endpoints\";"},{"lineNumber":102,"author":{"gitId":"tjtanjin"},"content":"        // TODO: refine later"},{"lineNumber":103,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":105,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"tjtanjin"},"content":"    public ObservableList\u003cEndpoint\u003e getEndpointList() {"},{"lineNumber":107,"author":{"gitId":"tjtanjin"},"content":"        return endpoints.asUnmodifiableObservableList();"},{"lineNumber":108,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":110,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"tjtanjin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitId":"tjtanjin"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitId":"tjtanjin"},"content":"                || (other instanceof EndpointList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitId":"tjtanjin"},"content":"                \u0026\u0026 endpoints.equals(((EndpointList) other).endpoints));"},{"lineNumber":115,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":117,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":118,"author":{"gitId":"tjtanjin"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitId":"tjtanjin"},"content":"        return endpoints.hashCode();"},{"lineNumber":120,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":121}},{"path":"src/main/java/seedu/us/among/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":" * The API of the Model component."},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"public interface Model {"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"    Predicate\u003cEndpoint\u003e PREDICATE_SHOW_ALL_ENDPOINTS \u003d unused -\u003e true;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"     * Returns the user prefs."},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"     * Returns the user prefs\u0027 API endpoint list file path."},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"    Path getEndpointListFilePath();"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"     * Sets the user prefs\u0027 API endpoint list file path."},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"    void setEndpointListFilePath(Path endpointListFilePath);"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"     * Replaces API endpoint list data with the data in {@code endpointList}."},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"    void setEndpointList(ReadOnlyEndpointList endpointList);"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"    /** Returns the EndpointList */"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"    ReadOnlyEndpointList getEndpointList();"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":"     * Returns true if a endpoint with the same identity as {@code endpoint} exists in the API endpoint list."},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"    boolean hasEndpoint(Endpoint endpoint);"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"JulietTeoh"},"content":"     * Removes the given endpoint."},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":"     * The endpoint must exist in the API endpoint list."},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"JulietTeoh"},"content":"    void removeEndpoint(Endpoint target);"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":"     * Adds the given endpoint."},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"     * {@code endpoint} must not already exist in the API endpoint list."},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":"    void addEndpoint(Endpoint endpoint);"},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":"     * Replaces the given endpoint {@code target} with {@code editedEndpoint}."},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"     * {@code target} must exist in the API endpoint list."},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":"     * The endpoint identity of {@code editedEndpoint} must not be the same as another existing endpoint in the"},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":"     * API endpoint list."},{"lineNumber":77,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":"    void setEndpoint(Endpoint target, Endpoint editedEndpoint);"},{"lineNumber":79,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":80,"author":{"gitId":"tjtanjin"},"content":"    /** Returns an unmodifiable view of the filtered endpoint list */"},{"lineNumber":81,"author":{"gitId":"tjtanjin"},"content":"    ObservableList\u003cEndpoint\u003e getFilteredEndpointList();"},{"lineNumber":82,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"tjtanjin"},"content":"     * Updates the filter of the filtered endpoint list to filter by the given {@code predicate}."},{"lineNumber":85,"author":{"gitId":"tjtanjin"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":86,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":"    void updateFilteredEndpointList(Predicate\u003cEndpoint\u003e predicate);"},{"lineNumber":88,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":86,"JulietTeoh":2}},{"path":"src/main/java/seedu/us/among/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":" * Represents the in-memory model of the API endpoint list data."},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"public class ModelManager implements Model {"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"    private final EndpointList endpointList;"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"    private final FilteredList\u003cEndpoint\u003e filteredEndpoints;"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"     * Initializes a ModelManager with the given API endpoint list and userPrefs."},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"    public ModelManager(ReadOnlyEndpointList endpointList, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"        super();"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"        requireAllNonNull(endpointList, userPrefs);"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"        logger.fine(\"Initializing with API endpoint list: \" + endpointList + \" and user prefs \" + userPrefs);"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"        this.endpointList \u003d new EndpointList(endpointList);"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"        filteredEndpoints \u003d new FilteredList\u003c\u003e(this.endpointList.getEndpointList());"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"    public ModelManager() {"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"        this(new EndpointList(), new UserPrefs());"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"        return userPrefs;"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":"    public Path getEndpointListFilePath() {"},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":"        return userPrefs.getEndpointListFilePath();"},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"    public void setEndpointListFilePath(Path endpointListFilePath) {"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(endpointListFilePath);"},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":"        userPrefs.setEndpointListFilePath(endpointListFilePath);"},{"lineNumber":77,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":79,"author":{"gitId":"tjtanjin"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EndpointList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":80,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":81,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"tjtanjin"},"content":"    public void setEndpointList(ReadOnlyEndpointList endpointList) {"},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":"        this.endpointList.resetData(endpointList);"},{"lineNumber":84,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":86,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":"    public ReadOnlyEndpointList getEndpointList() {"},{"lineNumber":88,"author":{"gitId":"tjtanjin"},"content":"        return endpointList;"},{"lineNumber":89,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":91,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"tjtanjin"},"content":"    public boolean hasEndpoint(Endpoint endpoint) {"},{"lineNumber":93,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(endpoint);"},{"lineNumber":94,"author":{"gitId":"tjtanjin"},"content":"        return endpointList.hasEndpoint(endpoint);"},{"lineNumber":95,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":97,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"JulietTeoh"},"content":"    public void removeEndpoint(Endpoint target) {"},{"lineNumber":99,"author":{"gitId":"tjtanjin"},"content":"        endpointList.removeEndpoint(target);"},{"lineNumber":100,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":102,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"tjtanjin"},"content":"    public void addEndpoint(Endpoint endpoint) {"},{"lineNumber":104,"author":{"gitId":"tjtanjin"},"content":"        endpointList.addEndpoint(endpoint);"},{"lineNumber":105,"author":{"gitId":"tjtanjin"},"content":"        updateFilteredEndpointList(PREDICATE_SHOW_ALL_ENDPOINTS);"},{"lineNumber":106,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":108,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"tjtanjin"},"content":"    public void setEndpoint(Endpoint target, Endpoint editedEndpoint) {"},{"lineNumber":110,"author":{"gitId":"tjtanjin"},"content":"        requireAllNonNull(target, editedEndpoint);"},{"lineNumber":111,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":112,"author":{"gitId":"tjtanjin"},"content":"        endpointList.setEndpoint(target, editedEndpoint);"},{"lineNumber":113,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":115,"author":{"gitId":"tjtanjin"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Endpoint List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":116,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":117,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"tjtanjin"},"content":"     * Returns an unmodifiable view of the list of {@code Endpoint} backed by the internal list of"},{"lineNumber":119,"author":{"gitId":"ong6"},"content":"     * {@code versionedimPoster}"},{"lineNumber":120,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":122,"author":{"gitId":"tjtanjin"},"content":"    public ObservableList\u003cEndpoint\u003e getFilteredEndpointList() {"},{"lineNumber":123,"author":{"gitId":"tjtanjin"},"content":"        return filteredEndpoints;"},{"lineNumber":124,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":126,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":127,"author":{"gitId":"tjtanjin"},"content":"    public void updateFilteredEndpointList(Predicate\u003cEndpoint\u003e predicate) {"},{"lineNumber":128,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(predicate);"},{"lineNumber":129,"author":{"gitId":"tjtanjin"},"content":"        filteredEndpoints.setPredicate(predicate);"},{"lineNumber":130,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":132,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":133,"author":{"gitId":"tjtanjin"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":134,"author":{"gitId":"tjtanjin"},"content":"        // short circuit if same object"},{"lineNumber":135,"author":{"gitId":"tjtanjin"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":136,"author":{"gitId":"tjtanjin"},"content":"            return true;"},{"lineNumber":137,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":139,"author":{"gitId":"tjtanjin"},"content":"        // instanceof handles nulls"},{"lineNumber":140,"author":{"gitId":"tjtanjin"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":141,"author":{"gitId":"tjtanjin"},"content":"            return false;"},{"lineNumber":142,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":144,"author":{"gitId":"tjtanjin"},"content":"        // state check"},{"lineNumber":145,"author":{"gitId":"tjtanjin"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":146,"author":{"gitId":"tjtanjin"},"content":"        return endpointList.equals(other.endpointList)"},{"lineNumber":147,"author":{"gitId":"tjtanjin"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":148,"author":{"gitId":"tjtanjin"},"content":"                \u0026\u0026 filteredEndpoints.equals(other.filteredEndpoints);"},{"lineNumber":149,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":151,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":1,"tjtanjin":149,"JulietTeoh":1}},{"path":"src/main/java/seedu/us/among/model/ReadOnlyEndpointList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":" * Unmodifiable view of an API endpoint list"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"public interface ReadOnlyEndpointList {"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"     * Returns an unmodifiable view of the API endpoint list."},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"     * This list will not contain any duplicate API endpoints."},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"    ObservableList\u003cEndpoint\u003e getEndpointList();"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":17}},{"path":"src/main/java/seedu/us/among/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"    Path getEndpointListFilePath();"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":3,"-":13}},{"path":"src/main/java/seedu/us/among/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"    private Path endpointListFilePath \u003d Paths.get(\"data\" , \"imposter.json\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"        setEndpointListFilePath(newUserPrefs.getEndpointListFilePath());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"    public Path getEndpointListFilePath() {"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"        return endpointListFilePath;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"    public void setEndpointListFilePath(Path endpointListFilePath) {"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(endpointListFilePath);"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":"        this.endpointListFilePath \u003d endpointListFilePath;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)"},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"                \u0026\u0026 endpointListFilePath.equals(o.endpointListFilePath);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":"        return Objects.hash(guiSettings, endpointListFilePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":"        sb.append(\"\\nLocal data file location : \" + endpointListFilePath);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":12,"-":75}},{"path":"src/main/java/seedu/us/among/model/endpoint/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model.endpoint;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":" * Represents a Endpoint\u0027s address in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":3,"-":54}},{"path":"src/main/java/seedu/us/among/model/endpoint/Endpoint.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model.endpoint;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"ong6"},"content":" * Represents a Endpoint in the address book. Guarantees: details are present"},{"lineNumber":14,"author":{"gitId":"ong6"},"content":" * and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"public class Endpoint {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"ong6"},"content":"    private final Method method;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"    // Response fields"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    private final Response response;"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"ong6"},"content":"    public Endpoint(Method method, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":32,"author":{"gitId":"ong6"},"content":"        requireAllNonNull(method, address, tags);"},{"lineNumber":33,"author":{"gitId":"ong6"},"content":"        this.method \u003d method;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"        this.response \u003d new Response();"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"     * Every field must be present and not null."},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"    public Endpoint(Method method, Address address, Set\u003cTag\u003e tags, Response response) {"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"        requireAllNonNull(method, address, tags, response);"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"        this.method \u003d method;"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"        this.address \u003d address;"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"        this.tags.addAll(tags);"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"        this.response \u003d response;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"ong6"},"content":"    public Method getMethod() {"},{"lineNumber":51,"author":{"gitId":"ong6"},"content":"        return method;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"    public Response getResponse() {"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"        return response;"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"ong6"},"content":"     * Returns an immutable tag set, which throws"},{"lineNumber":64,"author":{"gitId":"ong6"},"content":"     * {@code UnsupportedOperationException} if modification is attempted."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"ong6"},"content":"     * Returns true if both methods have the same method and address. This defines a weaker"},{"lineNumber":72,"author":{"gitId":"ong6"},"content":"     * notion of equality between two methods."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"    public boolean isSameEndpoint(Endpoint otherEndpoint) {"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":"        if (otherEndpoint \u003d\u003d this) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"JulietTeoh"},"content":""},{"lineNumber":79,"author":{"gitId":"JulietTeoh"},"content":"        //expanded this for more clarity"},{"lineNumber":80,"author":{"gitId":"JulietTeoh"},"content":"        if (otherEndpoint \u003d\u003d null) {"},{"lineNumber":81,"author":{"gitId":"JulietTeoh"},"content":"            return false;"},{"lineNumber":82,"author":{"gitId":"JulietTeoh"},"content":"        } else {"},{"lineNumber":83,"author":{"gitId":"JulietTeoh"},"content":"            if (otherEndpoint.getMethod().equals(getMethod()) \u0026\u0026 otherEndpoint.getAddress().equals(getAddress())"},{"lineNumber":84,"author":{"gitId":"JulietTeoh"},"content":"                    \u0026\u0026 otherEndpoint.getTags().equals(getTags())) {"},{"lineNumber":85,"author":{"gitId":"JulietTeoh"},"content":"                return true;"},{"lineNumber":86,"author":{"gitId":"JulietTeoh"},"content":"            } else {"},{"lineNumber":87,"author":{"gitId":"JulietTeoh"},"content":"                return false;"},{"lineNumber":88,"author":{"gitId":"JulietTeoh"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"JulietTeoh"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"ong6"},"content":"     * Returns true if both methods have the same identity and data fields. This"},{"lineNumber":94,"author":{"gitId":"ong6"},"content":"     * defines a stronger notion of equality between two methods."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"tjtanjin"},"content":"        if (!(other instanceof Endpoint)) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"tjtanjin"},"content":"        Endpoint otherEndpoint \u003d (Endpoint) other;"},{"lineNumber":107,"author":{"gitId":"ong6"},"content":"        return otherEndpoint.getMethod().equals(getMethod()) \u0026\u0026 otherEndpoint.getAddress().equals(getAddress())"},{"lineNumber":108,"author":{"gitId":"tjtanjin"},"content":"                \u0026\u0026 otherEndpoint.getTags().equals(getTags());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":114,"author":{"gitId":"ong6"},"content":"        return Objects.hash(method, address, tags);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":120,"author":{"gitId":"ong6"},"content":"        builder.append(getMethod()).append(\"; Address: \").append(getAddress());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":128,"author":{"gitId":"tjtanjin"},"content":"        if (response !\u003d null) {"},{"lineNumber":129,"author":{"gitId":"tjtanjin"},"content":"            builder.append(\"; Last Response: \")"},{"lineNumber":130,"author":{"gitId":"tjtanjin"},"content":"                    .append(getResponse());"},{"lineNumber":131,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":17,"tjtanjin":33,"-":73,"JulietTeoh":12}},{"path":"src/main/java/seedu/us/among/model/endpoint/Method.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ong6"},"content":"package seedu.us.among.model.endpoint;"},{"lineNumber":2,"author":{"gitId":"ong6"},"content":""},{"lineNumber":3,"author":{"gitId":"ong6"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"ong6"},"content":""},{"lineNumber":6,"author":{"gitId":"ong6"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"ong6"},"content":" * Represents a Endpoint\u0027s Method in the address book. Guarantees: immutable; is"},{"lineNumber":8,"author":{"gitId":"ong6"},"content":" * valid as declared in {@link #isValidMethod(String)}"},{"lineNumber":9,"author":{"gitId":"ong6"},"content":" */"},{"lineNumber":10,"author":{"gitId":"ong6"},"content":"public class Method {"},{"lineNumber":11,"author":{"gitId":"ong6"},"content":""},{"lineNumber":12,"author":{"gitId":"ong6"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"ong6"},"content":"            \"Methods only consists of GET, POST, PUT, DELETE, HEAD, OPTIONS and PATCH \";"},{"lineNumber":14,"author":{"gitId":"ong6"},"content":""},{"lineNumber":15,"author":{"gitId":"ong6"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"ong6"},"content":"     * The first character of the address must not be a whitespace, otherwise \" \" (a"},{"lineNumber":17,"author":{"gitId":"ong6"},"content":"     * blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"ong6"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"ong6"},"content":""},{"lineNumber":20,"author":{"gitId":"ong6"},"content":"    public final String methodName;"},{"lineNumber":21,"author":{"gitId":"ong6"},"content":"    public final MethodType methodType;"},{"lineNumber":22,"author":{"gitId":"ong6"},"content":""},{"lineNumber":23,"author":{"gitId":"ong6"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"     * Constructs a {@code Method}."},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"     * @param method A valid method name."},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"ong6"},"content":"    public Method(String method) {"},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"        requireNonNull(method);"},{"lineNumber":29,"author":{"gitId":"ong6"},"content":"        checkArgument(isValidMethod(method), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"ong6"},"content":"        this.methodName \u003d method.toUpperCase();"},{"lineNumber":31,"author":{"gitId":"ong6"},"content":"        this.methodType \u003d parseMethodType(methodName);"},{"lineNumber":32,"author":{"gitId":"ong6"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"ong6"},"content":""},{"lineNumber":34,"author":{"gitId":"ong6"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"ong6"},"content":"     * Returns true if a given string is a valid method."},{"lineNumber":36,"author":{"gitId":"ong6"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"ong6"},"content":"    public static boolean isValidMethod(String test) {"},{"lineNumber":38,"author":{"gitId":"ong6"},"content":"        if (test.equals(null)) {"},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"            throw new NullPointerException();"},{"lineNumber":40,"author":{"gitId":"ong6"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"ong6"},"content":""},{"lineNumber":42,"author":{"gitId":"ong6"},"content":"        for (MethodType e : MethodType.values()) {"},{"lineNumber":43,"author":{"gitId":"ong6"},"content":"            if (e.name().equalsIgnoreCase(test)) {"},{"lineNumber":44,"author":{"gitId":"ong6"},"content":"                return true;"},{"lineNumber":45,"author":{"gitId":"ong6"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"ong6"},"content":"        return false;"},{"lineNumber":48,"author":{"gitId":"ong6"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"ong6"},"content":""},{"lineNumber":50,"author":{"gitId":"ong6"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"ong6"},"content":"     * Returns the MethodType if the given string is a valid method. Else returns null."},{"lineNumber":52,"author":{"gitId":"ong6"},"content":"     * @param test A valid method"},{"lineNumber":53,"author":{"gitId":"ong6"},"content":"     * @return a MethodType enum"},{"lineNumber":54,"author":{"gitId":"ong6"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"ong6"},"content":"    public MethodType parseMethodType(String test) {"},{"lineNumber":56,"author":{"gitId":"ong6"},"content":"        for (MethodType e : MethodType.values()) {"},{"lineNumber":57,"author":{"gitId":"ong6"},"content":"            if (e.name().equalsIgnoreCase(test)) {"},{"lineNumber":58,"author":{"gitId":"ong6"},"content":"                return e;"},{"lineNumber":59,"author":{"gitId":"ong6"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"ong6"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"ong6"},"content":"        return null;"},{"lineNumber":62,"author":{"gitId":"ong6"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"ong6"},"content":""},{"lineNumber":64,"author":{"gitId":"ong6"},"content":"    public MethodType getMethodType() {"},{"lineNumber":65,"author":{"gitId":"ong6"},"content":"        return this.methodType;"},{"lineNumber":66,"author":{"gitId":"ong6"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"ong6"},"content":""},{"lineNumber":68,"author":{"gitId":"ong6"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"ong6"},"content":"    public String toString() {"},{"lineNumber":70,"author":{"gitId":"ong6"},"content":"        return methodName;"},{"lineNumber":71,"author":{"gitId":"ong6"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"ong6"},"content":""},{"lineNumber":73,"author":{"gitId":"ong6"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"ong6"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitId":"ong6"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitId":"ong6"},"content":"                || (other instanceof Method // instanceof handles nulls"},{"lineNumber":77,"author":{"gitId":"ong6"},"content":"                        \u0026\u0026 methodName.equals(((Method) other).methodName)); // state check"},{"lineNumber":78,"author":{"gitId":"ong6"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"ong6"},"content":""},{"lineNumber":80,"author":{"gitId":"ong6"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"ong6"},"content":"    public int hashCode() {"},{"lineNumber":82,"author":{"gitId":"ong6"},"content":"        return methodName.hashCode();"},{"lineNumber":83,"author":{"gitId":"ong6"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"ong6"},"content":""},{"lineNumber":85,"author":{"gitId":"ong6"},"content":"}"}],"authorContributionMap":{"ong6":85}},{"path":"src/main/java/seedu/us/among/model/endpoint/MethodType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ong6"},"content":"package seedu.us.among.model.endpoint;"},{"lineNumber":2,"author":{"gitId":"ong6"},"content":""},{"lineNumber":3,"author":{"gitId":"ong6"},"content":"public enum MethodType {"},{"lineNumber":4,"author":{"gitId":"ong6"},"content":"    GET, POST, PUT, DELETE, HEAD, OPTIONS, PATCH"},{"lineNumber":5,"author":{"gitId":"ong6"},"content":"}"}],"authorContributionMap":{"ong6":5}},{"path":"src/main/java/seedu/us/among/model/endpoint/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model.endpoint;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"ong6"},"content":" * Tests that a {@code Endpoint}\u0027s {@code Name} matches any of the keywords"},{"lineNumber":10,"author":{"gitId":"ong6"},"content":" * given."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cEndpoint\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"    public boolean test(Endpoint endpoint) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitId":"ong6"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(endpoint.getMethod().methodName, keyword));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                        \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":3,"tjtanjin":4,"-":25}},{"path":"src/main/java/seedu/us/among/model/endpoint/Response.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model.endpoint;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":" * Represents an Endpoint\u0027s response after an API call."},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidResponse(String, String, String, String)}"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"public class Response {"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Responses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"     * //to-do match everything for now"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"    public static final String VALIDATION_REGEX \u003d \".*\";"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"    public final String protocolVersion;"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"    public final String statusCode;"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"    public final String reasonPhrase;"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"    public final String statusLine;"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"    public final String responseEntity;"},{"lineNumber":25,"author":{"gitId":"tlylt"},"content":"    public final String responseTime;"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"     * Constructs an empty {@code Response}."},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"    public Response() {"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"        this.protocolVersion \u003d \"\";"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"        this.statusCode \u003d \"\";"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"        this.reasonPhrase \u003d \"\";"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"        this.statusLine \u003d \"\";"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"        this.responseEntity \u003d \"\";"},{"lineNumber":36,"author":{"gitId":"tlylt"},"content":"        this.responseTime \u003d \"\";"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"     * Constructs an {@code Response}."},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"     * @param protocolVersion A valid http protocol version."},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"     * @param statusCode A valid http status code."},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"     * @param reasonPhrase A valid reason phrase corresponding to status code."},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"     * @param statusLine Contains protocolVersion, statusCode and reasonPhrase."},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"    public Response(String protocolVersion, String statusCode, String reasonPhrase, String statusLine,"},{"lineNumber":48,"author":{"gitId":"tlylt"},"content":"                String responseEntity, String responseTime) {"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"        requireAllNonNull(protocolVersion, statusCode, reasonPhrase, statusLine);"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"        checkArgument(isValidResponse(protocolVersion, statusCode, reasonPhrase, statusLine), MESSAGE_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"        this.protocolVersion \u003d protocolVersion;"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"        this.statusCode \u003d statusCode;"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"        this.reasonPhrase \u003d reasonPhrase;"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"        this.statusLine \u003d statusLine;"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"        this.responseEntity \u003d responseEntity;"},{"lineNumber":56,"author":{"gitId":"tlylt"},"content":"        this.responseTime \u003d responseTime;"},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"     * Returns true if a given string is a valid response."},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":"    public static boolean isValidResponse(String protocolVersion, String statusCode, String reasonPhrase,"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"            String statusLine) {"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"        return protocolVersion.matches(VALIDATION_REGEX)"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"                \u0026\u0026 statusCode.matches(VALIDATION_REGEX)"},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":"                \u0026\u0026 reasonPhrase.matches(VALIDATION_REGEX)"},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":"                \u0026\u0026 statusLine.matches(VALIDATION_REGEX);"},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":"    public String getProtocolVersion() {"},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"        return this.protocolVersion;"},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"    public String getStatusCode() {"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":"        return this.statusCode;"},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":"    public String getReasonPhrase() {"},{"lineNumber":79,"author":{"gitId":"tjtanjin"},"content":"        return this.reasonPhrase;"},{"lineNumber":80,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":82,"author":{"gitId":"tjtanjin"},"content":"    public String getStatusLine() {"},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":"        return this.statusLine;"},{"lineNumber":84,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":86,"author":{"gitId":"tjtanjin"},"content":"    public String getResponseEntity() {"},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":"        return this.responseEntity;"},{"lineNumber":88,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":90,"author":{"gitId":"tlylt"},"content":"    public String getResponseTime() {"},{"lineNumber":91,"author":{"gitId":"tlylt"},"content":"        return String.format(\"%s seconds\", this.responseTime);"},{"lineNumber":92,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":94,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":95,"author":{"gitId":"tjtanjin"},"content":"    public String toString() {"},{"lineNumber":96,"author":{"gitId":"tlylt"},"content":"        return \"Time Taken: \""},{"lineNumber":97,"author":{"gitId":"tlylt"},"content":"                + getResponseTime()"},{"lineNumber":98,"author":{"gitId":"tlylt"},"content":"                + \" seconds; \""},{"lineNumber":99,"author":{"gitId":"tlylt"},"content":"                + getProtocolVersion()"},{"lineNumber":100,"author":{"gitId":"tjtanjin"},"content":"                + \"; Status Code: \""},{"lineNumber":101,"author":{"gitId":"tjtanjin"},"content":"                + getStatusCode()"},{"lineNumber":102,"author":{"gitId":"tjtanjin"},"content":"                + \"; Reason Phrase: \""},{"lineNumber":103,"author":{"gitId":"tjtanjin"},"content":"                + getReasonPhrase()"},{"lineNumber":104,"author":{"gitId":"tjtanjin"},"content":"                + \": Response Body: \""},{"lineNumber":105,"author":{"gitId":"tjtanjin"},"content":"                + getResponseEntity();"},{"lineNumber":106,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":108,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"tjtanjin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":110,"author":{"gitId":"tjtanjin"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":111,"author":{"gitId":"tjtanjin"},"content":"                || (other instanceof Response // instanceof handles nulls"},{"lineNumber":112,"author":{"gitId":"tjtanjin"},"content":"                \u0026\u0026 protocolVersion.equals(((Response) other).protocolVersion)"},{"lineNumber":113,"author":{"gitId":"tjtanjin"},"content":"                \u0026\u0026 statusCode.equals(((Response) other).statusCode)"},{"lineNumber":114,"author":{"gitId":"tjtanjin"},"content":"                \u0026\u0026 reasonPhrase.equals(((Response) other).reasonPhrase)); // state check"},{"lineNumber":115,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":117,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":118,"author":{"gitId":"tjtanjin"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitId":"tjtanjin"},"content":"        return Objects.hash(protocolVersion, statusCode, reasonPhrase);"},{"lineNumber":120,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tlylt":12,"tjtanjin":109}},{"path":"src/main/java/seedu/us/among/model/endpoint/UniqueEndpointList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model.endpoint;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"JulietTeoh"},"content":"import seedu.us.among.model.endpoint.exceptions.DuplicateApiEndpointException;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.exceptions.EndpointNotFoundException;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":" * A endpoint is considered unique by comparing using {@code Endpoint#isSamePerson(Endpoint)}. As such, adding and"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":" * updating of persons uses Endpoint#isSamePerson(Endpoint) for equality so as to ensure that the endpoint being"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":" * added or updated is unique in terms of identity in the UniqueEndpointList. However, the removal of a endpoint"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":" * uses Endpoint#equals(Object) so as to ensure that the endpoint with exactly the same fields will be removed."},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":" *"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":" *"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":" * @see Endpoint#isSameEndpoint(Endpoint)"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"public class UniqueEndpointList implements Iterable\u003cEndpoint\u003e {"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"    private final ObservableList\u003cEndpoint\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"    private final ObservableList\u003cEndpoint\u003e internalUnmodifiableList \u003d"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"     * Returns true if the list contains an equivalent endpoint as the given argument."},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"    public boolean contains(Endpoint toCheck) {"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"        return internalList.stream().anyMatch(toCheck::isSameEndpoint);"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"     * Adds a endpoint to the list."},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"     * The endpoint must not already exist in the list."},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"    public void add(Endpoint toAdd) {"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(toAdd);"},{"lineNumber":45,"author":{"gitId":"ong6"},"content":"        // if (contains(toAdd)) {"},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"        //     throw new DuplicateApiEndpointException();"},{"lineNumber":47,"author":{"gitId":"ong6"},"content":"        // }"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"        internalList.add(toAdd);"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"     * Replaces the endpoint {@code target} in the list with {@code editedEndpoint}."},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"     * {@code target} must exist in the list."},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"     * The endpoint identity of {@code editedEndpoint} must not be the same as another existing endpoint in the list."},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":"    public void setEndpoint(Endpoint target, Endpoint editedEndpoint) {"},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"        requireAllNonNull(target, editedEndpoint);"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"            throw new EndpointNotFoundException();"},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":64,"author":{"gitId":"ong6"},"content":"        // if (!target.isSameEndpoint(editedEndpoint) \u0026\u0026 contains(editedEndpoint)) {"},{"lineNumber":65,"author":{"gitId":"ong6"},"content":"        //     throw new DuplicateApiEndpointException();"},{"lineNumber":66,"author":{"gitId":"ong6"},"content":"        // }"},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"        internalList.set(index, editedEndpoint);"},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":"     * Removes the equivalent endpoint from the list."},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":"     * The endpoint must exist in the list."},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":"    public void remove(Endpoint toRemove) {"},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitId":"tjtanjin"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":"            throw new EndpointNotFoundException();"},{"lineNumber":79,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":82,"author":{"gitId":"tjtanjin"},"content":"    public void setEndpoints(UniqueEndpointList replacement) {"},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(replacement);"},{"lineNumber":84,"author":{"gitId":"tjtanjin"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":85,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"tjtanjin"},"content":"     * Replaces the contents of this list with {@code endpoints}."},{"lineNumber":89,"author":{"gitId":"tjtanjin"},"content":"     * {@code endpoints} must not contain duplicate endpoints."},{"lineNumber":90,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"tjtanjin"},"content":"    public void setEndpoints(List\u003cEndpoint\u003e endpoints) {"},{"lineNumber":92,"author":{"gitId":"tjtanjin"},"content":"        requireAllNonNull(endpoints);"},{"lineNumber":93,"author":{"gitId":"JulietTeoh"},"content":"        if (!endpointsAreUnique(endpoints)) {"},{"lineNumber":94,"author":{"gitId":"JulietTeoh"},"content":"            throw new DuplicateApiEndpointException();"},{"lineNumber":95,"author":{"gitId":"JulietTeoh"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":97,"author":{"gitId":"tjtanjin"},"content":"        internalList.setAll(endpoints);"},{"lineNumber":98,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":100,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"tjtanjin"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":102,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"tjtanjin"},"content":"    public ObservableList\u003cEndpoint\u003e asUnmodifiableObservableList() {"},{"lineNumber":104,"author":{"gitId":"tjtanjin"},"content":"        return internalUnmodifiableList;"},{"lineNumber":105,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":107,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"tjtanjin"},"content":"    public Iterator\u003cEndpoint\u003e iterator() {"},{"lineNumber":109,"author":{"gitId":"tjtanjin"},"content":"        return internalList.iterator();"},{"lineNumber":110,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":112,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"tjtanjin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitId":"tjtanjin"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":115,"author":{"gitId":"tjtanjin"},"content":"                || (other instanceof UniqueEndpointList // instanceof handles nulls"},{"lineNumber":116,"author":{"gitId":"tjtanjin"},"content":"                        \u0026\u0026 internalList.equals(((UniqueEndpointList) other).internalList));"},{"lineNumber":117,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":119,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"tjtanjin"},"content":"    public int hashCode() {"},{"lineNumber":121,"author":{"gitId":"tjtanjin"},"content":"        return internalList.hashCode();"},{"lineNumber":122,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":124,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"tjtanjin"},"content":"     * Returns true if {@code endpoints} contains only unique endpoints."},{"lineNumber":126,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"JulietTeoh"},"content":"    private boolean endpointsAreUnique(List\u003cEndpoint\u003e endpoints) {"},{"lineNumber":128,"author":{"gitId":"tjtanjin"},"content":"        for (int i \u003d 0; i \u003c endpoints.size() - 1; i++) {"},{"lineNumber":129,"author":{"gitId":"tjtanjin"},"content":"            for (int j \u003d i + 1; j \u003c endpoints.size(); j++) {"},{"lineNumber":130,"author":{"gitId":"tjtanjin"},"content":"                if (endpoints.get(i).isSameEndpoint(endpoints.get(j))) {"},{"lineNumber":131,"author":{"gitId":"tjtanjin"},"content":"                    return false;"},{"lineNumber":132,"author":{"gitId":"tjtanjin"},"content":"                }"},{"lineNumber":133,"author":{"gitId":"tjtanjin"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"tjtanjin"},"content":"        return true;"},{"lineNumber":136,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":6,"tjtanjin":126,"JulietTeoh":5}},{"path":"src/main/java/seedu/us/among/model/endpoint/exceptions/DuplicateApiEndpointException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model.endpoint.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity)."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"public class DuplicateApiEndpointException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"    public DuplicateApiEndpointException() {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":3,"-":8}},{"path":"src/main/java/seedu/us/among/model/endpoint/exceptions/EndpointNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model.endpoint.exceptions;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":" * Signals that the operation is unable to find the specified endpoint."},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"public class EndpointNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"tjtanjin":6}},{"path":"src/main/java/seedu/us/among/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model.tag;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":" * Represents a Tag in the API endpoint list."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":3,"-":51}},{"path":"src/main/java/seedu/us/among/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model.util;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.EndpointList;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyEndpointList;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Address;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":11,"author":{"gitId":"ong6"},"content":"import seedu.us.among.model.endpoint.Method;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Response;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.tag.Tag;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"ong6"},"content":" * Contains utility methods for populating {@code EndpointList} with sample"},{"lineNumber":17,"author":{"gitId":"ong6"},"content":" * data."},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"public class SampleDataUtil {"},{"lineNumber":20,"author":{"gitId":"ong6"},"content":"    public static Endpoint[] getSampleEndpoint() {"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"        return new Endpoint[] {"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"            new Endpoint(new Method(\"GET\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"                    getTagSet(\"friends\"), new Response()),"},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"            new Endpoint(new Method(\"POST\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"                    getTagSet(\"colleagues\", \"friends\"), new Response()),"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"            new Endpoint(new Method(\"HEAD\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"                    getTagSet(\"neighbours\"), new Response()),"},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"            new Endpoint(new Method(\"DELETE\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"                    getTagSet(\"family\"), new Response()),"},{"lineNumber":30,"author":{"gitId":"ong6"},"content":"            new Endpoint(new Method(\"OPTIONS\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"                    getTagSet(\"classmates\"), new Response()),"},{"lineNumber":32,"author":{"gitId":"ong6"},"content":"            new Endpoint(new Method(\"GET\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"                    getTagSet(\"colleagues\"), new Response()) };"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"    public static ReadOnlyEndpointList getSampleEndpointList() {"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"        EndpointList sampleAb \u003d new EndpointList();"},{"lineNumber":38,"author":{"gitId":"ong6"},"content":"        for (Endpoint sampleEndpoint : getSampleEndpoint()) {"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"            sampleAb.addEndpoint(sampleEndpoint);"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"        return sampleAb;"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":48,"author":{"gitId":"ong6"},"content":"        return Arrays.stream(strings).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":11,"tjtanjin":40}},{"path":"src/main/java/seedu/us/among/storage/EndpointListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.storage;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.EndpointList;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyEndpointList;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":" * Represents a storage for {@link EndpointList}."},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"public interface EndpointListStorage {"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"     * Returns the file path of the data file."},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"    Path getEndpointListFilePath();"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"     * Returns EndpointList data as a {@link ReadOnlyEndpointList}."},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"    Optional\u003cReadOnlyEndpointList\u003e readEndpointList() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"     * @see #getEndpointListFilePath()"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"    Optional\u003cReadOnlyEndpointList\u003e readEndpointList(Path filePath) throws DataConversionException, IOException;"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"     * Saves the given {@link ReadOnlyEndpointList} to the storage."},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"     * @param endpointList cannot be null."},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"    void saveEndpointList(ReadOnlyEndpointList endpointList) throws IOException;"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"     * @see #saveEndpointList(ReadOnlyEndpointList)"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"    void saveEndpointList(ReadOnlyEndpointList endpointList, Path filePath) throws IOException;"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":46}},{"path":"src/main/java/seedu/us/among/storage/JsonAdaptedEndpoint.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Address;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":15,"author":{"gitId":"ong6"},"content":"import seedu.us.among.model.endpoint.Method;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Response;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.tag.Tag;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":" * Jackson-friendly version of {@link Endpoint}."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"class JsonAdaptedEndpoint {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Endpoint\u0027s %s field is missing!\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"    private final String method;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"    private JsonAdaptedResponse response;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"     * Constructs a {@code JsonAdaptedEndpoint} with the given endpoint details."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"    public JsonAdaptedEndpoint(@JsonProperty(\"method\") String method,"},{"lineNumber":36,"author":{"gitId":"JulietTeoh"},"content":"                               @JsonProperty(\"address\") String address,"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"                               @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"                               @JsonProperty(\"response\") JsonAdaptedResponse response) {"},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"        this.method \u003d method;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":42,"author":{"gitId":"ong6"},"content":"            this.tagged.addAll(tagged); // to-do"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"        if (response !\u003d null) {"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"            this.response \u003d response;"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"     * Converts a given {@code Endpoint} into this class for Jackson use."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"    public JsonAdaptedEndpoint(Endpoint source) {"},{"lineNumber":53,"author":{"gitId":"ong6"},"content":"        method \u003d source.getMethod().methodName;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"        Response sourceResponse \u003d source.getResponse();"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"        response \u003d new JsonAdaptedResponse(sourceResponse.getProtocolVersion(),"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"                sourceResponse.getStatusCode(),"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"                sourceResponse.getReasonPhrase(),"},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":"                sourceResponse.getStatusLine(),"},{"lineNumber":63,"author":{"gitId":"tlylt"},"content":"                sourceResponse.getResponseEntity(),"},{"lineNumber":64,"author":{"gitId":"tlylt"},"content":"                sourceResponse.getResponseTime());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"ong6"},"content":"     * Converts this Jackson-friendly adapted endpoint object into the model\u0027s"},{"lineNumber":69,"author":{"gitId":"ong6"},"content":"     * {@code Endpoint} object."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"ong6"},"content":"     * @throws IllegalValueException if there were any data constraints violated in"},{"lineNumber":72,"author":{"gitId":"ong6"},"content":"     *                               the adapted endpoint."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"    public Endpoint toModelType() throws IllegalValueException {"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":"        final List\u003cTag\u003e endpointTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":77,"author":{"gitId":"tjtanjin"},"content":"            endpointTags.add(tag.toModelType());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"ong6"},"content":"        if (method \u003d\u003d null) {"},{"lineNumber":81,"author":{"gitId":"ong6"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Method.class.getSimpleName()));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"ong6"},"content":"        if (!Method.isValidMethod(method)) {"},{"lineNumber":84,"author":{"gitId":"ong6"},"content":"            throw new IllegalValueException(Method.MESSAGE_CONSTRAINTS);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"ong6"},"content":"        final Method modelName \u003d new Method(method);"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"tjtanjin"},"content":"        final Response modelResponse;"},{"lineNumber":97,"author":{"gitId":"tjtanjin"},"content":"        if (response \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitId":"tjtanjin"},"content":"            modelResponse \u003d new Response();"},{"lineNumber":99,"author":{"gitId":"tjtanjin"},"content":"        } else {"},{"lineNumber":100,"author":{"gitId":"tjtanjin"},"content":"            Response newModelResponse \u003d response.toModelType();"},{"lineNumber":101,"author":{"gitId":"tjtanjin"},"content":"            modelResponse \u003d new Response(newModelResponse.getProtocolVersion(),"},{"lineNumber":102,"author":{"gitId":"tjtanjin"},"content":"                    newModelResponse.getStatusCode(), newModelResponse.getReasonPhrase(),"},{"lineNumber":103,"author":{"gitId":"tlylt"},"content":"                    newModelResponse.getStatusLine(), newModelResponse.getResponseEntity(),"},{"lineNumber":104,"author":{"gitId":"tlylt"},"content":"                    newModelResponse.getResponseTime());"},{"lineNumber":105,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":107,"author":{"gitId":"tjtanjin"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(endpointTags);"},{"lineNumber":108,"author":{"gitId":"tjtanjin"},"content":"        return new Endpoint(modelName, modelAddress, modelTags, modelResponse);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":14,"tlylt":4,"tjtanjin":38,"-":54,"JulietTeoh":1}},{"path":"src/main/java/seedu/us/among/storage/JsonAdaptedResponse.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.storage;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Response;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":" * Jackson-friendly version of {@link Response}."},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"class JsonAdaptedResponse {"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"    private final String protocolVersion;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"    private final String statusCode;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"    private final String reasonPhrase;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"    private final String statusLine;"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"    private final String responseEntity;"},{"lineNumber":19,"author":{"gitId":"tlylt"},"content":"    private final String responseTime;"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"     * Constructs a {@code JsonAdaptedResponse} with the given {@code protocolVersion, @code statusCode,"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"     * @code reasonPhrase and @code statusLine}."},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"    @JsonCreator"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    public JsonAdaptedResponse(@JsonProperty(\"protocolVersion\") String protocolVersion,"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"                               @JsonProperty(\"statusCode\") String statusCode,"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"                               @JsonProperty(\"reasonPhrase\") String reasonPhrase,"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"                               @JsonProperty(\"statusLine\") String statusLine,"},{"lineNumber":30,"author":{"gitId":"tlylt"},"content":"                               @JsonProperty(\"responseEntity\") String responseEntity,"},{"lineNumber":31,"author":{"gitId":"tlylt"},"content":"                               @JsonProperty(\"responseTime\") String responseTime) {"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"        this.protocolVersion \u003d protocolVersion;"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"        this.statusCode \u003d statusCode;"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"        this.reasonPhrase \u003d reasonPhrase;"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"        this.statusLine \u003d statusLine;"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"        this.responseEntity \u003d responseEntity;"},{"lineNumber":37,"author":{"gitId":"tlylt"},"content":"        this.responseTime \u003d responseTime;"},{"lineNumber":38,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"     * Converts a given {@code Response} into this class for Jackson use."},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"    public JsonAdaptedResponse(Response source) {"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"        this.protocolVersion \u003d source.getProtocolVersion();"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"        this.statusCode \u003d source.getStatusCode();"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"        this.reasonPhrase \u003d source.getReasonPhrase();"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"        this.statusLine \u003d source.getStatusLine();"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"        this.responseEntity \u003d source.getResponseEntity();"},{"lineNumber":50,"author":{"gitId":"tlylt"},"content":"        this.responseTime \u003d source.getResponseTime();"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"     * Converts this Jackson-friendly adapted response object into the model\u0027s {@code Response} object."},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted response."},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"    public Response toModelType() throws IllegalValueException {"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"        if (!Response.isValidResponse(protocolVersion, statusCode, reasonPhrase, statusLine)) {"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"            throw new IllegalValueException(Response.MESSAGE_CONSTRAINTS);"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"tlylt"},"content":"        return new Response(protocolVersion, statusCode, reasonPhrase, statusLine, responseEntity, responseTime);"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tlylt":7,"tjtanjin":58}},{"path":"src/main/java/seedu/us/among/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.tag.Tag;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":3,"-":45}},{"path":"src/main/java/seedu/us/among/storage/JsonEndpointListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.storage;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyEndpointList;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":" * A class to access EndpointList data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"public class JsonEndpointListStorage implements EndpointListStorage {"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonEndpointListStorage.class);"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"    private Path filePath;"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    public JsonEndpointListStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"    public Path getEndpointListFilePath() {"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"    public Optional\u003cReadOnlyEndpointList\u003e readEndpointList() throws DataConversionException {"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"        return readEndpointList(filePath);"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"     * Similar to {@link #readEndpointList()}."},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"    public Optional\u003cReadOnlyEndpointList\u003e readEndpointList(Path filePath) throws DataConversionException {"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"        Optional\u003cJsonSerializableEndpointList\u003e jsonEndpointList \u003d JsonUtil.readJsonFile("},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"                filePath, JsonSerializableEndpointList.class);"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"        if (!jsonEndpointList.isPresent()) {"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"            return Optional.of(jsonEndpointList.get().toModelType());"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"    public void saveEndpointList(ReadOnlyEndpointList endpointList) throws IOException {"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"        saveEndpointList(endpointList, filePath);"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"     * Similar to {@link #saveEndpointList(ReadOnlyEndpointList)}."},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":"    public void saveEndpointList(ReadOnlyEndpointList endpointList, Path filePath) throws IOException {"},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(endpointList);"},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"        requireNonNull(filePath);"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":77,"author":{"gitId":"tjtanjin"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableEndpointList(endpointList), filePath);"},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":80,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":80}},{"path":"src/main/java/seedu/us/among/storage/JsonSerializableEndpointList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.storage;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.EndpointList;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyEndpointList;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":" * An Immutable EndpointList that is serializable to JSON format."},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"@JsonRootName(value \u003d \"API endpoint list\")"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"class JsonSerializableEndpointList {"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"    public static final String MESSAGE_DUPLICATE_ENDPOINT \u003d \"API endpoint list contains duplicate endpoint(s).\";"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"    private final List\u003cJsonAdaptedEndpoint\u003e endpoints \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"     * Constructs a {@code JsonSerializableEndpointList} with the given endpoints."},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"    @JsonCreator"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"    public JsonSerializableEndpointList(@JsonProperty(\"endpoints\") List\u003cJsonAdaptedEndpoint\u003e endpoints) {"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"        this.endpoints.addAll(endpoints);"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"     * Converts a given {@code ReadOnlyEndpointList} into this class for Jackson use."},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableEndpointList}."},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"    public JsonSerializableEndpointList(ReadOnlyEndpointList source) {"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"        endpoints.addAll(source.getEndpointList().stream().map(JsonAdaptedEndpoint::new).collect(Collectors.toList()));"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"     * Converts this API endpoint list into the model\u0027s {@code EndpointList} object."},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"    public EndpointList toModelType() throws IllegalValueException {"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"        EndpointList endpointList \u003d new EndpointList();"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"        for (JsonAdaptedEndpoint jsonAdaptedEndpoint : endpoints) {"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"            Endpoint endpoint \u003d jsonAdaptedEndpoint.toModelType();"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"            if (endpointList.hasEndpoint(endpoint)) {"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_ENDPOINT);"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"            endpointList.addEndpoint(endpoint);"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"        return endpointList;"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":60}},{"path":"src/main/java/seedu/us/among/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.util.JsonUtil;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":5,"-":42}},{"path":"src/main/java/seedu/us/among/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.storage;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyEndpointList;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"public interface Storage extends EndpointListStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"    Path getEndpointListFilePath();"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"    Optional\u003cReadOnlyEndpointList\u003e readEndpointList() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"    void saveEndpointList(ReadOnlyEndpointList endpointList) throws IOException;"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":32}},{"path":"src/main/java/seedu/us/among/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.storage;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyEndpointList;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyUserPrefs;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":" * Manages storage of EndpointList data in local storage."},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"public class StorageManager implements Storage {"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"    private EndpointListStorage endpointListStorage;"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"     * Creates a {@code StorageManager} with the given {@code EndpointListStorage} and {@code UserPrefStorage}."},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    public StorageManager(EndpointListStorage endpointListStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"        super();"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"        this.endpointListStorage \u003d endpointListStorage;"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EndpointList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"    public Path getEndpointListFilePath() {"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"        return endpointListStorage.getEndpointListFilePath();"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"    public Optional\u003cReadOnlyEndpointList\u003e readEndpointList() throws DataConversionException, IOException {"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"        return readEndpointList(endpointListStorage.getEndpointListFilePath());"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"    public Optional\u003cReadOnlyEndpointList\u003e readEndpointList(Path filePath) throws DataConversionException, IOException {"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"        return endpointListStorage.readEndpointList(filePath);"},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":"    public void saveEndpointList(ReadOnlyEndpointList endpointList) throws IOException {"},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":"        saveEndpointList(endpointList, endpointListStorage.getEndpointListFilePath());"},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"    public void saveEndpointList(ReadOnlyEndpointList endpointList, Path filePath) throws IOException {"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":"        endpointListStorage.saveEndpointList(endpointList, filePath);"},{"lineNumber":77,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":79,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":79}},{"path":"src/main/java/seedu/us/among/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyUserPrefs;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.UserPrefs;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":" * Represents a storage for {@link seedu.us.among.model.UserPrefs}."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"     * Saves the given {@link seedu.us.among.model.ReadOnlyUserPrefs} to the storage."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":6,"-":30}},{"path":"src/main/java/seedu/us/among/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":31,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @FunctionalInterface"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result."},{"lineNumber":79,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":80,"author":{"gitId":"tjtanjin"},"content":"         * @see seedu.us.among.logic.Logic#execute(String)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":5,"-":80}},{"path":"src/main/java/seedu/us/among/ui/EndpointCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":" * An UI component that displays information of a {@code Endpoint}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"public class EndpointCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"    private static final String FXML \u003d \"EndpointListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"ong6"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved"},{"lineNumber":21,"author":{"gitId":"ong6"},"content":"     * keywords in JavaFX. As a consequence, UI elements\u0027 variable names cannot be"},{"lineNumber":22,"author":{"gitId":"ong6"},"content":"     * set to such keywords or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe"},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"     *      issue on EndpointList level 4\u003c/a\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"    public final Endpoint endpoint;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"ong6"},"content":"     * Creates a {@code EndpointCode} with the given {@code Endpoint} and index to"},{"lineNumber":43,"author":{"gitId":"ong6"},"content":"     * display."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"    public EndpointCard(Endpoint endpoint, int displayedIndex) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"        this.endpoint \u003d endpoint;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":49,"author":{"gitId":"ong6"},"content":"        name.setText(endpoint.getMethod().methodName);"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"        address.setText(endpoint.getAddress().value);"},{"lineNumber":51,"author":{"gitId":"ong6"},"content":"        endpoint.getTags().stream().sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"        if (!(other instanceof EndpointCard)) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"        EndpointCard card \u003d (EndpointCard) other;"},{"lineNumber":69,"author":{"gitId":"ong6"},"content":"        return id.getText().equals(card.id.getText()) \u0026\u0026 endpoint.equals(card.endpoint);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":10,"tjtanjin":11,"-":50}},{"path":"src/main/java/seedu/us/among/ui/EndpointListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.ui;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":" * Panel containing the list of persons."},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"public class EndpointListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"    private static final String FXML \u003d \"EndpointListPanel.fxml\";"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EndpointListPanel.class);"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"    private ListView\u003cEndpoint\u003e personListView;"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"     * Creates a {@code EndpointListPanel} with the given {@code ObservableList}."},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    public EndpointListPanel(ObservableList\u003cEndpoint\u003e endpointList) {"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"        personListView.setItems(endpointList);"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Endpoint} using a {@code EndpointCard}."},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"    class PersonListViewCell extends ListCell\u003cEndpoint\u003e {"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"        protected void updateItem(Endpoint endpoint, boolean empty) {"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"            super.updateItem(endpoint, empty);"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"            if (empty || endpoint \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"                setGraphic(null);"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"                setText(null);"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"                setGraphic(new EndpointCard(endpoint, getIndex() + 1).getRoot());"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":49}},{"path":"src/main/java/seedu/us/among/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103t-t12-4.github.io/tp/\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":3,"-":99}},{"path":"src/main/java/seedu/us/among/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.Logic;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"    private EndpointListPanel endpointListPanel;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"    private StackPane endpointListPanelPlaceholder;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":87,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":88,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":89,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":90,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":96,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":100,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":113,"author":{"gitId":"tjtanjin"},"content":"        endpointListPanel \u003d new EndpointListPanel(logic.getFilteredEndpointList());"},{"lineNumber":114,"author":{"gitId":"tjtanjin"},"content":"        endpointListPanelPlaceholder.getChildren().add(endpointListPanel.getRoot());"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"tjtanjin"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getEndpointListFilePath());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"tjtanjin"},"content":"    public EndpointListPanel getEndpointListPanel() {"},{"lineNumber":167,"author":{"gitId":"tjtanjin"},"content":"        return endpointListPanel;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"tjtanjin"},"content":"     * @see Logic#execute(String)"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":179,"author":{"gitId":"tlylt"},"content":"            if (commandResult.isApiResponse()) {"},{"lineNumber":180,"author":{"gitId":"tlylt"},"content":"                resultDisplay.setApiFeedbackToUser(commandResult.getFeedbackToUser(), commandResult.getEndpoint());"},{"lineNumber":181,"author":{"gitId":"tlylt"},"content":"            } else {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":183,"author":{"gitId":"tlylt"},"content":"            }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tlylt":4,"tjtanjin":15,"-":181}},{"path":"src/main/java/seedu/us/among/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":21,"author":{"gitId":"tlylt"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"    private FlowPane responseMeta;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);"},{"lineNumber":30,"author":{"gitId":"tlylt"},"content":"        responseMeta.getChildren().clear();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"tlylt"},"content":"    public void setApiFeedbackToUser(String feedbackToUser, Endpoint endpoint) {"},{"lineNumber":34,"author":{"gitId":"tlylt"},"content":"        requireNonNull(feedbackToUser);"},{"lineNumber":35,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":36,"author":{"gitId":"tlylt"},"content":"        String textFeedback \u003d String.format(\"Endpoint:\\n%s\\nResponse Body:\\n%s\", endpoint.getAddress(), feedbackToUser);"},{"lineNumber":37,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":38,"author":{"gitId":"tlylt"},"content":"        responseMeta.getChildren().clear();"},{"lineNumber":39,"author":{"gitId":"tlylt"},"content":"        responseMeta.getChildren().addAll(new Label(String.format(\"Method: %s\", endpoint.getMethod().toString())),"},{"lineNumber":40,"author":{"gitId":"tlylt"},"content":"                new Label(String.format(\"Status: %s\", endpoint.getResponse().getStatusCode())),"},{"lineNumber":41,"author":{"gitId":"tlylt"},"content":"                new Label(String.format(\"Time: %s\", endpoint.getResponse().getResponseTime())));"},{"lineNumber":42,"author":{"gitId":"tlylt"},"content":"        resultDisplay.setText(textFeedback);"},{"lineNumber":43,"author":{"gitId":"tlylt"},"content":"        resultDisplay.setWrapText(true);"},{"lineNumber":44,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tlylt":19,"tjtanjin":1,"-":27}},{"path":"src/main/java/seedu/us/among/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":27}},{"path":"src/main/java/seedu/us/among/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":12}},{"path":"src/main/java/seedu/us/among/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.ImPoster;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.Logic;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/imPoster.png\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon."},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(ImPoster.class.getResourceAsStream(imagePath));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":6,"-":83}},{"path":"src/main/java/seedu/us/among/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.ImPoster;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public T getRoot() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(location);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fxmlLoader.load();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d ImPoster.class.getResource(fxmlFileNameWithFolder);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":2,"-":86}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":".cell_big_label {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_small_label {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":".stack-pane {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":".pane-with-border {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":".status-bar {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":".result-display {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":".result-display .label {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":".status-bar .label {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":".status-bar-with-border {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":".status-bar-with-border .label {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":".grid-pane {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":".context-menu {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":".context-menu .label {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":".menu-bar {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":".menu-bar .label {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":".menu .left-container {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-background-color: black;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"/*"},{"lineNumber":211,"author":{"gitId":"-"},"content":" * Metro style Push Button"},{"lineNumber":212,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira"},{"lineNumber":213,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":214,"author":{"gitId":"-"},"content":" */"},{"lineNumber":215,"author":{"gitId":"-"},"content":".button {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":".button:hover {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  -fx-background-color: white;"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":".button:focused {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:default {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:default:hover {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":".dialog-pane {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-fill: white;"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":".scroll-bar {"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":".scroll-bar .thumb {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;"},{"lineNumber":308,"author":{"gitId":"-"},"content":"}"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"#cardPane {"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;"},{"lineNumber":313,"author":{"gitId":"-"},"content":"}"},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"#commandTypeLabel {"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"#commandTextField {"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"},{"lineNumber":333,"author":{"gitId":"-"},"content":"}"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"#resultDisplay .content {"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":338,"author":{"gitId":"-"},"content":"}"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"#tags {"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;"},{"lineNumber":343,"author":{"gitId":"-"},"content":"}"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"#tags .label {"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;"},{"lineNumber":352,"author":{"gitId":"-"},"content":"}"},{"lineNumber":353,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":354,"author":{"gitId":"tlylt"},"content":"#responseMeta {"},{"lineNumber":355,"author":{"gitId":"tlylt"},"content":"    -fx-hgap: 7;"},{"lineNumber":356,"author":{"gitId":"tlylt"},"content":"    -fx-vgap: 3;"},{"lineNumber":357,"author":{"gitId":"tlylt"},"content":"}"},{"lineNumber":358,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":359,"author":{"gitId":"tlylt"},"content":"#responseMeta .label {"},{"lineNumber":360,"author":{"gitId":"tlylt"},"content":"    -fx-text-fill: white;"},{"lineNumber":361,"author":{"gitId":"tlylt"},"content":"    -fx-background-color: #FFA00D;"},{"lineNumber":362,"author":{"gitId":"tlylt"},"content":"    -fx-padding: 1 3 1 3;"},{"lineNumber":363,"author":{"gitId":"tlylt"},"content":"    -fx-border-radius: 2;"},{"lineNumber":364,"author":{"gitId":"tlylt"},"content":"    -fx-background-radius: 2;"},{"lineNumber":365,"author":{"gitId":"tlylt"},"content":"    -fx-font-size: 11;"},{"lineNumber":366,"author":{"gitId":"tlylt"},"content":"    -fx-z-index: -1;"},{"lineNumber":367,"author":{"gitId":"tlylt"},"content":"}"},{"lineNumber":368,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":369,"author":{"gitId":"tlylt"},"content":""}],"authorContributionMap":{"tlylt":17,"-":352}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":16,"author":{"gitId":"ong6"},"content":"         title\u003d\"imPoster\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"    \u003cImage url\u003d\"@/images/imPoster.png\" /\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"        \u003cHBox styleClass\u003d\"pane-with-border\" prefHeight\u003d\"2160\"\u003e"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"          \u003cVBox fx:id\u003d\"endpointList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"            \u003cStackPane fx:id\u003d\"endpointListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"          \u003c/VBox\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"          \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"                     minHeight\u003d\"100\" prefHeight\u003d\"100\"\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003c/StackPane\u003e"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"        \u003c/HBox\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"ong6":1,"-":51,"tjtanjin":12}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""},{"lineNumber":9,"author":{"gitId":"-"},"content":"           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"  \u003cVBox VBox.vgrow\u003d\"ALWAYS\" \u003e"},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":"  \u003cFlowPane fx:id\u003d\"responseMeta\" /\u003e"},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" prefHeight\u003d\"1000\" prefWidth\u003d\"800\" styleClass\u003d\"result-display\"/\u003e"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"  \u003c/VBox\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e"}],"authorContributionMap":{"tlylt":6,"-":8}},{"path":"src/test/data/JsonSerializableEndpointListTest/duplicateEndpointList.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"ong6"},"content":"\t\"endpoints\": ["},{"lineNumber":3,"author":{"gitId":"ong6"},"content":"\t\t{"},{"lineNumber":4,"author":{"gitId":"ong6"},"content":"\t\t\t\"name\": \"GET\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"\t\t\t\"address\": \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"\t\t\t\"tagged\": [\"friends\"]"},{"lineNumber":7,"author":{"gitId":"ong6"},"content":"\t\t},"},{"lineNumber":8,"author":{"gitId":"ong6"},"content":"\t\t{"},{"lineNumber":9,"author":{"gitId":"ong6"},"content":"\t\t\t\"name\": \"GET\","},{"lineNumber":10,"author":{"gitId":"-"},"content":"\t\t\t\"address\": \"4th street\""},{"lineNumber":11,"author":{"gitId":"ong6"},"content":"\t\t}"},{"lineNumber":12,"author":{"gitId":"ong6"},"content":"\t]"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":8,"-":5}},{"path":"src/test/data/JsonSerializableEndpointListTest/invalidEndpointList.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":"  \"endpoints\": [ {"},{"lineNumber":3,"author":{"gitId":"JulietTeoh"},"content":"    \"name\": \"Hans Muster@$!\u003c\u003e changed to invalid name as invalid phone and email no longer exist\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":5,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":4,"tjtanjin":1,"JulietTeoh":1}},{"path":"src/test/data/JsonSerializableEndpointListTest/typicalEndpointList.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"ong6"},"content":"\t\"_comment\": \"imPoster save file which contains the same Endpoint values as in TypicalEndpoints#getTypicalEndpointList()\","},{"lineNumber":3,"author":{"gitId":"ong6"},"content":"\t\"endpoints\": ["},{"lineNumber":4,"author":{"gitId":"ong6"},"content":"\t\t{"},{"lineNumber":5,"author":{"gitId":"ong6"},"content":"\t\t\t\"name\": \"GET Pauline\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"\t\t\t\"address\": \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"\t\t\t\"tagged\": [\"friends\"]"},{"lineNumber":8,"author":{"gitId":"ong6"},"content":"\t\t},"},{"lineNumber":9,"author":{"gitId":"ong6"},"content":"\t\t{"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\t\t\t\"name\": \"Benson Meier\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"\t\t\t\"address\": \"311, Clementi Ave 2, #02-25\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"\t\t\t\"tagged\": [\"owesMoney\", \"friends\"]"},{"lineNumber":13,"author":{"gitId":"ong6"},"content":"\t\t},"},{"lineNumber":14,"author":{"gitId":"ong6"},"content":"\t\t{"},{"lineNumber":15,"author":{"gitId":"-"},"content":"\t\t\t\"name\": \"Carl Kurz\","},{"lineNumber":16,"author":{"gitId":"-"},"content":"\t\t\t\"address\": \"wall street\","},{"lineNumber":17,"author":{"gitId":"-"},"content":"\t\t\t\"tagged\": []"},{"lineNumber":18,"author":{"gitId":"ong6"},"content":"\t\t},"},{"lineNumber":19,"author":{"gitId":"ong6"},"content":"\t\t{"},{"lineNumber":20,"author":{"gitId":"-"},"content":"\t\t\t\"name\": \"Daniel Meier\","},{"lineNumber":21,"author":{"gitId":"-"},"content":"\t\t\t\"address\": \"10th street\","},{"lineNumber":22,"author":{"gitId":"-"},"content":"\t\t\t\"tagged\": [\"friends\"]"},{"lineNumber":23,"author":{"gitId":"ong6"},"content":"\t\t},"},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"\t\t{"},{"lineNumber":25,"author":{"gitId":"-"},"content":"\t\t\t\"name\": \"Elle Meyer\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"\t\t\t\"address\": \"michegan ave\","},{"lineNumber":27,"author":{"gitId":"-"},"content":"\t\t\t\"tagged\": []"},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"\t\t},"},{"lineNumber":29,"author":{"gitId":"ong6"},"content":"\t\t{"},{"lineNumber":30,"author":{"gitId":"-"},"content":"\t\t\t\"name\": \"Fiona Kunz\","},{"lineNumber":31,"author":{"gitId":"-"},"content":"\t\t\t\"address\": \"little tokyo\","},{"lineNumber":32,"author":{"gitId":"-"},"content":"\t\t\t\"tagged\": []"},{"lineNumber":33,"author":{"gitId":"ong6"},"content":"\t\t},"},{"lineNumber":34,"author":{"gitId":"ong6"},"content":"\t\t{"},{"lineNumber":35,"author":{"gitId":"-"},"content":"\t\t\t\"name\": \"George Best\","},{"lineNumber":36,"author":{"gitId":"-"},"content":"\t\t\t\"address\": \"4th street\","},{"lineNumber":37,"author":{"gitId":"-"},"content":"\t\t\t\"tagged\": []"},{"lineNumber":38,"author":{"gitId":"ong6"},"content":"\t\t}"},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"\t]"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"ong6"},"content":""},{"lineNumber":42,"author":{"gitId":"ong6"},"content":"//to-do if we ever use this endpointlist"}],"authorContributionMap":{"ong6":20,"-":22}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\" : \"some value \","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\" : 300,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\" : 100,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\" : 99"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"  \"endpointListFilePath\" : \"imposter.json\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":12,"tjtanjin":1}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\" : 300,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\" : 100"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"  \"endpointListFilePath\" : \"imposter.json\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":10,"tjtanjin":1}},{"path":"src/test/java/seedu/us/among/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":57}},{"path":"src/test/java/seedu/us/among/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":26}},{"path":"src/test/java/seedu/us/among/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":2,"-":133}},{"path":"src/test/java/seedu/us/among/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.core.index;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"        final Index fifthEndpointIndex \u003d Index.fromOneBased(5);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"        assertTrue(fifthEndpointIndex.equals(Index.fromOneBased(5)));"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"        assertTrue(fifthEndpointIndex.equals(Index.fromZeroBased(4)));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"        assertTrue(fifthEndpointIndex.equals(fifthEndpointIndex));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"        assertFalse(fifthEndpointIndex.equals(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"        assertFalse(fifthEndpointIndex.equals(5.0f));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"        assertFalse(fifthEndpointIndex.equals(Index.fromOneBased(1)));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":9,"-":51}},{"path":"src/test/java/seedu/us/among/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"        assertNotNull(AppUtil.getImage(\"/images/imPoster.png\"));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":3,"-":33}},{"path":"src/test/java/seedu/us/among/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":3,"-":105}},{"path":"src/test/java/seedu/us/among/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.Config;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":4,"-":112}},{"path":"src/test/java/seedu/us/among/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":2,"-":21}},{"path":"src/test/java/seedu/us/among/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.SerializableTestClass;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.TestUtil;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":3,"-":42}},{"path":"src/test/java/seedu/us/among/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":2,"-":141}},{"path":"src/test/java/seedu/us/among/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.core.Messages.MESSAGE_INVALID_ENDPOINT_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.ADDRESS_DESC_RANDOM;"},{"lineNumber":7,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.METHOD_DESC_GET;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.GET;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.CommandResult;"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.ListCommand;"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ModelManager;"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyEndpointList;"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.UserPrefs;"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.storage.JsonEndpointListStorage;"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.storage.JsonUserPrefsStorage;"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.storage.StorageManager;"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.EndpointBuilder;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":44,"author":{"gitId":"ong6"},"content":"        JsonEndpointListStorage endpointListStorage \u003d new JsonEndpointListStorage("},{"lineNumber":45,"author":{"gitId":"ong6"},"content":"                temporaryFolder.resolve(\"imposter.json\"));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"        StorageManager storage \u003d new StorageManager(endpointListStorage, userPrefsStorage);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":59,"author":{"gitId":"JulietTeoh"},"content":"        String deleteCommand \u003d \"remove 9\";"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_ENDPOINT_DISPLAYED_INDEX);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"        // Setup LogicManager with JsonEndpointListIoExceptionThrowingStub"},{"lineNumber":72,"author":{"gitId":"ong6"},"content":"        JsonEndpointListStorage endpointListStorage \u003d new JsonEndpointListIoExceptionThrowingStub("},{"lineNumber":73,"author":{"gitId":"ong6"},"content":"                temporaryFolder.resolve(\"ioExceptionEndpointList.json\"));"},{"lineNumber":74,"author":{"gitId":"ong6"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage("},{"lineNumber":75,"author":{"gitId":"ong6"},"content":"                temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":"        StorageManager storage \u003d new StorageManager(endpointListStorage, userPrefsStorage);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":80,"author":{"gitId":"ong6"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + METHOD_DESC_GET + ADDRESS_DESC_RANDOM;"},{"lineNumber":81,"author":{"gitId":"ong6"},"content":"        Endpoint expectedEndpoint \u003d new EndpointBuilder(GET).withTags().build();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":"        expectedModel.addEndpoint(expectedEndpoint);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"tjtanjin"},"content":"    public void getFilteredEndpointList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":90,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredEndpointList().remove(0));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"ong6"},"content":"     * Executes the command and confirms that - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":96,"author":{"gitId":"ong6"},"content":"     * - the internal model manager state is the same as that in"},{"lineNumber":97,"author":{"gitId":"ong6"},"content":"     * {@code expectedModel} \u003cbr\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"ong6"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel)"},{"lineNumber":101,"author":{"gitId":"ong6"},"content":"            throws CommandException, ParseException {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"ong6"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the"},{"lineNumber":109,"author":{"gitId":"ong6"},"content":"     * result message is correct."},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"ong6"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the"},{"lineNumber":118,"author":{"gitId":"ong6"},"content":"     * result message is correct."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"ong6"},"content":"     * Executes the command, confirms that the exception is thrown and that the"},{"lineNumber":127,"author":{"gitId":"ong6"},"content":"     * result message is correct."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":132,"author":{"gitId":"tjtanjin"},"content":"        Model expectedModel \u003d new ModelManager(model.getEndpointList(), new UserPrefs());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"ong6"},"content":"     * Executes the command and confirms that - the {@code expectedException} is"},{"lineNumber":138,"author":{"gitId":"ong6"},"content":"     * thrown \u003cbr\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"ong6"},"content":"     * - the internal model manager state is the same as that in"},{"lineNumber":141,"author":{"gitId":"ong6"},"content":"     * {@code expectedModel} \u003cbr\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":147,"author":{"gitId":"ong6"},"content":"        // assertEquals(expectedModel, model); //to-do"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"tjtanjin"},"content":"    private static class JsonEndpointListIoExceptionThrowingStub extends JsonEndpointListStorage {"},{"lineNumber":154,"author":{"gitId":"tjtanjin"},"content":"        private JsonEndpointListIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":159,"author":{"gitId":"tjtanjin"},"content":"        public void saveEndpointList(ReadOnlyEndpointList endpointList, Path filePath) throws IOException {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":27,"tjtanjin":29,"-":106,"JulietTeoh":1}},{"path":"src/test/java/seedu/us/among/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.getTypicalEndpointList;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.EndpointBuilder;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"ong6"},"content":" * Contains integration tests (interaction with the Model) for"},{"lineNumber":18,"author":{"gitId":"ong6"},"content":" * {@code AddCommand}."},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"        model \u003d new ModelManager(getTypicalEndpointList(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"    public void execute_newEndpoint_success() {"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"        Endpoint validEndpoint \u003d new EndpointBuilder().build();"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"        Model expectedModel \u003d new ModelManager(model.getEndpointList(), new UserPrefs());"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"        expectedModel.addEndpoint(validEndpoint);"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"        assertCommandSuccess(new AddCommand(validEndpoint), model,"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validEndpoint), expectedModel);"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"    public void execute_duplicateEndpoint_throwsCommandException() {"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"        Endpoint endpointInList \u003d model.getEndpointList().getEndpointList().get(0);"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"        assertCommandFailure(new AddCommand(endpointInList), model, AddCommand.MESSAGE_DUPLICATE_ENDPOINT);"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":2,"tjtanjin":44}},{"path":"src/test/java/seedu/us/among/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.EndpointList;"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyEndpointList;"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.EndpointBuilder;"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"public class AddCommandTest {"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"    public void constructor_nullEndpoint_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"    public void execute_endpointAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"        ModelStubAcceptingEndpointAdded modelStub \u003d new ModelStubAcceptingEndpointAdded();"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"        Endpoint validEndpoint \u003d new EndpointBuilder().build();"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"        CommandResult commandResult \u003d new AddCommand(validEndpoint).execute(modelStub);"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validEndpoint), commandResult.getFeedbackToUser());"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(Arrays.asList(validEndpoint), modelStub.endpointsAdded);"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"    public void execute_duplicateEndpoint_throwsCommandException() {"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"        Endpoint validEndpoint \u003d new EndpointBuilder().build();"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"        AddCommand addCommand \u003d new AddCommand(validEndpoint);"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"        ModelStub modelStub \u003d new ModelStubWithEndpoint(validEndpoint);"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":50,"author":{"gitId":"ong6"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_ENDPOINT, ()"},{"lineNumber":51,"author":{"gitId":"ong6"},"content":"            -\u003e addCommand.execute(modelStub));"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"    public void equals() {"},{"lineNumber":56,"author":{"gitId":"ong6"},"content":"        Endpoint get \u003d new EndpointBuilder().withMethod(\"GET\").build();"},{"lineNumber":57,"author":{"gitId":"ong6"},"content":"        Endpoint post \u003d new EndpointBuilder().withMethod(\"POST\").build();"},{"lineNumber":58,"author":{"gitId":"ong6"},"content":"        AddCommand addGetCommand \u003d new AddCommand(get);"},{"lineNumber":59,"author":{"gitId":"ong6"},"content":"        AddCommand addPostCommand \u003d new AddCommand(post);"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"        // same object -\u003e returns true"},{"lineNumber":62,"author":{"gitId":"ong6"},"content":"        assertTrue(addGetCommand.equals(addGetCommand));"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"        // same values -\u003e returns true"},{"lineNumber":65,"author":{"gitId":"ong6"},"content":"        AddCommand addGetCommandCopy \u003d new AddCommand(get);"},{"lineNumber":66,"author":{"gitId":"ong6"},"content":"        assertTrue(addGetCommand.equals(addGetCommandCopy));"},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"        // different types -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"ong6"},"content":"        assertFalse(addGetCommand.equals(1));"},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"        // null -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"ong6"},"content":"        assertFalse(addGetCommand.equals(null));"},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"        // different endpoint -\u003e returns false"},{"lineNumber":75,"author":{"gitId":"ong6"},"content":"        assertFalse(addGetCommand.equals(addPostCommand));"},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"tjtanjin"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":80,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"tjtanjin"},"content":"    private class ModelStub implements Model {"},{"lineNumber":82,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":84,"author":{"gitId":"tjtanjin"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":85,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":88,"author":{"gitId":"tjtanjin"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":89,"author":{"gitId":"tjtanjin"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":90,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":92,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":93,"author":{"gitId":"tjtanjin"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":94,"author":{"gitId":"tjtanjin"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":95,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":97,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":98,"author":{"gitId":"tjtanjin"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":99,"author":{"gitId":"tjtanjin"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":100,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":102,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":103,"author":{"gitId":"tjtanjin"},"content":"        public Path getEndpointListFilePath() {"},{"lineNumber":104,"author":{"gitId":"tjtanjin"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":105,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":107,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":108,"author":{"gitId":"tjtanjin"},"content":"        public void setEndpointListFilePath(Path endpointListFilePath) {"},{"lineNumber":109,"author":{"gitId":"tjtanjin"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":112,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":113,"author":{"gitId":"tjtanjin"},"content":"        public void addEndpoint(Endpoint endpoint) {"},{"lineNumber":114,"author":{"gitId":"tjtanjin"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":115,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":117,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":118,"author":{"gitId":"tjtanjin"},"content":"        public void setEndpointList(ReadOnlyEndpointList endpointList) {"},{"lineNumber":119,"author":{"gitId":"tjtanjin"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":122,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":123,"author":{"gitId":"tjtanjin"},"content":"        public ReadOnlyEndpointList getEndpointList() {"},{"lineNumber":124,"author":{"gitId":"tjtanjin"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":127,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":128,"author":{"gitId":"tjtanjin"},"content":"        public boolean hasEndpoint(Endpoint endpoint) {"},{"lineNumber":129,"author":{"gitId":"tjtanjin"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":132,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":133,"author":{"gitId":"JulietTeoh"},"content":"        public void removeEndpoint(Endpoint target) {"},{"lineNumber":134,"author":{"gitId":"tjtanjin"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":137,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":138,"author":{"gitId":"tjtanjin"},"content":"        public void setEndpoint(Endpoint target, Endpoint editedEndpoint) {"},{"lineNumber":139,"author":{"gitId":"tjtanjin"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":142,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":143,"author":{"gitId":"tjtanjin"},"content":"        public ObservableList\u003cEndpoint\u003e getFilteredEndpointList() {"},{"lineNumber":144,"author":{"gitId":"tjtanjin"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":147,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":148,"author":{"gitId":"tjtanjin"},"content":"        public void updateFilteredEndpointList(Predicate\u003cEndpoint\u003e predicate) {"},{"lineNumber":149,"author":{"gitId":"tjtanjin"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":153,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"tjtanjin"},"content":"     * A Model stub that contains a single endpoint."},{"lineNumber":155,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"tjtanjin"},"content":"    private class ModelStubWithEndpoint extends ModelStub {"},{"lineNumber":157,"author":{"gitId":"tjtanjin"},"content":"        private final Endpoint endpoint;"},{"lineNumber":158,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":159,"author":{"gitId":"tjtanjin"},"content":"        ModelStubWithEndpoint(Endpoint endpoint) {"},{"lineNumber":160,"author":{"gitId":"tjtanjin"},"content":"            requireNonNull(endpoint);"},{"lineNumber":161,"author":{"gitId":"tjtanjin"},"content":"            this.endpoint \u003d endpoint;"},{"lineNumber":162,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":164,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":165,"author":{"gitId":"tjtanjin"},"content":"        public boolean hasEndpoint(Endpoint endpoint) {"},{"lineNumber":166,"author":{"gitId":"tjtanjin"},"content":"            requireNonNull(endpoint);"},{"lineNumber":167,"author":{"gitId":"tjtanjin"},"content":"            return this.endpoint.isSameEndpoint(endpoint);"},{"lineNumber":168,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":171,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"tjtanjin"},"content":"     * A Model stub that always accept the endpoint being added."},{"lineNumber":173,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"tjtanjin"},"content":"    private class ModelStubAcceptingEndpointAdded extends ModelStub {"},{"lineNumber":175,"author":{"gitId":"tjtanjin"},"content":"        final ArrayList\u003cEndpoint\u003e endpointsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":176,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":177,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":178,"author":{"gitId":"tjtanjin"},"content":"        public boolean hasEndpoint(Endpoint endpoint) {"},{"lineNumber":179,"author":{"gitId":"tjtanjin"},"content":"            requireNonNull(endpoint);"},{"lineNumber":180,"author":{"gitId":"tjtanjin"},"content":"            return endpointsAdded.stream().anyMatch(endpoint::isSameEndpoint);"},{"lineNumber":181,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":183,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":184,"author":{"gitId":"tjtanjin"},"content":"        public void addEndpoint(Endpoint endpoint) {"},{"lineNumber":185,"author":{"gitId":"tjtanjin"},"content":"            requireNonNull(endpoint);"},{"lineNumber":186,"author":{"gitId":"tjtanjin"},"content":"            endpointsAdded.add(endpoint);"},{"lineNumber":187,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":189,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":190,"author":{"gitId":"tjtanjin"},"content":"        public ReadOnlyEndpointList getEndpointList() {"},{"lineNumber":191,"author":{"gitId":"tjtanjin"},"content":"            return new EndpointList();"},{"lineNumber":192,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":195,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":12,"tjtanjin":182,"JulietTeoh":1}},{"path":"src/test/java/seedu/us/among/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.EndpointList;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.TypicalEndpoints;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"public class ClearCommandTest {"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"    public void execute_emptyEndpointList_success() {"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"    public void execute_nonEmptyEndpointList_success() {"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"        Model model \u003d new ModelManager(TypicalEndpoints.getTypicalEndpointList(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"        Model expectedModel \u003d new ModelManager(TypicalEndpoints.getTypicalEndpointList(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"        expectedModel.setEndpointList(new EndpointList());"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":32}},{"path":"src/test/java/seedu/us/among/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":53}},{"path":"src/test/java/seedu/us/among/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_METHOD;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.EndpointList;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.NameContainsKeywordsPredicate;"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.EditEndpointDescriptorBuilder;"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":" * Contains helper methods for testing commands."},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"public class CommandTestUtil {"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":27,"author":{"gitId":"ong6"},"content":"    public static final String VALID_METHOD_GET \u003d \"GET\";"},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"    public static final String VALID_METHOD_POST \u003d \"POST\";"},{"lineNumber":29,"author":{"gitId":"ong6"},"content":"    public static final String VALID_ADDRESS_RANDOM \u003d"},{"lineNumber":30,"author":{"gitId":"ong6"},"content":"            \"https://cat-fact.herokuapp.com/facts/random?animal_type\u003dcat\u0026amount\u003d2\";"},{"lineNumber":31,"author":{"gitId":"ong6"},"content":"    public static final String VALID_ADDRESS_FACT \u003d \"https://cat-fact.herokuapp.com/facts\";"},{"lineNumber":32,"author":{"gitId":"ong6"},"content":"    public static final String VALID_TAG_CAT \u003d \"cat\";"},{"lineNumber":33,"author":{"gitId":"ong6"},"content":"    public static final String VALID_TAG_COOL \u003d \"cool\";"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":35,"author":{"gitId":"ong6"},"content":"    public static final String METHOD_DESC_GET \u003d \" \" + PREFIX_METHOD + VALID_METHOD_GET;"},{"lineNumber":36,"author":{"gitId":"ong6"},"content":"    public static final String METHOD_DESC_POST \u003d \" \" + PREFIX_METHOD + VALID_METHOD_POST;"},{"lineNumber":37,"author":{"gitId":"ong6"},"content":"    public static final String ADDRESS_DESC_RANDOM \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_RANDOM;"},{"lineNumber":38,"author":{"gitId":"ong6"},"content":"    public static final String ADDRESS_DESC_FACT \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_FACT;"},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"    public static final String TAG_DESC_CAT \u003d \" \" + PREFIX_TAG + VALID_TAG_COOL;"},{"lineNumber":40,"author":{"gitId":"ong6"},"content":"    public static final String TAG_DESC_COOL \u003d \" \" + PREFIX_TAG + VALID_TAG_CAT;"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":42,"author":{"gitId":"ong6"},"content":"    public static final String INVALID_METHOD_DESC \u003d \" \" + PREFIX_METHOD + \"GOT\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \" \";"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":49,"author":{"gitId":"ong6"},"content":"    public static final EditCommand.EditEndpointDescriptor DESC_GET;"},{"lineNumber":50,"author":{"gitId":"ong6"},"content":"    public static final EditCommand.EditEndpointDescriptor DESC_POST;"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"    static {"},{"lineNumber":53,"author":{"gitId":"ong6"},"content":"        DESC_GET \u003d new EditEndpointDescriptorBuilder().withName(VALID_METHOD_GET).withAddress(VALID_ADDRESS_RANDOM)"},{"lineNumber":54,"author":{"gitId":"ong6"},"content":"                .withTags(VALID_TAG_COOL).build();"},{"lineNumber":55,"author":{"gitId":"ong6"},"content":"        DESC_POST \u003d new EditEndpointDescriptorBuilder().withName(VALID_METHOD_POST).withAddress(VALID_ADDRESS_FACT)"},{"lineNumber":56,"author":{"gitId":"ong6"},"content":"                .withTags(VALID_TAG_CAT, VALID_TAG_COOL).build();"},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":61,"author":{"gitId":"ong6"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult}"},{"lineNumber":62,"author":{"gitId":"ong6"},"content":"     * \u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":"            Model expectedModel) {"},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"        } catch (CommandException ce) {"},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"ong6"},"content":"     * Convenience wrapper to"},{"lineNumber":78,"author":{"gitId":"ong6"},"content":"     * {@link #assertCommandSuccess(Command, Model, CommandResult, Model)} that"},{"lineNumber":79,"author":{"gitId":"ong6"},"content":"     * takes a string {@code expectedMessage}."},{"lineNumber":80,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"tjtanjin"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":82,"author":{"gitId":"tjtanjin"},"content":"            Model expectedModel) {"},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":84,"author":{"gitId":"tjtanjin"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":85,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"tjtanjin"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":89,"author":{"gitId":"tjtanjin"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":90,"author":{"gitId":"tjtanjin"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":91,"author":{"gitId":"ong6"},"content":"     * - the API endpoint list, filtered endpoint list and selected endpoint in"},{"lineNumber":92,"author":{"gitId":"ong6"},"content":"     * {@code actualModel} remain unchanged"},{"lineNumber":93,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"tjtanjin"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":95,"author":{"gitId":"tjtanjin"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":96,"author":{"gitId":"tjtanjin"},"content":"        // only do so by copying its components."},{"lineNumber":97,"author":{"gitId":"tjtanjin"},"content":"        EndpointList expectedEndpointList \u003d new EndpointList(actualModel.getEndpointList());"},{"lineNumber":98,"author":{"gitId":"tjtanjin"},"content":"        List\u003cEndpoint\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredEndpointList());"},{"lineNumber":99,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":100,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":101,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(expectedEndpointList, actualModel.getEndpointList());"},{"lineNumber":102,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredEndpointList());"},{"lineNumber":103,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"ong6"},"content":""},{"lineNumber":105,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"ong6"},"content":"     * Updates {@code model}\u0027s filtered list to show only the endpoint at the given"},{"lineNumber":107,"author":{"gitId":"ong6"},"content":"     * {@code targetIndex} in the {@code model}\u0027s API endpoint list."},{"lineNumber":108,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"tjtanjin"},"content":"    public static void showEndpointAtIndex(Model model, Index targetIndex) {"},{"lineNumber":110,"author":{"gitId":"tjtanjin"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEndpointList().size());"},{"lineNumber":111,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":112,"author":{"gitId":"tjtanjin"},"content":"        Endpoint endpoint \u003d model.getFilteredEndpointList().get(targetIndex.getZeroBased());"},{"lineNumber":113,"author":{"gitId":"ong6"},"content":"        final String[] splitName \u003d endpoint.getMethod().methodName.split(\"\\\\s+\");"},{"lineNumber":114,"author":{"gitId":"tjtanjin"},"content":"        model.updateFilteredEndpointList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":115,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":116,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(1, model.getFilteredEndpointList().size());"},{"lineNumber":117,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":119,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":33,"tjtanjin":86}},{"path":"src/test/java/seedu/us/among/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.DESC_GET;"},{"lineNumber":6,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.DESC_POST;"},{"lineNumber":7,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_METHOD_POST;"},{"lineNumber":8,"author":{"gitId":"JulietTeoh"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_TAG_CAT;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.showEndpointAtIndex;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.getTypicalEndpointList;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.TypicalIndexes.INDEX_FIRST_ENDPOINT;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.TypicalIndexes.INDEX_SECOND_ENDPOINT;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.Messages;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.EditCommand.EditEndpointDescriptor;"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.EndpointList;"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ModelManager;"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.UserPrefs;"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.EditEndpointDescriptorBuilder;"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.EndpointBuilder;"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"ong6"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":31,"author":{"gitId":"ong6"},"content":" * EditCommand."},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"public class EditCommandTest {"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"    private Model model \u003d new ModelManager(getTypicalEndpointList(), new UserPrefs());"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"        Endpoint editedEndpoint \u003d new EndpointBuilder().build();"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"        EditEndpointDescriptor descriptor \u003d new EditEndpointDescriptorBuilder(editedEndpoint).build();"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ENDPOINT, descriptor);"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ENDPOINT_SUCCESS, editedEndpoint);"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"        Model expectedModel \u003d new ModelManager(new EndpointList(model.getEndpointList()), new UserPrefs());"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"        expectedModel.setEndpoint(model.getFilteredEndpointList().get(0), editedEndpoint);"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":51,"author":{"gitId":"JulietTeoh"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"JulietTeoh"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":53,"author":{"gitId":"JulietTeoh"},"content":"        Index indexLastEndpoint \u003d Index.fromOneBased(model.getFilteredEndpointList().size());"},{"lineNumber":54,"author":{"gitId":"JulietTeoh"},"content":"        Endpoint lastEndpoint \u003d model.getFilteredEndpointList().get(indexLastEndpoint.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":56,"author":{"gitId":"JulietTeoh"},"content":"        EndpointBuilder endpointInList \u003d new EndpointBuilder(lastEndpoint);"},{"lineNumber":57,"author":{"gitId":"JulietTeoh"},"content":"        Endpoint editedEndpoint \u003d endpointInList.withMethod(VALID_METHOD_POST).withTags(VALID_TAG_CAT).build();"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":59,"author":{"gitId":"JulietTeoh"},"content":"        EditEndpointDescriptor descriptor \u003d new EditEndpointDescriptorBuilder().withName(VALID_METHOD_POST)"},{"lineNumber":60,"author":{"gitId":"JulietTeoh"},"content":"                .withTags(VALID_TAG_CAT).build();"},{"lineNumber":61,"author":{"gitId":"JulietTeoh"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastEndpoint, descriptor);"},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":63,"author":{"gitId":"JulietTeoh"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ENDPOINT_SUCCESS, editedEndpoint);"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":65,"author":{"gitId":"JulietTeoh"},"content":"        Model expectedModel \u003d new ModelManager(new EndpointList(model.getEndpointList()), new UserPrefs());"},{"lineNumber":66,"author":{"gitId":"JulietTeoh"},"content":"        expectedModel.setEndpoint(lastEndpoint, editedEndpoint);"},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":68,"author":{"gitId":"JulietTeoh"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitId":"JulietTeoh"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ENDPOINT, new EditEndpointDescriptor());"},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"        Endpoint editedEndpoint \u003d model.getFilteredEndpointList().get(INDEX_FIRST_ENDPOINT.getZeroBased());"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ENDPOINT_SUCCESS, editedEndpoint);"},{"lineNumber":77,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":"        Model expectedModel \u003d new ModelManager(new EndpointList(model.getEndpointList()), new UserPrefs());"},{"lineNumber":79,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":80,"author":{"gitId":"tjtanjin"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":81,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"tjtanjin"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":85,"author":{"gitId":"tjtanjin"},"content":"        showEndpointAtIndex(model, INDEX_FIRST_ENDPOINT);"},{"lineNumber":86,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":"        Endpoint endpointInFilteredList \u003d model.getFilteredEndpointList().get(INDEX_FIRST_ENDPOINT.getZeroBased());"},{"lineNumber":88,"author":{"gitId":"ong6"},"content":"        Endpoint editedEndpoint \u003d new EndpointBuilder(endpointInFilteredList).withMethod(VALID_METHOD_POST).build();"},{"lineNumber":89,"author":{"gitId":"tjtanjin"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ENDPOINT,"},{"lineNumber":90,"author":{"gitId":"ong6"},"content":"                new EditEndpointDescriptorBuilder().withName(VALID_METHOD_POST).build());"},{"lineNumber":91,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":92,"author":{"gitId":"tjtanjin"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ENDPOINT_SUCCESS, editedEndpoint);"},{"lineNumber":93,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":94,"author":{"gitId":"tjtanjin"},"content":"        Model expectedModel \u003d new ModelManager(new EndpointList(model.getEndpointList()), new UserPrefs());"},{"lineNumber":95,"author":{"gitId":"tjtanjin"},"content":"        expectedModel.setEndpoint(model.getFilteredEndpointList().get(0), editedEndpoint);"},{"lineNumber":96,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":97,"author":{"gitId":"tjtanjin"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":98,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":100,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"tjtanjin"},"content":"    public void execute_duplicateEndpointUnfilteredList_failure() {"},{"lineNumber":102,"author":{"gitId":"tjtanjin"},"content":"        Endpoint firstEndpoint \u003d model.getFilteredEndpointList().get(INDEX_FIRST_ENDPOINT.getZeroBased());"},{"lineNumber":103,"author":{"gitId":"tjtanjin"},"content":"        EditEndpointDescriptor descriptor \u003d new EditEndpointDescriptorBuilder(firstEndpoint).build();"},{"lineNumber":104,"author":{"gitId":"tjtanjin"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_ENDPOINT, descriptor);"},{"lineNumber":105,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":106,"author":{"gitId":"tjtanjin"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ENDPOINT);"},{"lineNumber":107,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":109,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"tjtanjin"},"content":"    public void execute_duplicateEndpointFilteredList_failure() {"},{"lineNumber":111,"author":{"gitId":"tjtanjin"},"content":"        showEndpointAtIndex(model, INDEX_FIRST_ENDPOINT);"},{"lineNumber":112,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":113,"author":{"gitId":"tjtanjin"},"content":"        // edit endpoint in filtered list into a duplicate in the API endpoint list"},{"lineNumber":114,"author":{"gitId":"tjtanjin"},"content":"        Endpoint endpointInList \u003d model.getEndpointList().getEndpointList().get(INDEX_SECOND_ENDPOINT.getZeroBased());"},{"lineNumber":115,"author":{"gitId":"tjtanjin"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ENDPOINT,"},{"lineNumber":116,"author":{"gitId":"tjtanjin"},"content":"                new EditEndpointDescriptorBuilder(endpointInList).build());"},{"lineNumber":117,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":118,"author":{"gitId":"tjtanjin"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ENDPOINT);"},{"lineNumber":119,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":121,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"tjtanjin"},"content":"    public void execute_invalidEndpointIndexUnfilteredList_failure() {"},{"lineNumber":123,"author":{"gitId":"tjtanjin"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEndpointList().size() + 1);"},{"lineNumber":124,"author":{"gitId":"ong6"},"content":"        EditEndpointDescriptor descriptor \u003d new EditEndpointDescriptorBuilder().withName(VALID_METHOD_POST).build();"},{"lineNumber":125,"author":{"gitId":"tjtanjin"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":126,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":127,"author":{"gitId":"tjtanjin"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ENDPOINT_DISPLAYED_INDEX);"},{"lineNumber":128,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":130,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"ong6"},"content":"     * Edit filtered list where index is larger than size of filtered list, but"},{"lineNumber":132,"author":{"gitId":"ong6"},"content":"     * smaller than size of the API endpoint list"},{"lineNumber":133,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"tjtanjin"},"content":"    public void execute_invalidEndpointIndexFilteredList_failure() {"},{"lineNumber":136,"author":{"gitId":"tjtanjin"},"content":"        showEndpointAtIndex(model, INDEX_FIRST_ENDPOINT);"},{"lineNumber":137,"author":{"gitId":"tjtanjin"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_ENDPOINT;"},{"lineNumber":138,"author":{"gitId":"tjtanjin"},"content":"        // ensures that outOfBoundIndex is still in bounds of API endpoint list"},{"lineNumber":139,"author":{"gitId":"tjtanjin"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEndpointList().getEndpointList().size());"},{"lineNumber":140,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":141,"author":{"gitId":"tjtanjin"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":142,"author":{"gitId":"ong6"},"content":"                new EditEndpointDescriptorBuilder().withName(VALID_METHOD_POST).build());"},{"lineNumber":143,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":144,"author":{"gitId":"tjtanjin"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ENDPOINT_DISPLAYED_INDEX);"},{"lineNumber":145,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":147,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":148,"author":{"gitId":"tjtanjin"},"content":"    public void equals() {"},{"lineNumber":149,"author":{"gitId":"ong6"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_ENDPOINT, DESC_GET);"},{"lineNumber":150,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":151,"author":{"gitId":"tjtanjin"},"content":"        // same values -\u003e returns true"},{"lineNumber":152,"author":{"gitId":"ong6"},"content":"        EditEndpointDescriptor copyDescriptor \u003d new EditEndpointDescriptor(DESC_GET);"},{"lineNumber":153,"author":{"gitId":"tjtanjin"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_ENDPOINT, copyDescriptor);"},{"lineNumber":154,"author":{"gitId":"tjtanjin"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":155,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":156,"author":{"gitId":"tjtanjin"},"content":"        // same object -\u003e returns true"},{"lineNumber":157,"author":{"gitId":"tjtanjin"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":158,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":159,"author":{"gitId":"tjtanjin"},"content":"        // null -\u003e returns false"},{"lineNumber":160,"author":{"gitId":"tjtanjin"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":161,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":162,"author":{"gitId":"tjtanjin"},"content":"        // different types -\u003e returns false"},{"lineNumber":163,"author":{"gitId":"tjtanjin"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":164,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":165,"author":{"gitId":"tjtanjin"},"content":"        // different index -\u003e returns false"},{"lineNumber":166,"author":{"gitId":"ong6"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_ENDPOINT, DESC_GET)));"},{"lineNumber":167,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":168,"author":{"gitId":"tjtanjin"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":169,"author":{"gitId":"ong6"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ENDPOINT, DESC_POST)));"},{"lineNumber":170,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":172,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":15,"tjtanjin":142,"JulietTeoh":15}},{"path":"src/test/java/seedu/us/among/logic/commands/EditEndpointDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.DESC_GET;"},{"lineNumber":6,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.DESC_POST;"},{"lineNumber":7,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_ADDRESS_FACT;"},{"lineNumber":8,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_METHOD_POST;"},{"lineNumber":9,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_TAG_CAT;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.EditCommand.EditEndpointDescriptor;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.EditEndpointDescriptorBuilder;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"public class EditEndpointDescriptorTest {"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"    public void equals() {"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"        // same values -\u003e returns true"},{"lineNumber":21,"author":{"gitId":"ong6"},"content":"        EditEndpointDescriptor descriptorWithSameValues \u003d new EditEndpointDescriptor(DESC_GET);"},{"lineNumber":22,"author":{"gitId":"ong6"},"content":"        assertTrue(DESC_GET.equals(descriptorWithSameValues));"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"        assertTrue(DESC_GET.equals(DESC_GET));"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"        // null -\u003e returns false"},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"        assertFalse(DESC_GET.equals(null));"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"        // different types -\u003e returns false"},{"lineNumber":31,"author":{"gitId":"ong6"},"content":"        assertFalse(DESC_GET.equals(5));"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"        // different values -\u003e returns false"},{"lineNumber":34,"author":{"gitId":"ong6"},"content":"        assertFalse(DESC_GET.equals(DESC_POST));"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"        // different name -\u003e returns false"},{"lineNumber":37,"author":{"gitId":"ong6"},"content":"        EditEndpointDescriptor editedAmy \u003d new EditEndpointDescriptorBuilder(DESC_GET).withName(VALID_METHOD_POST)"},{"lineNumber":38,"author":{"gitId":"ong6"},"content":"                .build();"},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"        assertFalse(DESC_GET.equals(editedAmy));"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"        // different address -\u003e returns false"},{"lineNumber":42,"author":{"gitId":"ong6"},"content":"        editedAmy \u003d new EditEndpointDescriptorBuilder(DESC_GET).withAddress(VALID_ADDRESS_FACT).build();"},{"lineNumber":43,"author":{"gitId":"ong6"},"content":"        assertFalse(DESC_GET.equals(editedAmy));"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"        // different tags -\u003e returns false"},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"        editedAmy \u003d new EditEndpointDescriptorBuilder(DESC_GET).withTags(VALID_TAG_CAT).build();"},{"lineNumber":47,"author":{"gitId":"ong6"},"content":"        assertFalse(DESC_GET.equals(editedAmy));"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":18,"tjtanjin":31}},{"path":"src/test/java/seedu/us/among/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ModelManager;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ExitCommandTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":5,"-":14}},{"path":"src/test/java/seedu/us/among/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.core.Messages.MESSAGE_ENDPOINTS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"ong6"},"content":"// import static seedu.us.among.testutil.TypicalEndpoints.PUT;"},{"lineNumber":9,"author":{"gitId":"ong6"},"content":"// import static seedu.us.among.testutil.TypicalEndpoints.HEAD;"},{"lineNumber":10,"author":{"gitId":"ong6"},"content":"// import static seedu.us.among.testutil.TypicalEndpoints.OPTIONS;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.getTypicalEndpointList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"ong6"},"content":" * Contains integration tests (interaction with the Model) for"},{"lineNumber":25,"author":{"gitId":"ong6"},"content":" * {@code FindCommand}."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class FindCommandTest {"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"    private Model model \u003d new ModelManager(getTypicalEndpointList(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalEndpointList(), new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitId":"ong6"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate("},{"lineNumber":34,"author":{"gitId":"ong6"},"content":"                Collections.singletonList(\"first\"));"},{"lineNumber":35,"author":{"gitId":"ong6"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate("},{"lineNumber":36,"author":{"gitId":"ong6"},"content":"                Collections.singletonList(\"second\"));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"        // different endpoint -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"    public void execute_zeroKeywords_noEndpointFound() {"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"        String expectedMessage \u003d String.format(MESSAGE_ENDPOINTS_LISTED_OVERVIEW, 0);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"        expectedModel.updateFilteredEndpointList(predicate);"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredEndpointList());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"ong6"},"content":"    // @Test"},{"lineNumber":69,"author":{"gitId":"ong6"},"content":"    // public void execute_multipleKeywords_multipleEndpointsFound() {"},{"lineNumber":70,"author":{"gitId":"ong6"},"content":"    //     String expectedMessage \u003d String.format(MESSAGE_ENDPOINTS_LISTED_OVERVIEW, 3);"},{"lineNumber":71,"author":{"gitId":"ong6"},"content":"    //     NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"},{"lineNumber":72,"author":{"gitId":"ong6"},"content":"    //     FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":73,"author":{"gitId":"ong6"},"content":"    //     expectedModel.updateFilteredEndpointList(predicate);"},{"lineNumber":74,"author":{"gitId":"ong6"},"content":"    //     assertCommandSuccess(command, model, expectedMessage, expectedModel); //to-do"},{"lineNumber":75,"author":{"gitId":"ong6"},"content":"    //     assertEquals(Arrays.asList(PUT, HEAD, OPTIONS), model.getFilteredEndpointList()); //to-do"},{"lineNumber":76,"author":{"gitId":"ong6"},"content":"    // }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":18,"tjtanjin":16,"-":50}},{"path":"src/test/java/seedu/us/among/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ModelManager;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class HelpCommandTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void execute_help_success() {"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.SHOWING_HELP_MESSAGE, true, false);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":5,"-":14}},{"path":"src/test/java/seedu/us/among/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.showEndpointAtIndex;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.getTypicalEndpointList;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.TypicalIndexes.INDEX_FIRST_ENDPOINT;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"public class ListCommandTest {"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"    private Model model;"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"    private Model expectedModel;"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"        model \u003d new ModelManager(getTypicalEndpointList(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"        expectedModel \u003d new ModelManager(model.getEndpointList(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"        showEndpointAtIndex(model, INDEX_FIRST_ENDPOINT);"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":39}},{"path":"src/test/java/seedu/us/among/logic/commands/RemoveCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.commands;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.showEndpointAtIndex;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.getTypicalEndpointList;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.TypicalIndexes.INDEX_FIRST_ENDPOINT;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.TypicalIndexes.INDEX_SECOND_ENDPOINT;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":23,"author":{"gitId":"JulietTeoh"},"content":" * {@code RemoveCommand}."},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":25,"author":{"gitId":"JulietTeoh"},"content":"public class RemoveCommandTest {"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"    private Model model \u003d new ModelManager(getTypicalEndpointList(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"        Endpoint endpointToDelete \u003d model.getFilteredEndpointList().get(INDEX_FIRST_ENDPOINT.getZeroBased());"},{"lineNumber":32,"author":{"gitId":"JulietTeoh"},"content":"        RemoveCommand removeCommand \u003d new RemoveCommand(INDEX_FIRST_ENDPOINT);"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":34,"author":{"gitId":"JulietTeoh"},"content":"        String expectedMessage \u003d String.format(RemoveCommand.MESSAGE_REMOVE_ENDPOINT_SUCCESS, endpointToDelete);"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getEndpointList(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"JulietTeoh"},"content":"        expectedModel.removeEndpoint(endpointToDelete);"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":39,"author":{"gitId":"JulietTeoh"},"content":"        assertCommandSuccess(removeCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEndpointList().size() + 1);"},{"lineNumber":45,"author":{"gitId":"JulietTeoh"},"content":"        RemoveCommand removeCommand \u003d new RemoveCommand(outOfBoundIndex);"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":47,"author":{"gitId":"JulietTeoh"},"content":"        assertCommandFailure(removeCommand, model, Messages.MESSAGE_INVALID_ENDPOINT_DISPLAYED_INDEX);"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"        showEndpointAtIndex(model, INDEX_FIRST_ENDPOINT);"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"        Endpoint endpointToDelete \u003d model.getFilteredEndpointList().get(INDEX_FIRST_ENDPOINT.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"JulietTeoh"},"content":"        RemoveCommand removeCommand \u003d new RemoveCommand(INDEX_FIRST_ENDPOINT);"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":57,"author":{"gitId":"JulietTeoh"},"content":"        String expectedMessage \u003d String.format(RemoveCommand.MESSAGE_REMOVE_ENDPOINT_SUCCESS, endpointToDelete);"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"        Model expectedModel \u003d new ModelManager(model.getEndpointList(), new UserPrefs());"},{"lineNumber":60,"author":{"gitId":"JulietTeoh"},"content":"        expectedModel.removeEndpoint(endpointToDelete);"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"        showNoEndpoint(expectedModel);"},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":63,"author":{"gitId":"JulietTeoh"},"content":"        assertCommandSuccess(removeCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"        showEndpointAtIndex(model, INDEX_FIRST_ENDPOINT);"},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_ENDPOINT;"},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"        // ensures that outOfBoundIndex is still in bounds of API endpoint list"},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEndpointList().getEndpointList().size());"},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":74,"author":{"gitId":"JulietTeoh"},"content":"        RemoveCommand removeCommand \u003d new RemoveCommand(outOfBoundIndex);"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":76,"author":{"gitId":"JulietTeoh"},"content":"        assertCommandFailure(removeCommand, model, Messages.MESSAGE_INVALID_ENDPOINT_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":79,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"tjtanjin"},"content":"    public void equals() {"},{"lineNumber":81,"author":{"gitId":"JulietTeoh"},"content":"        RemoveCommand deleteFirstCommand \u003d new RemoveCommand(INDEX_FIRST_ENDPOINT);"},{"lineNumber":82,"author":{"gitId":"JulietTeoh"},"content":"        RemoveCommand deleteSecondCommand \u003d new RemoveCommand(INDEX_SECOND_ENDPOINT);"},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":84,"author":{"gitId":"tjtanjin"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitId":"tjtanjin"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":86,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitId":"JulietTeoh"},"content":"        RemoveCommand deleteFirstCommandCopy \u003d new RemoveCommand(INDEX_FIRST_ENDPOINT);"},{"lineNumber":89,"author":{"gitId":"tjtanjin"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":90,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":91,"author":{"gitId":"tjtanjin"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitId":"tjtanjin"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":93,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":94,"author":{"gitId":"tjtanjin"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitId":"tjtanjin"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":96,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":97,"author":{"gitId":"tjtanjin"},"content":"        // different endpoint -\u003e returns false"},{"lineNumber":98,"author":{"gitId":"tjtanjin"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":99,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":101,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"tjtanjin"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":103,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"tjtanjin"},"content":"    private void showNoEndpoint(Model model) {"},{"lineNumber":105,"author":{"gitId":"tjtanjin"},"content":"        model.updateFilteredEndpointList(p -\u003e false);"},{"lineNumber":106,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":107,"author":{"gitId":"tjtanjin"},"content":"        assertTrue(model.getFilteredEndpointList().isEmpty());"},{"lineNumber":108,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":92,"JulietTeoh":17}},{"path":"src/test/java/seedu/us/among/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.ADDRESS_DESC_FACT;"},{"lineNumber":5,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.ADDRESS_DESC_RANDOM;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":7,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.INVALID_METHOD_DESC;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":9,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.METHOD_DESC_GET;"},{"lineNumber":10,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.METHOD_DESC_POST;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":13,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.TAG_DESC_CAT;"},{"lineNumber":14,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.TAG_DESC_COOL;"},{"lineNumber":15,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_ADDRESS_FACT;"},{"lineNumber":16,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_METHOD_POST;"},{"lineNumber":17,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_TAG_CAT;"},{"lineNumber":18,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_TAG_COOL;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":21,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.GET1;"},{"lineNumber":22,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.POST;"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.AddCommand;"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Address;"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":29,"author":{"gitId":"ong6"},"content":"import seedu.us.among.model.endpoint.Method;"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.tag.Tag;"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.EndpointBuilder;"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"public class AddCommandParserTest {"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":38,"author":{"gitId":"ong6"},"content":"        Endpoint expectedEndpoint \u003d new EndpointBuilder(POST).withTags(VALID_TAG_COOL).build();"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"        // whitespace only preamble"},{"lineNumber":41,"author":{"gitId":"ong6"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + METHOD_DESC_POST + ADDRESS_DESC_FACT + TAG_DESC_CAT,"},{"lineNumber":42,"author":{"gitId":"ong6"},"content":"                new AddCommand(expectedEndpoint));"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"        // multiple names - last name accepted"},{"lineNumber":45,"author":{"gitId":"ong6"},"content":"        assertParseSuccess(parser, METHOD_DESC_GET + METHOD_DESC_POST + ADDRESS_DESC_FACT + TAG_DESC_CAT,"},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"                new AddCommand(expectedEndpoint));"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":49,"author":{"gitId":"ong6"},"content":"        assertParseSuccess(parser, METHOD_DESC_POST + ADDRESS_DESC_FACT + TAG_DESC_CAT,"},{"lineNumber":50,"author":{"gitId":"ong6"},"content":"                new AddCommand(expectedEndpoint));"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"        // multiple emails - last email accepted"},{"lineNumber":53,"author":{"gitId":"ong6"},"content":"        assertParseSuccess(parser, METHOD_DESC_POST + ADDRESS_DESC_FACT + TAG_DESC_CAT,"},{"lineNumber":54,"author":{"gitId":"ong6"},"content":"                new AddCommand(expectedEndpoint));"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":57,"author":{"gitId":"ong6"},"content":"        assertParseSuccess(parser, METHOD_DESC_POST + ADDRESS_DESC_RANDOM + ADDRESS_DESC_FACT + TAG_DESC_CAT,"},{"lineNumber":58,"author":{"gitId":"ong6"},"content":"                new AddCommand(expectedEndpoint));"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"        // multiple tags - all accepted"},{"lineNumber":61,"author":{"gitId":"ong6"},"content":"        Endpoint expectedEndpointMultipleTags \u003d new EndpointBuilder(POST).withTags(VALID_TAG_COOL, VALID_TAG_CAT)"},{"lineNumber":62,"author":{"gitId":"ong6"},"content":"                .build();"},{"lineNumber":63,"author":{"gitId":"ong6"},"content":"        assertParseSuccess(parser, METHOD_DESC_POST + ADDRESS_DESC_FACT + TAG_DESC_COOL + TAG_DESC_CAT,"},{"lineNumber":64,"author":{"gitId":"ong6"},"content":"                new AddCommand(expectedEndpointMultipleTags));"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":"        // zero tags"},{"lineNumber":70,"author":{"gitId":"ong6"},"content":"        Endpoint expectedEndpoint \u003d new EndpointBuilder(GET1).withTags().build();"},{"lineNumber":71,"author":{"gitId":"ong6"},"content":"        assertParseSuccess(parser, METHOD_DESC_GET + ADDRESS_DESC_RANDOM, new AddCommand(expectedEndpoint));"},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":77,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":"        // missing name prefix"},{"lineNumber":79,"author":{"gitId":"ong6"},"content":"        assertParseFailure(parser, VALID_METHOD_POST + ADDRESS_DESC_FACT, expectedMessage);"},{"lineNumber":80,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":81,"author":{"gitId":"tjtanjin"},"content":"        // missing address prefix"},{"lineNumber":82,"author":{"gitId":"ong6"},"content":"        assertParseFailure(parser, METHOD_DESC_POST + VALID_ADDRESS_FACT, expectedMessage);"},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":84,"author":{"gitId":"tjtanjin"},"content":"        // all prefixes missing"},{"lineNumber":85,"author":{"gitId":"ong6"},"content":"        assertParseFailure(parser, VALID_METHOD_POST + VALID_ADDRESS_FACT, expectedMessage);"},{"lineNumber":86,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":88,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"tjtanjin"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":90,"author":{"gitId":"tjtanjin"},"content":"        // invalid name"},{"lineNumber":91,"author":{"gitId":"ong6"},"content":"        assertParseFailure(parser, INVALID_METHOD_DESC + ADDRESS_DESC_FACT + TAG_DESC_COOL + TAG_DESC_CAT,"},{"lineNumber":92,"author":{"gitId":"ong6"},"content":"                Method.MESSAGE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":94,"author":{"gitId":"tjtanjin"},"content":"        // invalid address"},{"lineNumber":95,"author":{"gitId":"ong6"},"content":"        assertParseFailure(parser, METHOD_DESC_POST + INVALID_ADDRESS_DESC + TAG_DESC_COOL + TAG_DESC_CAT,"},{"lineNumber":96,"author":{"gitId":"ong6"},"content":"                Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":98,"author":{"gitId":"tjtanjin"},"content":"        // invalid tag"},{"lineNumber":99,"author":{"gitId":"ong6"},"content":"        assertParseFailure(parser, METHOD_DESC_POST + ADDRESS_DESC_FACT + INVALID_TAG_DESC + VALID_TAG_COOL,"},{"lineNumber":100,"author":{"gitId":"ong6"},"content":"                Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":102,"author":{"gitId":"tjtanjin"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":103,"author":{"gitId":"ong6"},"content":"        assertParseFailure(parser, INVALID_METHOD_DESC + INVALID_ADDRESS_DESC, Method.MESSAGE_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":105,"author":{"gitId":"tjtanjin"},"content":"        // non-empty preamble"},{"lineNumber":106,"author":{"gitId":"ong6"},"content":"        assertParseFailure(parser,"},{"lineNumber":107,"author":{"gitId":"ong6"},"content":"                PREAMBLE_NON_EMPTY + METHOD_DESC_POST + ADDRESS_DESC_FACT + TAG_DESC_COOL + TAG_DESC_CAT,"},{"lineNumber":108,"author":{"gitId":"tjtanjin"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":109,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":43,"tjtanjin":67}},{"path":"src/test/java/seedu/us/among/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":149}},{"path":"src/test/java/seedu/us/among/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.Command;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            parser.parse(userInput);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":3,"-":35}},{"path":"src/test/java/seedu/us/among/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.ADDRESS_DESC_FACT;"},{"lineNumber":5,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.ADDRESS_DESC_RANDOM;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":7,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.INVALID_METHOD_DESC;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":9,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.METHOD_DESC_GET;"},{"lineNumber":10,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.TAG_DESC_CAT;"},{"lineNumber":11,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.TAG_DESC_COOL;"},{"lineNumber":12,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_ADDRESS_FACT;"},{"lineNumber":13,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_ADDRESS_RANDOM;"},{"lineNumber":14,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_METHOD_GET;"},{"lineNumber":15,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_TAG_CAT;"},{"lineNumber":16,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_TAG_COOL;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.TypicalIndexes.INDEX_FIRST_ENDPOINT;"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.TypicalIndexes.INDEX_SECOND_ENDPOINT;"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.TypicalIndexes.INDEX_THIRD_ENDPOINT;"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.EditCommand;"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.EditCommand.EditEndpointDescriptor;"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Address;"},{"lineNumber":30,"author":{"gitId":"ong6"},"content":"import seedu.us.among.model.endpoint.Method;"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.tag.Tag;"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.EditEndpointDescriptorBuilder;"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"public class EditCommandParserTest {"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":38,"author":{"gitId":"ong6"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"            EditCommand.MESSAGE_USAGE);"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"        // no index specified"},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"        assertParseFailure(parser, VALID_METHOD_GET, MESSAGE_INVALID_FORMAT);"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"        // no field specified"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"        // no index and no field specified"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"        // negative index"},{"lineNumber":58,"author":{"gitId":"ong6"},"content":"        assertParseFailure(parser, \"-5\" + METHOD_DESC_GET, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"        // zero index"},{"lineNumber":61,"author":{"gitId":"ong6"},"content":"        assertParseFailure(parser, \"0\" + METHOD_DESC_GET, MESSAGE_INVALID_FORMAT);"},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":72,"author":{"gitId":"ong6"},"content":"        assertParseFailure(parser, \"1\" + INVALID_METHOD_DESC, Method.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":76,"author":{"gitId":"ong6"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code"},{"lineNumber":77,"author":{"gitId":"ong6"},"content":"        // Endpoint} being edited,"},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":79,"author":{"gitId":"ong6"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_CAT + TAG_DESC_COOL + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":80,"author":{"gitId":"ong6"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_CAT + TAG_EMPTY + TAG_DESC_COOL, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":81,"author":{"gitId":"ong6"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_CAT + TAG_DESC_COOL, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":82,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":84,"author":{"gitId":"ong6"},"content":"        assertParseFailure(parser, \"1\" + INVALID_METHOD_DESC + VALID_ADDRESS_RANDOM, Method.MESSAGE_CONSTRAINTS);"},{"lineNumber":85,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"tjtanjin"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":89,"author":{"gitId":"tjtanjin"},"content":"        Index targetIndex \u003d INDEX_SECOND_ENDPOINT;"},{"lineNumber":90,"author":{"gitId":"ong6"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_COOL + ADDRESS_DESC_RANDOM + METHOD_DESC_GET"},{"lineNumber":91,"author":{"gitId":"ong6"},"content":"                + TAG_DESC_CAT;"},{"lineNumber":92,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":93,"author":{"gitId":"ong6"},"content":"        EditEndpointDescriptor descriptor \u003d new EditEndpointDescriptorBuilder().withName(VALID_METHOD_GET)"},{"lineNumber":94,"author":{"gitId":"ong6"},"content":"                .withAddress(VALID_ADDRESS_RANDOM).withTags(VALID_TAG_CAT, VALID_TAG_COOL).build();"},{"lineNumber":95,"author":{"gitId":"tjtanjin"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":96,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":97,"author":{"gitId":"tjtanjin"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":98,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":100,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"tjtanjin"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":102,"author":{"gitId":"tjtanjin"},"content":"        // name"},{"lineNumber":103,"author":{"gitId":"tjtanjin"},"content":"        Index targetIndex \u003d INDEX_THIRD_ENDPOINT;"},{"lineNumber":104,"author":{"gitId":"ong6"},"content":"        String userInput \u003d targetIndex.getOneBased() + METHOD_DESC_GET;"},{"lineNumber":105,"author":{"gitId":"ong6"},"content":"        EditEndpointDescriptor descriptor \u003d new EditEndpointDescriptorBuilder().withName(VALID_METHOD_GET).build();"},{"lineNumber":106,"author":{"gitId":"tjtanjin"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":107,"author":{"gitId":"tjtanjin"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":108,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":109,"author":{"gitId":"tjtanjin"},"content":"        // address"},{"lineNumber":110,"author":{"gitId":"ong6"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_RANDOM;"},{"lineNumber":111,"author":{"gitId":"ong6"},"content":"        descriptor \u003d new EditEndpointDescriptorBuilder().withAddress(VALID_ADDRESS_RANDOM).build();"},{"lineNumber":112,"author":{"gitId":"tjtanjin"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":113,"author":{"gitId":"tjtanjin"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":114,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":115,"author":{"gitId":"tjtanjin"},"content":"        // tags"},{"lineNumber":116,"author":{"gitId":"ong6"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_CAT;"},{"lineNumber":117,"author":{"gitId":"ong6"},"content":"        descriptor \u003d new EditEndpointDescriptorBuilder().withTags(VALID_TAG_COOL).build();"},{"lineNumber":118,"author":{"gitId":"tjtanjin"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":119,"author":{"gitId":"tjtanjin"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":120,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":122,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"tjtanjin"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":124,"author":{"gitId":"tjtanjin"},"content":"        Index targetIndex \u003d INDEX_FIRST_ENDPOINT;"},{"lineNumber":125,"author":{"gitId":"ong6"},"content":"        String userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_RANDOM + TAG_DESC_CAT + ADDRESS_DESC_RANDOM"},{"lineNumber":126,"author":{"gitId":"ong6"},"content":"                + TAG_DESC_CAT + ADDRESS_DESC_FACT + TAG_DESC_COOL;"},{"lineNumber":127,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":128,"author":{"gitId":"ong6"},"content":"        EditEndpointDescriptor descriptor \u003d new EditEndpointDescriptorBuilder().withAddress(VALID_ADDRESS_FACT)"},{"lineNumber":129,"author":{"gitId":"ong6"},"content":"                .withTags(VALID_TAG_COOL, VALID_TAG_CAT).build();"},{"lineNumber":130,"author":{"gitId":"tjtanjin"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":131,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":132,"author":{"gitId":"tjtanjin"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":133,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":135,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"tjtanjin"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":137,"author":{"gitId":"tjtanjin"},"content":"        Index targetIndex \u003d INDEX_THIRD_ENDPOINT;"},{"lineNumber":138,"author":{"gitId":"tjtanjin"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":139,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":140,"author":{"gitId":"tjtanjin"},"content":"        EditEndpointDescriptor descriptor \u003d new EditEndpointDescriptorBuilder().withTags().build();"},{"lineNumber":141,"author":{"gitId":"tjtanjin"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":142,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":143,"author":{"gitId":"tjtanjin"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":144,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":38,"tjtanjin":107}},{"path":"src/test/java/seedu/us/among/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"        FindCommand expectedFindCommand \u003d new FindCommand("},{"lineNumber":27,"author":{"gitId":"ong6"},"content":"                new NameContainsKeywordsPredicate(Arrays.asList(\"GET\", \"POST\")));"},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"        assertParseSuccess(parser, \"GET POST\", expectedFindCommand);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":31,"author":{"gitId":"ong6"},"content":"        assertParseSuccess(parser, \" \\n GET \\n \\t POST  \\t\", expectedFindCommand);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":4,"tjtanjin":7,"-":23}},{"path":"src/test/java/seedu/us/among/logic/parser/ImposterParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.TypicalIndexes.INDEX_FIRST_ENDPOINT;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.EditCommand;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.ExitCommand;"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.FindCommand;"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.HelpCommand;"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"JulietTeoh"},"content":"import seedu.us.among.logic.commands.RemoveCommand;"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.EditEndpointDescriptorBuilder;"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.EndpointBuilder;"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.EndpointUtil;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"public class ImposterParserTest {"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"    private final ImposterParser parser \u003d new ImposterParser();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"        Endpoint endpoint \u003d new EndpointBuilder().build();"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(EndpointUtil.getAddCommand(endpoint));"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(new AddCommand(endpoint), command);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"JulietTeoh"},"content":"    public void parseCommand_remove() throws Exception {"},{"lineNumber":50,"author":{"gitId":"JulietTeoh"},"content":"        RemoveCommand command \u003d (RemoveCommand) parser.parseCommand("},{"lineNumber":51,"author":{"gitId":"JulietTeoh"},"content":"                RemoveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENDPOINT.getOneBased());"},{"lineNumber":52,"author":{"gitId":"JulietTeoh"},"content":"        assertEquals(new RemoveCommand(INDEX_FIRST_ENDPOINT), command);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"        Endpoint endpoint \u003d new EndpointBuilder().build();"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"        EditCommand.EditEndpointDescriptor descriptor \u003d new EditEndpointDescriptorBuilder(endpoint).build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"                + INDEX_FIRST_ENDPOINT.getOneBased() + \" \" + EndpointUtil.getEditEndpointDescriptorDetails(descriptor));"},{"lineNumber":61,"author":{"gitId":"ong6"},"content":"        // assertEquals(new EditCommand(INDEX_FIRST_ENDPOINT, descriptor), command); //to-do"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":74,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":1,"tjtanjin":26,"-":68,"JulietTeoh":5}},{"path":"src/test/java/seedu/us/among/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.TypicalIndexes.INDEX_FIRST_ENDPOINT;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Address;"},{"lineNumber":19,"author":{"gitId":"ong6"},"content":"import seedu.us.among.model.endpoint.Method;"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"ong6"},"content":"    private static final String VALID_NAME \u003d \"GET\";"},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"    private static final String VALID_ADDRESS \u003d \"address/get\";"},{"lineNumber":29,"author":{"gitId":"ong6"},"content":"    private static final String VALID_TAG_1 \u003d \"cat\";"},{"lineNumber":30,"author":{"gitId":"ong6"},"content":"    private static final String VALID_TAG_2 \u003d \"cool\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"ong6"},"content":"    private static final String WHITESPACE \u003d \" \";"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"        Assertions.assertEquals(INDEX_FIRST_ENDPOINT, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"        Assertions.assertEquals(INDEX_FIRST_ENDPOINT, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":56,"author":{"gitId":"ong6"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMethod((String) null));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {"},{"lineNumber":61,"author":{"gitId":"ong6"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMethod(INVALID_NAME));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":66,"author":{"gitId":"ong6"},"content":"        Method expectedName \u003d new Method(VALID_NAME);"},{"lineNumber":67,"author":{"gitId":"ong6"},"content":"        Assertions.assertEquals(expectedName, ParserUtil.parseMethod(VALID_NAME));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":73,"author":{"gitId":"ong6"},"content":"        Method expectedName \u003d new Method(VALID_NAME);"},{"lineNumber":74,"author":{"gitId":"ong6"},"content":"        Assertions.assertEquals(expectedName, ParserUtil.parseMethod(nameWithWhitespace));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":113,"author":{"gitId":"tjtanjin"},"content":"        Assertions.assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":120,"author":{"gitId":"tjtanjin"},"content":"        Assertions.assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":12,"tjtanjin":12,"-":121}},{"path":"src/test/java/seedu/us/among/logic/parser/RemoveCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.TypicalIndexes.INDEX_FIRST_ENDPOINT;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"JulietTeoh"},"content":"import seedu.us.among.logic.commands.RemoveCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitId":"JulietTeoh"},"content":" * outside of the RemoveCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitId":"JulietTeoh"},"content":" * same path through the RemoveCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"JulietTeoh"},"content":"public class RemoveCommandParserTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"JulietTeoh"},"content":"    private RemoveCommandParser parser \u003d new RemoveCommandParser();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"JulietTeoh"},"content":"    public void parse_validArgs_returnsRemoveCommand() {"},{"lineNumber":25,"author":{"gitId":"JulietTeoh"},"content":"        assertParseSuccess(parser, \"1\", new RemoveCommand(INDEX_FIRST_ENDPOINT));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitId":"JulietTeoh"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":6,"-":18,"JulietTeoh":8}},{"path":"src/test/java/seedu/us/among/model/EndpointListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"JulietTeoh"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_ADDRESS_FACT;"},{"lineNumber":7,"author":{"gitId":"JulietTeoh"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_ADDRESS_RANDOM;"},{"lineNumber":8,"author":{"gitId":"JulietTeoh"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_TAG_CAT;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":10,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.GET;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.getTypicalEndpointList;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":13,"author":{"gitId":"JulietTeoh"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitId":"JulietTeoh"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":23,"author":{"gitId":"JulietTeoh"},"content":"import seedu.us.among.model.endpoint.exceptions.DuplicateApiEndpointException;"},{"lineNumber":24,"author":{"gitId":"JulietTeoh"},"content":"import seedu.us.among.testutil.EndpointBuilder;"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"public class EndpointListTest {"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"    private final EndpointList endpointList \u003d new EndpointList();"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"    public void constructor() {"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(Collections.emptyList(), endpointList.getEndpointList());"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(NullPointerException.class, () -\u003e endpointList.resetData(null));"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"    public void resetData_withValidReadOnlyEndpointList_replacesData() {"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"        EndpointList newData \u003d getTypicalEndpointList();"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"        endpointList.resetData(newData);"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(newData, endpointList);"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":47,"author":{"gitId":"JulietTeoh"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"JulietTeoh"},"content":"    public void resetData_withDuplicateEndpoints_throwsDuplicateEndpointException() {"},{"lineNumber":49,"author":{"gitId":"JulietTeoh"},"content":"        // Two endpoints with the same identity fields"},{"lineNumber":50,"author":{"gitId":"JulietTeoh"},"content":"        Endpoint editedGetOne \u003d new EndpointBuilder(GET).withAddress(VALID_ADDRESS_FACT)"},{"lineNumber":51,"author":{"gitId":"JulietTeoh"},"content":"                .withTags(VALID_TAG_CAT).build();"},{"lineNumber":52,"author":{"gitId":"JulietTeoh"},"content":"        Endpoint editedGetTwo \u003d new EndpointBuilder(GET).withAddress(VALID_ADDRESS_FACT)"},{"lineNumber":53,"author":{"gitId":"JulietTeoh"},"content":"                .withTags(VALID_TAG_CAT).build();"},{"lineNumber":54,"author":{"gitId":"JulietTeoh"},"content":"        List\u003cEndpoint\u003e newEndpoints \u003d Arrays.asList(editedGetTwo, editedGetOne);"},{"lineNumber":55,"author":{"gitId":"JulietTeoh"},"content":"        EndpointListStub newData \u003d new EndpointListStub(newEndpoints);"},{"lineNumber":56,"author":{"gitId":"JulietTeoh"},"content":""},{"lineNumber":57,"author":{"gitId":"JulietTeoh"},"content":"        assertThrows(DuplicateApiEndpointException.class, () -\u003e endpointList.resetData(newData));"},{"lineNumber":58,"author":{"gitId":"JulietTeoh"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"    public void hasEndpoint_nullEndpoint_throwsNullPointerException() {"},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(NullPointerException.class, () -\u003e endpointList.hasEndpoint(null));"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":"    public void hasEndpoint_endpointNotInEndpointList_returnsFalse() {"},{"lineNumber":67,"author":{"gitId":"ong6"},"content":"        assertFalse(endpointList.hasEndpoint(GET));"},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"    public void hasEndpoint_endpointInEndpointList_returnsTrue() {"},{"lineNumber":72,"author":{"gitId":"ong6"},"content":"        endpointList.addEndpoint(GET);"},{"lineNumber":73,"author":{"gitId":"ong6"},"content":"        assertTrue(endpointList.hasEndpoint(GET));"},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":76,"author":{"gitId":"JulietTeoh"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"JulietTeoh"},"content":"    public void hasEndpoint_endpointWithSameIdentityFieldsInEndpointList_returnsTrue() {"},{"lineNumber":78,"author":{"gitId":"JulietTeoh"},"content":"        endpointList.addEndpoint(GET);"},{"lineNumber":79,"author":{"gitId":"JulietTeoh"},"content":"        Endpoint editedGet \u003d new EndpointBuilder(GET)"},{"lineNumber":80,"author":{"gitId":"JulietTeoh"},"content":"                .withAddress(VALID_ADDRESS_RANDOM).withTags(VALID_TAG_CAT).build();"},{"lineNumber":81,"author":{"gitId":"JulietTeoh"},"content":"        System.out.println(endpointList.getEndpointList());"},{"lineNumber":82,"author":{"gitId":"JulietTeoh"},"content":"        assertTrue(endpointList.hasEndpoint(editedGet));"},{"lineNumber":83,"author":{"gitId":"JulietTeoh"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":85,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"tjtanjin"},"content":"    public void getEndpointList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e endpointList.getEndpointList().remove(0));"},{"lineNumber":88,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":90,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"ong6"},"content":"     * A stub ReadOnlyEndpointList whose endpoints list can violate interface"},{"lineNumber":92,"author":{"gitId":"ong6"},"content":"     * constraints."},{"lineNumber":93,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"tjtanjin"},"content":"    private static class EndpointListStub implements ReadOnlyEndpointList {"},{"lineNumber":95,"author":{"gitId":"tjtanjin"},"content":"        private final ObservableList\u003cEndpoint\u003e endpoints \u003d FXCollections.observableArrayList();"},{"lineNumber":96,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":97,"author":{"gitId":"tjtanjin"},"content":"        EndpointListStub(Collection\u003cEndpoint\u003e endpoints) {"},{"lineNumber":98,"author":{"gitId":"tjtanjin"},"content":"            this.endpoints.setAll(endpoints);"},{"lineNumber":99,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":101,"author":{"gitId":"tjtanjin"},"content":"        @Override"},{"lineNumber":102,"author":{"gitId":"tjtanjin"},"content":"        public ObservableList\u003cEndpoint\u003e getEndpointList() {"},{"lineNumber":103,"author":{"gitId":"tjtanjin"},"content":"            return endpoints;"},{"lineNumber":104,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":107,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":6,"tjtanjin":74,"JulietTeoh":27}},{"path":"src/test/java/seedu/us/among/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.model.Model.PREDICATE_SHOW_ALL_ENDPOINTS;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.GET;"},{"lineNumber":9,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.POST;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.GuiSettings;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.NameContainsKeywordsPredicate;"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.EndpointListBuilder;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"        Assertions.assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(new EndpointList(), new EndpointList(modelManager.getEndpointList()));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"        userPrefs.setEndpointListFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"        userPrefs.setEndpointListFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"        Assertions.assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"    public void setEndpointListFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setEndpointListFilePath(null));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":"    public void setEndpointListFilePath_validPath_setsEndpointListFilePath() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":"        modelManager.setEndpointListFilePath(path);"},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(path, modelManager.getEndpointListFilePath());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"tjtanjin"},"content":"    public void hasEndpoint_nullEndpoint_throwsNullPointerException() {"},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasEndpoint(null));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"tjtanjin"},"content":"    public void hasEndpoint_endpointNotInEndpointList_returnsFalse() {"},{"lineNumber":83,"author":{"gitId":"ong6"},"content":"        assertFalse(modelManager.hasEndpoint(GET));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":"    public void hasEndpoint_endpointInEndpointList_returnsTrue() {"},{"lineNumber":88,"author":{"gitId":"ong6"},"content":"        modelManager.addEndpoint(GET);"},{"lineNumber":89,"author":{"gitId":"ong6"},"content":"        assertTrue(modelManager.hasEndpoint(GET));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"tjtanjin"},"content":"    public void getFilteredEndpointList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":94,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredEndpointList().remove(0));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":99,"author":{"gitId":"ong6"},"content":"        EndpointList endpointList \u003d new EndpointListBuilder().withEndpoint(GET).withEndpoint(POST).build();"},{"lineNumber":100,"author":{"gitId":"tjtanjin"},"content":"        EndpointList differentEndpointList \u003d new EndpointList();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":104,"author":{"gitId":"tjtanjin"},"content":"        modelManager \u003d new ModelManager(endpointList, userPrefs);"},{"lineNumber":105,"author":{"gitId":"tjtanjin"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(endpointList, userPrefs);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"tjtanjin"},"content":"        // different endpointList -\u003e returns false"},{"lineNumber":118,"author":{"gitId":"tjtanjin"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentEndpointList, userPrefs)));"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":121,"author":{"gitId":"ong6"},"content":"        String[] keywords \u003d GET.getMethod().methodName.split(\"\\\\s+\");"},{"lineNumber":122,"author":{"gitId":"tjtanjin"},"content":"        modelManager.updateFilteredEndpointList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":123,"author":{"gitId":"tjtanjin"},"content":"        assertFalse(modelManager.equals(new ModelManager(endpointList, userPrefs)));"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":126,"author":{"gitId":"tjtanjin"},"content":"        modelManager.updateFilteredEndpointList(PREDICATE_SHOW_ALL_ENDPOINTS);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":130,"author":{"gitId":"tjtanjin"},"content":"        differentUserPrefs.setEndpointListFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":131,"author":{"gitId":"tjtanjin"},"content":"        assertFalse(modelManager.equals(new ModelManager(endpointList, differentUserPrefs)));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ong6":7,"tjtanjin":33,"-":93}},{"path":"src/test/java/seedu/us/among/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"    public void setEndpointListFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setEndpointListFilePath(null));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":4,"-":17}},{"path":"src/test/java/seedu/us/among/model/endpoint/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model.endpoint;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":2,"-":34}},{"path":"src/test/java/seedu/us/among/model/endpoint/EndpointTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model.endpoint;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_ADDRESS_FACT;"},{"lineNumber":6,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_ADDRESS_RANDOM;"},{"lineNumber":7,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_METHOD_GET;"},{"lineNumber":8,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_METHOD_POST;"},{"lineNumber":9,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_TAG_CAT;"},{"lineNumber":10,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_TAG_COOL;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":12,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.GET;"},{"lineNumber":13,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.GET1;"},{"lineNumber":14,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.POST;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.EndpointBuilder;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"public class EndpointTest {"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"        Endpoint endpoint \u003d new EndpointBuilder().build();"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e endpoint.getTags().remove(0));"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"ong6"},"content":"    public void isSameMethod() {"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"        // same object -\u003e returns true"},{"lineNumber":31,"author":{"gitId":"ong6"},"content":"        assertTrue(GET.isSameEndpoint(GET));"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"        // null -\u003e returns false"},{"lineNumber":34,"author":{"gitId":"ong6"},"content":"        assertFalse(GET.isSameEndpoint(null));"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":36,"author":{"gitId":"JulietTeoh"},"content":"        // same method and address, all other attributes different -\u003e returns false"},{"lineNumber":37,"author":{"gitId":"ong6"},"content":"        Endpoint editedGet \u003d new EndpointBuilder(GET).withAddress(VALID_ADDRESS_RANDOM).withTags(VALID_TAG_COOL)"},{"lineNumber":38,"author":{"gitId":"ong6"},"content":"                .build();"},{"lineNumber":39,"author":{"gitId":"JulietTeoh"},"content":"        assertFalse(GET.isSameEndpoint(editedGet));"},{"lineNumber":40,"author":{"gitId":"ong6"},"content":""},{"lineNumber":41,"author":{"gitId":"ong6"},"content":"        // same name, all other attributes different -\u003e returns false"},{"lineNumber":42,"author":{"gitId":"ong6"},"content":"        editedGet \u003d new EndpointBuilder(GET).withAddress(VALID_ADDRESS_FACT).withTags(VALID_TAG_CAT).build();"},{"lineNumber":43,"author":{"gitId":"ong6"},"content":"        assertFalse(GET.isSameEndpoint(editedGet));"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"        editedGet \u003d new EndpointBuilder(GET).withMethod(VALID_METHOD_POST).build();"},{"lineNumber":47,"author":{"gitId":"ong6"},"content":"        assertFalse(GET.isSameEndpoint(editedGet));"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":50,"author":{"gitId":"ong6"},"content":"        Endpoint editedPost \u003d new EndpointBuilder(POST).withMethod(VALID_METHOD_GET.toLowerCase()).build();"},{"lineNumber":51,"author":{"gitId":"ong6"},"content":"        assertFalse(POST.isSameEndpoint(editedPost));"},{"lineNumber":52,"author":{"gitId":"ong6"},"content":""},{"lineNumber":53,"author":{"gitId":"ong6"},"content":"        // to-do add more tests for this"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"    public void equals() {"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"        // same values -\u003e returns true"},{"lineNumber":60,"author":{"gitId":"ong6"},"content":"        Endpoint getCopy \u003d new EndpointBuilder(GET).build();"},{"lineNumber":61,"author":{"gitId":"ong6"},"content":"        assertTrue(GET.equals(getCopy));"},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"        // same object -\u003e returns true"},{"lineNumber":64,"author":{"gitId":"ong6"},"content":"        assertTrue(GET.equals(GET));"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":"        // null -\u003e returns false"},{"lineNumber":67,"author":{"gitId":"ong6"},"content":"        assertFalse(GET.equals(null));"},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":"        // different type -\u003e returns false"},{"lineNumber":70,"author":{"gitId":"ong6"},"content":"        assertFalse(GET.equals(5));"},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":"        // different endpoint -\u003e returns false"},{"lineNumber":73,"author":{"gitId":"ong6"},"content":"        assertFalse(GET.equals(POST));"},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":"        // different name -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"ong6"},"content":"        Endpoint editedGet \u003d new EndpointBuilder(GET1).withMethod(VALID_METHOD_POST).build();"},{"lineNumber":77,"author":{"gitId":"ong6"},"content":"        assertFalse(GET1.equals(editedGet));"},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":79,"author":{"gitId":"tjtanjin"},"content":"        // different address -\u003e returns false"},{"lineNumber":80,"author":{"gitId":"ong6"},"content":"        editedGet \u003d new EndpointBuilder(GET1).withAddress(VALID_ADDRESS_FACT).build();"},{"lineNumber":81,"author":{"gitId":"ong6"},"content":"        assertFalse(GET1.equals(editedGet));"},{"lineNumber":82,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":"        // different tags -\u003e returns false"},{"lineNumber":84,"author":{"gitId":"ong6"},"content":"        editedGet \u003d new EndpointBuilder(GET1).withTags(VALID_TAG_CAT).build();"},{"lineNumber":85,"author":{"gitId":"ong6"},"content":"        assertFalse(GET1.equals(editedGet));"},{"lineNumber":86,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":36,"tjtanjin":49,"JulietTeoh":2}},{"path":"src/test/java/seedu/us/among/model/endpoint/MethodTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ong6"},"content":"package seedu.us.among.model.endpoint;"},{"lineNumber":2,"author":{"gitId":"ong6"},"content":""},{"lineNumber":3,"author":{"gitId":"ong6"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"ong6"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"ong6"},"content":""},{"lineNumber":7,"author":{"gitId":"ong6"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"ong6"},"content":""},{"lineNumber":9,"author":{"gitId":"ong6"},"content":"public class MethodTest {"},{"lineNumber":10,"author":{"gitId":"ong6"},"content":""},{"lineNumber":11,"author":{"gitId":"ong6"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"ong6"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"ong6"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Method(null));"},{"lineNumber":14,"author":{"gitId":"ong6"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"ong6"},"content":""},{"lineNumber":16,"author":{"gitId":"ong6"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"ong6"},"content":"    public void constructor_invalidMethod_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"ong6"},"content":"        String invalidMethod \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"ong6"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Method(invalidMethod));"},{"lineNumber":20,"author":{"gitId":"ong6"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"ong6"},"content":""},{"lineNumber":22,"author":{"gitId":"ong6"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"ong6"},"content":"    public void isValidMethod() {"},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"        // null Method"},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"        assertThrows(NullPointerException.class, () -\u003e Method.isValidMethod(null));"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":""},{"lineNumber":27,"author":{"gitId":"ong6"},"content":"        // invalid Method"},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"        assertFalse(Method.isValidMethod(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"ong6"},"content":"        assertFalse(Method.isValidMethod(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"ong6"},"content":"        assertFalse(Method.isValidMethod(\"^\")); // only non-alphanumeric characters"},{"lineNumber":31,"author":{"gitId":"ong6"},"content":"        assertFalse(Method.isValidMethod(\"POST*\")); // contains non-alphanumeric characters"},{"lineNumber":32,"author":{"gitId":"ong6"},"content":"        assertFalse(Method.isValidMethod(\"GET GET\")); // contains two of the same command"},{"lineNumber":33,"author":{"gitId":"ong6"},"content":"        assertFalse(Method.isValidMethod(\"aGETb\")); // contains other characters"},{"lineNumber":34,"author":{"gitId":"ong6"},"content":""},{"lineNumber":35,"author":{"gitId":"ong6"},"content":"        // valid Method"},{"lineNumber":36,"author":{"gitId":"ong6"},"content":"        assertTrue(Method.isValidMethod(\"GET\")); // GET command"},{"lineNumber":37,"author":{"gitId":"ong6"},"content":"        assertTrue(Method.isValidMethod(\"POST\")); // POST command"},{"lineNumber":38,"author":{"gitId":"ong6"},"content":"        assertTrue(Method.isValidMethod(\"PUT\")); // PUT command"},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"        assertTrue(Method.isValidMethod(\"DELETE\")); // DELETE command"},{"lineNumber":40,"author":{"gitId":"ong6"},"content":"        assertTrue(Method.isValidMethod(\"HEAD\")); // HEAD command"},{"lineNumber":41,"author":{"gitId":"ong6"},"content":"        assertTrue(Method.isValidMethod(\"OPTIONS\")); // OPTIONS command"},{"lineNumber":42,"author":{"gitId":"ong6"},"content":"        assertTrue(Method.isValidMethod(\"PATCH\")); // PATCH command"},{"lineNumber":43,"author":{"gitId":"ong6"},"content":""},{"lineNumber":44,"author":{"gitId":"ong6"},"content":"        assertTrue(Method.isValidMethod(\"get\")); // GET command small"},{"lineNumber":45,"author":{"gitId":"ong6"},"content":"        assertTrue(Method.isValidMethod(\"post\")); // POST command small"},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"        assertTrue(Method.isValidMethod(\"put\")); // PUT command small"},{"lineNumber":47,"author":{"gitId":"ong6"},"content":""},{"lineNumber":48,"author":{"gitId":"ong6"},"content":"        assertTrue(Method.isValidMethod(\"pOsT\")); // POST command weird"},{"lineNumber":49,"author":{"gitId":"ong6"},"content":"        assertTrue(Method.isValidMethod(\"pUt\")); // PUT command weird"},{"lineNumber":50,"author":{"gitId":"ong6"},"content":""},{"lineNumber":51,"author":{"gitId":"ong6"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"ong6"},"content":"}"}],"authorContributionMap":{"ong6":52}},{"path":"src/test/java/seedu/us/among/model/endpoint/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ong6"},"content":"// package seedu.us.among.model.endpoint;"},{"lineNumber":2,"author":{"gitId":"ong6"},"content":""},{"lineNumber":3,"author":{"gitId":"ong6"},"content":"// import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"ong6"},"content":"// import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"ong6"},"content":""},{"lineNumber":6,"author":{"gitId":"ong6"},"content":"// import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"ong6"},"content":"// import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"ong6"},"content":"// import java.util.List;"},{"lineNumber":9,"author":{"gitId":"ong6"},"content":""},{"lineNumber":10,"author":{"gitId":"ong6"},"content":"// import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"ong6"},"content":""},{"lineNumber":12,"author":{"gitId":"ong6"},"content":"// import seedu.us.among.testutil.EndpointBuilder;"},{"lineNumber":13,"author":{"gitId":"ong6"},"content":""},{"lineNumber":14,"author":{"gitId":"ong6"},"content":"// to-do not sure what this class exists for"},{"lineNumber":15,"author":{"gitId":"ong6"},"content":""},{"lineNumber":16,"author":{"gitId":"ong6"},"content":"// public class NameContainsKeywordsPredicateTest {"},{"lineNumber":17,"author":{"gitId":"ong6"},"content":""},{"lineNumber":18,"author":{"gitId":"ong6"},"content":"// @Test"},{"lineNumber":19,"author":{"gitId":"ong6"},"content":"// public void equals() {"},{"lineNumber":20,"author":{"gitId":"ong6"},"content":"// List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":21,"author":{"gitId":"ong6"},"content":"// List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":22,"author":{"gitId":"ong6"},"content":""},{"lineNumber":23,"author":{"gitId":"ong6"},"content":"// NameContainsKeywordsPredicate firstPredicate \u003d new"},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"// NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"// NameContainsKeywordsPredicate secondPredicate \u003d new"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"// NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":27,"author":{"gitId":"ong6"},"content":""},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"// // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitId":"ong6"},"content":"// assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":30,"author":{"gitId":"ong6"},"content":""},{"lineNumber":31,"author":{"gitId":"ong6"},"content":"// // same values -\u003e returns true"},{"lineNumber":32,"author":{"gitId":"ong6"},"content":"// NameContainsKeywordsPredicate firstPredicateCopy \u003d new"},{"lineNumber":33,"author":{"gitId":"ong6"},"content":"// NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":34,"author":{"gitId":"ong6"},"content":"// assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":35,"author":{"gitId":"ong6"},"content":""},{"lineNumber":36,"author":{"gitId":"ong6"},"content":"// // different types -\u003e returns false"},{"lineNumber":37,"author":{"gitId":"ong6"},"content":"// assertFalse(firstPredicate.equals(1));"},{"lineNumber":38,"author":{"gitId":"ong6"},"content":""},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"// // null -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"ong6"},"content":"// assertFalse(firstPredicate.equals(null));"},{"lineNumber":41,"author":{"gitId":"ong6"},"content":""},{"lineNumber":42,"author":{"gitId":"ong6"},"content":"// // different endpoint -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"ong6"},"content":"// assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":44,"author":{"gitId":"ong6"},"content":"// }"},{"lineNumber":45,"author":{"gitId":"ong6"},"content":""},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"// @Test"},{"lineNumber":47,"author":{"gitId":"ong6"},"content":"// public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":48,"author":{"gitId":"ong6"},"content":"// // One keyword"},{"lineNumber":49,"author":{"gitId":"ong6"},"content":"// NameContainsKeywordsPredicate predicate \u003d new"},{"lineNumber":50,"author":{"gitId":"ong6"},"content":"// NameContainsKeywordsPredicate(Collections.singletonList(\"GET\"));"},{"lineNumber":51,"author":{"gitId":"ong6"},"content":"// assertTrue(predicate.test(new EndpointBuilder().withMethod(\"GET"},{"lineNumber":52,"author":{"gitId":"ong6"},"content":"// POST\").build()));"},{"lineNumber":53,"author":{"gitId":"ong6"},"content":""},{"lineNumber":54,"author":{"gitId":"ong6"},"content":"// // Multiple keywords"},{"lineNumber":55,"author":{"gitId":"ong6"},"content":"// predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"GET\", \"POST\"));"},{"lineNumber":56,"author":{"gitId":"ong6"},"content":"// assertTrue(predicate.test(new EndpointBuilder().withMethod(\"GET"},{"lineNumber":57,"author":{"gitId":"ong6"},"content":"// POST\").build()));"},{"lineNumber":58,"author":{"gitId":"ong6"},"content":""},{"lineNumber":59,"author":{"gitId":"ong6"},"content":"// // Only one matching keyword"},{"lineNumber":60,"author":{"gitId":"ong6"},"content":"// predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"POST\","},{"lineNumber":61,"author":{"gitId":"ong6"},"content":"// \"Carol\"));"},{"lineNumber":62,"author":{"gitId":"ong6"},"content":"// assertTrue(predicate.test(new EndpointBuilder().withMethod(\"GET"},{"lineNumber":63,"author":{"gitId":"ong6"},"content":"// Carol\").build()));"},{"lineNumber":64,"author":{"gitId":"ong6"},"content":""},{"lineNumber":65,"author":{"gitId":"ong6"},"content":"// // Mixed-case keywords"},{"lineNumber":66,"author":{"gitId":"ong6"},"content":"// predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":67,"author":{"gitId":"ong6"},"content":"// assertTrue(predicate.test(new EndpointBuilder().withMethod(\"GET"},{"lineNumber":68,"author":{"gitId":"ong6"},"content":"// POST\").build()));"},{"lineNumber":69,"author":{"gitId":"ong6"},"content":"// }"},{"lineNumber":70,"author":{"gitId":"ong6"},"content":""},{"lineNumber":71,"author":{"gitId":"ong6"},"content":"// @Test"},{"lineNumber":72,"author":{"gitId":"ong6"},"content":"// public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":73,"author":{"gitId":"ong6"},"content":"// // Zero keywords"},{"lineNumber":74,"author":{"gitId":"ong6"},"content":"// NameContainsKeywordsPredicate predicate \u003d new"},{"lineNumber":75,"author":{"gitId":"ong6"},"content":"// NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":76,"author":{"gitId":"ong6"},"content":"// assertFalse(predicate.test(new EndpointBuilder().withMethod(\"GET\").build()));"},{"lineNumber":77,"author":{"gitId":"ong6"},"content":""},{"lineNumber":78,"author":{"gitId":"ong6"},"content":"// // Non-matching keyword"},{"lineNumber":79,"author":{"gitId":"ong6"},"content":"// predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":80,"author":{"gitId":"ong6"},"content":"// assertFalse(predicate.test(new EndpointBuilder().withMethod(\"GET"},{"lineNumber":81,"author":{"gitId":"ong6"},"content":"// POST\").build()));"},{"lineNumber":82,"author":{"gitId":"ong6"},"content":""},{"lineNumber":83,"author":{"gitId":"ong6"},"content":"// // Keywords match phone, email and address, but does not match name"},{"lineNumber":84,"author":{"gitId":"ong6"},"content":"// predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\","},{"lineNumber":85,"author":{"gitId":"ong6"},"content":"// \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":86,"author":{"gitId":"ong6"},"content":"// assertFalse(predicate.test(new"},{"lineNumber":87,"author":{"gitId":"ong6"},"content":"// EndpointBuilder().withMethod(\"GET\").withAddress(\"Main Street\").build()));"},{"lineNumber":88,"author":{"gitId":"ong6"},"content":"// }"},{"lineNumber":89,"author":{"gitId":"ong6"},"content":"//"}],"authorContributionMap":{"ong6":89}},{"path":"src/test/java/seedu/us/among/model/endpoint/UniqueEndpointListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model.endpoint;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_ADDRESS_FACT;"},{"lineNumber":7,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_TAG_CAT;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.GET;"},{"lineNumber":10,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.POST;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":12,"author":{"gitId":"JulietTeoh"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":18,"author":{"gitId":"JulietTeoh"},"content":"import seedu.us.among.model.endpoint.exceptions.DuplicateApiEndpointException;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.exceptions.EndpointNotFoundException;"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.EndpointBuilder;"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"public class UniqueEndpointListTest {"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"    private final UniqueEndpointList uniqueEndpointList \u003d new UniqueEndpointList();"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"ong6"},"content":"    public void contains_nullMethod_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEndpointList.contains(null));"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"ong6"},"content":"    public void contains_methodNotInList_returnsFalse() {"},{"lineNumber":33,"author":{"gitId":"ong6"},"content":"        assertFalse(uniqueEndpointList.contains(GET));"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"ong6"},"content":"    public void contains_methodInList_returnsTrue() {"},{"lineNumber":38,"author":{"gitId":"ong6"},"content":"        uniqueEndpointList.add(GET);"},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"        assertTrue(uniqueEndpointList.contains(GET));"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":42,"author":{"gitId":"ong6"},"content":"    // @Test"},{"lineNumber":43,"author":{"gitId":"ong6"},"content":"    // public void contains_methodWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"ong6"},"content":"    //     uniqueEndpointList.add(GET);"},{"lineNumber":45,"author":{"gitId":"ong6"},"content":"    //     Endpoint editedGet \u003d new EndpointBuilder(GET)"},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"    //     .withAddress(VALID_ADDRESS_FACT).withTags(VALID_TAG_CAT).build();"},{"lineNumber":47,"author":{"gitId":"ong6"},"content":"    //     assertTrue(uniqueEndpointList.contains(editedGet));"},{"lineNumber":48,"author":{"gitId":"ong6"},"content":"    // } //to-do update this class properly"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"ong6"},"content":"    public void add_nullMethod_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEndpointList.add(null));"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":55,"author":{"gitId":"ong6"},"content":"    // @Test"},{"lineNumber":56,"author":{"gitId":"ong6"},"content":"    // public void add_duplicateMethod_throwsDuplicateMethodException() {"},{"lineNumber":57,"author":{"gitId":"ong6"},"content":"    //     uniqueEndpointList.add(GET);"},{"lineNumber":58,"author":{"gitId":"ong6"},"content":"    //     assertThrows(DuplicateApiEndpointException.class, () -\u003e uniqueEndpointList.add(GET));"},{"lineNumber":59,"author":{"gitId":"ong6"},"content":"    // }"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"ong6"},"content":"    public void setMethod_nullTargetMethod_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"ong6"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEndpointList.setEndpoint(null, GET));"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"ong6"},"content":"    public void setMethod_nullEditedMethod_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"ong6"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEndpointList.setEndpoint(GET, null));"},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"ong6"},"content":"    public void setMethod_targetMethodNotInList_throwsMethodNotFoundException() {"},{"lineNumber":73,"author":{"gitId":"ong6"},"content":"        assertThrows(EndpointNotFoundException.class, () -\u003e uniqueEndpointList.setEndpoint(GET, GET));"},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"ong6"},"content":"    public void setMethod_editedMethodIsSameMethod_success() {"},{"lineNumber":78,"author":{"gitId":"ong6"},"content":"        uniqueEndpointList.add(GET);"},{"lineNumber":79,"author":{"gitId":"ong6"},"content":"        uniqueEndpointList.setEndpoint(GET, GET);"},{"lineNumber":80,"author":{"gitId":"tjtanjin"},"content":"        UniqueEndpointList expectedUniqueEndpointList \u003d new UniqueEndpointList();"},{"lineNumber":81,"author":{"gitId":"ong6"},"content":"        expectedUniqueEndpointList.add(GET);"},{"lineNumber":82,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(expectedUniqueEndpointList, uniqueEndpointList);"},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":85,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"ong6"},"content":"    public void setMethod_editedMethodHasSameIdentity_success() {"},{"lineNumber":87,"author":{"gitId":"ong6"},"content":"        uniqueEndpointList.add(GET);"},{"lineNumber":88,"author":{"gitId":"ong6"},"content":"        Endpoint editedGet \u003d new EndpointBuilder(GET).withAddress(VALID_ADDRESS_FACT).withTags(VALID_TAG_CAT).build();"},{"lineNumber":89,"author":{"gitId":"ong6"},"content":"        uniqueEndpointList.setEndpoint(GET, editedGet);"},{"lineNumber":90,"author":{"gitId":"tjtanjin"},"content":"        UniqueEndpointList expectedUniqueEndpointList \u003d new UniqueEndpointList();"},{"lineNumber":91,"author":{"gitId":"ong6"},"content":"        expectedUniqueEndpointList.add(editedGet);"},{"lineNumber":92,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(expectedUniqueEndpointList, uniqueEndpointList);"},{"lineNumber":93,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":95,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"ong6"},"content":"    public void setMethod_editedMethodHasDifferentIdentity_success() {"},{"lineNumber":97,"author":{"gitId":"ong6"},"content":"        uniqueEndpointList.add(GET);"},{"lineNumber":98,"author":{"gitId":"ong6"},"content":"        uniqueEndpointList.setEndpoint(GET, POST);"},{"lineNumber":99,"author":{"gitId":"tjtanjin"},"content":"        UniqueEndpointList expectedUniqueEndpointList \u003d new UniqueEndpointList();"},{"lineNumber":100,"author":{"gitId":"ong6"},"content":"        expectedUniqueEndpointList.add(POST);"},{"lineNumber":101,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(expectedUniqueEndpointList, uniqueEndpointList);"},{"lineNumber":102,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":104,"author":{"gitId":"ong6"},"content":"    // @Test"},{"lineNumber":105,"author":{"gitId":"ong6"},"content":"    // public void setMethod_editedMethodHasNonUniqueIdentity_throwsDuplicateMethodException() {"},{"lineNumber":106,"author":{"gitId":"ong6"},"content":"    //     uniqueEndpointList.add(GET);"},{"lineNumber":107,"author":{"gitId":"ong6"},"content":"    //     uniqueEndpointList.add(POST);"},{"lineNumber":108,"author":{"gitId":"ong6"},"content":"    //     assertThrows(DuplicateApiEndpointException.class, () -\u003e uniqueEndpointList.setEndpoint(GET, POST));"},{"lineNumber":109,"author":{"gitId":"ong6"},"content":"    // }"},{"lineNumber":110,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":111,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"ong6"},"content":"    public void remove_nullMethod_throwsNullPointerException() {"},{"lineNumber":113,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEndpointList.remove(null));"},{"lineNumber":114,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":116,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"ong6"},"content":"    public void remove_methodDoesNotExist_throwsMethodNotFoundException() {"},{"lineNumber":118,"author":{"gitId":"ong6"},"content":"        assertThrows(EndpointNotFoundException.class, () -\u003e uniqueEndpointList.remove(GET));"},{"lineNumber":119,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":121,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"ong6"},"content":"    public void remove_existingMethod_removesMethod() {"},{"lineNumber":123,"author":{"gitId":"ong6"},"content":"        uniqueEndpointList.add(GET);"},{"lineNumber":124,"author":{"gitId":"ong6"},"content":"        uniqueEndpointList.remove(GET);"},{"lineNumber":125,"author":{"gitId":"tjtanjin"},"content":"        UniqueEndpointList expectedUniqueEndpointList \u003d new UniqueEndpointList();"},{"lineNumber":126,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(expectedUniqueEndpointList, uniqueEndpointList);"},{"lineNumber":127,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":129,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"ong6"},"content":"    public void setMethods_nullUniqueMethodList_throwsNullPointerException() {"},{"lineNumber":131,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEndpointList.setEndpoints((UniqueEndpointList) null));"},{"lineNumber":132,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":134,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"ong6"},"content":"    public void setMethods_uniqueMethodList_replacesOwnListWithProvidedUniqueMethodList() {"},{"lineNumber":136,"author":{"gitId":"ong6"},"content":"        uniqueEndpointList.add(GET);"},{"lineNumber":137,"author":{"gitId":"tjtanjin"},"content":"        UniqueEndpointList expectedUniqueEndpointList \u003d new UniqueEndpointList();"},{"lineNumber":138,"author":{"gitId":"ong6"},"content":"        expectedUniqueEndpointList.add(POST);"},{"lineNumber":139,"author":{"gitId":"tjtanjin"},"content":"        uniqueEndpointList.setEndpoints(expectedUniqueEndpointList);"},{"lineNumber":140,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(expectedUniqueEndpointList, uniqueEndpointList);"},{"lineNumber":141,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":143,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"ong6"},"content":"    public void setMethods_nullList_throwsNullPointerException() {"},{"lineNumber":145,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEndpointList.setEndpoints((List\u003cEndpoint\u003e) null));"},{"lineNumber":146,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":148,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"ong6"},"content":"    public void setMethods_list_replacesOwnListWithProvidedList() {"},{"lineNumber":150,"author":{"gitId":"ong6"},"content":"        uniqueEndpointList.add(GET);"},{"lineNumber":151,"author":{"gitId":"ong6"},"content":"        List\u003cEndpoint\u003e endpointList \u003d Collections.singletonList(POST);"},{"lineNumber":152,"author":{"gitId":"tjtanjin"},"content":"        uniqueEndpointList.setEndpoints(endpointList);"},{"lineNumber":153,"author":{"gitId":"tjtanjin"},"content":"        UniqueEndpointList expectedUniqueEndpointList \u003d new UniqueEndpointList();"},{"lineNumber":154,"author":{"gitId":"ong6"},"content":"        expectedUniqueEndpointList.add(POST);"},{"lineNumber":155,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(expectedUniqueEndpointList, uniqueEndpointList);"},{"lineNumber":156,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":158,"author":{"gitId":"JulietTeoh"},"content":"    @Test"},{"lineNumber":159,"author":{"gitId":"JulietTeoh"},"content":"    public void setMethods_listWithDuplicateMethods_throwsDuplicateMethodException() {"},{"lineNumber":160,"author":{"gitId":"JulietTeoh"},"content":"        List\u003cEndpoint\u003e listWithDuplicateEndpoints \u003d Arrays.asList(GET, GET);"},{"lineNumber":161,"author":{"gitId":"JulietTeoh"},"content":"        assertThrows(DuplicateApiEndpointException.class, ("},{"lineNumber":162,"author":{"gitId":"JulietTeoh"},"content":"            ) -\u003e uniqueEndpointList.setEndpoints(listWithDuplicateEndpoints));"},{"lineNumber":163,"author":{"gitId":"JulietTeoh"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":165,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"tjtanjin"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":167,"author":{"gitId":"ong6"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":168,"author":{"gitId":"ong6"},"content":"            -\u003e uniqueEndpointList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":169,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":65,"tjtanjin":97,"JulietTeoh":8}},{"path":"src/test/java/seedu/us/among/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.model.tag;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void isValidTagName() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null tag name"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":2,"-":24}},{"path":"src/test/java/seedu/us/among/storage/JsonAdaptedEndpointTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.storage;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.storage.JsonAdaptedEndpoint.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.testutil.TypicalEndpoints.POST;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Address;"},{"lineNumber":16,"author":{"gitId":"ong6"},"content":"import seedu.us.among.model.endpoint.Method;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Response;"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"public class JsonAdaptedEndpointTest {"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"    private static final String VALID_NAME \u003d POST.getMethod().toString();"},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"    private static final String VALID_ADDRESS \u003d POST.getAddress().toString();"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d POST.getTags().stream().map(JsonAdaptedTag::new)"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"            .collect(Collectors.toList());"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"    private static final JsonAdaptedResponse EMPTY_RESPONSE \u003d new JsonAdaptedResponse(new Response());"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"    public void toModelType_validEndpointDetails_returnsEndpoint() throws Exception {"},{"lineNumber":32,"author":{"gitId":"ong6"},"content":"        JsonAdaptedEndpoint endpoint \u003d new JsonAdaptedEndpoint(POST);"},{"lineNumber":33,"author":{"gitId":"ong6"},"content":"        assertEquals(POST, endpoint.toModelType());"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"        JsonAdaptedEndpoint endpoint \u003d new JsonAdaptedEndpoint(INVALID_NAME, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"                EMPTY_RESPONSE);"},{"lineNumber":40,"author":{"gitId":"ong6"},"content":"        String expectedMessage \u003d Method.MESSAGE_CONSTRAINTS;"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, endpoint::toModelType);"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"        JsonAdaptedEndpoint endpoint \u003d new JsonAdaptedEndpoint(null, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"                EMPTY_RESPONSE);"},{"lineNumber":48,"author":{"gitId":"ong6"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Method.class.getSimpleName());"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, endpoint::toModelType);"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"        JsonAdaptedEndpoint endpoint \u003d new JsonAdaptedEndpoint(VALID_NAME, INVALID_ADDRESS, VALID_TAGS,"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"                EMPTY_RESPONSE);"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, endpoint::toModelType);"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":"        JsonAdaptedEndpoint endpoint \u003d new JsonAdaptedEndpoint(VALID_NAME, null, VALID_TAGS,"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"                EMPTY_RESPONSE);"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"        String expectedMessage \u003d String.format(JsonAdaptedEndpoint.MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"                Address.class.getSimpleName());"},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, endpoint::toModelType);"},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":"        JsonAdaptedEndpoint endpoint \u003d new JsonAdaptedEndpoint(VALID_NAME, VALID_ADDRESS, invalidTags,"},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"                EMPTY_RESPONSE);"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(IllegalValueException.class, endpoint::toModelType);"},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":9,"tjtanjin":69}},{"path":"src/test/java/seedu/us/among/storage/JsonEndpointListStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.storage;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.EndpointList;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyEndpointList;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.TypicalEndpoints;"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"public class JsonEndpointListStorageTest {"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonEndpointListStorageTest\");"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"    @TempDir"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"    public Path testFolder;"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    public void readEndpointList_nullFilePath_throwsNullPointerException() {"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(NullPointerException.class, () -\u003e readEndpointList(null));"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"    private java.util.Optional\u003cReadOnlyEndpointList\u003e readEndpointList(String filePath) throws Exception {"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"        return new JsonEndpointListStorage(Paths.get(filePath)).readEndpointList(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":35,"author":{"gitId":"ong6"},"content":"        return prefsFileInTestDataFolder !\u003d null ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder) : null;"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"        assertFalse(readEndpointList(\"NonExistentFile.json\").isPresent());"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(DataConversionException.class, () -\u003e readEndpointList(\"notJsonFormatEndpointList.json\"));"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"    public void readEndpointList_invalidEndpointList_throwDataConversionException() {"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(DataConversionException.class, () -\u003e readEndpointList(\"invalidEndpointList.json\"));"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"    public void readEndpointList_invalidAndValidEndpointList_throwDataConversionException() {"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(DataConversionException.class, () -\u003e readEndpointList(\"invalidAndValidEndpointList.json\"));"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"    public void readAndSaveEndpointList_allInOrder_success() throws Exception {"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"        Path filePath \u003d testFolder.resolve(\"TempEndpointList.json\");"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"        EndpointList original \u003d TypicalEndpoints.getTypicalEndpointList();"},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":"        JsonEndpointListStorage jsonEndpointListStorage \u003d new JsonEndpointListStorage(filePath);"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"        // Save in new file and read back"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"        jsonEndpointListStorage.saveEndpointList(original, filePath);"},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":"        ReadOnlyEndpointList readBack \u003d jsonEndpointListStorage.readEndpointList(filePath).get();"},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(original, new EndpointList(readBack));"},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":"        // Modify data, overwrite exiting file, and read back"},{"lineNumber":70,"author":{"gitId":"ong6"},"content":"        original.addEndpoint(TypicalEndpoints.GET1);"},{"lineNumber":71,"author":{"gitId":"ong6"},"content":"        original.removeEndpoint(TypicalEndpoints.GET);"},{"lineNumber":72,"author":{"gitId":"tjtanjin"},"content":"        jsonEndpointListStorage.saveEndpointList(original, filePath);"},{"lineNumber":73,"author":{"gitId":"tjtanjin"},"content":"        readBack \u003d jsonEndpointListStorage.readEndpointList(filePath).get();"},{"lineNumber":74,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(original, new EndpointList(readBack));"},{"lineNumber":75,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":"        // Save and read without specifying file path"},{"lineNumber":77,"author":{"gitId":"ong6"},"content":"        original.addEndpoint(TypicalEndpoints.GET2);"},{"lineNumber":78,"author":{"gitId":"tjtanjin"},"content":"        jsonEndpointListStorage.saveEndpointList(original); // file path not specified"},{"lineNumber":79,"author":{"gitId":"tjtanjin"},"content":"        readBack \u003d jsonEndpointListStorage.readEndpointList().get(); // file path not specified"},{"lineNumber":80,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(original, new EndpointList(readBack));"},{"lineNumber":81,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":82,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":84,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"tjtanjin"},"content":"    public void saveEndpointList_nullEndpointList_throwsNullPointerException() {"},{"lineNumber":86,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveEndpointList(null, \"SomeFile.json\"));"},{"lineNumber":87,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":89,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"tjtanjin"},"content":"     * Saves {@code endpointList} at the specified {@code filePath}."},{"lineNumber":91,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"tjtanjin"},"content":"    private void saveEndpointList(ReadOnlyEndpointList endpointList, String filePath) {"},{"lineNumber":93,"author":{"gitId":"tjtanjin"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"ong6"},"content":"            new JsonEndpointListStorage(Paths.get(filePath)).saveEndpointList(endpointList,"},{"lineNumber":95,"author":{"gitId":"ong6"},"content":"                    addToTestDataPathIfNotNull(filePath));"},{"lineNumber":96,"author":{"gitId":"tjtanjin"},"content":"        } catch (IOException ioe) {"},{"lineNumber":97,"author":{"gitId":"tjtanjin"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":98,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":101,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"tjtanjin"},"content":"    public void saveEndpointList_nullFilePath_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveEndpointList(new EndpointList(), null));"},{"lineNumber":104,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":6,"tjtanjin":99}},{"path":"src/test/java/seedu/us/among/storage/JsonSerializableEndpointListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.storage;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"ong6"},"content":"// import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.util.JsonUtil;"},{"lineNumber":13,"author":{"gitId":"ong6"},"content":"// import seedu.us.among.model.EndpointList;"},{"lineNumber":14,"author":{"gitId":"ong6"},"content":"// import seedu.us.among.testutil.TypicalEndpoints;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"public class JsonSerializableEndpointListTest {"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableEndpointListTest\");"},{"lineNumber":19,"author":{"gitId":"ong6"},"content":"    // private static final Path TYPICAL_ENDPOINT_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalEndpointList.json\");"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"    private static final Path INVALID_ENDPOINT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEndpointList.json\");"},{"lineNumber":21,"author":{"gitId":"ong6"},"content":"    // private static final Path DUPLICATE_ENDPOINT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEndpointList.json\");"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":23,"author":{"gitId":"ong6"},"content":"    // @Test"},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"    // public void toModelType_typicalEndpointsFile_success() throws Exception {"},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"    //     JsonSerializableEndpointList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ENDPOINT_FILE,"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"    //             JsonSerializableEndpointList.class).get();"},{"lineNumber":27,"author":{"gitId":"ong6"},"content":"    //     EndpointList endpointListFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"    //     EndpointList typicalEndpointList \u003d TypicalEndpoints.getTypicalEndpointList();"},{"lineNumber":29,"author":{"gitId":"ong6"},"content":"    //     assertEquals(endpointListFromFile, typicalEndpointList);"},{"lineNumber":30,"author":{"gitId":"ong6"},"content":"    // } //to-do"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"    public void toModelType_invalidEndpointFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"        JsonSerializableEndpointList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ENDPOINT_FILE,"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"                JsonSerializableEndpointList.class).get();"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"    // @Test"},{"lineNumber":40,"author":{"gitId":"ong6"},"content":"    // public void toModelType_duplicateEndpoints_throwsIllegalValueException() throws Exception {"},{"lineNumber":41,"author":{"gitId":"ong6"},"content":"    //     JsonSerializableEndpointList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ENDPOINT_FILE,"},{"lineNumber":42,"author":{"gitId":"ong6"},"content":"    //             JsonSerializableEndpointList.class).get();"},{"lineNumber":43,"author":{"gitId":"ong6"},"content":"    //     assertThrows(IllegalValueException.class, JsonSerializableEndpointList.MESSAGE_DUPLICATE_ENDPOINT,"},{"lineNumber":44,"author":{"gitId":"ong6"},"content":"    //             dataFromFile::toModelType);"},{"lineNumber":45,"author":{"gitId":"ong6"},"content":"    // } //to-do"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":20,"tjtanjin":27}},{"path":"src/test/java/seedu/us/among/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"},{"lineNumber":76,"author":{"gitId":"tjtanjin"},"content":"        userPrefs.setEndpointListFilePath(Paths.get(\"imposter.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":6,"-":117}},{"path":"src/test/java/seedu/us/among/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.EndpointList;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.ReadOnlyEndpointList;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.UserPrefs;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.testutil.TypicalEndpoints;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"        JsonEndpointListStorage endpointListStorage \u003d new JsonEndpointListStorage(getTempFilePath(\"ab\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"        storageManager \u003d new StorageManager(endpointListStorage, userPrefsStorage);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"    public void endpointListReadSave() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"         * {@link JsonEndpointListStorage} class."},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonEndpointListStorageTest} class."},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"        EndpointList original \u003d TypicalEndpoints.getTypicalEndpointList();"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"        storageManager.saveEndpointList(original);"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"        ReadOnlyEndpointList retrieved \u003d storageManager.readEndpointList().get();"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"        assertEquals(original, new EndpointList(retrieved));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"    public void getEndpointListFilePath() {"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"        assertNotNull(storageManager.getEndpointListFilePath());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":17,"-":51}},{"path":"src/test/java/seedu/us/among/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":33}},{"path":"src/test/java/seedu/us/among/testutil/EditEndpointDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.testutil;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.EditCommand;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Address;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":10,"author":{"gitId":"ong6"},"content":"import seedu.us.among.model.endpoint.Method;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":" * A utility class to help with building EditEndpointDescriptor objects."},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"public class EditEndpointDescriptorBuilder {"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":"    private EditCommand.EditEndpointDescriptor descriptor;"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"    public EditEndpointDescriptorBuilder() {"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"        descriptor \u003d new EditCommand.EditEndpointDescriptor();"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"    public EditEndpointDescriptorBuilder(EditCommand.EditEndpointDescriptor descriptor) {"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"        this.descriptor \u003d new EditCommand.EditEndpointDescriptor(descriptor);"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"ong6"},"content":"     * Returns an {@code EditEndpointDescriptor} with fields containing"},{"lineNumber":30,"author":{"gitId":"ong6"},"content":"     * {@code endpoint}\u0027s details"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"    public EditEndpointDescriptorBuilder(Endpoint endpoint) {"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"        descriptor \u003d new EditCommand.EditEndpointDescriptor();"},{"lineNumber":34,"author":{"gitId":"ong6"},"content":"        descriptor.setMethod(endpoint.getMethod());"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"        descriptor.setAddress(endpoint.getAddress());"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"        descriptor.setTags(endpoint.getTags());"},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"ong6"},"content":"     * Sets the {@code Name} of the {@code EditEndpointDescriptor} that we are"},{"lineNumber":41,"author":{"gitId":"ong6"},"content":"     * building."},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"    public EditEndpointDescriptorBuilder withName(String name) {"},{"lineNumber":44,"author":{"gitId":"ong6"},"content":"        descriptor.setMethod(new Method(name));"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"        return this;"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"ong6"},"content":"     * Sets the {@code Address} of the {@code EditEndpointDescriptor} that we are"},{"lineNumber":50,"author":{"gitId":"ong6"},"content":"     * building."},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"    public EditEndpointDescriptorBuilder withAddress(String address) {"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"        return this;"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"ong6"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the"},{"lineNumber":59,"author":{"gitId":"ong6"},"content":"     * {@code EditEndpointDescriptor} that we are building."},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"    public EditEndpointDescriptorBuilder withTags(String... tags) {"},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"        return this;"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":"    public EditCommand.EditEndpointDescriptor build() {"},{"lineNumber":68,"author":{"gitId":"tjtanjin"},"content":"        return descriptor;"},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":11,"tjtanjin":59}},{"path":"src/test/java/seedu/us/among/testutil/EndpointBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.testutil;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Address;"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":8,"author":{"gitId":"ong6"},"content":"import seedu.us.among.model.endpoint.Method;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.tag.Tag;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.util.SampleDataUtil;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":" * A utility class to help with building Endpoint objects."},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"public class EndpointBuilder {"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":17,"author":{"gitId":"ong6"},"content":"    public static final String DEFAULT_NAME \u003d \"GET\";"},{"lineNumber":18,"author":{"gitId":"ong6"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"sample/address\";"},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":20,"author":{"gitId":"ong6"},"content":"    private Method method;"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"    private Address address;"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"     * Creates a {@code EndpointBuilder} with the default details."},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"    public EndpointBuilder() {"},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"        method \u003d new Method(DEFAULT_NAME);"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"     * Initializes the EndpointBuilder with the data of {@code endpointToCopy}."},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"    public EndpointBuilder(Endpoint endpointToCopy) {"},{"lineNumber":37,"author":{"gitId":"ong6"},"content":"        method \u003d endpointToCopy.getMethod();"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":"        address \u003d endpointToCopy.getAddress();"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"        tags \u003d new HashSet\u003c\u003e(endpointToCopy.getTags());"},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"     * Sets the {@code Name} of the {@code Endpoint} that we are building."},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"ong6"},"content":"    public EndpointBuilder withMethod(String name) {"},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"        this.method \u003d new Method(name);"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"        return this;"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"ong6"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the"},{"lineNumber":52,"author":{"gitId":"ong6"},"content":"     * {@code Endpoint} that we are building."},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"    public EndpointBuilder withTags(String... tags) {"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":"        return this;"},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"     * Sets the {@code Address} of the {@code Endpoint} that we are building."},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":"    public EndpointBuilder withAddress(String address) {"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"        return this;"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":"    public Endpoint build() {"},{"lineNumber":68,"author":{"gitId":"ong6"},"content":"        return new Endpoint(method, address, tags);"},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":71,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":11,"tjtanjin":60}},{"path":"src/test/java/seedu/us/among/testutil/EndpointListBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.testutil;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.EndpointList;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":" * A utility class to help with building EndpointList objects."},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":" *     {@code EndpointList ab \u003d new EndpointListBuilder().withEndpoint(\"John\", \"Doe\").build();}"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"public class EndpointListBuilder {"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":"    private EndpointList endpointList;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"    public EndpointListBuilder() {"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":"        endpointList \u003d new EndpointList();"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"    public EndpointListBuilder(EndpointList endpointList) {"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"        this.endpointList \u003d endpointList;"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"     * Adds a new {@code Endpoint} to the {@code EndpointList} that we are building."},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    public EndpointListBuilder withEndpoint(Endpoint endpoint) {"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"        endpointList.addEndpoint(endpoint);"},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"        return this;"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":31,"author":{"gitId":"tjtanjin"},"content":"    public EndpointList build() {"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"        return endpointList;"},{"lineNumber":33,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":34}},{"path":"src/test/java/seedu/us/among/testutil/EndpointUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.testutil;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_METHOD;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.logic.commands.EditCommand;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.tag.Tag;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":" * A utility class for Endpoint."},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"public class EndpointUtil {"},{"lineNumber":18,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":19,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":"     * Returns an add command string for adding the {@code endpoint}."},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":"    public static String getAddCommand(Endpoint endpoint) {"},{"lineNumber":23,"author":{"gitId":"tjtanjin"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getEndpointDetails(endpoint);"},{"lineNumber":24,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":26,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"tjtanjin"},"content":"     * Returns the part of command string for the given {@code endpoint}\u0027s details."},{"lineNumber":28,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"tjtanjin"},"content":"    public static String getEndpointDetails(Endpoint endpoint) {"},{"lineNumber":30,"author":{"gitId":"tjtanjin"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":31,"author":{"gitId":"ong6"},"content":"        sb.append(PREFIX_METHOD + endpoint.getMethod().methodName + \" \");"},{"lineNumber":32,"author":{"gitId":"tjtanjin"},"content":"        sb.append(PREFIX_ADDRESS + endpoint.getAddress().value + \" \");"},{"lineNumber":33,"author":{"gitId":"ong6"},"content":"        endpoint.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"},{"lineNumber":34,"author":{"gitId":"tjtanjin"},"content":"        return sb.toString();"},{"lineNumber":35,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":37,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"ong6"},"content":"     * Returns the part of command string for the given"},{"lineNumber":39,"author":{"gitId":"ong6"},"content":"     * {@code EditEndpointDescriptor}\u0027s details."},{"lineNumber":40,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"tjtanjin"},"content":"    public static String getEditEndpointDescriptorDetails(EditCommand.EditEndpointDescriptor descriptor) {"},{"lineNumber":42,"author":{"gitId":"tjtanjin"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":43,"author":{"gitId":"ong6"},"content":"        descriptor.getMethod().ifPresent(name -\u003e sb.append(PREFIX_METHOD).append(name.methodName).append(\" \"));"},{"lineNumber":44,"author":{"gitId":"ong6"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":47,"author":{"gitId":"tjtanjin"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":48,"author":{"gitId":"tjtanjin"},"content":"                sb.append(PREFIX_TAG);"},{"lineNumber":49,"author":{"gitId":"tjtanjin"},"content":"            } else {"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":51,"author":{"gitId":"tjtanjin"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"        return sb.toString();"},{"lineNumber":54,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":7,"tjtanjin":48}},{"path":"src/test/java/seedu/us/among/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \""},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":71}},{"path":"src/test/java/seedu/us/among/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.Model;"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"tjtanjin"},"content":"     * Returns the middle index of the endpoint in the {@code model}\u0027s endpoint list."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"        return Index.fromOneBased(model.getFilteredEndpointList().size() / 2);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"tjtanjin"},"content":"     * Returns the last index of the endpoint in the {@code model}\u0027s endpoint list."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":46,"author":{"gitId":"tjtanjin"},"content":"        return Index.fromOneBased(model.getFilteredEndpointList().size());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":"     * Returns the endpoint in the {@code model}\u0027s endpoint list at {@code index}."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":"    public static Endpoint getEndpoint(Model model, Index index) {"},{"lineNumber":53,"author":{"gitId":"tjtanjin"},"content":"        return model.getFilteredEndpointList().get(index.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":11,"-":44}},{"path":"src/test/java/seedu/us/among/testutil/TypicalEndpoints.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.testutil;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_ADDRESS_FACT;"},{"lineNumber":4,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_ADDRESS_RANDOM;"},{"lineNumber":5,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_METHOD_GET;"},{"lineNumber":6,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_METHOD_POST;"},{"lineNumber":7,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_TAG_CAT;"},{"lineNumber":8,"author":{"gitId":"ong6"},"content":"import static seedu.us.among.logic.commands.CommandTestUtil.VALID_TAG_COOL;"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.EndpointList;"},{"lineNumber":15,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.model.endpoint.Endpoint;"},{"lineNumber":16,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":17,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"ong6"},"content":" * A utility class containing a list of {@code Endpoint} objects to be used in"},{"lineNumber":19,"author":{"gitId":"ong6"},"content":" * tests."},{"lineNumber":20,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":21,"author":{"gitId":"tjtanjin"},"content":"public class TypicalEndpoints {"},{"lineNumber":22,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":23,"author":{"gitId":"ong6"},"content":"    public static final Endpoint GET \u003d new EndpointBuilder().withMethod(\"GET\")"},{"lineNumber":24,"author":{"gitId":"ong6"},"content":"            .withAddress(\"https://cat-fact.herokuapp.com/facts/random?animal_type\u003dcat\u0026amount\u003d2\").withTags(\"cat\")"},{"lineNumber":25,"author":{"gitId":"ong6"},"content":"            .build();"},{"lineNumber":26,"author":{"gitId":"ong6"},"content":"    public static final Endpoint POST \u003d new EndpointBuilder().withMethod(\"POST\")"},{"lineNumber":27,"author":{"gitId":"ong6"},"content":"            .withAddress(\"https://cat-fact.herokuapp.com/facts\").withTags(\"cat\", \"fact\").build();"},{"lineNumber":28,"author":{"gitId":"ong6"},"content":"    public static final Endpoint PUT \u003d new EndpointBuilder().withMethod(\"PUT\")"},{"lineNumber":29,"author":{"gitId":"ong6"},"content":"            .withAddress(\"https://cat-fact.herokuapp.com/facts\").build();"},{"lineNumber":30,"author":{"gitId":"ong6"},"content":"    public static final Endpoint DELETE \u003d new EndpointBuilder().withMethod(\"DELETE\")"},{"lineNumber":31,"author":{"gitId":"ong6"},"content":"            .withAddress(\"https://cat-fact.herokuapp.com/facts\").withTags(\"Fact\").build();"},{"lineNumber":32,"author":{"gitId":"ong6"},"content":"    public static final Endpoint HEAD \u003d new EndpointBuilder().withMethod(\"HEAD\")"},{"lineNumber":33,"author":{"gitId":"ong6"},"content":"            .withAddress(\"https://cat-fact.herokuapp.com/facts\").build();"},{"lineNumber":34,"author":{"gitId":"ong6"},"content":"    public static final Endpoint OPTIONS \u003d new EndpointBuilder().withMethod(\"OPTIONS\")"},{"lineNumber":35,"author":{"gitId":"ong6"},"content":"            .withAddress(\"https://cat-fact.herokuapp.com/facts\").build();"},{"lineNumber":36,"author":{"gitId":"ong6"},"content":"    public static final Endpoint PATCH \u003d new EndpointBuilder().withMethod(\"PATCH\")"},{"lineNumber":37,"author":{"gitId":"ong6"},"content":"            .withAddress(\"https://cat-fact.herokuapp.com/facts\").build();"},{"lineNumber":38,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":39,"author":{"gitId":"tjtanjin"},"content":"    // Manually added"},{"lineNumber":40,"author":{"gitId":"ong6"},"content":"    public static final Endpoint GET1 \u003d new EndpointBuilder().withMethod(\"GET\")"},{"lineNumber":41,"author":{"gitId":"ong6"},"content":"            .withAddress(\"https://cat-fact.herokuapp.com/facts/random?animal_type\u003dcat\u0026amount\u003d2\").build();"},{"lineNumber":42,"author":{"gitId":"ong6"},"content":"    public static final Endpoint GET2 \u003d new EndpointBuilder().withMethod(\"GET\")"},{"lineNumber":43,"author":{"gitId":"ong6"},"content":"            .withAddress(\"https://cat-fact.herokuapp.com/facts\").build();"},{"lineNumber":44,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":45,"author":{"gitId":"tjtanjin"},"content":"    // Manually added - Endpoint\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":46,"author":{"gitId":"ong6"},"content":"    public static final Endpoint GET3 \u003d new EndpointBuilder().withMethod(VALID_METHOD_GET)"},{"lineNumber":47,"author":{"gitId":"ong6"},"content":"            .withAddress(VALID_ADDRESS_RANDOM).withTags(VALID_TAG_COOL).build();"},{"lineNumber":48,"author":{"gitId":"ong6"},"content":"    public static final Endpoint POST1 \u003d new EndpointBuilder().withMethod(VALID_METHOD_POST)"},{"lineNumber":49,"author":{"gitId":"ong6"},"content":"            .withAddress(VALID_ADDRESS_FACT).withTags(VALID_TAG_CAT, VALID_TAG_COOL).build();"},{"lineNumber":50,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":51,"author":{"gitId":"ong6"},"content":"    public static final String KEYWORD_MATCHING_GET \u003d \"GET\"; // A keyword that matches MEIER"},{"lineNumber":52,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":53,"author":{"gitId":"ong6"},"content":"    private TypicalEndpoints() {"},{"lineNumber":54,"author":{"gitId":"ong6"},"content":"    } // prevents instantiation"},{"lineNumber":55,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":56,"author":{"gitId":"tjtanjin"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"tjtanjin"},"content":"     * Returns an {@code EndpointList} with all the typical endpoints."},{"lineNumber":58,"author":{"gitId":"tjtanjin"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"tjtanjin"},"content":"    public static EndpointList getTypicalEndpointList() {"},{"lineNumber":60,"author":{"gitId":"tjtanjin"},"content":"        EndpointList ab \u003d new EndpointList();"},{"lineNumber":61,"author":{"gitId":"tjtanjin"},"content":"        for (Endpoint endpoint : getTypicalEndpoints()) {"},{"lineNumber":62,"author":{"gitId":"tjtanjin"},"content":"            ab.addEndpoint(endpoint);"},{"lineNumber":63,"author":{"gitId":"tjtanjin"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"tjtanjin"},"content":"        return ab;"},{"lineNumber":65,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":67,"author":{"gitId":"tjtanjin"},"content":"    public static List\u003cEndpoint\u003e getTypicalEndpoints() {"},{"lineNumber":68,"author":{"gitId":"ong6"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(GET, POST, PUT, DELETE, HEAD, OPTIONS, PATCH));"},{"lineNumber":69,"author":{"gitId":"tjtanjin"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"ong6":35,"tjtanjin":35}},{"path":"src/test/java/seedu/us/among/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.testutil;"},{"lineNumber":2,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":""},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"tjtanjin"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitId":"tjtanjin"},"content":" */"},{"lineNumber":8,"author":{"gitId":"tjtanjin"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitId":"tjtanjin"},"content":"    public static final Index INDEX_FIRST_ENDPOINT \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitId":"tjtanjin"},"content":"    public static final Index INDEX_SECOND_ENDPOINT \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitId":"tjtanjin"},"content":"    public static final Index INDEX_THIRD_ENDPOINT \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitId":"tjtanjin"},"content":"}"}],"authorContributionMap":{"tjtanjin":12}},{"path":"src/test/java/seedu/us/among/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file."},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        setText(text);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String getText() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return text;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setText(String text) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.text \u003d text;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":1,"-":34}},{"path":"src/test/java/seedu/us/among/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tjtanjin"},"content":"package seedu.us.among.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"tjtanjin"},"content":"import static seedu.us.among.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitId":"tjtanjin"},"content":"import seedu.us.among.ImPoster;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d ImPoster.class.getResource(testFilePathInView);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tjtanjin":3,"-":111}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"\u003c?import seedu.us.among.ui.TestFxmlObject?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"}],"authorContributionMap":{"-":3,"tjtanjin":1}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tjtanjin"},"content":"\u003c?import seedu.us.among.ui.TestFxmlObject?\u003e"},{"lineNumber":4,"author":{"gitId":"tjtanjin"},"content":"\u003cfx:root type\u003d\"TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""},{"lineNumber":5,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"-":5,"tjtanjin":2}}]
