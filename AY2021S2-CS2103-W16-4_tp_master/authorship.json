[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Bennyphoe"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103-W16-4/tp/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"Bennyphoe"},"content":"This is a sample project for Managers of Tuition Centres"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Example usages:"},{"lineNumber":7,"author":{"gitId":"Bennyphoe"},"content":"- To allocate students and tutors to a specific class"},{"lineNumber":8,"author":{"gitId":"Bennyphoe"},"content":"- Determine class size"},{"lineNumber":9,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":10,"author":{"gitId":"Bennyphoe"},"content":"The project simulates an ongoing software project for a desktop application (called EZManage) used for"},{"lineNumber":11,"author":{"gitId":"Bennyphoe"},"content":"managing students, tutors and classes."},{"lineNumber":12,"author":{"gitId":"Bennyphoe"},"content":"- It is written in OOP fashion. It provides a reasonably well-written code base bigger (around 6 KLoC) than what students usually write in beginner-level SE modules,"},{"lineNumber":13,"author":{"gitId":"Bennyphoe"},"content":"  without being overwhelmingly big."},{"lineNumber":14,"author":{"gitId":"Bennyphoe"},"content":"- It comes with a reasonable level of user and developer documentation."},{"lineNumber":15,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":16,"author":{"gitId":"Bennyphoe"},"content":"It is named as EzManage as it allows tuition centres managers to easily manage"},{"lineNumber":17,"author":{"gitId":"Bennyphoe"},"content":"students, tutors and classes all in one single web application."},{"lineNumber":18,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":19,"author":{"gitId":"Bennyphoe"},"content":"For the detailed documentation of this project, see the [EZManage product website](https://ay2021s2-cs2103-w16-4.github.io/tp/)."},{"lineNumber":20,"author":{"gitId":"Bennyphoe"},"content":"This project is a part of the se-education.org initiative. If you would like to contribute code to this project, see se-education.org for more info."},{"lineNumber":21,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":22,"author":{"gitId":"Bennyphoe"},"content":"###Feature List"},{"lineNumber":23,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":24,"author":{"gitId":"Bennyphoe"},"content":"####Feature 1"},{"lineNumber":25,"author":{"gitId":"Bennyphoe"},"content":"Create Student"},{"lineNumber":26,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":27,"author":{"gitId":"Bennyphoe"},"content":"####Feature 2"},{"lineNumber":28,"author":{"gitId":"Bennyphoe"},"content":"Create Tutor"},{"lineNumber":29,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":30,"author":{"gitId":"Bennyphoe"},"content":"####Feature 3"},{"lineNumber":31,"author":{"gitId":"Bennyphoe"},"content":"Create Class"},{"lineNumber":32,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":33,"author":{"gitId":"Bennyphoe"},"content":"####Feature 4"},{"lineNumber":34,"author":{"gitId":"Bennyphoe"},"content":"Delete Student"},{"lineNumber":35,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":36,"author":{"gitId":"Bennyphoe"},"content":"####Feature 5"},{"lineNumber":37,"author":{"gitId":"Bennyphoe"},"content":"DELETE Tutor"},{"lineNumber":38,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":39,"author":{"gitId":"Bennyphoe"},"content":"####Feature 6"},{"lineNumber":40,"author":{"gitId":"Bennyphoe"},"content":"DELETE Class"},{"lineNumber":41,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":42,"author":{"gitId":"Bennyphoe"},"content":"####Feature 7"},{"lineNumber":43,"author":{"gitId":"Bennyphoe"},"content":"View Students"},{"lineNumber":44,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":45,"author":{"gitId":"Bennyphoe"},"content":"####Feature 8"},{"lineNumber":46,"author":{"gitId":"Bennyphoe"},"content":"View Tutors"},{"lineNumber":47,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":48,"author":{"gitId":"Bennyphoe"},"content":"####Feature 9"},{"lineNumber":49,"author":{"gitId":"Bennyphoe"},"content":"View Classes"},{"lineNumber":50,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":51,"author":{"gitId":"Bennyphoe"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)"}],"authorContributionMap":{"Bennyphoe":47,"-":4}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"### Kuek Yan Ling"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"\u003cimg src\u003d\"images/yanlingkuek.png\" width\u003d\"200px\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"[[github](https://github.com/yanlingkuek)]"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"[[portfolio](team/yanlingkuek.md)]"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"jingxueguo"},"content":"- Role: Developer"},{"lineNumber":19,"author":{"gitId":"jingxueguo"},"content":"- Responsibilities: Deliverables and Deadlines"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"Bennyphoe"},"content":"### Phoe Chuan Yi, Benny"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"\u003cimg src\u003d\"images/bennyphoe.png\" width\u003d\"200px\"\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Bennyphoe"},"content":"[[github](http://github.com/Bennyphoe)]"},{"lineNumber":26,"author":{"gitId":"Bennyphoe"},"content":"[[portfolio](team/benny.md)]"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"jingxueguo"},"content":"- Role: Developer"},{"lineNumber":29,"author":{"gitId":"jingxueguo"},"content":"- Responsibilities: Documentation, Scheduling \u0026 Tracking"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"jingxueguo"},"content":"### Guo Jingxue"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"\u003cimg src\u003d\"images/jingxueguo.png\" width\u003d\"200px\"\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"jingxueguo"},"content":"[[github](http://github.com/jingxueguo)]"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"jingxueguo"},"content":"[[portfolio](team/jingxue.md)]"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"jingxueguo"},"content":"- Role: Developer"},{"lineNumber":40,"author":{"gitId":"jingxueguo"},"content":"- Responsibilities: Code Quality"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"### Chanell Ng"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"\u003cimg src\u003d\"images/chanellng.png\" width\u003d\"200px\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":"[[github](http://github.com/chanellNg)]"},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"[[portfolio](team/chanellNg.md)]"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"jingxueguo"},"content":"- Role: Team Lead, Git expert"},{"lineNumber":50,"author":{"gitId":"jingxueguo"},"content":"- Responsibilities: UI"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"car155"},"content":"### Carissa Ying"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":"\u003cimg src\u003d\"images/car155.png\" width\u003d\"200px\"\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"car155"},"content":"[[github](https://github.com/car155)]"},{"lineNumber":57,"author":{"gitId":"car155"},"content":"[[portfolio](team/carissaying.md)]"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":60,"author":{"gitId":"car155"},"content":"* Responsibilities: Integration, Testing"},{"lineNumber":61,"author":{"gitId":"car155"},"content":""}],"authorContributionMap":{"jingxueguo":11,"car155":5,"yanlingkuek":7,"chanellNg":4,"-":31,"Bennyphoe":3}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"car155"},"content":"Step 3. The user executes `add_person n/David …​` to add a new person. The `add_person` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"car155"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add_person n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"car155"},"content":"* has a need to manage a significant number of student contacts"},{"lineNumber":240,"author":{"gitId":"car155"},"content":"* has a need to allocate classes and teachers in a tuition center"},{"lineNumber":241,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":242,"author":{"gitId":"-"},"content":"* can type fast"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":244,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"car155"},"content":"**Value proposition**: manage contacts and allocations faster than a typical mouse/GUI driven app"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"| Priority | As a …​                                | I want to …​                    | So that I can…​                                           |"},{"lineNumber":254,"author":{"gitId":"car155"},"content":"| -------- | --------------------------------------| ------------------------------ | -------------------------------------------------------- |"},{"lineNumber":255,"author":{"gitId":"car155"},"content":"| `* * *`  | manager                               | add a new tutor                |                                                          |"},{"lineNumber":256,"author":{"gitId":"car155"},"content":"| `* * *`  | manager                               | add a new student              |                                                          |"},{"lineNumber":257,"author":{"gitId":"car155"},"content":"| `* * *`  | manager                               | add a new class slot with a specified subject and time frame | so that I am able to allocate students and tutors correctly     |"},{"lineNumber":258,"author":{"gitId":"car155"},"content":"| `* * *`  | manager                               | delete a student               | remove students that are no longer enrolled in the tuition center               |"},{"lineNumber":259,"author":{"gitId":"car155"},"content":"| `* * *`  | manager                               | delete a tutor                 | remove tutors that are no longer working for the tuition center               |"},{"lineNumber":260,"author":{"gitId":"car155"},"content":"| `* * *`  | manager                               | view the full list of tutors   |                                                          |"},{"lineNumber":261,"author":{"gitId":"car155"},"content":"| `* * *`  | manager                               | view the full list of students |                                                          |"},{"lineNumber":262,"author":{"gitId":"car155"},"content":"| `* * *`  | manager                               | view the full list of classes  |                                                          |"},{"lineNumber":263,"author":{"gitId":"car155"},"content":"| `* * *`  | manager                               | view a specific tutor\u0027s details      |                                                    |"},{"lineNumber":264,"author":{"gitId":"car155"},"content":"| `* * *`  | manager                               | view a specific student\u0027s details    |                                                    |"},{"lineNumber":265,"author":{"gitId":"car155"},"content":"| `* * *`  | manager                               | allocate a tutor to a specific class    |                                                 |"},{"lineNumber":266,"author":{"gitId":"car155"},"content":"| `* * *`  | manager                               | allocate a student to a specific class  |                                                 |"},{"lineNumber":267,"author":{"gitId":"car155"},"content":"| `* * `   | manager                               | delete a class                 | remove classes that are no longer available              |"},{"lineNumber":268,"author":{"gitId":"car155"},"content":"| `* * `   | manager                               | edit tutor information         | ensure tutor information are up to date                  |"},{"lineNumber":269,"author":{"gitId":"car155"},"content":"| `* * `   | manager                               | edit student information       | ensure student information are up to date                |"},{"lineNumber":270,"author":{"gitId":"car155"},"content":"| `* * `   | manager                               | manage of class enrollment size  | be aware of how many more students should be allocated to this class |"},{"lineNumber":271,"author":{"gitId":"car155"},"content":"| `* * `   | manager                               | filter out suitable tutors by available timings and subjects    | allocate a suitable tutor to a class |"},{"lineNumber":272,"author":{"gitId":"car155"},"content":"| `* `     | manager                               | update and check the status of students’ bills  |                                         |"},{"lineNumber":273,"author":{"gitId":"car155"},"content":"| `* `     | manager                               | update and check the status of payments owed to tutors |                                  |"},{"lineNumber":274,"author":{"gitId":"car155"},"content":"| `* `     | manager                               | get notified when students’ bills are due |                                               |"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"(For all use cases below, the **System** is the `AddressBook` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"jingxueguo"},"content":""},{"lineNumber":283,"author":{"gitId":"jingxueguo"},"content":"**Use case: Add a person**"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"jingxueguo"},"content":"1. User requests to add a tutor or student in the list"},{"lineNumber":288,"author":{"gitId":"jingxueguo"},"content":"2. AddressBook adds the Person"},{"lineNumber":289,"author":{"gitId":"jingxueguo"},"content":""},{"lineNumber":290,"author":{"gitId":"jingxueguo"},"content":"    Use case ends"},{"lineNumber":291,"author":{"gitId":"jingxueguo"},"content":""},{"lineNumber":292,"author":{"gitId":"jingxueguo"},"content":"**Use case: Add a class**"},{"lineNumber":293,"author":{"gitId":"jingxueguo"},"content":""},{"lineNumber":294,"author":{"gitId":"jingxueguo"},"content":"**MSS**"},{"lineNumber":295,"author":{"gitId":"jingxueguo"},"content":""},{"lineNumber":296,"author":{"gitId":"jingxueguo"},"content":"1. User requests to add a class to the database"},{"lineNumber":297,"author":{"gitId":"jingxueguo"},"content":"2. AddressBook adds the class"},{"lineNumber":298,"author":{"gitId":"jingxueguo"},"content":""},{"lineNumber":299,"author":{"gitId":"jingxueguo"},"content":"   Use case ends"},{"lineNumber":300,"author":{"gitId":"jingxueguo"},"content":""},{"lineNumber":301,"author":{"gitId":"yanlingkuek"},"content":"**Use case: Delete a student**"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"yanlingkuek"},"content":"1.  User requests to delete a specific student in the list of persons"},{"lineNumber":307,"author":{"gitId":"yanlingkuek"},"content":"2.  AddressBook deletes the student"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"yanlingkuek"},"content":"* 1a. The given ID is invalid."},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"yanlingkuek"},"content":"    * 1a1. AddressBook shows an error message."},{"lineNumber":316,"author":{"gitId":"-"},"content":"    "},{"lineNumber":317,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":321,"author":{"gitId":"-"},"content":""},{"lineNumber":322,"author":{"gitId":"chanellNg"},"content":"**Use case: View a tutor**"},{"lineNumber":323,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":324,"author":{"gitId":"chanellNg"},"content":"**MSS**"},{"lineNumber":325,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":326,"author":{"gitId":"chanellNg"},"content":"1.  User requests to list tutors"},{"lineNumber":327,"author":{"gitId":"chanellNg"},"content":"2.  AddressBook shows a list of tutors"},{"lineNumber":328,"author":{"gitId":"chanellNg"},"content":"3.  User requests to view a specific tutor in the list"},{"lineNumber":329,"author":{"gitId":"chanellNg"},"content":"4.  AddressBook shows the specific tutor\u0027s details"},{"lineNumber":330,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":331,"author":{"gitId":"chanellNg"},"content":"    Use case ends."},{"lineNumber":332,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":333,"author":{"gitId":"chanellNg"},"content":"**Extensions**"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"-"},"content":"    * 3a1. AddressBook shows an error message."},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":340,"author":{"gitId":"-"},"content":"    "},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":343,"author":{"gitId":"-"},"content":""},{"lineNumber":344,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":345,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":346,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":347,"author":{"gitId":"Bennyphoe"},"content":"4.  Application should be scalable in the sense of adding more entities in the future"},{"lineNumber":348,"author":{"gitId":"Bennyphoe"},"content":"5.  Reliability, application should not crash and handles exception properly "},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":354,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":363,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":376,"author":{"gitId":"-"},"content":""},{"lineNumber":377,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":380,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":391,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":394,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":397,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":406,"author":{"gitId":"-"},"content":""},{"lineNumber":407,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"jingxueguo":16,"car155":26,"yanlingkuek":5,"chanellNg":12,"-":346,"Bennyphoe":2}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"EzManage is a **desktop app for managing students, tutors and classes, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). It is named as EzManage as it allows tuition centres managers to easily manage students, tutors and classes all in one single web application."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"1. Download the latest `ezmanage.jar`. [coming soon!]"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"# from [here](https://github.com/se-edu/addressbook-level3/releases)."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your EzManage."},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"   * **`list`** : Lists all contacts."},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"jingxueguo"},"content":"   * **`add`**`tp/student n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a student named `John Doe` to the Contact List."},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"   * **`delete`**`t/3` : Deletes the tutor with the ID `t/3` from the tutor list."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     "},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"   * **`assign`** : Assigns student or tutor to a specific class (Coming Soon!)."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"   * **`clear`** : Deletes all contacts."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"car155"},"content":"  e.g. in `add_person n/NAME`, `NAME` is a parameter which can be used as `add_person n/John Doe`."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"jingxueguo"},"content":"Shows a message explaining how to access the help page."},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"jingxueguo"},"content":"### Adding a Tutor, Student or Class: `add`"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"jingxueguo"},"content":"Adds a tutor, student or class to the contact list."},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"jingxueguo"},"content":"Format: "},{"lineNumber":84,"author":{"gitId":"jingxueguo"},"content":""},{"lineNumber":85,"author":{"gitId":"car155"},"content":"For Person: `add_person tp/ROLE n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​`"},{"lineNumber":86,"author":{"gitId":"car155"},"content":"For Class: `add_session d/DAY t/TIMESLOT l/LEVEL s/SUBJECT [t/TAG]…​`"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":93,"author":{"gitId":"car155"},"content":"* `add_person tp/student n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":94,"author":{"gitId":"car155"},"content":"* `add_person tp/tutor n/Betsy Crowe p/91234567 e/betsyc@example.come a/Betsy street`"},{"lineNumber":95,"author":{"gitId":"car155"},"content":"* `add_session d/Saturday t/1300 to 1500 l/Upper Secondary s/A Math`"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"### Listing all persons : `list`"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"Shows a list of all persons in the address book."},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"chanellNg"},"content":"### Viewing a tutor : `view`"},{"lineNumber":104,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":105,"author":{"gitId":"chanellNg"},"content":"Views an existing tutor\u0027s details."},{"lineNumber":106,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":107,"author":{"gitId":"chanellNg"},"content":"Format: `view t/ID`"},{"lineNumber":108,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":109,"author":{"gitId":"chanellNg"},"content":"* Views the tutor with the specified tutor ID."},{"lineNumber":110,"author":{"gitId":"chanellNg"},"content":"* Tutor’s name, contact number, existing classes, email and address will be given."},{"lineNumber":111,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":112,"author":{"gitId":"chanellNg"},"content":"Example:"},{"lineNumber":113,"author":{"gitId":"chanellNg"},"content":"* `view t/1` views the details of the tutor with tutor ID 1."},{"lineNumber":114,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":115,"author":{"gitId":"chanellNg"},"content":"### Viewing a student : `view`"},{"lineNumber":116,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":117,"author":{"gitId":"chanellNg"},"content":"Views an existing student\u0027s details."},{"lineNumber":118,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":119,"author":{"gitId":"chanellNg"},"content":"Format: `view s/ID`"},{"lineNumber":120,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":121,"author":{"gitId":"chanellNg"},"content":"* Views the student with the specified student ID."},{"lineNumber":122,"author":{"gitId":"chanellNg"},"content":"* Student’s name, contact number, email and address will be given."},{"lineNumber":123,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":124,"author":{"gitId":"chanellNg"},"content":"Example:"},{"lineNumber":125,"author":{"gitId":"chanellNg"},"content":"* `view s/1` views the details of the student with student ID 1."},{"lineNumber":126,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":127,"author":{"gitId":"chanellNg"},"content":"### Viewing a class : `view`"},{"lineNumber":128,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":129,"author":{"gitId":"chanellNg"},"content":"Views an existing class\u0027s details."},{"lineNumber":130,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":131,"author":{"gitId":"chanellNg"},"content":"Format: `view c/ID`"},{"lineNumber":132,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":133,"author":{"gitId":"chanellNg"},"content":"* Views the class with the specified class ID."},{"lineNumber":134,"author":{"gitId":"chanellNg"},"content":"* The class\u0027s assigned tutor, assigned students, time slot, subject and class size will be given."},{"lineNumber":135,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":136,"author":{"gitId":"chanellNg"},"content":"Example:"},{"lineNumber":137,"author":{"gitId":"chanellNg"},"content":"* `view c/1` views the details of the class with class ID 1."},{"lineNumber":138,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":139,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":140,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":141,"author":{"gitId":"jingxueguo"},"content":"### Editing a person : `edit` (coming soon)"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"Edits an existing person in the address book."},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":148,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":149,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":150,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":151,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    specifying any tags after it."},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":155,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":156,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"jingxueguo"},"content":"### Locating persons by name: `find` (coming soon)"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords."},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":166,"author":{"gitId":"-"},"content":"* Only the name is searched."},{"lineNumber":167,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":168,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":169,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":172,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`"},{"lineNumber":173,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"yanlingkuek"},"content":"### Deleting a tutor/student/class : `delete`"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"yanlingkuek"},"content":"Deletes the specified person from the list of tutors, students or classes."},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"yanlingkuek"},"content":"Format:\u003cbr\u003e"},{"lineNumber":181,"author":{"gitId":"yanlingkuek"},"content":"`delete t/ID` for tutors\u003cbr\u003e"},{"lineNumber":182,"author":{"gitId":"yanlingkuek"},"content":"`delete s/ID` for students\u003cbr\u003e"},{"lineNumber":183,"author":{"gitId":"yanlingkuek"},"content":"`delete c/ID` for classes"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"yanlingkuek"},"content":"* Deletes the tutor/student/class at the specified ID from the list of tutors/students/classes."},{"lineNumber":186,"author":{"gitId":"yanlingkuek"},"content":"* The index refers to the ID shown in the displayed tutor/student/class list."},{"lineNumber":187,"author":{"gitId":"yanlingkuek"},"content":"* The index must be a in the format of:\u003cbr\u003e"},{"lineNumber":188,"author":{"gitId":"yanlingkuek"},"content":"`t/ID` for tutors\u003cbr\u003e"},{"lineNumber":189,"author":{"gitId":"yanlingkuek"},"content":"`s/ID` for students\u003cbr\u003e"},{"lineNumber":190,"author":{"gitId":"yanlingkuek"},"content":"`c/ID` for classes"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":193,"author":{"gitId":"yanlingkuek"},"content":"* `delete t/1` deletes the tutor with the ID `t/1` from the tutor list."},{"lineNumber":194,"author":{"gitId":"yanlingkuek"},"content":"* `delete c/25` deletes the class with the ID `c/25` from the class list."},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"yanlingkuek"},"content":"Clears all entries from the list of students, tutors and classes."},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"yanlingkuek"},"content":"EzManage data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"yanlingkuek"},"content":"EzManage data are saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":217,"author":{"gitId":"-"},"content":"If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run."},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":229,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder."},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":236,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":237,"author":{"gitId":"car155"},"content":"**Add** | For Person:`add_person tp/ROLE n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add_person tp/student n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665`\u003cbr\u003e For Class: `add_session d/Saturday t/1300 to 1500 l/Upper Secondary s/A Math` \u003cbr\u003e e.g. `add_session d/Saturday t/1300 to 1500 l/Upper Secondary s/A Math` "},{"lineNumber":238,"author":{"gitId":"-"},"content":"**Clear** | `clear`"},{"lineNumber":239,"author":{"gitId":"yanlingkuek"},"content":"**Delete** | Tutor \u003cbr\u003e `delete t/ID`\u003cbr\u003e e.g., `delete t/8`\u003cbr\u003e\u003cbr\u003e Student \u003cbr\u003e `delete s/ID`\u003cbr\u003e e.g., `delete s/22` \u003cbr\u003e\u003cbr\u003e Class\u003cbr\u003e`delete c/ID` \u003cbr\u003e e.g., `delete c/9`"},{"lineNumber":240,"author":{"gitId":"-"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":241,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`"},{"lineNumber":242,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":243,"author":{"gitId":"-"},"content":"**Help** | `help`"}],"authorContributionMap":{"jingxueguo":8,"car155":7,"yanlingkuek":24,"chanellNg":38,"-":166}},{"path":"docs/diagrams/LogicClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor LOGIC_COLOR_T4"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor LOGIC_COLOR"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Logic {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"package Parser {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface Parser \u003c\u003cInterface\u003e\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class AddressBookParser"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class XYZCommandParser"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class CliSyntax"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class ParserUtil"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class ArgumentMultimap"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class ArgumentTokenizer"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class Prefix"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"package Command {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class XYZCommand"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class CommandResult"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nCommand\" as Command"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"Interface Logic \u003c\u003cInterface\u003e\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class LogicManager"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"package Model{"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF"},{"lineNumber":35,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Logic"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"LogicManager .up.|\u003e Logic"},{"lineNumber":38,"author":{"gitId":"-"},"content":"LogicManager --\u003e\"1\" AddressBookParser"},{"lineNumber":39,"author":{"gitId":"-"},"content":"AddressBookParser .left.\u003e XYZCommandParser: creates \u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e XYZCommand : creates \u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"XYZCommandParser ..|\u003e Parser"},{"lineNumber":43,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentMultimap"},{"lineNumber":44,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentTokenizer"},{"lineNumber":45,"author":{"gitId":"-"},"content":"ArgumentTokenizer .left.\u003e ArgumentMultimap"},{"lineNumber":46,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e CliSyntax"},{"lineNumber":47,"author":{"gitId":"-"},"content":"CliSyntax ..\u003e Prefix"},{"lineNumber":48,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ParserUtil"},{"lineNumber":49,"author":{"gitId":"-"},"content":"ParserUtil .down.\u003e Prefix"},{"lineNumber":50,"author":{"gitId":"-"},"content":"ArgumentTokenizer .down.\u003e Prefix"},{"lineNumber":51,"author":{"gitId":"-"},"content":"XYZCommand -up-|\u003e Command"},{"lineNumber":52,"author":{"gitId":"-"},"content":"LogicManager .left.\u003e Command : executes \u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"LogicManager --\u003e Model"},{"lineNumber":55,"author":{"gitId":"-"},"content":"Command .right.\u003e Model"},{"lineNumber":56,"author":{"gitId":"car155"},"content":"note right of XYZCommand: XYZCommand \u003d AddPersonCommand, \\nFindCommand, etc"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"Logic ..\u003e CommandResult"},{"lineNumber":59,"author":{"gitId":"-"},"content":"LogicManager .down.\u003e CommandResult"},{"lineNumber":60,"author":{"gitId":"-"},"content":"Command .up.\u003e CommandResult"},{"lineNumber":61,"author":{"gitId":"-"},"content":"CommandResult -[hidden]-\u003e Parser"},{"lineNumber":62,"author":{"gitId":"-"},"content":"@enduml"}],"authorContributionMap":{"car155":1,"-":61}},{"path":"docs/team/yanlingkuek.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"title: Kuek Yan Ling\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"yanlingkuek":1,"-":45}},{"path":"src/main/java/seedu/address/logic/commands/AddPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"Bennyphoe"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TYPE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Adds a person to the address book."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"car155"},"content":"public class AddPersonCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"car155"},"content":"    public static final String COMMAND_WORD \u003d \"add_person\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitId":"Bennyphoe"},"content":"            + PREFIX_PERSON_TYPE + \"PERSON_TYPE \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitId":"Bennyphoe"},"content":"            + PREFIX_PERSON_TYPE + \"student \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"car155"},"content":"     * Creates an AddPersonCommand to add the specified {@code Person}"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"car155"},"content":"    public AddPersonCommand(Person person) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitId":"car155"},"content":"                || (other instanceof AddPersonCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitId":"car155"},"content":"                \u0026\u0026 toAdd.equals(((AddPersonCommand) other).toAdd));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"car155":6,"-":61,"Bennyphoe":3}},{"path":"src/main/java/seedu/address/logic/commands/AddSessionCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"car155"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"car155"},"content":""},{"lineNumber":3,"author":{"gitId":"car155"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"car155"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"},{"lineNumber":5,"author":{"gitId":"car155"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":6,"author":{"gitId":"car155"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"car155"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESLOT;"},{"lineNumber":8,"author":{"gitId":"car155"},"content":""},{"lineNumber":9,"author":{"gitId":"car155"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"car155"},"content":"import seedu.address.model.session.Session;"},{"lineNumber":11,"author":{"gitId":"car155"},"content":""},{"lineNumber":12,"author":{"gitId":"car155"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"car155"},"content":" * Adds a session to the address book."},{"lineNumber":14,"author":{"gitId":"car155"},"content":" */"},{"lineNumber":15,"author":{"gitId":"car155"},"content":"public class AddSessionCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"car155"},"content":"    public static final String COMMAND_WORD \u003d \"add_session\";"},{"lineNumber":17,"author":{"gitId":"car155"},"content":""},{"lineNumber":18,"author":{"gitId":"car155"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a tuition session to the manager. \""},{"lineNumber":19,"author":{"gitId":"car155"},"content":"            + \"Parameters: \""},{"lineNumber":20,"author":{"gitId":"car155"},"content":"            + PREFIX_DAY + \"DAY \""},{"lineNumber":21,"author":{"gitId":"car155"},"content":"            + PREFIX_TIMESLOT + \"TIMESLOT \""},{"lineNumber":22,"author":{"gitId":"car155"},"content":"            + PREFIX_SUBJECT + \"SUBJECT \""},{"lineNumber":23,"author":{"gitId":"car155"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":24,"author":{"gitId":"car155"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":25,"author":{"gitId":"car155"},"content":"            + PREFIX_DAY + \"Wednesday \""},{"lineNumber":26,"author":{"gitId":"car155"},"content":"            + PREFIX_TIMESLOT + \"12:30 to 14:30 \""},{"lineNumber":27,"author":{"gitId":"car155"},"content":"            + PREFIX_SUBJECT + \"Piano \""},{"lineNumber":28,"author":{"gitId":"car155"},"content":"            + PREFIX_TAG + \"music\";"},{"lineNumber":29,"author":{"gitId":"car155"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New session added: %1$s\";"},{"lineNumber":30,"author":{"gitId":"car155"},"content":""},{"lineNumber":31,"author":{"gitId":"car155"},"content":"    private final Session toAdd;"},{"lineNumber":32,"author":{"gitId":"car155"},"content":""},{"lineNumber":33,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"car155"},"content":"     * Creates an AddSessionCommand to add the specified {@code Person}"},{"lineNumber":35,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"car155"},"content":"    public AddSessionCommand(Session session) {"},{"lineNumber":37,"author":{"gitId":"car155"},"content":"        requireNonNull(session);"},{"lineNumber":38,"author":{"gitId":"car155"},"content":"        toAdd \u003d session;"},{"lineNumber":39,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"car155"},"content":""},{"lineNumber":41,"author":{"gitId":"car155"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"car155"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":43,"author":{"gitId":"car155"},"content":"        requireNonNull(model);"},{"lineNumber":44,"author":{"gitId":"car155"},"content":""},{"lineNumber":45,"author":{"gitId":"car155"},"content":"        model.addSession(toAdd);"},{"lineNumber":46,"author":{"gitId":"car155"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":47,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"car155"},"content":""},{"lineNumber":49,"author":{"gitId":"car155"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"car155"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitId":"car155"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitId":"car155"},"content":"                || (other instanceof AddSessionCommand // instanceof handles nulls"},{"lineNumber":53,"author":{"gitId":"car155"},"content":"                \u0026\u0026 toAdd.equals(((AddSessionCommand) other).toAdd));"},{"lineNumber":54,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"car155"},"content":"}"}],"authorContributionMap":{"car155":55}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"Bennyphoe"},"content":"import seedu.address.model.person.PersonType;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":134,"author":{"gitId":"Bennyphoe"},"content":"        private PersonType personType;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":139,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":140,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":147,"author":{"gitId":"Bennyphoe"},"content":"            setPersonType(toCopy.personType);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":151,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":152,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"Bennyphoe"},"content":"        public PersonType getPersonType() {"},{"lineNumber":190,"author":{"gitId":"Bennyphoe"},"content":"            return personType;"},{"lineNumber":191,"author":{"gitId":"Bennyphoe"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":193,"author":{"gitId":"Bennyphoe"},"content":"        public void setPersonType(PersonType personType) {"},{"lineNumber":194,"author":{"gitId":"Bennyphoe"},"content":"            this.personType \u003d personType;"},{"lineNumber":195,"author":{"gitId":"Bennyphoe"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":198,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":199,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":200,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":206,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":207,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":208,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":209,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":232,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":225,"Bennyphoe":11}},{"path":"src/main/java/seedu/address/logic/parser/AddPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"Bennyphoe"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TYPE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"car155"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"Bennyphoe"},"content":"import seedu.address.model.person.PersonType;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitId":"Bennyphoe"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":23,"author":{"gitId":"Bennyphoe"},"content":"import seedu.address.model.person.Tutor;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"car155"},"content":" * Parses input arguments and creates a new AddPersonCommand object"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"car155"},"content":"public class AddPersonCommandParser implements Parser\u003cAddPersonCommand\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"car155"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPersonCommand"},{"lineNumber":33,"author":{"gitId":"car155"},"content":"     * and returns an AddPersonCommand object for execution."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"car155"},"content":"    public AddPersonCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitId":"Bennyphoe"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PERSON_TYPE, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":39,"author":{"gitId":"Bennyphoe"},"content":"                        PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"Bennyphoe"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PERSON_TYPE, PREFIX_NAME,"},{"lineNumber":42,"author":{"gitId":"Bennyphoe"},"content":"                PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":44,"author":{"gitId":"car155"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":51,"author":{"gitId":"Bennyphoe"},"content":"        PersonType personType \u003d ParserUtil.parsePersonType(argMultimap.getValue(PREFIX_PERSON_TYPE).get());"},{"lineNumber":52,"author":{"gitId":"Bennyphoe"},"content":"        Person person \u003d returnPersonBasedOnType(personType.toString(), name, phone, email, address, tagList);"},{"lineNumber":53,"author":{"gitId":"car155"},"content":"        return new AddPersonCommand(person);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"Bennyphoe"},"content":"    private Person returnPersonBasedOnType(String personType, Name name, Phone phone, Email email,"},{"lineNumber":65,"author":{"gitId":"Bennyphoe"},"content":"                                           Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":66,"author":{"gitId":"Bennyphoe"},"content":"        if (personType.equals(\"student\")) {"},{"lineNumber":67,"author":{"gitId":"Bennyphoe"},"content":"            return new Student(name, phone, email, address, tags);"},{"lineNumber":68,"author":{"gitId":"Bennyphoe"},"content":"        } else {"},{"lineNumber":69,"author":{"gitId":"Bennyphoe"},"content":"            return new Tutor(name, phone, email, address, tags);"},{"lineNumber":70,"author":{"gitId":"Bennyphoe"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"Bennyphoe"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"car155":8,"-":47,"Bennyphoe":18}},{"path":"src/main/java/seedu/address/logic/parser/AddSessionCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"car155"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"car155"},"content":""},{"lineNumber":3,"author":{"gitId":"car155"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"car155"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"},{"lineNumber":5,"author":{"gitId":"car155"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":6,"author":{"gitId":"car155"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"car155"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESLOT;"},{"lineNumber":8,"author":{"gitId":"car155"},"content":""},{"lineNumber":9,"author":{"gitId":"car155"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"car155"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitId":"car155"},"content":""},{"lineNumber":12,"author":{"gitId":"car155"},"content":"import seedu.address.logic.commands.AddSessionCommand;"},{"lineNumber":13,"author":{"gitId":"car155"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"car155"},"content":"import seedu.address.model.session.Day;"},{"lineNumber":15,"author":{"gitId":"car155"},"content":"import seedu.address.model.session.Session;"},{"lineNumber":16,"author":{"gitId":"car155"},"content":"import seedu.address.model.session.Subject;"},{"lineNumber":17,"author":{"gitId":"car155"},"content":"import seedu.address.model.session.Timeslot;"},{"lineNumber":18,"author":{"gitId":"car155"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"car155"},"content":""},{"lineNumber":20,"author":{"gitId":"car155"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"car155"},"content":" * Parses input arguments and creates a new AddSessionCommand object"},{"lineNumber":22,"author":{"gitId":"car155"},"content":" */"},{"lineNumber":23,"author":{"gitId":"car155"},"content":"public class AddSessionCommandParser implements Parser\u003cAddSessionCommand\u003e {"},{"lineNumber":24,"author":{"gitId":"car155"},"content":""},{"lineNumber":25,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"car155"},"content":"     * Parses the given {@code String} of arguments in the context of the AddSessionCommand"},{"lineNumber":27,"author":{"gitId":"car155"},"content":"     * and returns an AddSessionCommand object for execution."},{"lineNumber":28,"author":{"gitId":"car155"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"car155"},"content":"    public AddSessionCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitId":"car155"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":32,"author":{"gitId":"car155"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DAY, PREFIX_TIMESLOT, PREFIX_SUBJECT, PREFIX_TAG);"},{"lineNumber":33,"author":{"gitId":"car155"},"content":""},{"lineNumber":34,"author":{"gitId":"car155"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DAY, PREFIX_TIMESLOT, PREFIX_SUBJECT)"},{"lineNumber":35,"author":{"gitId":"car155"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":36,"author":{"gitId":"car155"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSessionCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitId":"car155"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"car155"},"content":""},{"lineNumber":39,"author":{"gitId":"car155"},"content":"        Day day \u003d ParserUtil.parseDay(argMultimap.getValue(PREFIX_DAY).get());"},{"lineNumber":40,"author":{"gitId":"car155"},"content":"        Timeslot timeslot \u003d ParserUtil.parseTimeslot(argMultimap.getValue(PREFIX_TIMESLOT).get());"},{"lineNumber":41,"author":{"gitId":"car155"},"content":"        Subject subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT).get());"},{"lineNumber":42,"author":{"gitId":"car155"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":43,"author":{"gitId":"car155"},"content":""},{"lineNumber":44,"author":{"gitId":"car155"},"content":"        Session session \u003d new Session(day, timeslot, subject, tagList);"},{"lineNumber":45,"author":{"gitId":"car155"},"content":""},{"lineNumber":46,"author":{"gitId":"car155"},"content":"        return new AddSessionCommand(session);"},{"lineNumber":47,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"car155"},"content":""},{"lineNumber":49,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"car155"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":51,"author":{"gitId":"car155"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":52,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"car155"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":54,"author":{"gitId":"car155"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":55,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"car155"},"content":""},{"lineNumber":57,"author":{"gitId":"car155"},"content":"}"}],"authorContributionMap":{"car155":57}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"car155"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":10,"author":{"gitId":"car155"},"content":"import seedu.address.logic.commands.AddSessionCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"car155"},"content":"        case AddPersonCommand.COMMAND_WORD:"},{"lineNumber":49,"author":{"gitId":"car155"},"content":"            return new AddPersonCommandParser().parse(arguments);"},{"lineNumber":50,"author":{"gitId":"car155"},"content":""},{"lineNumber":51,"author":{"gitId":"car155"},"content":"        case AddSessionCommand.COMMAND_WORD:"},{"lineNumber":52,"author":{"gitId":"car155"},"content":"            return new AddSessionCommandParser().parse(arguments);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"car155":7,"-":73}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitId":"Bennyphoe"},"content":"    public static final Prefix PREFIX_PERSON_TYPE \u003d new Prefix(\"pt/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitId":"car155"},"content":"    public static final Prefix PREFIX_DAY \u003d new Prefix(\"d/\");"},{"lineNumber":16,"author":{"gitId":"car155"},"content":"    public static final Prefix PREFIX_TIMESLOT \u003d new Prefix(\"ts/\");"},{"lineNumber":17,"author":{"gitId":"car155"},"content":"    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"s/\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"car155":3,"-":14,"Bennyphoe":1}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitId":"Bennyphoe"},"content":"import seedu.address.model.person.PersonType;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitId":"car155"},"content":"import seedu.address.model.session.Day;"},{"lineNumber":18,"author":{"gitId":"car155"},"content":"import seedu.address.model.session.Subject;"},{"lineNumber":19,"author":{"gitId":"car155"},"content":"import seedu.address.model.session.Timeslot;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":28,"author":{"gitId":"car155"},"content":"    public static final String MESSAGE_INVALID_TIME \u003d \"Time given must be in HH:MM format.\";"},{"lineNumber":29,"author":{"gitId":"car155"},"content":"    public static final String MESSAGE_INVALID_TIMESLOT \u003d \"Timeslot given must be in \""},{"lineNumber":30,"author":{"gitId":"car155"},"content":"            + \"HH:MM:SS (start time) to HH:MM:SS (end time).\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"car155"},"content":"     * Parses a {@code String day} into an {@code Day}."},{"lineNumber":107,"author":{"gitId":"car155"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":108,"author":{"gitId":"car155"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"car155"},"content":"     * @throws ParseException if the given {@code day} is invalid."},{"lineNumber":110,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"car155"},"content":"    public static Day parseDay(String day) throws ParseException {"},{"lineNumber":112,"author":{"gitId":"car155"},"content":"        requireNonNull(day);"},{"lineNumber":113,"author":{"gitId":"car155"},"content":"        String trimmedDay \u003d day.trim();"},{"lineNumber":114,"author":{"gitId":"car155"},"content":"        if (!Day.isValidDay(trimmedDay)) {"},{"lineNumber":115,"author":{"gitId":"car155"},"content":"            throw new ParseException(Day.MESSAGE_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitId":"car155"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"car155"},"content":"        return new Day(trimmedDay);"},{"lineNumber":118,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"car155"},"content":""},{"lineNumber":120,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"car155"},"content":"     * Parses a {@code String subject} into an {@code Subject}."},{"lineNumber":122,"author":{"gitId":"car155"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":123,"author":{"gitId":"car155"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"car155"},"content":"     * @throws ParseException if the given {@code subject} is invalid."},{"lineNumber":125,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"car155"},"content":"    public static Subject parseSubject(String subject) throws ParseException {"},{"lineNumber":127,"author":{"gitId":"car155"},"content":"        requireNonNull(subject);"},{"lineNumber":128,"author":{"gitId":"car155"},"content":"        String trimmedSubject \u003d subject.trim();"},{"lineNumber":129,"author":{"gitId":"car155"},"content":"        if (!Subject.isValidSubject(trimmedSubject)) {"},{"lineNumber":130,"author":{"gitId":"car155"},"content":"            throw new ParseException(Subject.MESSAGE_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitId":"car155"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"car155"},"content":"        return new Subject(trimmedSubject);"},{"lineNumber":133,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"car155"},"content":""},{"lineNumber":135,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"car155"},"content":"     * Parses a {@code String time} into an {@code LocalTime}."},{"lineNumber":137,"author":{"gitId":"car155"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":138,"author":{"gitId":"car155"},"content":"     *"},{"lineNumber":139,"author":{"gitId":"car155"},"content":"     * @throws ParseException if the given {@code time} is invalid."},{"lineNumber":140,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"car155"},"content":"    public static Timeslot parseTimeslot(String timeslot) throws ParseException {"},{"lineNumber":142,"author":{"gitId":"car155"},"content":"        requireNonNull(timeslot);"},{"lineNumber":143,"author":{"gitId":"car155"},"content":"        String trimmedTimeslot \u003d timeslot.trim();"},{"lineNumber":144,"author":{"gitId":"car155"},"content":"        if (!Timeslot.isValidTimeslot(trimmedTimeslot)) {"},{"lineNumber":145,"author":{"gitId":"car155"},"content":"            throw new ParseException(Timeslot.MESSAGE_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitId":"car155"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"car155"},"content":"        return new Timeslot(timeslot);"},{"lineNumber":148,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"car155"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"Bennyphoe"},"content":"    /**"},{"lineNumber":166,"author":{"gitId":"Bennyphoe"},"content":"     Parses a {@code String type} into a {@code PersonType}."},{"lineNumber":167,"author":{"gitId":"Bennyphoe"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":168,"author":{"gitId":"Bennyphoe"},"content":"     *"},{"lineNumber":169,"author":{"gitId":"Bennyphoe"},"content":"     * @throws ParseException if the given {@code type} is invalid."},{"lineNumber":170,"author":{"gitId":"Bennyphoe"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"Bennyphoe"},"content":"    public static PersonType parsePersonType(String type) throws ParseException {"},{"lineNumber":172,"author":{"gitId":"Bennyphoe"},"content":"        requireNonNull(type);"},{"lineNumber":173,"author":{"gitId":"Bennyphoe"},"content":"        String trimmedType \u003d type.trim();"},{"lineNumber":174,"author":{"gitId":"Bennyphoe"},"content":"        if (!PersonType.isValidPersonType(type)) {"},{"lineNumber":175,"author":{"gitId":"Bennyphoe"},"content":"            throw new ParseException(PersonType.MESSAGE_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitId":"Bennyphoe"},"content":"        } else {"},{"lineNumber":177,"author":{"gitId":"Bennyphoe"},"content":"            return new PersonType(type);"},{"lineNumber":178,"author":{"gitId":"Bennyphoe"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"Bennyphoe"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"car155":51,"-":124,"Bennyphoe":17}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":10,"author":{"gitId":"car155"},"content":"import seedu.address.model.session.Session;"},{"lineNumber":11,"author":{"gitId":"car155"},"content":"import seedu.address.model.session.SessionList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":20,"author":{"gitId":"car155"},"content":"    private final SessionList sessions;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"car155"},"content":"    public AddressBook() {"},{"lineNumber":34,"author":{"gitId":"car155"},"content":"        sessions \u003d new SessionList();"},{"lineNumber":35,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    //// person-level operations"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return persons.contains(person);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        persons.add(p);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        persons.remove(key);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"car155"},"content":"     * Adds a session to the address book."},{"lineNumber":116,"author":{"gitId":"car155"},"content":"     * The session must not already exist in the address book."},{"lineNumber":117,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"car155"},"content":"    public void addSession(Session s) {"},{"lineNumber":119,"author":{"gitId":"car155"},"content":"        sessions.add(s);"},{"lineNumber":120,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"car155"},"content":""},{"lineNumber":122,"author":{"gitId":"car155"},"content":"    @Override"},{"lineNumber":123,"author":{"gitId":"car155"},"content":"    public ObservableList\u003cSession\u003e getSessionList() {"},{"lineNumber":124,"author":{"gitId":"car155"},"content":"        return sessions.asUnmodifiableObservableList();"},{"lineNumber":125,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"car155"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return persons.hashCode();"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"car155":19,"-":119}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"car155"},"content":"import seedu.address.model.session.Session;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Deletes the given person."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * The person must exist in the address book."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Adds the given person."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    void addPerson(Person person);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":88,"author":{"gitId":"car155"},"content":""},{"lineNumber":89,"author":{"gitId":"car155"},"content":"    void addSession(Session session);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"car155":3,"-":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"car155"},"content":"import seedu.address.model.session.Session;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"car155"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"car155"},"content":"    public void addSession(Session session) {"},{"lineNumber":118,"author":{"gitId":"car155"},"content":"        requireNonNull(session);"},{"lineNumber":119,"author":{"gitId":"car155"},"content":"        addressBook.addSession(session);"},{"lineNumber":120,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"car155"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return filteredPersons;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"car155":7,"-":151}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitId":"car155"},"content":"import seedu.address.model.session.Session;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"car155"},"content":"     * Returns an unmodifiable view of the sessions list."},{"lineNumber":20,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"car155"},"content":"    ObservableList\u003cSession\u003e getSessionList();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"car155":5,"-":17}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"Bennyphoe"},"content":"    private PersonType personType;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"Bennyphoe"},"content":"    public PersonType getPersonType() {"},{"lineNumber":57,"author":{"gitId":"Bennyphoe"},"content":"        return personType;"},{"lineNumber":58,"author":{"gitId":"Bennyphoe"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":60,"author":{"gitId":"Bennyphoe"},"content":"    public void setPersonType(PersonType personType) {"},{"lineNumber":61,"author":{"gitId":"Bennyphoe"},"content":"        this.personType \u003d personType;"},{"lineNumber":62,"author":{"gitId":"Bennyphoe"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                .append(getAddress());"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":122,"Bennyphoe":9}},{"path":"src/main/java/seedu/address/model/person/PersonType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Bennyphoe"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":3,"author":{"gitId":"Bennyphoe"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Bennyphoe"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":6,"author":{"gitId":"Bennyphoe"},"content":"public class PersonType {"},{"lineNumber":7,"author":{"gitId":"Bennyphoe"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":8,"author":{"gitId":"Bennyphoe"},"content":"            \"PersonType should only be students or tutor, and it should not be blank\";"},{"lineNumber":9,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":10,"author":{"gitId":"Bennyphoe"},"content":"    /*"},{"lineNumber":11,"author":{"gitId":"Bennyphoe"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":12,"author":{"gitId":"Bennyphoe"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":13,"author":{"gitId":"Bennyphoe"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Bennyphoe"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":15,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":16,"author":{"gitId":"Bennyphoe"},"content":"    public final String personType;"},{"lineNumber":17,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":18,"author":{"gitId":"Bennyphoe"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Bennyphoe"},"content":"     * Constructs a {@code Name}."},{"lineNumber":20,"author":{"gitId":"Bennyphoe"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Bennyphoe"},"content":"     * @param type A valid name."},{"lineNumber":22,"author":{"gitId":"Bennyphoe"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Bennyphoe"},"content":"    public PersonType(String type) {"},{"lineNumber":24,"author":{"gitId":"Bennyphoe"},"content":"        requireNonNull(type);"},{"lineNumber":25,"author":{"gitId":"Bennyphoe"},"content":"        checkArgument(isValidPersonType(type), MESSAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitId":"Bennyphoe"},"content":"        personType \u003d type;"},{"lineNumber":27,"author":{"gitId":"Bennyphoe"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":29,"author":{"gitId":"Bennyphoe"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Bennyphoe"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":31,"author":{"gitId":"Bennyphoe"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Bennyphoe"},"content":"    public static boolean isValidPersonType(String test) {"},{"lineNumber":33,"author":{"gitId":"Bennyphoe"},"content":"        if (test.matches(VALIDATION_REGEX) \u0026\u0026 (test.equals(\"student\") || test.equals(\"tutor\"))) {"},{"lineNumber":34,"author":{"gitId":"Bennyphoe"},"content":"            return true;"},{"lineNumber":35,"author":{"gitId":"Bennyphoe"},"content":"        } else {"},{"lineNumber":36,"author":{"gitId":"Bennyphoe"},"content":"            return false;"},{"lineNumber":37,"author":{"gitId":"Bennyphoe"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"Bennyphoe"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":40,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":41,"author":{"gitId":"Bennyphoe"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"Bennyphoe"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"Bennyphoe"},"content":"        return personType;"},{"lineNumber":44,"author":{"gitId":"Bennyphoe"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":46,"author":{"gitId":"Bennyphoe"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"Bennyphoe"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitId":"Bennyphoe"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitId":"Bennyphoe"},"content":"                || (other instanceof PersonType // instanceof handles nulls"},{"lineNumber":50,"author":{"gitId":"Bennyphoe"},"content":"                \u0026\u0026 personType.equals(((PersonType) other).personType)); // state check"},{"lineNumber":51,"author":{"gitId":"Bennyphoe"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":53,"author":{"gitId":"Bennyphoe"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"Bennyphoe"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitId":"Bennyphoe"},"content":"        return personType.hashCode();"},{"lineNumber":56,"author":{"gitId":"Bennyphoe"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Bennyphoe"},"content":"}"}],"authorContributionMap":{"Bennyphoe":57}},{"path":"src/main/java/seedu/address/model/person/Student.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Bennyphoe"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":3,"author":{"gitId":"Bennyphoe"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":5,"author":{"gitId":"Bennyphoe"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":6,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":7,"author":{"gitId":"Bennyphoe"},"content":"public class Student extends Person {"},{"lineNumber":8,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":9,"author":{"gitId":"Bennyphoe"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Bennyphoe"},"content":"     * Every field must be present and not null."},{"lineNumber":11,"author":{"gitId":"Bennyphoe"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"Bennyphoe"},"content":"     * @param name"},{"lineNumber":13,"author":{"gitId":"Bennyphoe"},"content":"     * @param phone"},{"lineNumber":14,"author":{"gitId":"Bennyphoe"},"content":"     * @param email"},{"lineNumber":15,"author":{"gitId":"Bennyphoe"},"content":"     * @param address"},{"lineNumber":16,"author":{"gitId":"Bennyphoe"},"content":"     * @param tags"},{"lineNumber":17,"author":{"gitId":"Bennyphoe"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Bennyphoe"},"content":"    public Student(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":19,"author":{"gitId":"Bennyphoe"},"content":"        super(name, phone, email, address, tags);"},{"lineNumber":20,"author":{"gitId":"Bennyphoe"},"content":"        this.setPersonType(new PersonType(\"student\"));"},{"lineNumber":21,"author":{"gitId":"Bennyphoe"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":23,"author":{"gitId":"Bennyphoe"},"content":"}"}],"authorContributionMap":{"Bennyphoe":23}},{"path":"src/main/java/seedu/address/model/person/Tutor.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Bennyphoe"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":3,"author":{"gitId":"Bennyphoe"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":5,"author":{"gitId":"Bennyphoe"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":6,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":7,"author":{"gitId":"Bennyphoe"},"content":"public class Tutor extends Person {"},{"lineNumber":8,"author":{"gitId":"Bennyphoe"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Bennyphoe"},"content":"     * Every field must be present and not null."},{"lineNumber":10,"author":{"gitId":"Bennyphoe"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Bennyphoe"},"content":"     * @param name"},{"lineNumber":12,"author":{"gitId":"Bennyphoe"},"content":"     * @param phone"},{"lineNumber":13,"author":{"gitId":"Bennyphoe"},"content":"     * @param email"},{"lineNumber":14,"author":{"gitId":"Bennyphoe"},"content":"     * @param address"},{"lineNumber":15,"author":{"gitId":"Bennyphoe"},"content":"     * @param tags"},{"lineNumber":16,"author":{"gitId":"Bennyphoe"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Bennyphoe"},"content":"    public Tutor(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":18,"author":{"gitId":"Bennyphoe"},"content":"        super(name, phone, email, address, tags);"},{"lineNumber":19,"author":{"gitId":"Bennyphoe"},"content":"        this.setPersonType(new PersonType(\"tutor\"));"},{"lineNumber":20,"author":{"gitId":"Bennyphoe"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Bennyphoe"},"content":"}"}],"authorContributionMap":{"Bennyphoe":21}},{"path":"src/main/java/seedu/address/model/session/Day.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"car155"},"content":"package seedu.address.model.session;"},{"lineNumber":2,"author":{"gitId":"car155"},"content":""},{"lineNumber":3,"author":{"gitId":"car155"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"car155"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"car155"},"content":""},{"lineNumber":6,"author":{"gitId":"car155"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"car155"},"content":" * Represents a Session\u0027s day in the address book."},{"lineNumber":8,"author":{"gitId":"car155"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDay(String)}"},{"lineNumber":9,"author":{"gitId":"car155"},"content":" */"},{"lineNumber":10,"author":{"gitId":"car155"},"content":"public class Day {"},{"lineNumber":11,"author":{"gitId":"car155"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Days can only be of one of the following values:\\n\""},{"lineNumber":12,"author":{"gitId":"car155"},"content":"            + \"Monday, Tuesday, Wednesday, Thursday, Friday, Saturday and Sunday\\n\""},{"lineNumber":13,"author":{"gitId":"car155"},"content":"            + \"(not case sensitive)\";"},{"lineNumber":14,"author":{"gitId":"car155"},"content":""},{"lineNumber":15,"author":{"gitId":"car155"},"content":"    private enum DayValue {"},{"lineNumber":16,"author":{"gitId":"car155"},"content":"        MONDAY,"},{"lineNumber":17,"author":{"gitId":"car155"},"content":"        TUESDAY,"},{"lineNumber":18,"author":{"gitId":"car155"},"content":"        WEDNESDAY,"},{"lineNumber":19,"author":{"gitId":"car155"},"content":"        THURSDAY,"},{"lineNumber":20,"author":{"gitId":"car155"},"content":"        FRIDAY,"},{"lineNumber":21,"author":{"gitId":"car155"},"content":"        SATURDAY,"},{"lineNumber":22,"author":{"gitId":"car155"},"content":"        SUNDAY"},{"lineNumber":23,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"car155"},"content":""},{"lineNumber":25,"author":{"gitId":"car155"},"content":"    private DayValue day;"},{"lineNumber":26,"author":{"gitId":"car155"},"content":""},{"lineNumber":27,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"car155"},"content":"     * Constructs an {@code Day}."},{"lineNumber":29,"author":{"gitId":"car155"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"car155"},"content":"     * @param day A valid day."},{"lineNumber":31,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"car155"},"content":"    public Day(String day) {"},{"lineNumber":33,"author":{"gitId":"car155"},"content":"        requireNonNull(day);"},{"lineNumber":34,"author":{"gitId":"car155"},"content":"        checkArgument(isValidDay(day), MESSAGE_CONSTRAINTS);"},{"lineNumber":35,"author":{"gitId":"car155"},"content":"        this.day \u003d DayValue.valueOf(day.toUpperCase());"},{"lineNumber":36,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"car155"},"content":""},{"lineNumber":38,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"car155"},"content":"     * Returns if a given string is a valid day."},{"lineNumber":40,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"car155"},"content":"    public static boolean isValidDay(String test) {"},{"lineNumber":42,"author":{"gitId":"car155"},"content":"        String upperCaseTest \u003d test.toUpperCase();"},{"lineNumber":43,"author":{"gitId":"car155"},"content":""},{"lineNumber":44,"author":{"gitId":"car155"},"content":"        for (DayValue d : DayValue.values()) {"},{"lineNumber":45,"author":{"gitId":"car155"},"content":"            if (d.name().equals(upperCaseTest)) {"},{"lineNumber":46,"author":{"gitId":"car155"},"content":"                return true;"},{"lineNumber":47,"author":{"gitId":"car155"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"car155"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"car155"},"content":""},{"lineNumber":50,"author":{"gitId":"car155"},"content":"        return false;"},{"lineNumber":51,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"car155"},"content":""},{"lineNumber":53,"author":{"gitId":"car155"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"car155"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitId":"car155"},"content":"        return this.day.name();"},{"lineNumber":56,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"car155"},"content":"}"}],"authorContributionMap":{"car155":57}},{"path":"src/main/java/seedu/address/model/session/Session.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"car155"},"content":"package seedu.address.model.session;"},{"lineNumber":2,"author":{"gitId":"car155"},"content":""},{"lineNumber":3,"author":{"gitId":"car155"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"car155"},"content":""},{"lineNumber":5,"author":{"gitId":"car155"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"car155"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"car155"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitId":"car155"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"car155"},"content":""},{"lineNumber":10,"author":{"gitId":"car155"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"car155"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"car155"},"content":""},{"lineNumber":13,"author":{"gitId":"car155"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"car155"},"content":" * Represents a Session in the address book."},{"lineNumber":15,"author":{"gitId":"car155"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitId":"car155"},"content":" */"},{"lineNumber":17,"author":{"gitId":"car155"},"content":"public class Session {"},{"lineNumber":18,"author":{"gitId":"car155"},"content":"    private static int sessionCount \u003d 0;"},{"lineNumber":19,"author":{"gitId":"car155"},"content":""},{"lineNumber":20,"author":{"gitId":"car155"},"content":"    private final String classId;"},{"lineNumber":21,"author":{"gitId":"car155"},"content":"    private final Day day;"},{"lineNumber":22,"author":{"gitId":"car155"},"content":"    private final Timeslot timeslot;"},{"lineNumber":23,"author":{"gitId":"car155"},"content":"    private final Subject subject;"},{"lineNumber":24,"author":{"gitId":"car155"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"car155"},"content":"    private final Person tutor \u003d null;"},{"lineNumber":26,"author":{"gitId":"car155"},"content":"    private final ArrayList\u003cPerson\u003e students \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"car155"},"content":""},{"lineNumber":28,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"car155"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"car155"},"content":"    public Session(Day day, Timeslot timeslot, Subject subject, Set\u003cTag\u003e tags) {"},{"lineNumber":32,"author":{"gitId":"car155"},"content":"        sessionCount++;"},{"lineNumber":33,"author":{"gitId":"car155"},"content":"        requireAllNonNull(day, timeslot, subject);"},{"lineNumber":34,"author":{"gitId":"car155"},"content":"        this.classId \u003d \"c_\" + sessionCount;"},{"lineNumber":35,"author":{"gitId":"car155"},"content":"        this.day \u003d day;"},{"lineNumber":36,"author":{"gitId":"car155"},"content":"        this.timeslot \u003d timeslot;"},{"lineNumber":37,"author":{"gitId":"car155"},"content":"        this.subject \u003d subject;"},{"lineNumber":38,"author":{"gitId":"car155"},"content":"        this.tags.addAll(tags);"},{"lineNumber":39,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"car155"},"content":""},{"lineNumber":41,"author":{"gitId":"car155"},"content":"    public String getClassId() {"},{"lineNumber":42,"author":{"gitId":"car155"},"content":"        return classId;"},{"lineNumber":43,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"car155"},"content":""},{"lineNumber":45,"author":{"gitId":"car155"},"content":"    public Day getDay() {"},{"lineNumber":46,"author":{"gitId":"car155"},"content":"        return day;"},{"lineNumber":47,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"car155"},"content":""},{"lineNumber":49,"author":{"gitId":"car155"},"content":"    public Timeslot getTimeslot() {"},{"lineNumber":50,"author":{"gitId":"car155"},"content":"        return timeslot;"},{"lineNumber":51,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"car155"},"content":""},{"lineNumber":53,"author":{"gitId":"car155"},"content":"    public Subject getSubject() {"},{"lineNumber":54,"author":{"gitId":"car155"},"content":"        return subject;"},{"lineNumber":55,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"car155"},"content":""},{"lineNumber":57,"author":{"gitId":"car155"},"content":"    public Person getTutor() {"},{"lineNumber":58,"author":{"gitId":"car155"},"content":"        return tutor;"},{"lineNumber":59,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"car155"},"content":""},{"lineNumber":61,"author":{"gitId":"car155"},"content":"    public ArrayList\u003cPerson\u003e getStudents() {"},{"lineNumber":62,"author":{"gitId":"car155"},"content":"        return students;"},{"lineNumber":63,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"car155"},"content":""},{"lineNumber":65,"author":{"gitId":"car155"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":66,"author":{"gitId":"car155"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":67,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"car155"},"content":""},{"lineNumber":69,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"car155"},"content":"     * Adds a student to the session"},{"lineNumber":71,"author":{"gitId":"car155"},"content":"     * @param student The student to be added"},{"lineNumber":72,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"car155"},"content":"    public void assignStudent(Person student) {"},{"lineNumber":74,"author":{"gitId":"car155"},"content":"        requireAllNonNull(student);"},{"lineNumber":75,"author":{"gitId":"car155"},"content":"        this.students.add(student);"},{"lineNumber":76,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"car155"},"content":""},{"lineNumber":78,"author":{"gitId":"car155"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"car155"},"content":"    public String toString() {"},{"lineNumber":80,"author":{"gitId":"car155"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":81,"author":{"gitId":"car155"},"content":"        builder.append(this.getClassId())"},{"lineNumber":82,"author":{"gitId":"car155"},"content":"                .append(\"; Subject: \")"},{"lineNumber":83,"author":{"gitId":"car155"},"content":"                .append(this.getSubject())"},{"lineNumber":84,"author":{"gitId":"car155"},"content":"                .append(\"; Day: \")"},{"lineNumber":85,"author":{"gitId":"car155"},"content":"                .append(this.getDay())"},{"lineNumber":86,"author":{"gitId":"car155"},"content":"                .append(\"; Time: \")"},{"lineNumber":87,"author":{"gitId":"car155"},"content":"                .append(this.getTimeslot().toString())"},{"lineNumber":88,"author":{"gitId":"car155"},"content":"                .append(\"; Students: \")"},{"lineNumber":89,"author":{"gitId":"car155"},"content":"                .append(this.getStudents().toString());"},{"lineNumber":90,"author":{"gitId":"car155"},"content":""},{"lineNumber":91,"author":{"gitId":"car155"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":92,"author":{"gitId":"car155"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":93,"author":{"gitId":"car155"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":94,"author":{"gitId":"car155"},"content":"            tags.forEach(builder::append);"},{"lineNumber":95,"author":{"gitId":"car155"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"car155"},"content":""},{"lineNumber":97,"author":{"gitId":"car155"},"content":"        return builder.toString();"},{"lineNumber":98,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"car155"},"content":"}"}],"authorContributionMap":{"car155":99}},{"path":"src/main/java/seedu/address/model/session/SessionList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"car155"},"content":"package seedu.address.model.session;"},{"lineNumber":2,"author":{"gitId":"car155"},"content":""},{"lineNumber":3,"author":{"gitId":"car155"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"car155"},"content":""},{"lineNumber":5,"author":{"gitId":"car155"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":6,"author":{"gitId":"car155"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"car155"},"content":""},{"lineNumber":8,"author":{"gitId":"car155"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"car155"},"content":" * A list of sessions tht does not allow nulls."},{"lineNumber":10,"author":{"gitId":"car155"},"content":" *"},{"lineNumber":11,"author":{"gitId":"car155"},"content":" * Supports a minimal set of list operations."},{"lineNumber":12,"author":{"gitId":"car155"},"content":" */"},{"lineNumber":13,"author":{"gitId":"car155"},"content":"public class SessionList {"},{"lineNumber":14,"author":{"gitId":"car155"},"content":""},{"lineNumber":15,"author":{"gitId":"car155"},"content":"    private final ObservableList\u003cSession\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":16,"author":{"gitId":"car155"},"content":"    private final ObservableList\u003cSession\u003e internalUnmodifiableList \u003d"},{"lineNumber":17,"author":{"gitId":"car155"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":18,"author":{"gitId":"car155"},"content":""},{"lineNumber":19,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"car155"},"content":"     * Adds a session to the list."},{"lineNumber":21,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"car155"},"content":"    public void add(Session toAdd) {"},{"lineNumber":23,"author":{"gitId":"car155"},"content":"        requireNonNull(toAdd);"},{"lineNumber":24,"author":{"gitId":"car155"},"content":"        internalList.add(toAdd);"},{"lineNumber":25,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"car155"},"content":""},{"lineNumber":27,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"car155"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":29,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"car155"},"content":"    public ObservableList\u003cSession\u003e asUnmodifiableObservableList() {"},{"lineNumber":31,"author":{"gitId":"car155"},"content":"        return internalUnmodifiableList;"},{"lineNumber":32,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"car155"},"content":"}"}],"authorContributionMap":{"car155":33}},{"path":"src/main/java/seedu/address/model/session/Subject.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"car155"},"content":"package seedu.address.model.session;"},{"lineNumber":2,"author":{"gitId":"car155"},"content":""},{"lineNumber":3,"author":{"gitId":"car155"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"car155"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"car155"},"content":""},{"lineNumber":6,"author":{"gitId":"car155"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"car155"},"content":" * Represents a Subject in the address book."},{"lineNumber":8,"author":{"gitId":"car155"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidSubject(String)}"},{"lineNumber":9,"author":{"gitId":"car155"},"content":" */"},{"lineNumber":10,"author":{"gitId":"car155"},"content":"public class Subject {"},{"lineNumber":11,"author":{"gitId":"car155"},"content":""},{"lineNumber":12,"author":{"gitId":"car155"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"car155"},"content":"            \"Subjects should only contain alphanumeric characters, spaces, and dashes, and it should not be blank.\\n\""},{"lineNumber":14,"author":{"gitId":"car155"},"content":"            + \"Different words should be seperated by only a single space \u0027 \u0027 or dash \u0027-\u0027\";"},{"lineNumber":15,"author":{"gitId":"car155"},"content":""},{"lineNumber":16,"author":{"gitId":"car155"},"content":"    /*"},{"lineNumber":17,"author":{"gitId":"car155"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":18,"author":{"gitId":"car155"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"car155"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z0-9]+([ -][a-zA-Z0-9]+)*$\";"},{"lineNumber":21,"author":{"gitId":"car155"},"content":""},{"lineNumber":22,"author":{"gitId":"car155"},"content":"    public final String subject;"},{"lineNumber":23,"author":{"gitId":"car155"},"content":""},{"lineNumber":24,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"car155"},"content":"     * Constructs a {@code Subject}."},{"lineNumber":26,"author":{"gitId":"car155"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"car155"},"content":"     * @param subject A valid Subject."},{"lineNumber":28,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"car155"},"content":"    public Subject(String subject) {"},{"lineNumber":30,"author":{"gitId":"car155"},"content":"        requireNonNull(subject);"},{"lineNumber":31,"author":{"gitId":"car155"},"content":"        checkArgument(isValidSubject(subject), MESSAGE_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitId":"car155"},"content":"        this.subject \u003d subject.toUpperCase();"},{"lineNumber":33,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"car155"},"content":""},{"lineNumber":35,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"car155"},"content":"     * Returns true if a given string is a valid Subject."},{"lineNumber":37,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"car155"},"content":"    public static boolean isValidSubject(String test) {"},{"lineNumber":39,"author":{"gitId":"car155"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"car155"},"content":""},{"lineNumber":42,"author":{"gitId":"car155"},"content":""},{"lineNumber":43,"author":{"gitId":"car155"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"car155"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"car155"},"content":"        return subject;"},{"lineNumber":46,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"car155"},"content":"}"}],"authorContributionMap":{"car155":47}},{"path":"src/main/java/seedu/address/model/session/Time.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"car155"},"content":"package seedu.address.model.session;"},{"lineNumber":2,"author":{"gitId":"car155"},"content":""},{"lineNumber":3,"author":{"gitId":"car155"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"car155"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"car155"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitId":"car155"},"content":""},{"lineNumber":7,"author":{"gitId":"car155"},"content":"import java.time.LocalTime;"},{"lineNumber":8,"author":{"gitId":"car155"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"car155"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitId":"car155"},"content":""},{"lineNumber":11,"author":{"gitId":"car155"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"car155"},"content":" * Wrapper class for LocalTime."},{"lineNumber":13,"author":{"gitId":"car155"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"},{"lineNumber":14,"author":{"gitId":"car155"},"content":" */"},{"lineNumber":15,"author":{"gitId":"car155"},"content":"public class Time {"},{"lineNumber":16,"author":{"gitId":"car155"},"content":"    public static final String TIME_FORMAT \u003d \"HH:mm\";"},{"lineNumber":17,"author":{"gitId":"car155"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Time must be in the format: \" + TIME_FORMAT;"},{"lineNumber":18,"author":{"gitId":"car155"},"content":""},{"lineNumber":19,"author":{"gitId":"car155"},"content":"    private LocalTime time;"},{"lineNumber":20,"author":{"gitId":"car155"},"content":""},{"lineNumber":21,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"car155"},"content":"     * Constructs an {@code Time}."},{"lineNumber":23,"author":{"gitId":"car155"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"car155"},"content":"     * @param time A valid time."},{"lineNumber":25,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"car155"},"content":"    public Time(String time) {"},{"lineNumber":27,"author":{"gitId":"car155"},"content":"        requireNonNull(time);"},{"lineNumber":28,"author":{"gitId":"car155"},"content":"        checkArgument(isValidTime(time), MESSAGE_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitId":"car155"},"content":"        this.time \u003d LocalTime.parse(time, getFormatter());"},{"lineNumber":30,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"car155"},"content":""},{"lineNumber":32,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"car155"},"content":"     * Returns if a given string is a valid time."},{"lineNumber":34,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"car155"},"content":"    public static boolean isValidTime(String test) {"},{"lineNumber":36,"author":{"gitId":"car155"},"content":"        requireAllNonNull(test);"},{"lineNumber":37,"author":{"gitId":"car155"},"content":""},{"lineNumber":38,"author":{"gitId":"car155"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"car155"},"content":"            LocalTime.parse(test, getFormatter());"},{"lineNumber":40,"author":{"gitId":"car155"},"content":"            return true;"},{"lineNumber":41,"author":{"gitId":"car155"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":42,"author":{"gitId":"car155"},"content":"            return false;"},{"lineNumber":43,"author":{"gitId":"car155"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"car155"},"content":""},{"lineNumber":46,"author":{"gitId":"car155"},"content":"    public static DateTimeFormatter getFormatter() {"},{"lineNumber":47,"author":{"gitId":"car155"},"content":"        return DateTimeFormatter.ofPattern(TIME_FORMAT);"},{"lineNumber":48,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"car155"},"content":""},{"lineNumber":50,"author":{"gitId":"car155"},"content":"    public boolean isSame(Time other) {"},{"lineNumber":51,"author":{"gitId":"car155"},"content":"        return this.time.equals(other.time);"},{"lineNumber":52,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"car155"},"content":""},{"lineNumber":54,"author":{"gitId":"car155"},"content":"    public boolean isBefore(Time other) {"},{"lineNumber":55,"author":{"gitId":"car155"},"content":"        return this.time.isBefore(other.time);"},{"lineNumber":56,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"car155"},"content":""},{"lineNumber":58,"author":{"gitId":"car155"},"content":"    public boolean isAfter(Time other) {"},{"lineNumber":59,"author":{"gitId":"car155"},"content":"        return this.time.isAfter(other.time);"},{"lineNumber":60,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"car155"},"content":""},{"lineNumber":62,"author":{"gitId":"car155"},"content":"    public String toString() {"},{"lineNumber":63,"author":{"gitId":"car155"},"content":"        return this.time.toString();"},{"lineNumber":64,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"car155"},"content":"}"}],"authorContributionMap":{"car155":65}},{"path":"src/main/java/seedu/address/model/session/Timeslot.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"car155"},"content":"package seedu.address.model.session;"},{"lineNumber":2,"author":{"gitId":"car155"},"content":""},{"lineNumber":3,"author":{"gitId":"car155"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"car155"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"car155"},"content":""},{"lineNumber":6,"author":{"gitId":"car155"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"car155"},"content":" * Represents a Session\u0027s timeslot in the address book."},{"lineNumber":8,"author":{"gitId":"car155"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTimeslot(String)}"},{"lineNumber":9,"author":{"gitId":"car155"},"content":" */"},{"lineNumber":10,"author":{"gitId":"car155"},"content":"public class Timeslot {"},{"lineNumber":11,"author":{"gitId":"car155"},"content":"    public static final String INFIX \u003d \"to\";"},{"lineNumber":12,"author":{"gitId":"car155"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Timeslots must not be null and must be in the format:\\n \""},{"lineNumber":13,"author":{"gitId":"car155"},"content":"            + Time.TIME_FORMAT + \" (start time) \" + INFIX + \" \" + Time.TIME_FORMAT + \" (end time) \""},{"lineNumber":14,"author":{"gitId":"car155"},"content":"            + \"and adhere to the following constraint:\\n\""},{"lineNumber":15,"author":{"gitId":"car155"},"content":"            + \"the ending time should be strictly after the starting time.\";"},{"lineNumber":16,"author":{"gitId":"car155"},"content":""},{"lineNumber":17,"author":{"gitId":"car155"},"content":"    private Time start;"},{"lineNumber":18,"author":{"gitId":"car155"},"content":"    private Time end;"},{"lineNumber":19,"author":{"gitId":"car155"},"content":""},{"lineNumber":20,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"car155"},"content":"     * Constructs an {@code Timeslot}."},{"lineNumber":22,"author":{"gitId":"car155"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"car155"},"content":"     * @param timeslot A valid timeslot."},{"lineNumber":24,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"car155"},"content":"    public Timeslot(String timeslot) {"},{"lineNumber":26,"author":{"gitId":"car155"},"content":"        requireNonNull(timeslot);"},{"lineNumber":27,"author":{"gitId":"car155"},"content":"        checkArgument(isValidTimeslot(timeslot), MESSAGE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitId":"car155"},"content":"        String[] splitTimeslot \u003d timeslot.split(INFIX);"},{"lineNumber":29,"author":{"gitId":"car155"},"content":"        this.start \u003d new Time(splitTimeslot[0].trim());"},{"lineNumber":30,"author":{"gitId":"car155"},"content":"        this.end \u003d new Time(splitTimeslot[1].trim());"},{"lineNumber":31,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"car155"},"content":""},{"lineNumber":33,"author":{"gitId":"car155"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"car155"},"content":"     * Returns if a given string is a valid timeslot."},{"lineNumber":35,"author":{"gitId":"car155"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"car155"},"content":"    public static boolean isValidTimeslot(String timeslot) {"},{"lineNumber":37,"author":{"gitId":"car155"},"content":"        String[] splitTimeslot \u003d timeslot.split(\"\\\\s+\");"},{"lineNumber":38,"author":{"gitId":"car155"},"content":"        if (splitTimeslot.length !\u003d 3) { //wrong number of inputs"},{"lineNumber":39,"author":{"gitId":"car155"},"content":"            return false;"},{"lineNumber":40,"author":{"gitId":"car155"},"content":"        } else if (!splitTimeslot[1].trim().equals(INFIX)) { //wrong infix"},{"lineNumber":41,"author":{"gitId":"car155"},"content":"            return false;"},{"lineNumber":42,"author":{"gitId":"car155"},"content":"        } else if (!Time.isValidTime(splitTimeslot[0].trim())) { //wrong format for start time"},{"lineNumber":43,"author":{"gitId":"car155"},"content":"            return false;"},{"lineNumber":44,"author":{"gitId":"car155"},"content":"        } else if (!Time.isValidTime(splitTimeslot[2].trim())) { //wrong format for end time"},{"lineNumber":45,"author":{"gitId":"car155"},"content":"            return false;"},{"lineNumber":46,"author":{"gitId":"car155"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"car155"},"content":"            Time start \u003d new Time(splitTimeslot[0].trim());"},{"lineNumber":48,"author":{"gitId":"car155"},"content":"            Time end \u003d new Time(splitTimeslot[2].trim());"},{"lineNumber":49,"author":{"gitId":"car155"},"content":"            return start.isBefore(end);"},{"lineNumber":50,"author":{"gitId":"car155"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"car155"},"content":""},{"lineNumber":53,"author":{"gitId":"car155"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"car155"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitId":"car155"},"content":"        return this.start.toString() + \" - \" + this.end.toString();"},{"lineNumber":56,"author":{"gitId":"car155"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"car155"},"content":"}"}],"authorContributionMap":{"car155":57}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitId":"Bennyphoe"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":15,"author":{"gitId":"Bennyphoe"},"content":"import seedu.address.model.person.Tutor;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":24,"author":{"gitId":"Bennyphoe"},"content":"            new Student(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":27,"author":{"gitId":"Bennyphoe"},"content":"            new Student(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":30,"author":{"gitId":"Bennyphoe"},"content":"            new Student(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":33,"author":{"gitId":"Bennyphoe"},"content":"            new Tutor(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":36,"author":{"gitId":"Bennyphoe"},"content":"            new Tutor(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":39,"author":{"gitId":"Bennyphoe"},"content":"            new Tutor(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":54,"Bennyphoe":8}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitId":"Bennyphoe"},"content":"import seedu.address.model.person.PersonType;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitId":"Bennyphoe"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":20,"author":{"gitId":"Bennyphoe"},"content":"import seedu.address.model.person.Tutor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":34,"author":{"gitId":"Bennyphoe"},"content":"    private final String personType;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"},{"lineNumber":43,"author":{"gitId":"Bennyphoe"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"personType\") String personType) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"Bennyphoe"},"content":"        this.personType \u003d personType;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":65,"author":{"gitId":"Bennyphoe"},"content":"        personType \u003d source.getPersonType().toString();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"Bennyphoe"},"content":"        if (personType \u003d\u003d null) {"},{"lineNumber":112,"author":{"gitId":"Bennyphoe"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":113,"author":{"gitId":"Bennyphoe"},"content":"                    PersonType.class.getSimpleName()));"},{"lineNumber":114,"author":{"gitId":"Bennyphoe"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"Bennyphoe"},"content":"        if (!PersonType.isValidPersonType(personType)) {"},{"lineNumber":116,"author":{"gitId":"Bennyphoe"},"content":"            throw new IllegalValueException(PersonType.MESSAGE_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitId":"Bennyphoe"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"Bennyphoe"},"content":"        final PersonType modelPersonType \u003d new PersonType(personType);"},{"lineNumber":119,"author":{"gitId":"Bennyphoe"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":121,"author":{"gitId":"Bennyphoe"},"content":"        if (modelPersonType.toString().equals(\"student\")) {"},{"lineNumber":122,"author":{"gitId":"Bennyphoe"},"content":"            return new Student(modelName, modelPhone, modelEmail, modelAddress, modelTags);"},{"lineNumber":123,"author":{"gitId":"Bennyphoe"},"content":"        } else {"},{"lineNumber":124,"author":{"gitId":"Bennyphoe"},"content":"            return new Tutor(modelName, modelPhone, modelEmail, modelAddress, modelTags);"},{"lineNumber":125,"author":{"gitId":"Bennyphoe"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":107,"Bennyphoe":21}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"Bennyphoe"},"content":"    private Label personType;"},{"lineNumber":35,"author":{"gitId":"Bennyphoe"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":54,"author":{"gitId":"Bennyphoe"},"content":"        personType.setText(person.getPersonType().toString());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        person.getTags().stream()"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":77,"Bennyphoe":3}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"Bennyphoe"},"content":"        \u003cLabel fx:id\u003d\"personType\" text\u003d\"\\$PersonType\" styleClass\u003d\"cell_small_label\"/\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"-":36,"Bennyphoe":1}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":7,"author":{"gitId":"Bennyphoe"},"content":"    \"tagged\": [ \"friends\" ],"},{"lineNumber":8,"author":{"gitId":"Bennyphoe"},"content":"    \"personType\" : \"student\""},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\","},{"lineNumber":13,"author":{"gitId":"Bennyphoe"},"content":"    \"address\": \"4th street\","},{"lineNumber":14,"author":{"gitId":"Bennyphoe"},"content":"    \"personType\" : \"student\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":12,"Bennyphoe":4}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":8,"author":{"gitId":"Bennyphoe"},"content":"    \"tagged\" : [ \"friends\" ],"},{"lineNumber":9,"author":{"gitId":"Bennyphoe"},"content":"    \"personType\" : \"student\""},{"lineNumber":10,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\","},{"lineNumber":15,"author":{"gitId":"Bennyphoe"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ],"},{"lineNumber":16,"author":{"gitId":"Bennyphoe"},"content":"    \"personType\" : \"student\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\","},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\","},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\","},{"lineNumber":22,"author":{"gitId":"Bennyphoe"},"content":"    \"tagged\" : [ ],"},{"lineNumber":23,"author":{"gitId":"Bennyphoe"},"content":"    \"personType\" : \"student\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\","},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\","},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\","},{"lineNumber":29,"author":{"gitId":"Bennyphoe"},"content":"    \"tagged\" : [ \"friends\" ],"},{"lineNumber":30,"author":{"gitId":"Bennyphoe"},"content":"    \"personType\" : \"student\""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\","},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\","},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\","},{"lineNumber":36,"author":{"gitId":"Bennyphoe"},"content":"    \"tagged\" : [ ],"},{"lineNumber":37,"author":{"gitId":"Bennyphoe"},"content":"    \"personType\" : \"student\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\","},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\","},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\","},{"lineNumber":43,"author":{"gitId":"Bennyphoe"},"content":"    \"tagged\" : [ ],"},{"lineNumber":44,"author":{"gitId":"Bennyphoe"},"content":"    \"personType\" : \"student\""},{"lineNumber":45,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\","},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\","},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\","},{"lineNumber":50,"author":{"gitId":"Bennyphoe"},"content":"    \"tagged\" : [ ],"},{"lineNumber":51,"author":{"gitId":"Bennyphoe"},"content":"    \"personType\" : \"student\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":39,"Bennyphoe":14}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"Bennyphoe"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PERSON_TYPE_DESC_STUDENT;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"car155"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":83,"author":{"gitId":"car155"},"content":"        String addPersonCommand \u003d AddPersonCommand.COMMAND_WORD + PERSON_TYPE_DESC_STUDENT + NAME_DESC_AMY"},{"lineNumber":84,"author":{"gitId":"Bennyphoe"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":90,"author":{"gitId":"car155"},"content":"        assertCommandFailure(addPersonCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"car155":3,"-":159,"Bennyphoe":2}},{"path":"src/test/java/seedu/address/logic/commands/AddPersonCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"car155"},"content":" * Contains integration tests (interaction with the Model) for {@code AddPersonCommand}."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"car155"},"content":"public class AddPersonCommandIntegrationTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"car155"},"content":"        assertCommandSuccess(new AddPersonCommand(validPerson), model,"},{"lineNumber":36,"author":{"gitId":"car155"},"content":"                String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":42,"author":{"gitId":"car155"},"content":"        assertCommandFailure(new AddPersonCommand(personInList), model, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"car155":5,"-":40}},{"path":"src/test/java/seedu/address/logic/commands/AddPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitId":"car155"},"content":"import seedu.address.model.session.Session;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"car155"},"content":"public class AddPersonCommandTest {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":31,"author":{"gitId":"car155"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddPersonCommand(null));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"car155"},"content":"        CommandResult commandResult \u003d new AddPersonCommand(validPerson).execute(modelStub);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"car155"},"content":"        assertEquals(String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":48,"author":{"gitId":"car155"},"content":"        AddPersonCommand addPersonCommand \u003d new AddPersonCommand(validPerson);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"car155"},"content":"        assertThrows(CommandException.class, AddPersonCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addPersonCommand.execute("},{"lineNumber":52,"author":{"gitId":"car155"},"content":"                modelStub));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":59,"author":{"gitId":"car155"},"content":"        AddPersonCommand addAliceCommand \u003d new AddPersonCommand(alice);"},{"lineNumber":60,"author":{"gitId":"car155"},"content":"        AddPersonCommand addBobCommand \u003d new AddPersonCommand(bob);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":66,"author":{"gitId":"car155"},"content":"        AddPersonCommand addAliceCommandCopy \u003d new AddPersonCommand(alice);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"car155"},"content":""},{"lineNumber":153,"author":{"gitId":"car155"},"content":"        @Override"},{"lineNumber":154,"author":{"gitId":"car155"},"content":"        public void addSession(Session session) {"},{"lineNumber":155,"author":{"gitId":"car155"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":156,"author":{"gitId":"car155"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person."},{"lineNumber":161,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        private final Person person;"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            this.person \u003d person;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":179,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"car155":16,"-":185}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"Bennyphoe"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TYPE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":40,"author":{"gitId":"Bennyphoe"},"content":"    public static final String VALID_PERSON_TYPE_STUDENT \u003d \"student\";"},{"lineNumber":41,"author":{"gitId":"Bennyphoe"},"content":"    public static final String VALID_PERSON_TYPE_TUTOR \u003d \"tutor\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":53,"author":{"gitId":"Bennyphoe"},"content":"    public static final String PERSON_TYPE_DESC_STUDENT \u003d \" \" + PREFIX_PERSON_TYPE + VALID_PERSON_TYPE_STUDENT;"},{"lineNumber":54,"author":{"gitId":"Bennyphoe"},"content":"    public static final String PERSON_TYPE_DESC_TUTOR \u003d \" \" + PREFIX_PERSON_TYPE + VALID_PERSON_TYPE_TUTOR;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":61,"author":{"gitId":"Bennyphoe"},"content":"    public static final String INVALID_PERSON_TYPE_DESC \u003d \" \" + PREFIX_PERSON_TYPE + \"invalid\";"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":70,"author":{"gitId":"Bennyphoe"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withPersonType(VALID_PERSON_TYPE_STUDENT).withName(VALID_NAME_AMY)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":73,"author":{"gitId":"Bennyphoe"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withPersonType(VALID_PERSON_TYPE_STUDENT).withName(VALID_NAME_BOB)"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":75,"author":{"gitId":"Bennyphoe"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withPersonType(VALID_PERSON_TYPE_TUTOR).build();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":113,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":125,"Bennyphoe":9}},{"path":"src/test/java/seedu/address/logic/parser/AddPersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitId":"Bennyphoe"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PERSON_TYPE_DESC_STUDENT;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":25,"author":{"gitId":"Bennyphoe"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_TYPE_STUDENT;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"car155"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"car155"},"content":"public class AddPersonCommandParserTest {"},{"lineNumber":46,"author":{"gitId":"car155"},"content":"    private AddPersonCommandParser parser \u003d new AddPersonCommandParser();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":53,"author":{"gitId":"Bennyphoe"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + PERSON_TYPE_DESC_STUDENT"},{"lineNumber":54,"author":{"gitId":"Bennyphoe"},"content":"                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":55,"author":{"gitId":"car155"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":58,"author":{"gitId":"Bennyphoe"},"content":"        assertParseSuccess(parser, PERSON_TYPE_DESC_STUDENT + NAME_DESC_AMY + NAME_DESC_BOB"},{"lineNumber":59,"author":{"gitId":"Bennyphoe"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":60,"author":{"gitId":"car155"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":63,"author":{"gitId":"Bennyphoe"},"content":"        assertParseSuccess(parser, PERSON_TYPE_DESC_STUDENT + NAME_DESC_BOB + PHONE_DESC_AMY"},{"lineNumber":64,"author":{"gitId":"Bennyphoe"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":65,"author":{"gitId":"car155"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":68,"author":{"gitId":"Bennyphoe"},"content":"        assertParseSuccess(parser, PERSON_TYPE_DESC_STUDENT + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":69,"author":{"gitId":"Bennyphoe"},"content":"                + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":70,"author":{"gitId":"car155"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":73,"author":{"gitId":"Bennyphoe"},"content":"        assertParseSuccess(parser, PERSON_TYPE_DESC_STUDENT + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":74,"author":{"gitId":"Bennyphoe"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":75,"author":{"gitId":"car155"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":80,"author":{"gitId":"Bennyphoe"},"content":"        assertParseSuccess(parser, PERSON_TYPE_DESC_STUDENT + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":81,"author":{"gitId":"Bennyphoe"},"content":"                + ADDRESS_DESC_BOB"},{"lineNumber":82,"author":{"gitId":"car155"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddPersonCommand(expectedPersonMultipleTags));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":89,"author":{"gitId":"Bennyphoe"},"content":"        assertParseSuccess(parser, PERSON_TYPE_DESC_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":90,"author":{"gitId":"Bennyphoe"},"content":"                        + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":91,"author":{"gitId":"car155"},"content":"                new AddPersonCommand(expectedPerson));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":96,"author":{"gitId":"car155"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":99,"author":{"gitId":"Bennyphoe"},"content":"        assertParseFailure(parser, PERSON_TYPE_DESC_STUDENT + VALID_NAME_BOB + PHONE_DESC_BOB"},{"lineNumber":100,"author":{"gitId":"Bennyphoe"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":104,"author":{"gitId":"Bennyphoe"},"content":"        assertParseFailure(parser, PERSON_TYPE_DESC_STUDENT + NAME_DESC_BOB + VALID_PHONE_BOB"},{"lineNumber":105,"author":{"gitId":"Bennyphoe"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":109,"author":{"gitId":"Bennyphoe"},"content":"        assertParseFailure(parser, PERSON_TYPE_DESC_STUDENT + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":110,"author":{"gitId":"Bennyphoe"},"content":"                        + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":114,"author":{"gitId":"Bennyphoe"},"content":"        assertParseFailure(parser, PERSON_TYPE_DESC_STUDENT + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":115,"author":{"gitId":"Bennyphoe"},"content":"                        + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":119,"author":{"gitId":"Bennyphoe"},"content":"        assertParseFailure(parser, VALID_PERSON_TYPE_STUDENT + VALID_NAME_BOB + VALID_PHONE_BOB"},{"lineNumber":120,"author":{"gitId":"Bennyphoe"},"content":"                        + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":127,"author":{"gitId":"Bennyphoe"},"content":"        assertParseFailure(parser, PERSON_TYPE_DESC_STUDENT + INVALID_NAME_DESC"},{"lineNumber":128,"author":{"gitId":"Bennyphoe"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":132,"author":{"gitId":"Bennyphoe"},"content":"        assertParseFailure(parser, PERSON_TYPE_DESC_STUDENT + NAME_DESC_BOB + INVALID_PHONE_DESC"},{"lineNumber":133,"author":{"gitId":"Bennyphoe"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":137,"author":{"gitId":"Bennyphoe"},"content":"        assertParseFailure(parser, PERSON_TYPE_DESC_STUDENT + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":138,"author":{"gitId":"Bennyphoe"},"content":"                + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // invalid address"},{"lineNumber":142,"author":{"gitId":"Bennyphoe"},"content":"        assertParseFailure(parser, PERSON_TYPE_DESC_STUDENT + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":143,"author":{"gitId":"Bennyphoe"},"content":"                + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":147,"author":{"gitId":"Bennyphoe"},"content":"        assertParseFailure(parser, PERSON_TYPE_DESC_STUDENT + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":148,"author":{"gitId":"Bennyphoe"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":152,"author":{"gitId":"Bennyphoe"},"content":"        assertParseFailure(parser, PERSON_TYPE_DESC_STUDENT + INVALID_NAME_DESC + PHONE_DESC_BOB"},{"lineNumber":153,"author":{"gitId":"Bennyphoe"},"content":"                        + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":157,"author":{"gitId":"Bennyphoe"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + PERSON_TYPE_DESC_STUDENT + NAME_DESC_BOB"},{"lineNumber":158,"author":{"gitId":"Bennyphoe"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                        + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":160,"author":{"gitId":"car155"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"car155":12,"-":110,"Bennyphoe":40}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"car155"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"car155"},"content":"        AddPersonCommand command \u003d (AddPersonCommand) parser.parseCommand(PersonUtil.getAddPersonCommand(person));"},{"lineNumber":40,"author":{"gitId":"car155"},"content":"        assertEquals(new AddPersonCommand(person), command);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":52,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"car155":3,"-":98}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitId":"car155"},"content":"import seedu.address.model.session.Session;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":92,"author":{"gitId":"car155"},"content":"        private final ObservableList\u003cSession\u003e sessions \u003d FXCollections.observableArrayList();"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return persons;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"car155"},"content":""},{"lineNumber":103,"author":{"gitId":"car155"},"content":"        @Override"},{"lineNumber":104,"author":{"gitId":"car155"},"content":"        public ObservableList\u003cSession\u003e getSessionList() {"},{"lineNumber":105,"author":{"gitId":"car155"},"content":"            return sessions;"},{"lineNumber":106,"author":{"gitId":"car155"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"car155":7,"-":102}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitId":"Bennyphoe"},"content":"import seedu.address.model.person.PersonType;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":27,"author":{"gitId":"Bennyphoe"},"content":"    private static final String INVALID_PERSON_TYPE \u003d \"invalid\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":36,"author":{"gitId":"Bennyphoe"},"content":"    private static final String VALID_PERSON_TYPE \u003d \"student\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":47,"author":{"gitId":"Bennyphoe"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":48,"author":{"gitId":"Bennyphoe"},"content":"                        VALID_TAGS, VALID_PERSON_TYPE);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitId":"Bennyphoe"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":56,"author":{"gitId":"Bennyphoe"},"content":"                VALID_TAGS, VALID_PERSON_TYPE);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":64,"author":{"gitId":"Bennyphoe"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":65,"author":{"gitId":"Bennyphoe"},"content":"                        VALID_TAGS, VALID_PERSON_TYPE);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":72,"author":{"gitId":"Bennyphoe"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL,"},{"lineNumber":73,"author":{"gitId":"Bennyphoe"},"content":"                VALID_ADDRESS, VALID_TAGS, VALID_PERSON_TYPE);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":81,"author":{"gitId":"Bennyphoe"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":82,"author":{"gitId":"Bennyphoe"},"content":"                        VALID_TAGS, VALID_PERSON_TYPE);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":89,"author":{"gitId":"Bennyphoe"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null,"},{"lineNumber":90,"author":{"gitId":"Bennyphoe"},"content":"                VALID_ADDRESS, VALID_TAGS, VALID_PERSON_TYPE);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":98,"author":{"gitId":"Bennyphoe"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"},{"lineNumber":99,"author":{"gitId":"Bennyphoe"},"content":"                        VALID_TAGS, VALID_PERSON_TYPE);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":106,"author":{"gitId":"Bennyphoe"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":107,"author":{"gitId":"Bennyphoe"},"content":"                null, VALID_TAGS, VALID_PERSON_TYPE);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":117,"author":{"gitId":"Bennyphoe"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":118,"author":{"gitId":"Bennyphoe"},"content":"                        invalidTags, VALID_PERSON_TYPE);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"Bennyphoe"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"Bennyphoe"},"content":"    public void toModelType_invalidPersonType_throwsIllegalValueException() {"},{"lineNumber":123,"author":{"gitId":"Bennyphoe"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":124,"author":{"gitId":"Bennyphoe"},"content":"                VALID_ADDRESS, VALID_TAGS, INVALID_PERSON_TYPE);"},{"lineNumber":125,"author":{"gitId":"Bennyphoe"},"content":"        String expectedMessage \u003d PersonType.MESSAGE_CONSTRAINTS;"},{"lineNumber":126,"author":{"gitId":"Bennyphoe"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":127,"author":{"gitId":"Bennyphoe"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"Bennyphoe"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"Bennyphoe"},"content":"    public void toModelType_nullPersonType_throwsIllegalValueException() {"},{"lineNumber":130,"author":{"gitId":"Bennyphoe"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":131,"author":{"gitId":"Bennyphoe"},"content":"                VALID_ADDRESS, VALID_TAGS, null);"},{"lineNumber":132,"author":{"gitId":"Bennyphoe"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PersonType.class.getSimpleName());"},{"lineNumber":133,"author":{"gitId":"Bennyphoe"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":134,"author":{"gitId":"Bennyphoe"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":100,"Bennyphoe":35}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"Bennyphoe"},"content":"import seedu.address.model.person.PersonType;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":41,"author":{"gitId":"Bennyphoe"},"content":"        descriptor.setPersonType(person.getPersonType());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Bennyphoe"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"Bennyphoe"},"content":"     * Sets the {@code PersonType} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":77,"author":{"gitId":"Bennyphoe"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"Bennyphoe"},"content":"    public EditPersonDescriptorBuilder withPersonType(String personType) {"},{"lineNumber":79,"author":{"gitId":"Bennyphoe"},"content":"        descriptor.setPersonType(new PersonType(personType));"},{"lineNumber":80,"author":{"gitId":"Bennyphoe"},"content":"        return this;"},{"lineNumber":81,"author":{"gitId":"Bennyphoe"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * that we are building."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":87,"Bennyphoe":9}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"Bennyphoe"},"content":"import seedu.address.model.person.PersonType;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitId":"Bennyphoe"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":13,"author":{"gitId":"Bennyphoe"},"content":"import seedu.address.model.person.Tutor;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":26,"author":{"gitId":"Bennyphoe"},"content":"    public static final String DEFAULT_PERSON_TYPE \u003d \"student\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":34,"author":{"gitId":"Bennyphoe"},"content":"    private PersonType personType;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":45,"author":{"gitId":"Bennyphoe"},"content":"        personType \u003d new PersonType(DEFAULT_PERSON_TYPE);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":57,"author":{"gitId":"Bennyphoe"},"content":"        personType \u003d personToCopy.getPersonType();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Bennyphoe"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"Bennyphoe"},"content":"     * Sets the {@code PersonType} of the {@code Person} that we are building."},{"lineNumber":101,"author":{"gitId":"Bennyphoe"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"Bennyphoe"},"content":"    public PersonBuilder withPersonType(String type) {"},{"lineNumber":103,"author":{"gitId":"Bennyphoe"},"content":"        this.personType \u003d new PersonType(type);"},{"lineNumber":104,"author":{"gitId":"Bennyphoe"},"content":"        return this;"},{"lineNumber":105,"author":{"gitId":"Bennyphoe"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"Bennyphoe"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"Bennyphoe"},"content":"     * Build"},{"lineNumber":109,"author":{"gitId":"Bennyphoe"},"content":"     * @return Person"},{"lineNumber":110,"author":{"gitId":"Bennyphoe"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":112,"author":{"gitId":"Bennyphoe"},"content":"        if (this.personType.toString().equals(\"student\")) {"},{"lineNumber":113,"author":{"gitId":"Bennyphoe"},"content":"            return new Student(name, phone, email, address, tags);"},{"lineNumber":114,"author":{"gitId":"Bennyphoe"},"content":"        } else {"},{"lineNumber":115,"author":{"gitId":"Bennyphoe"},"content":"            return new Tutor(name, phone, email, address, tags);"},{"lineNumber":116,"author":{"gitId":"Bennyphoe"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":96,"Bennyphoe":23}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"Bennyphoe"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TYPE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"car155"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"car155"},"content":"    public static String getAddPersonCommand(Person person) {"},{"lineNumber":26,"author":{"gitId":"car155"},"content":"        return AddPersonCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":34,"author":{"gitId":"Bennyphoe"},"content":"        sb.append(PREFIX_PERSON_TYPE + person.getPersonType().toString() + \" \");"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":40,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"car155":3,"-":59,"Bennyphoe":2}}]
