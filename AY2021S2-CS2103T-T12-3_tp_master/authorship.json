[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"# A-Bash Book"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-T12-3/tp/actions)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":"## Description"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":"This is **a project for bash-savvy users who are familiar with Command-Line-Interface.** We hope that with Bash-like commands, users who enjoy the high speed workflow of executing bash commands can be as seamless and easy to use in our project."},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":"## Usages"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":"* as a CLI integrated address book."},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":"* contact tracker to better manage your contacts and relationships."},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":"## Setup"},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":"[coming soon]"},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":"## Features"},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":"[coming soon]"},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"## Acknowledgement"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org/)."}],"authorContributionMap":{"justgnohUG":18,"-":4}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"### Keng Iuan"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"\u003cimg src\u003d\"images/darkdestry-t.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"[[github](http://github.com/darkdestry-t)]"},{"lineNumber":17,"author":{"gitId":"oeiyiping"},"content":"\u003c!-- [[portfolio](team/johndoe.md)] --\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":"* Role: Team Leader"},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"* Responsibilities: Storage"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"oeiyiping"},"content":"### Justin Gnoh"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":"\u003cimg src\u003d\"images/justgnohug.png\" width\u003d\"200px\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"oeiyiping"},"content":"[[github](http://github.com/justgnohUG)]"},{"lineNumber":27,"author":{"gitId":"oeiyiping"},"content":"\u003c!-- [[portfolio](team/johndoe.md)] --\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"tanboonji"},"content":"* Role: Production"},{"lineNumber":30,"author":{"gitId":"-"},"content":"* Responsibilities: UI"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"tanboonji"},"content":"### Boon Ji"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"tanboonji"},"content":"\u003cimg src\u003d\"images/tanboonji.png\" width\u003d\"200px\"\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"tanboonji"},"content":"[[github](https://github.com/tanboonji)]"},{"lineNumber":37,"author":{"gitId":"oeiyiping"},"content":"\u003c!-- [[portfolio](team/johndoe.md)] --\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"tanboonji"},"content":"* Role: Documentation"},{"lineNumber":40,"author":{"gitId":"tanboonji"},"content":"* Reponsibilities: Logic (excluding Commands)"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"oeiyiping"},"content":"### Yi Ping"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"oeiyiping"},"content":"\u003cimg src\u003d\"images/oeiyiping.png\" width\u003d\"200px\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"oeiyiping"},"content":"[[github](http://github.com/oeiyiping)]"},{"lineNumber":47,"author":{"gitId":"oeiyiping"},"content":"\u003c!-- [[portfolio](team/johndoe.md)] --\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"tanboonji"},"content":"* Role: Documentation"},{"lineNumber":50,"author":{"gitId":"tanboonji"},"content":"* Responsibilities: Model, Commands"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"oeiyiping"},"content":"### Yao Wei"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"oeiyiping"},"content":"\u003cimg src\u003d\"images/yaowei-soc.png\" width\u003d\"200px\"\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"oeiyiping"},"content":"[[github](https://github.com/yaowei-soc)]"},{"lineNumber":57,"author":{"gitId":"oeiyiping"},"content":"\u003c!-- [[portfolio](team/johndoe.md)] --\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"oeiyiping"},"content":"* Role: Documentation"},{"lineNumber":60,"author":{"gitId":"tanboonji"},"content":"* Responsibilities: Test"}],"authorContributionMap":{"justgnohUG":1,"tanboonji":14,"oeiyiping":14,"-":31}},{"path":"docs/DevOps.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: DevOps guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Build automation"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"Given below are how to use Gradle for some important project tasks."},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  e.g. `./gradlew clean`"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  e.g. `./gradlew shadowJar`."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **`run`**: Builds and runs the application.\u003cbr\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  **`runShadow`**: Builds the application as a fat JAR, and then runs it."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  **`checkstyleTest`**: Runs the code style check for the test code base."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"* **`test`**: Runs all tests.\u003c"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  * `./gradlew test` — Runs all tests"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * `./gradlew clean test` — Cleans the project and runs tests"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Continuous integration (CI)"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"### Code coverage"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Once you are inside Codecov web app, add your fork to CodeCov."},{"lineNumber":47,"author":{"gitId":"yaowei-soc"},"content":"1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/AY2021S2-CS2103T-T12-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103T-T12-3/tp/) in that page reflects the coverage of your project."},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"### Repository-wide checks"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"`./config/travis/run-checks.sh`"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"Any warnings or errors will be printed out to the console."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"**If adding new checks:**"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  * SEVERITY is either ERROR or WARN."},{"lineNumber":65,"author":{"gitId":"-"},"content":"  * FILENAME is the path to the file relative to the current directory."},{"lineNumber":66,"author":{"gitId":"-"},"content":"  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"* Check scripts must exit with a non-zero exit code if any errors occur."},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"## Making a release"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"yaowei-soc"},"content":"1. Update the version number in [`MainApp.java`](https://github.com/AY2021S2-CS2103T-T12-3/tp/tree/master/src/main/java/seedu/address/MainApp.java)."},{"lineNumber":77,"author":{"gitId":"-"},"content":"1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."},{"lineNumber":78,"author":{"gitId":"-"},"content":"1. Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":79,"author":{"gitId":"-"},"content":"1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."}],"authorContributionMap":{"-":77,"yaowei-soc":2}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"yaowei-soc"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S2-CS2103T-T12-3/tp/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"yaowei-soc"},"content":"**`Main`** has two classes called [`Main`](https://github.com/AY2021S2-CS2103T-T12-3/tp/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S2-CS2103T-T12-3/tp/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"yaowei-soc"},"content":"[`Ui.java`](https://github.com/AY2021S2-CS2103T-T12-3/tp/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"yaowei-soc"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S2-CS2103T-T12-3/tp/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S2-CS2103T-T12-3/tp/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"yaowei-soc"},"content":"[`Logic.java`](https://github.com/AY2021S2-CS2103T-T12-3/tp/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"yaowei-soc"},"content":"**API** : [`Model.java`](https://github.com/AY2021S2-CS2103T-T12-3/tp/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"yaowei-soc"},"content":"**API** : [`Storage.java`](https://github.com/AY2021S2-CS2103T-T12-3/tp/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"yaowei-soc"},"content":"### Filtering PersonCard"},{"lineNumber":221,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":222,"author":{"gitId":"yaowei-soc"},"content":"Current implementation is to add a new Predicate that is added in Model."},{"lineNumber":223,"author":{"gitId":"yaowei-soc"},"content":"When the FilterCommand is executed, Model will be updated with the latest display filter."},{"lineNumber":224,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":225,"author":{"gitId":"yaowei-soc"},"content":"Since execution of FilterCommand happens in MainWindow, MainWindow will then pass the predicate down"},{"lineNumber":226,"author":{"gitId":"yaowei-soc"},"content":"to PersonListPanel which then trigger ListView to be re-drawn. During the creation of a PersonCard,"},{"lineNumber":227,"author":{"gitId":"yaowei-soc"},"content":"the fields that are not to be shown will have visibility set to false and will not be managed by the"},{"lineNumber":228,"author":{"gitId":"yaowei-soc"},"content":"parent. This is done so that the dimension of the hidden field will not be included during the"},{"lineNumber":229,"author":{"gitId":"yaowei-soc"},"content":"layoutBounds calculations."},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":236,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":237,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":238,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":239,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"* has a need to manage a significant number of contacts"},{"lineNumber":250,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":251,"author":{"gitId":"-"},"content":"* can type fast"},{"lineNumber":252,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":253,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":254,"author":{"gitId":"yaowei-soc"},"content":"* prefers a Bash like experience"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"**Value proposition**: manage contacts faster than a typical mouse/GUI driven app"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                      |"},{"lineNumber":264,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"},{"lineNumber":265,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"},{"lineNumber":266,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | add a new person               |                                                                        |"},{"lineNumber":267,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | delete a person                | remove entries that I no longer need                                   |"},{"lineNumber":268,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | find a person by name          | locate details of persons without having to go through the entire list |"},{"lineNumber":269,"author":{"gitId":"yaowei-soc"},"content":"| __`* * *`__  | user                                       | find my friends via their email address                         | find my friends easily                |"},{"lineNumber":270,"author":{"gitId":"yaowei-soc"},"content":"| __`* * *`__  | user                                       | autocomplete my commands                                        | minimise the amount of typing for a command        |"},{"lineNumber":271,"author":{"gitId":"yaowei-soc"},"content":"| __`* * *`__  | user                                       | set my own commands alias                                       | type and execute commands faster"},{"lineNumber":272,"author":{"gitId":"yaowei-soc"},"content":"| __`* *`__    | user                                       | find my friends without typing their exact full name            | find my friends easily                |"},{"lineNumber":273,"author":{"gitId":"yaowei-soc"},"content":"| __`* *`__    | user                                       | find my friends that have names with similar spelling easily    | find my friends easily                             |"},{"lineNumber":274,"author":{"gitId":"yaowei-soc"},"content":"| __`* *`__    | user                                       | hide private contact details   | minimize chance of someone else seeing them by accident                |"},{"lineNumber":275,"author":{"gitId":"-"},"content":"| `*`      | user with many persons in the address book | sort persons by name           | locate a person easily                                                 |"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"(For all use cases below, the **System** is the `AddressBook` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"yaowei-soc"},"content":"**Use Case: Delete a person**"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"1.  User requests to list persons"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":289,"author":{"gitId":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":290,"author":{"gitId":"-"},"content":"4.  AddressBook deletes the person"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"    * 3a1. AddressBook shows an error message."},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"yaowei-soc"},"content":"* *a. At any time, User can press tab to autocomplete the field if possible"},{"lineNumber":307,"author":{"gitId":"yaowei-soc"},"content":"    * *a1. User confirm suggestion by continuing his command"},{"lineNumber":308,"author":{"gitId":"yaowei-soc"},"content":"    * *a2. User rejects suggestion by deleting the suggestion"},{"lineNumber":309,"author":{"gitId":"yaowei-soc"},"content":"      Use case ends."},{"lineNumber":310,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":311,"author":{"gitId":"yaowei-soc"},"content":"**Use case: Setting a command alias**"},{"lineNumber":312,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":313,"author":{"gitId":"yaowei-soc"},"content":"**MSS**"},{"lineNumber":314,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":315,"author":{"gitId":"yaowei-soc"},"content":"1. User frequently uses a command"},{"lineNumber":316,"author":{"gitId":"yaowei-soc"},"content":"2. User sets a command alias for frequent command"},{"lineNumber":317,"author":{"gitId":"yaowei-soc"},"content":"3. AddressBook adds alias to existing command list"},{"lineNumber":318,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":319,"author":{"gitId":"yaowei-soc"},"content":"   Use case ends."},{"lineNumber":320,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":321,"author":{"gitId":"yaowei-soc"},"content":"**Extensions**"},{"lineNumber":322,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":323,"author":{"gitId":"yaowei-soc"},"content":"* 2a. The alias name or command name is empty"},{"lineNumber":324,"author":{"gitId":"yaowei-soc"},"content":"  Use case ends."},{"lineNumber":325,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":326,"author":{"gitId":"yaowei-soc"},"content":"* 2b. The command name is empty"},{"lineNumber":327,"author":{"gitId":"yaowei-soc"},"content":"  Use case ends."},{"lineNumber":328,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":329,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":332,"author":{"gitId":"-"},"content":""},{"lineNumber":333,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":334,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":335,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":336,"author":{"gitId":"yaowei-soc"},"content":"4.  A-Bash Book data must be encrypted and unbreakable by quantum computers in the next 100 years."},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":343,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":348,"author":{"gitId":"-"},"content":""},{"lineNumber":349,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":352,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":363,"author":{"gitId":"-"},"content":""},{"lineNumber":364,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":367,"author":{"gitId":"-"},"content":""},{"lineNumber":368,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":369,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":376,"author":{"gitId":"-"},"content":""},{"lineNumber":377,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":380,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":383,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":384,"author":{"gitId":"-"},"content":""},{"lineNumber":385,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":386,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"-":347,"yaowei-soc":49}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":"A-Bash Book is an enhanced version of Address Book 3 app for managing your contacts, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you type fast, A-Bash Book will allow you to quickly complete your contact management tasks."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  {:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"yaowei-soc"},"content":"1. Download the latest `a-bash-book.jar` from [here](https://github.com/AY2021S2-CS2103T-T12-3/tp/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"yaowei-soc"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your A-Bash Book data."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    * **`list`** : Lists all contacts."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"oeiyiping"},"content":"    * **`add`**`-n John Doe -p 98765432 -e johnd@example.com -a John street, block 123, #01-01` : Adds a contact named `John Doe` to the Address Book."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * **`delete`**`3` : Deletes the 3rd contact shown in the current list."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    * **`clear`** : Deletes all contacts."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    * **`exit`** : Exits the app."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"oeiyiping"},"content":"  e.g. in `add -n NAME`, `NAME` is a parameter which can be used as `add -n John Doe`."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"oeiyiping"},"content":"  e.g `-n NAME [-t TAG]` can be used as `-n John Doe -t friend` or as `-n John Doe`."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"oeiyiping"},"content":"  e.g. `[-t TAG]…​` can be used as ` ` (i.e. 0 times), `-t friend`, `-t friend -t family` etc."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitId":"oeiyiping"},"content":"  e.g. if the command specifies `-n NAME -p PHONE_NUMBER`, `-p PHONE_NUMBER -n NAME` is also acceptable."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"oeiyiping"},"content":"  e.g. if you specify `-p 12341234 -p 56785678`, only `-p 56785678` will be taken."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Adding a person: `add`"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"Adds a person to the address book."},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"oeiyiping"},"content":"Format: `add -n NAME -p PHONE_NUMBER -e EMAIL -a ADDRESS [-t TAG]…​`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":87,"author":{"gitId":"oeiyiping"},"content":"* `add -n John Doe -p 98765432 -e johnd@example.com -a John street, block 123, #01-01`"},{"lineNumber":88,"author":{"gitId":"oeiyiping"},"content":"* `add -n Betsy Crowe -t friend -e betsycrowe@example.com -a Newgate Prison -p 1234567 -t criminal`"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"### Listing all persons : `list`"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"Shows a list of all persons in the address book."},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Editing a person : `edit`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"Edits an existing person in the address book."},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"oeiyiping"},"content":"Format: `edit INDEX [-n NAME] [-p PHONE] [-e EMAIL] [-a ADDRESS] [-t TAG]…​`"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":103,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":104,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":106,"author":{"gitId":"oeiyiping"},"content":"* You can remove all the person’s tags by typing `-t ` without"},{"lineNumber":107,"author":{"gitId":"-"},"content":"  specifying any tags after it."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":110,"author":{"gitId":"oeiyiping"},"content":"*  `edit 1 -p 91234567 -e johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":111,"author":{"gitId":"oeiyiping"},"content":"*  `edit 2 -n Betsy Crower -t ` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords."},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`"},{"lineNumber":120,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":121,"author":{"gitId":"-"},"content":"* Only the name is searched."},{"lineNumber":122,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":124,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"},{"lineNumber":129,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"Deletes the specified person from the address book."},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":138,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list."},{"lineNumber":139,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `list` followed by `delete 2` deletes the 2nd person in the address book."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command."},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"Clears all entries from the address book."},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"tanboonji"},"content":"### Tab Auto Completion [coming soon]"},{"lineNumber":158,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":159,"author":{"gitId":"tanboonji"},"content":"\u003c!-- Pressing tab when typing a command will autocomplete it."},{"lineNumber":160,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":161,"author":{"gitId":"tanboonji"},"content":"Example: You want to execute command `delete`. Typing `de\u003ctab\u003e` will auto complete `de` to `delete` --\u003e"},{"lineNumber":162,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":163,"author":{"gitId":"tanboonji"},"content":"### Live command suggestion [coming soon]"},{"lineNumber":164,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":165,"author":{"gitId":"tanboonji"},"content":"\u003c!-- In addition to tab auto complete feature, A-Bash Book will also attempt to suggest commands available to the user."},{"lineNumber":166,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":167,"author":{"gitId":"tanboonji"},"content":"![](https://via.placeholder.com/350x150/000000/FFFFFF?text\u003dHi)"},{"lineNumber":168,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":169,"author":{"gitId":"tanboonji"},"content":"Users will be able to press tab to cycle through the available options. --\u003e"},{"lineNumber":170,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":171,"author":{"gitId":"tanboonji"},"content":"### Find feature: fuzzy search [coming soon]"},{"lineNumber":172,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":173,"author":{"gitId":"tanboonji"},"content":"\u003c!-- Find command has been enhanced to match full words from partial keywords by similarity."},{"lineNumber":174,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":175,"author":{"gitId":"tanboonji"},"content":"Example: Searching for ‘jon’ will return results that are similar and ranked by similarity, e.g.  jonathan, john, johnny, ... --\u003e"},{"lineNumber":176,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":177,"author":{"gitId":"tanboonji"},"content":"### Alias [coming soon]"},{"lineNumber":178,"author":{"gitId":"tanboonji"},"content":"\u003c!--"},{"lineNumber":179,"author":{"gitId":"tanboonji"},"content":"An alias is a shortcut command that a user can create to reference a default supported command."},{"lineNumber":180,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":181,"author":{"gitId":"oeiyiping"},"content":"Format: `alias [-p ] [ALIAS_NAME/COMMAND_NAME]`"},{"lineNumber":182,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":183,"author":{"gitId":"tanboonji"},"content":"Key:"},{"lineNumber":184,"author":{"gitId":"oeiyiping"},"content":"    `-p `    Print the current values"},{"lineNumber":185,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":186,"author":{"gitId":"tanboonji"},"content":"Examples:"},{"lineNumber":187,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":188,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":189,"author":{"gitId":"tanboonji"},"content":"| Example | Description |"},{"lineNumber":190,"author":{"gitId":"tanboonji"},"content":"| --------------- | -------- |"},{"lineNumber":191,"author":{"gitId":"tanboonji"},"content":"|`alias ls/list`  | associates a new ls command to list, such that the ls command will behave identically to the list command (ie. ls will now generate the list of all contacts).|"},{"lineNumber":192,"author":{"gitId":"oeiyiping"},"content":"|`alias ls/list -n  -p  -e  -t `| associates a new ls command to list, such that the ls command will behave identically to the list command with the options.|"},{"lineNumber":193,"author":{"gitId":"tanboonji"},"content":"|`alias f/find`   | associates a new f command to find, such that the f command will behave identically to the find command (ie. f Alex Yeoh will now return contacts equals or similar to Alex Yeoh).|"},{"lineNumber":194,"author":{"gitId":"tanboonji"},"content":"|`alias ls`       |        will print the VALUE associated with the ls alias.|"},{"lineNumber":195,"author":{"gitId":"oeiyiping"},"content":"|`alias -p `       |        will print all the registered aliases| --\u003e"},{"lineNumber":196,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":197,"author":{"gitId":"tanboonji"},"content":"### Removing Alias [coming soon]"},{"lineNumber":198,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":199,"author":{"gitId":"tanboonji"},"content":"\u003c!-- The unalias command can be used to remove each name from the list of defined aliases."},{"lineNumber":200,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":201,"author":{"gitId":"tanboonji"},"content":"Format: `unalias ALIAS_NAME`"},{"lineNumber":202,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":203,"author":{"gitId":"tanboonji"},"content":"Examples:"},{"lineNumber":204,"author":{"gitId":"tanboonji"},"content":"| Example | Description |"},{"lineNumber":205,"author":{"gitId":"tanboonji"},"content":"| --------------- | -------- |"},{"lineNumber":206,"author":{"gitId":"tanboonji"},"content":"|`unalias ls`| will remove the alias `ls`|"},{"lineNumber":207,"author":{"gitId":"tanboonji"},"content":"|`unalias d`| will remove the alias `d`| --\u003e"},{"lineNumber":208,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":209,"author":{"gitId":"yaowei-soc"},"content":"### Filter"},{"lineNumber":210,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":211,"author":{"gitId":"yaowei-soc"},"content":"Filter provides the user with the choice to tweak their result display according to the specified option(s)."},{"lineNumber":212,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":213,"author":{"gitId":"yaowei-soc"},"content":"Format: `list [-OPTION] [-OPTION1]...`"},{"lineNumber":214,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":215,"author":{"gitId":"yaowei-soc"},"content":"each option should start with a hyphen `-` e.g. `-OPTION` and be separated by a whitespace."},{"lineNumber":216,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":217,"author":{"gitId":"tanboonji"},"content":"Key:"},{"lineNumber":218,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":219,"author":{"gitId":"tanboonji"},"content":"| Key | Description |"},{"lineNumber":220,"author":{"gitId":"tanboonji"},"content":"| --------------- | -------- |"},{"lineNumber":221,"author":{"gitId":"tanboonji"},"content":"|`p`|     Phone number|"},{"lineNumber":222,"author":{"gitId":"tanboonji"},"content":"|`e`|    Email|"},{"lineNumber":223,"author":{"gitId":"tanboonji"},"content":"|`a`|    Address|"},{"lineNumber":224,"author":{"gitId":"tanboonji"},"content":"|`t`|    Tag|"},{"lineNumber":225,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":226,"author":{"gitId":"tanboonji"},"content":"Examples:"},{"lineNumber":227,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":228,"author":{"gitId":"tanboonji"},"content":"| Example | Description |"},{"lineNumber":229,"author":{"gitId":"tanboonji"},"content":"| --------------- | -------- |"},{"lineNumber":230,"author":{"gitId":"yaowei-soc"},"content":"|`list -a `| show the contact\u0027s name and address only.|"},{"lineNumber":231,"author":{"gitId":"yaowei-soc"},"content":"|`list -a -p`| show the contact\u0027s name, address and phone number only.|"},{"lineNumber":232,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"yaowei-soc"},"content":"A-Bash Book data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"yaowei-soc"},"content":"A-Bash Book data are saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":242,"author":{"gitId":"yaowei-soc"},"content":"If your changes to the data file makes its format invalid, A-Bash Book will discard all data and start with an empty data file at the next run."},{"lineNumber":243,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":250,"author":{"gitId":"yaowei-soc"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous A-Bash Book home folder."},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":257,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":258,"author":{"gitId":"oeiyiping"},"content":"**Add** | `add -n NAME -p PHONE_NUMBER -e EMAIL -a ADDRESS [-t TAG]…​` \u003cbr\u003e e.g., `add -n James Ho -p 22224444 -e jamesho@example.com -a 123, Clementi Rd, 1234665 -t friend -t colleague`"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**Clear** | `clear`"},{"lineNumber":260,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"},{"lineNumber":261,"author":{"gitId":"oeiyiping"},"content":"**Edit** | `edit INDEX [-n NAME] [-p PHONE_NUMBER] [-e EMAIL] [-a ADDRESS] [-t TAG]…​`\u003cbr\u003e e.g.,`edit 2 -n James Lee -e jameslee@example.com`"},{"lineNumber":262,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`"},{"lineNumber":263,"author":{"gitId":"yaowei-soc"},"content":"**Filter** | `filter [-p] [-e] [-a] [-t]` \u003cbr\u003e e.g., `filter -p -a` to see only the phone number and address"},{"lineNumber":264,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":265,"author":{"gitId":"-"},"content":"**Help** | `help`"},{"lineNumber":266,"author":{"gitId":"tanboonji"},"content":"**Alias** | _[coming soon]_"},{"lineNumber":267,"author":{"gitId":"tanboonji"},"content":"**Unalias** | _[coming soon]_"}],"authorContributionMap":{"tanboonji":66,"oeiyiping":19,"-":166,"yaowei-soc":16}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"yaowei-soc"},"content":"title: A-Bash Book"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"yaowei-soc"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-T12-3/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103T-T12-3/tp/actions/workflows/gradle.yml)"},{"lineNumber":7,"author":{"gitId":"yaowei-soc"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-T12-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103T-T12-3/tp)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"**AddressBook is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"* If you are interested in using AddressBook, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":14,"author":{"gitId":"-"},"content":"* If you are interested about developing AddressBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"-":16,"yaowei-soc":3}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.model.DisplayFilterPredicate;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the AddressBook."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":51,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":52,"author":{"gitId":"yaowei-soc"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"yaowei-soc"},"content":"     * Returns predicate that determines PersonCard control visibility."},{"lineNumber":54,"author":{"gitId":"yaowei-soc"},"content":"     * @return predicate that returns true if prefix linked control should be shown."},{"lineNumber":55,"author":{"gitId":"yaowei-soc"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"yaowei-soc"},"content":"    DisplayFilterPredicate getDisplayFilter();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":50,"yaowei-soc":7}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.model.DisplayFilterPredicate;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":25,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return model.getAddressBook();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":84,"author":{"gitId":"yaowei-soc"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"yaowei-soc"},"content":"    public DisplayFilterPredicate getDisplayFilter() {"},{"lineNumber":86,"author":{"gitId":"yaowei-soc"},"content":"        return model.getDisplayFilter();"},{"lineNumber":87,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":81,"yaowei-soc":7}},{"path":"src/main/java/seedu/address/logic/commands/FilterCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yaowei-soc"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":3,"author":{"gitId":"yaowei-soc"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":5,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.model.DisplayFilterPredicate;"},{"lineNumber":7,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":9,"author":{"gitId":"yaowei-soc"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"yaowei-soc"},"content":" * Sets the person list filter."},{"lineNumber":11,"author":{"gitId":"yaowei-soc"},"content":" */"},{"lineNumber":12,"author":{"gitId":"yaowei-soc"},"content":"public class FilterCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":14,"author":{"gitId":"yaowei-soc"},"content":"    public static final String COMMAND_WORD \u003d \"filter\";"},{"lineNumber":15,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":16,"author":{"gitId":"yaowei-soc"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Applied filter\";"},{"lineNumber":17,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":18,"author":{"gitId":"yaowei-soc"},"content":"    private final DisplayFilterPredicate filterPredicate;"},{"lineNumber":19,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":20,"author":{"gitId":"yaowei-soc"},"content":"    public FilterCommand(DisplayFilterPredicate filterPredicate) {"},{"lineNumber":21,"author":{"gitId":"yaowei-soc"},"content":"        this.filterPredicate \u003d filterPredicate;"},{"lineNumber":22,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":24,"author":{"gitId":"yaowei-soc"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"yaowei-soc"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":26,"author":{"gitId":"yaowei-soc"},"content":"        requireNonNull(model);"},{"lineNumber":27,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":28,"author":{"gitId":"yaowei-soc"},"content":"        model.updateDisplayFilter(filterPredicate);"},{"lineNumber":29,"author":{"gitId":"yaowei-soc"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":32,"author":{"gitId":"yaowei-soc"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"yaowei-soc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitId":"yaowei-soc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitId":"yaowei-soc"},"content":"                || (other instanceof FilterCommand) // instanceof handles nulls"},{"lineNumber":36,"author":{"gitId":"yaowei-soc"},"content":"                \u0026\u0026 filterPredicate.equals(((FilterCommand) other).filterPredicate);"},{"lineNumber":37,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"yaowei-soc"},"content":"}"}],"authorContributionMap":{"yaowei-soc":38}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"yaowei-soc"},"content":"        case FilterCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"yaowei-soc"},"content":"            return new FilterCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":76,"yaowei-soc":4}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values."},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":61,"author":{"gitId":"yaowei-soc"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"yaowei-soc"},"content":"     * Returns the number of arguments."},{"lineNumber":63,"author":{"gitId":"yaowei-soc"},"content":"     * @return Map size"},{"lineNumber":64,"author":{"gitId":"yaowei-soc"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"yaowei-soc"},"content":"    public int getArgumentSize() {"},{"lineNumber":66,"author":{"gitId":"yaowei-soc"},"content":"        return argMultimap.size();"},{"lineNumber":67,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":60,"yaowei-soc":8}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"},{"lineNumber":10,"author":{"gitId":"oeiyiping"},"content":" *     e.g. {@code some preamble text -t 11.00 -t 12.00 -k -m July}  where prefixes are {@code -t -k -m}.\u003cbr\u003e"},{"lineNumber":11,"author":{"gitId":"oeiyiping"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code -k} in the above example.\u003cbr\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"},{"lineNumber":13,"author":{"gitId":"oeiyiping"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code -t}"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"oeiyiping"},"content":"     * E.g if {@code argsString} \u003d \"-e hi-p900\", {@code prefix} \u003d \"-p\" and"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"},{"lineNumber":68,"author":{"gitId":"oeiyiping"},"content":"     * occurrences of \"-p\" with whitespace before it. However, if"},{"lineNumber":69,"author":{"gitId":"oeiyiping"},"content":"     * {@code argsString} \u003d \"-e hi -p 900\", {@code prefix} \u003d \"-p\" and"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"oeiyiping":6,"-":142}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"oeiyiping"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"-n\");"},{"lineNumber":10,"author":{"gitId":"oeiyiping"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"-p\");"},{"lineNumber":11,"author":{"gitId":"oeiyiping"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"-e\");"},{"lineNumber":12,"author":{"gitId":"oeiyiping"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"-a\");"},{"lineNumber":13,"author":{"gitId":"oeiyiping"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"-t\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"oeiyiping":5,"-":10}},{"path":"src/main/java/seedu/address/logic/parser/FilterCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yaowei-soc"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":3,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":6,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":8,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":9,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.model.DisplayFilterPredicate;"},{"lineNumber":11,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":12,"author":{"gitId":"yaowei-soc"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"yaowei-soc"},"content":" * Parses input arguments and creates a new FilterCommand object"},{"lineNumber":14,"author":{"gitId":"yaowei-soc"},"content":" */"},{"lineNumber":15,"author":{"gitId":"yaowei-soc"},"content":"public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"},{"lineNumber":16,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":17,"author":{"gitId":"yaowei-soc"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"yaowei-soc"},"content":"     * Parses the given {@code String} of arguments in the context of the FilterCommand and returns"},{"lineNumber":19,"author":{"gitId":"yaowei-soc"},"content":"     * an FilterCommand object for execution."},{"lineNumber":20,"author":{"gitId":"yaowei-soc"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"yaowei-soc"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitId":"yaowei-soc"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"yaowei-soc"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"yaowei-soc"},"content":"    public FilterCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitId":"yaowei-soc"},"content":"        if (args.isEmpty()) {"},{"lineNumber":26,"author":{"gitId":"yaowei-soc"},"content":"            return new FilterCommand(new DisplayFilterPredicate());"},{"lineNumber":27,"author":{"gitId":"yaowei-soc"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"yaowei-soc"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"},{"lineNumber":29,"author":{"gitId":"yaowei-soc"},"content":"                .tokenize(args, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":30,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":31,"author":{"gitId":"yaowei-soc"},"content":"        return new FilterCommand(new DisplayFilterPredicate(argMultimap));"},{"lineNumber":32,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"yaowei-soc"},"content":"}"}],"authorContributionMap":{"yaowei-soc":33}},{"path":"src/main/java/seedu/address/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string."},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":" * E.g. \u0027-t\u0027 in \u0027add James -t friend\u0027."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"oeiyiping":1,"-":38}},{"path":"src/main/java/seedu/address/model/DisplayFilterPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yaowei-soc"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":3,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":9,"author":{"gitId":"yaowei-soc"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitId":"yaowei-soc"},"content":"import java.util.function.Predicate;"},{"lineNumber":11,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":12,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":13,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":14,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":15,"author":{"gitId":"yaowei-soc"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"yaowei-soc"},"content":" * Tests if a {@code Person}\u0027s field in {@code PersonCard} should be hidden. By default, all the"},{"lineNumber":17,"author":{"gitId":"yaowei-soc"},"content":" * fields are shown if no {@code ArgumentMultimap} is provided."},{"lineNumber":18,"author":{"gitId":"yaowei-soc"},"content":" */"},{"lineNumber":19,"author":{"gitId":"yaowei-soc"},"content":"public class DisplayFilterPredicate implements Predicate\u003cPrefix\u003e {"},{"lineNumber":20,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":21,"author":{"gitId":"yaowei-soc"},"content":"    private final HashMap\u003cPrefix, Boolean\u003e map;"},{"lineNumber":22,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":23,"author":{"gitId":"yaowei-soc"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"yaowei-soc"},"content":"     * Initializes known prefixes to true. See {@code CliSyntax} for known prefixes."},{"lineNumber":25,"author":{"gitId":"yaowei-soc"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"yaowei-soc"},"content":"    public DisplayFilterPredicate() {"},{"lineNumber":27,"author":{"gitId":"yaowei-soc"},"content":"        map \u003d new HashMap\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"yaowei-soc"},"content":"        map.put(PREFIX_NAME, true);"},{"lineNumber":29,"author":{"gitId":"yaowei-soc"},"content":"        map.put(PREFIX_PHONE, true);"},{"lineNumber":30,"author":{"gitId":"yaowei-soc"},"content":"        map.put(PREFIX_EMAIL, true);"},{"lineNumber":31,"author":{"gitId":"yaowei-soc"},"content":"        map.put(PREFIX_ADDRESS, true);"},{"lineNumber":32,"author":{"gitId":"yaowei-soc"},"content":"        map.put(PREFIX_TAG, true);"},{"lineNumber":33,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":35,"author":{"gitId":"yaowei-soc"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"yaowei-soc"},"content":"     * Initializes prefixes in argumentMultimap to true if present. See {@code CliSyntax} for known"},{"lineNumber":37,"author":{"gitId":"yaowei-soc"},"content":"     * prefixes."},{"lineNumber":38,"author":{"gitId":"yaowei-soc"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"yaowei-soc"},"content":"    public DisplayFilterPredicate(ArgumentMultimap argumentMultimap) {"},{"lineNumber":40,"author":{"gitId":"yaowei-soc"},"content":"        this();"},{"lineNumber":41,"author":{"gitId":"yaowei-soc"},"content":"        if (argumentMultimap.getArgumentSize() !\u003d 0) {"},{"lineNumber":42,"author":{"gitId":"yaowei-soc"},"content":"            map.put(PREFIX_PHONE, argumentMultimap.getValue(PREFIX_PHONE).isPresent());"},{"lineNumber":43,"author":{"gitId":"yaowei-soc"},"content":"            map.put(PREFIX_EMAIL, argumentMultimap.getValue(PREFIX_EMAIL).isPresent());"},{"lineNumber":44,"author":{"gitId":"yaowei-soc"},"content":"            map.put(PREFIX_ADDRESS, argumentMultimap.getValue(PREFIX_ADDRESS).isPresent());"},{"lineNumber":45,"author":{"gitId":"yaowei-soc"},"content":"            map.put(PREFIX_TAG, argumentMultimap.getValue(PREFIX_TAG).isPresent());"},{"lineNumber":46,"author":{"gitId":"yaowei-soc"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":49,"author":{"gitId":"yaowei-soc"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"yaowei-soc"},"content":"    public boolean test(Prefix prefix) {"},{"lineNumber":51,"author":{"gitId":"yaowei-soc"},"content":"        return map.getOrDefault(prefix, true);"},{"lineNumber":52,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":54,"author":{"gitId":"yaowei-soc"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"yaowei-soc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitId":"yaowei-soc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitId":"yaowei-soc"},"content":"                || (other instanceof DisplayFilterPredicate) // instanceof handles nulls"},{"lineNumber":58,"author":{"gitId":"yaowei-soc"},"content":"                \u0026\u0026 map.keySet().stream()"},{"lineNumber":59,"author":{"gitId":"yaowei-soc"},"content":"                .allMatch(e -\u003e map.get(e).equals(((DisplayFilterPredicate) other).map.get(e)));"},{"lineNumber":60,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"yaowei-soc"},"content":"}"}],"authorContributionMap":{"yaowei-soc":61}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Deletes the given person."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * The person must exist in the address book."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Adds the given person."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    void addPerson(Person person);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":87,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":88,"author":{"gitId":"yaowei-soc"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"yaowei-soc"},"content":"     * Updates display filter that determines PersonCard control visibility."},{"lineNumber":90,"author":{"gitId":"yaowei-soc"},"content":"     * @param displayFilterPredicate that returns true if prefix linked control should be shown."},{"lineNumber":91,"author":{"gitId":"yaowei-soc"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"yaowei-soc"},"content":"    void updateDisplayFilter(DisplayFilterPredicate displayFilterPredicate);"},{"lineNumber":93,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":94,"author":{"gitId":"yaowei-soc"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"yaowei-soc"},"content":"     * Returns display filter that determines field control visibility."},{"lineNumber":96,"author":{"gitId":"yaowei-soc"},"content":"     * @return predicate that returns true if prefix linked control should be shown."},{"lineNumber":97,"author":{"gitId":"yaowei-soc"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"yaowei-soc"},"content":"    DisplayFilterPredicate getDisplayFilter();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":87,"yaowei-soc":12}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":25,"author":{"gitId":"yaowei-soc"},"content":"    private DisplayFilterPredicate displayFilterPredicate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":39,"author":{"gitId":"yaowei-soc"},"content":"        displayFilterPredicate \u003d new DisplayFilterPredicate();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return filteredPersons;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitId":"yaowei-soc"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e displayFilter) {"},{"lineNumber":130,"author":{"gitId":"yaowei-soc"},"content":"        requireNonNull(displayFilter);"},{"lineNumber":131,"author":{"gitId":"yaowei-soc"},"content":"        filteredPersons.setPredicate(displayFilter);"},{"lineNumber":132,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":134,"author":{"gitId":"yaowei-soc"},"content":"    @Override"},{"lineNumber":135,"author":{"gitId":"yaowei-soc"},"content":"    public void updateDisplayFilter(DisplayFilterPredicate displayFilterPredicate) {"},{"lineNumber":136,"author":{"gitId":"yaowei-soc"},"content":"        this.displayFilterPredicate \u003d displayFilterPredicate;"},{"lineNumber":137,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":139,"author":{"gitId":"yaowei-soc"},"content":"    @Override"},{"lineNumber":140,"author":{"gitId":"yaowei-soc"},"content":"    public DisplayFilterPredicate getDisplayFilter() {"},{"lineNumber":141,"author":{"gitId":"yaowei-soc"},"content":"        return displayFilterPredicate;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":148,"yaowei-soc":15}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":87,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":88,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":89,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":90,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":96,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":100,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":113,"author":{"gitId":"yaowei-soc"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList(),"},{"lineNumber":114,"author":{"gitId":"yaowei-soc"},"content":"                logic.getDisplayFilter());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return personListPanel;"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":173,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"yaowei-soc"},"content":"            personListPanel.updateDisplayFilter(logic.getDisplayFilter());"},{"lineNumber":191,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":195,"yaowei-soc":4}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":6,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":9,"author":{"gitId":"yaowei-soc"},"content":"import java.util.function.Predicate;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"yaowei-soc"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As"},{"lineNumber":28,"author":{"gitId":"yaowei-soc"},"content":"     * a consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception"},{"lineNumber":29,"author":{"gitId":"yaowei-soc"},"content":"     * will be thrown by JavaFX during runtime."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"yaowei-soc"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on"},{"lineNumber":32,"author":{"gitId":"yaowei-soc"},"content":"     * AddressBook level 4\u003c/a\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"yaowei-soc"},"content":"    public PersonCard(Person person, int displayedIndex, Predicate\u003cPrefix\u003e displayFilter) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        person.getTags().stream()"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":66,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":67,"author":{"gitId":"yaowei-soc"},"content":"        // Update control visibility"},{"lineNumber":68,"author":{"gitId":"yaowei-soc"},"content":"        phone.setVisible(displayFilter.test(PREFIX_PHONE));"},{"lineNumber":69,"author":{"gitId":"yaowei-soc"},"content":"        phone.setManaged(displayFilter.test(PREFIX_PHONE));"},{"lineNumber":70,"author":{"gitId":"yaowei-soc"},"content":"        address.setVisible(displayFilter.test(PREFIX_ADDRESS));"},{"lineNumber":71,"author":{"gitId":"yaowei-soc"},"content":"        address.setManaged(displayFilter.test(PREFIX_ADDRESS));"},{"lineNumber":72,"author":{"gitId":"yaowei-soc"},"content":"        email.setVisible(displayFilter.test(PREFIX_EMAIL));"},{"lineNumber":73,"author":{"gitId":"yaowei-soc"},"content":"        email.setManaged(displayFilter.test(PREFIX_EMAIL));"},{"lineNumber":74,"author":{"gitId":"yaowei-soc"},"content":"        tags.setVisible(displayFilter.test(PREFIX_TAG));"},{"lineNumber":75,"author":{"gitId":"yaowei-soc"},"content":"        tags.setManaged(displayFilter.test(PREFIX_TAG));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":72,"yaowei-soc":23}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.model.DisplayFilterPredicate;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ListView\u003cPerson\u003e personListView;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"yaowei-soc"},"content":"    private DisplayFilterPredicate displayFilterPredicate;"},{"lineNumber":26,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"yaowei-soc"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList,"},{"lineNumber":31,"author":{"gitId":"yaowei-soc"},"content":"            DisplayFilterPredicate displayFilterPredicate) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        personListView.setItems(personList);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":35,"author":{"gitId":"yaowei-soc"},"content":"        this.displayFilterPredicate \u003d displayFilterPredicate;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"yaowei-soc"},"content":"     * Updates the filter used for PersonCard fields. Forces the listview to re-draw it\u0027s content."},{"lineNumber":40,"author":{"gitId":"yaowei-soc"},"content":"     * @param displayFilterPredicate display filter"},{"lineNumber":41,"author":{"gitId":"yaowei-soc"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"yaowei-soc"},"content":"    public void updateDisplayFilter(DisplayFilterPredicate displayFilterPredicate) {"},{"lineNumber":43,"author":{"gitId":"yaowei-soc"},"content":"        this.displayFilterPredicate \u003d displayFilterPredicate;"},{"lineNumber":44,"author":{"gitId":"yaowei-soc"},"content":"        this.personListView.refresh();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"yaowei-soc"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code"},{"lineNumber":49,"author":{"gitId":"yaowei-soc"},"content":"     * PersonCard}."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPerson\u003e {"},{"lineNumber":52,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        protected void updateItem(Person person, boolean empty) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                setGraphic(null);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                setText(null);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":61,"author":{"gitId":"yaowei-soc"},"content":"                setGraphic("},{"lineNumber":62,"author":{"gitId":"yaowei-soc"},"content":"                        new PersonCard(person, getIndex() + 1, displayFilterPredicate).getRoot());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":49,"yaowei-soc":18}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"yaowei-soc"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"-":35,"yaowei-soc":1}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.model.DisplayFilterPredicate;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":152,"author":{"gitId":"yaowei-soc"},"content":"        @Override"},{"lineNumber":153,"author":{"gitId":"yaowei-soc"},"content":"        public void updateDisplayFilter(DisplayFilterPredicate displayFilterPredicate) {"},{"lineNumber":154,"author":{"gitId":"yaowei-soc"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitId":"yaowei-soc"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":157,"author":{"gitId":"yaowei-soc"},"content":"        @Override"},{"lineNumber":158,"author":{"gitId":"yaowei-soc"},"content":"        public DisplayFilterPredicate getDisplayFilter() {"},{"lineNumber":159,"author":{"gitId":"yaowei-soc"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitId":"yaowei-soc"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person."},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        private final Person person;"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            this.person \u003d person;"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":194,"yaowei-soc":11}},{"path":"src/test/java/seedu/address/logic/commands/FilterCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yaowei-soc"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":3,"author":{"gitId":"yaowei-soc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"yaowei-soc"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":5,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":8,"author":{"gitId":"yaowei-soc"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":10,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":11,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.model.DisplayFilterPredicate;"},{"lineNumber":12,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":16,"author":{"gitId":"yaowei-soc"},"content":"class FilterCommandTest {"},{"lineNumber":17,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":18,"author":{"gitId":"yaowei-soc"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":19,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":20,"author":{"gitId":"yaowei-soc"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"yaowei-soc"},"content":"    public void execute_modelUpdated_success() throws Exception {"},{"lineNumber":22,"author":{"gitId":"yaowei-soc"},"content":"        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"},{"lineNumber":23,"author":{"gitId":"yaowei-soc"},"content":"        argumentMultimap.put(PREFIX_ADDRESS, \"\");"},{"lineNumber":24,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":25,"author":{"gitId":"yaowei-soc"},"content":"        DisplayFilterPredicate displayFilterPredicate \u003d new DisplayFilterPredicate("},{"lineNumber":26,"author":{"gitId":"yaowei-soc"},"content":"                argumentMultimap);"},{"lineNumber":27,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":28,"author":{"gitId":"yaowei-soc"},"content":"        FilterCommand filterCommand \u003d new FilterCommand(displayFilterPredicate);"},{"lineNumber":29,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":30,"author":{"gitId":"yaowei-soc"},"content":"        // before executing"},{"lineNumber":31,"author":{"gitId":"yaowei-soc"},"content":"        assertNotEquals(model.getDisplayFilter(), displayFilterPredicate);"},{"lineNumber":32,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":33,"author":{"gitId":"yaowei-soc"},"content":"        filterCommand.execute(model);"},{"lineNumber":34,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":35,"author":{"gitId":"yaowei-soc"},"content":"        // after executing"},{"lineNumber":36,"author":{"gitId":"yaowei-soc"},"content":"        assertEquals(model.getDisplayFilter(), displayFilterPredicate);"},{"lineNumber":37,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":39,"author":{"gitId":"yaowei-soc"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"yaowei-soc"},"content":"    public void equals() {"},{"lineNumber":41,"author":{"gitId":"yaowei-soc"},"content":"        final ArgumentMultimap addressMultimap \u003d new ArgumentMultimap();"},{"lineNumber":42,"author":{"gitId":"yaowei-soc"},"content":"        addressMultimap.put(PREFIX_ADDRESS, \"\");"},{"lineNumber":43,"author":{"gitId":"yaowei-soc"},"content":"        final DisplayFilterPredicate addressOnlyPredicate \u003d new DisplayFilterPredicate("},{"lineNumber":44,"author":{"gitId":"yaowei-soc"},"content":"                addressMultimap);"},{"lineNumber":45,"author":{"gitId":"yaowei-soc"},"content":"        final FilterCommand standardCommand \u003d new FilterCommand(new DisplayFilterPredicate());"},{"lineNumber":46,"author":{"gitId":"yaowei-soc"},"content":"        final FilterCommand addressPredicateCommand \u003d new FilterCommand(addressOnlyPredicate);"},{"lineNumber":47,"author":{"gitId":"yaowei-soc"},"content":"        final FilterCommand dupeAddressPredicateCommand \u003d new FilterCommand(addressOnlyPredicate);"},{"lineNumber":48,"author":{"gitId":"yaowei-soc"},"content":"        final FilterCommand commandWithSameValues \u003d new FilterCommand(new DisplayFilterPredicate());"},{"lineNumber":49,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":50,"author":{"gitId":"yaowei-soc"},"content":"        // same predicate, default -\u003e returns true"},{"lineNumber":51,"author":{"gitId":"yaowei-soc"},"content":"        assertEquals(commandWithSameValues, standardCommand);"},{"lineNumber":52,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":53,"author":{"gitId":"yaowei-soc"},"content":"        // same predicate, address -\u003e returns true"},{"lineNumber":54,"author":{"gitId":"yaowei-soc"},"content":"        assertEquals(addressPredicateCommand, dupeAddressPredicateCommand);"},{"lineNumber":55,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":56,"author":{"gitId":"yaowei-soc"},"content":"        // same object -\u003e returns true"},{"lineNumber":57,"author":{"gitId":"yaowei-soc"},"content":"        assertEquals(standardCommand, standardCommand);"},{"lineNumber":58,"author":{"gitId":"yaowei-soc"},"content":"        assertEquals(addressPredicateCommand, addressPredicateCommand);"},{"lineNumber":59,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":60,"author":{"gitId":"yaowei-soc"},"content":"        // null -\u003e returns false"},{"lineNumber":61,"author":{"gitId":"yaowei-soc"},"content":"        assertNotEquals(standardCommand, null);"},{"lineNumber":62,"author":{"gitId":"yaowei-soc"},"content":"        assertNotEquals(addressPredicateCommand, null);"},{"lineNumber":63,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":64,"author":{"gitId":"yaowei-soc"},"content":"        // different command types -\u003e returns false"},{"lineNumber":65,"author":{"gitId":"yaowei-soc"},"content":"        assertNotEquals(new ClearCommand(), standardCommand);"},{"lineNumber":66,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":67,"author":{"gitId":"yaowei-soc"},"content":"        // different predicate -\u003e returns false"},{"lineNumber":68,"author":{"gitId":"yaowei-soc"},"content":"        assertNotEquals(addressPredicateCommand, standardCommand);"},{"lineNumber":69,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"yaowei-soc"},"content":"}"}],"authorContributionMap":{"yaowei-soc":70}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":8,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":25,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":30,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.model.DisplayFilterPredicate;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":57,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":66,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":80,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"yaowei-soc"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"yaowei-soc"},"content":"    public void parseCommand_filter() throws Exception {"},{"lineNumber":86,"author":{"gitId":"yaowei-soc"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(PREFIX_ADDRESS.toString(), PREFIX_PHONE.toString(),"},{"lineNumber":87,"author":{"gitId":"yaowei-soc"},"content":"                PREFIX_EMAIL.toString());"},{"lineNumber":88,"author":{"gitId":"yaowei-soc"},"content":"        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"},{"lineNumber":89,"author":{"gitId":"yaowei-soc"},"content":"        argumentMultimap.put(PREFIX_ADDRESS, \"\");"},{"lineNumber":90,"author":{"gitId":"yaowei-soc"},"content":"        argumentMultimap.put(PREFIX_PHONE, \"\");"},{"lineNumber":91,"author":{"gitId":"yaowei-soc"},"content":"        argumentMultimap.put(PREFIX_EMAIL, \"\");"},{"lineNumber":92,"author":{"gitId":"yaowei-soc"},"content":"        DisplayFilterPredicate displayFilterPredicate \u003d new DisplayFilterPredicate(argumentMultimap);"},{"lineNumber":93,"author":{"gitId":"yaowei-soc"},"content":"        FilterCommand command \u003d (FilterCommand) parser.parseCommand("},{"lineNumber":94,"author":{"gitId":"yaowei-soc"},"content":"                FilterCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":95,"author":{"gitId":"yaowei-soc"},"content":"        assertEquals(new FilterCommand(displayFilterPredicate), command);"},{"lineNumber":96,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":101,"yaowei-soc":19}},{"path":"src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yaowei-soc"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":3,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":6,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":9,"author":{"gitId":"yaowei-soc"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":11,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":12,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.model.DisplayFilterPredicate;"},{"lineNumber":13,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":14,"author":{"gitId":"yaowei-soc"},"content":"class FilterCommandParserTest {"},{"lineNumber":15,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":16,"author":{"gitId":"yaowei-soc"},"content":"    private final FilterCommandParser parser \u003d new FilterCommandParser();"},{"lineNumber":17,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":18,"author":{"gitId":"yaowei-soc"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"yaowei-soc"},"content":"    public void parse_emptyArgs_success() {"},{"lineNumber":20,"author":{"gitId":"yaowei-soc"},"content":"        FilterCommand expectedFilterCommand \u003d new FilterCommand(new DisplayFilterPredicate());"},{"lineNumber":21,"author":{"gitId":"yaowei-soc"},"content":"        assertParseSuccess(parser, \"\", expectedFilterCommand);"},{"lineNumber":22,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":24,"author":{"gitId":"yaowei-soc"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"yaowei-soc"},"content":"    public void parse_allFields_success() {"},{"lineNumber":26,"author":{"gitId":"yaowei-soc"},"content":"        String arguments \u003d"},{"lineNumber":27,"author":{"gitId":"yaowei-soc"},"content":"                PREFIX_PHONE + \" \" + PREFIX_EMAIL + \" \" + PREFIX_ADDRESS + \" \" + PREFIX_TAG;"},{"lineNumber":28,"author":{"gitId":"yaowei-soc"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer"},{"lineNumber":29,"author":{"gitId":"yaowei-soc"},"content":"                .tokenize(arguments, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":30,"author":{"gitId":"yaowei-soc"},"content":"        FilterCommand expectedFilterCommand \u003d new FilterCommand("},{"lineNumber":31,"author":{"gitId":"yaowei-soc"},"content":"                new DisplayFilterPredicate(argumentMultimap));"},{"lineNumber":32,"author":{"gitId":"yaowei-soc"},"content":"        assertParseSuccess(parser, arguments, expectedFilterCommand);"},{"lineNumber":33,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"yaowei-soc"},"content":"}"}],"authorContributionMap":{"yaowei-soc":34}},{"path":"src/test/java/seedu/address/model/DisplayFilterPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yaowei-soc"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":3,"author":{"gitId":"yaowei-soc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"yaowei-soc"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"yaowei-soc"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"yaowei-soc"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":8,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitId":"yaowei-soc"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":13,"author":{"gitId":"yaowei-soc"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":14,"author":{"gitId":"yaowei-soc"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":16,"author":{"gitId":"yaowei-soc"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":17,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":18,"author":{"gitId":"yaowei-soc"},"content":"class DisplayFilterPredicateTest {"},{"lineNumber":19,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":20,"author":{"gitId":"yaowei-soc"},"content":"    private ArgumentMultimap addressMultimap;"},{"lineNumber":21,"author":{"gitId":"yaowei-soc"},"content":"    private ArgumentMultimap fullMultimap;"},{"lineNumber":22,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":23,"author":{"gitId":"yaowei-soc"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"yaowei-soc"},"content":"    public void initializeArguments() {"},{"lineNumber":25,"author":{"gitId":"yaowei-soc"},"content":"        addressMultimap \u003d new ArgumentMultimap();"},{"lineNumber":26,"author":{"gitId":"yaowei-soc"},"content":"        addressMultimap.put(PREFIX_ADDRESS, \"\");"},{"lineNumber":27,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":28,"author":{"gitId":"yaowei-soc"},"content":"        fullMultimap \u003d new ArgumentMultimap();"},{"lineNumber":29,"author":{"gitId":"yaowei-soc"},"content":"        fullMultimap.put(PREFIX_NAME, \"\");"},{"lineNumber":30,"author":{"gitId":"yaowei-soc"},"content":"        fullMultimap.put(PREFIX_ADDRESS, \"\");"},{"lineNumber":31,"author":{"gitId":"yaowei-soc"},"content":"        fullMultimap.put(PREFIX_EMAIL, \"\");"},{"lineNumber":32,"author":{"gitId":"yaowei-soc"},"content":"        fullMultimap.put(PREFIX_TAG, \"\");"},{"lineNumber":33,"author":{"gitId":"yaowei-soc"},"content":"        fullMultimap.put(PREFIX_PHONE, \"\");"},{"lineNumber":34,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":36,"author":{"gitId":"yaowei-soc"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"yaowei-soc"},"content":"    public void test_predicateEqualsCheck_allEquals() {"},{"lineNumber":38,"author":{"gitId":"yaowei-soc"},"content":"        DisplayFilterPredicate emptyArgs \u003d new DisplayFilterPredicate();"},{"lineNumber":39,"author":{"gitId":"yaowei-soc"},"content":"        DisplayFilterPredicate defaultArgs \u003d new DisplayFilterPredicate(new ArgumentMultimap());"},{"lineNumber":40,"author":{"gitId":"yaowei-soc"},"content":"        DisplayFilterPredicate addressArgs \u003d new DisplayFilterPredicate(addressMultimap);"},{"lineNumber":41,"author":{"gitId":"yaowei-soc"},"content":"        DisplayFilterPredicate dupeAddressArgs \u003d new DisplayFilterPredicate(addressMultimap);"},{"lineNumber":42,"author":{"gitId":"yaowei-soc"},"content":"        DisplayFilterPredicate fullArgs \u003d new DisplayFilterPredicate(fullMultimap);"},{"lineNumber":43,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":44,"author":{"gitId":"yaowei-soc"},"content":"        assertEquals(emptyArgs, defaultArgs);"},{"lineNumber":45,"author":{"gitId":"yaowei-soc"},"content":"        assertEquals(emptyArgs, fullArgs);"},{"lineNumber":46,"author":{"gitId":"yaowei-soc"},"content":"        assertEquals(emptyArgs, defaultArgs);"},{"lineNumber":47,"author":{"gitId":"yaowei-soc"},"content":"        assertEquals(addressArgs, addressArgs);"},{"lineNumber":48,"author":{"gitId":"yaowei-soc"},"content":"        assertEquals(addressArgs, dupeAddressArgs);"},{"lineNumber":49,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":51,"author":{"gitId":"yaowei-soc"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"yaowei-soc"},"content":"    public void test_predicateEqualsCheck_allNotEquals() {"},{"lineNumber":53,"author":{"gitId":"yaowei-soc"},"content":"        DisplayFilterPredicate emptyArgs \u003d new DisplayFilterPredicate();"},{"lineNumber":54,"author":{"gitId":"yaowei-soc"},"content":"        DisplayFilterPredicate addressArgs \u003d new DisplayFilterPredicate(addressMultimap);"},{"lineNumber":55,"author":{"gitId":"yaowei-soc"},"content":"        DisplayFilterPredicate fullArgs \u003d new DisplayFilterPredicate(fullMultimap);"},{"lineNumber":56,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":57,"author":{"gitId":"yaowei-soc"},"content":"        assertNotEquals(emptyArgs, addressArgs);"},{"lineNumber":58,"author":{"gitId":"yaowei-soc"},"content":"        assertNotEquals(addressArgs, fullArgs);"},{"lineNumber":59,"author":{"gitId":"yaowei-soc"},"content":"        assertNotEquals(1, emptyArgs);"},{"lineNumber":60,"author":{"gitId":"yaowei-soc"},"content":"        assertNotEquals(1, addressArgs);"},{"lineNumber":61,"author":{"gitId":"yaowei-soc"},"content":"        assertNotEquals(1, fullArgs);"},{"lineNumber":62,"author":{"gitId":"yaowei-soc"},"content":"        assertNotEquals(null, emptyArgs);"},{"lineNumber":63,"author":{"gitId":"yaowei-soc"},"content":"        assertNotEquals(null, addressArgs);"},{"lineNumber":64,"author":{"gitId":"yaowei-soc"},"content":"        assertNotEquals(null, fullArgs);"},{"lineNumber":65,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":67,"author":{"gitId":"yaowei-soc"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"yaowei-soc"},"content":"    public void test_defaultArgs_allTrue() {"},{"lineNumber":69,"author":{"gitId":"yaowei-soc"},"content":"        DisplayFilterPredicate displayFilterPredicate \u003d new DisplayFilterPredicate();"},{"lineNumber":70,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":71,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_ADDRESS));"},{"lineNumber":72,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_NAME));"},{"lineNumber":73,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_EMAIL));"},{"lineNumber":74,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_TAG));"},{"lineNumber":75,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_PHONE));"},{"lineNumber":76,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":78,"author":{"gitId":"yaowei-soc"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"yaowei-soc"},"content":"    public void test_emptyArgMap_allTrue() {"},{"lineNumber":80,"author":{"gitId":"yaowei-soc"},"content":"        DisplayFilterPredicate displayFilterPredicate \u003d new DisplayFilterPredicate("},{"lineNumber":81,"author":{"gitId":"yaowei-soc"},"content":"                new ArgumentMultimap());"},{"lineNumber":82,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":83,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_ADDRESS));"},{"lineNumber":84,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_NAME));"},{"lineNumber":85,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_EMAIL));"},{"lineNumber":86,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_TAG));"},{"lineNumber":87,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_PHONE));"},{"lineNumber":88,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":90,"author":{"gitId":"yaowei-soc"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"yaowei-soc"},"content":"    public void test_argMapNameAlwaysTrue_success() {"},{"lineNumber":92,"author":{"gitId":"yaowei-soc"},"content":"        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"},{"lineNumber":93,"author":{"gitId":"yaowei-soc"},"content":"        argumentMultimap.put(PREFIX_ADDRESS, \"\");"},{"lineNumber":94,"author":{"gitId":"yaowei-soc"},"content":"        DisplayFilterPredicate displayFilterPredicate \u003d new DisplayFilterPredicate("},{"lineNumber":95,"author":{"gitId":"yaowei-soc"},"content":"                argumentMultimap);"},{"lineNumber":96,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":97,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_NAME));"},{"lineNumber":98,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_ADDRESS));"},{"lineNumber":99,"author":{"gitId":"yaowei-soc"},"content":"        assertFalse(displayFilterPredicate.test(PREFIX_EMAIL));"},{"lineNumber":100,"author":{"gitId":"yaowei-soc"},"content":"        assertFalse(displayFilterPredicate.test(PREFIX_TAG));"},{"lineNumber":101,"author":{"gitId":"yaowei-soc"},"content":"        assertFalse(displayFilterPredicate.test(PREFIX_PHONE));"},{"lineNumber":102,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":104,"author":{"gitId":"yaowei-soc"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"yaowei-soc"},"content":"    public void test_argMapNameTrueOthersFalse_success() {"},{"lineNumber":106,"author":{"gitId":"yaowei-soc"},"content":"        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"},{"lineNumber":107,"author":{"gitId":"yaowei-soc"},"content":"        argumentMultimap.put(PREFIX_NAME, \"\");"},{"lineNumber":108,"author":{"gitId":"yaowei-soc"},"content":"        DisplayFilterPredicate displayFilterPredicate \u003d new DisplayFilterPredicate("},{"lineNumber":109,"author":{"gitId":"yaowei-soc"},"content":"                argumentMultimap);"},{"lineNumber":110,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":111,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_NAME));"},{"lineNumber":112,"author":{"gitId":"yaowei-soc"},"content":"        assertFalse(displayFilterPredicate.test(PREFIX_ADDRESS));"},{"lineNumber":113,"author":{"gitId":"yaowei-soc"},"content":"        assertFalse(displayFilterPredicate.test(PREFIX_EMAIL));"},{"lineNumber":114,"author":{"gitId":"yaowei-soc"},"content":"        assertFalse(displayFilterPredicate.test(PREFIX_TAG));"},{"lineNumber":115,"author":{"gitId":"yaowei-soc"},"content":"        assertFalse(displayFilterPredicate.test(PREFIX_PHONE));"},{"lineNumber":116,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":118,"author":{"gitId":"yaowei-soc"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"yaowei-soc"},"content":"    public void test_argMapFilledAllTrue_success() {"},{"lineNumber":120,"author":{"gitId":"yaowei-soc"},"content":"        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"},{"lineNumber":121,"author":{"gitId":"yaowei-soc"},"content":"        argumentMultimap.put(PREFIX_NAME, \"\");"},{"lineNumber":122,"author":{"gitId":"yaowei-soc"},"content":"        argumentMultimap.put(PREFIX_ADDRESS, \"\");"},{"lineNumber":123,"author":{"gitId":"yaowei-soc"},"content":"        argumentMultimap.put(PREFIX_EMAIL, \"\");"},{"lineNumber":124,"author":{"gitId":"yaowei-soc"},"content":"        argumentMultimap.put(PREFIX_TAG, \"\");"},{"lineNumber":125,"author":{"gitId":"yaowei-soc"},"content":"        argumentMultimap.put(PREFIX_PHONE, \"\");"},{"lineNumber":126,"author":{"gitId":"yaowei-soc"},"content":"        DisplayFilterPredicate displayFilterPredicate \u003d new DisplayFilterPredicate("},{"lineNumber":127,"author":{"gitId":"yaowei-soc"},"content":"                argumentMultimap);"},{"lineNumber":128,"author":{"gitId":"yaowei-soc"},"content":""},{"lineNumber":129,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_ADDRESS));"},{"lineNumber":130,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_NAME));"},{"lineNumber":131,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_EMAIL));"},{"lineNumber":132,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_TAG));"},{"lineNumber":133,"author":{"gitId":"yaowei-soc"},"content":"        assertTrue(displayFilterPredicate.test(PREFIX_PHONE));"},{"lineNumber":134,"author":{"gitId":"yaowei-soc"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"yaowei-soc"},"content":"}"}],"authorContributionMap":{"yaowei-soc":135}}]
