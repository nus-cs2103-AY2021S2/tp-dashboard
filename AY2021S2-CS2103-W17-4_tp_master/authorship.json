[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"Juzzanoob"},"content":"# iSCAM"},{"lineNumber":6,"author":{"gitId":"Juzzanoob"},"content":"Welcome to iSCAM, your new client management app. It helps catalogue and manage your clients\u0027 information, including upcoming "},{"lineNumber":7,"author":{"gitId":"Juzzanoob"},"content":"appointments with them, and allows you to retrieve these data efficiently. iSCAM also presents your daily scheduled appointments "},{"lineNumber":8,"author":{"gitId":"Juzzanoob"},"content":"in a one-page solution, where you can easily see your schedule for the day."},{"lineNumber":9,"author":{"gitId":"Juzzanoob"},"content":""},{"lineNumber":10,"author":{"gitId":"Juzzanoob"},"content":"## For Users"},{"lineNumber":11,"author":{"gitId":"Juzzanoob"},"content":"iSCAM can store and manage your client information, such as:"},{"lineNumber":12,"author":{"gitId":"Juzzanoob"},"content":"* Name"},{"lineNumber":13,"author":{"gitId":"Juzzanoob"},"content":"* Gender"},{"lineNumber":14,"author":{"gitId":"Juzzanoob"},"content":"* Age"},{"lineNumber":15,"author":{"gitId":"Juzzanoob"},"content":"* Custom Information (e.g. food preferences)"},{"lineNumber":16,"author":{"gitId":"Juzzanoob"},"content":"* Appointments you have with them"},{"lineNumber":17,"author":{"gitId":"Juzzanoob"},"content":""},{"lineNumber":18,"author":{"gitId":"Juzzanoob"},"content":"Client information may be retrieved easily through an efficient search interface, which is optimised for fast-typers too."},{"lineNumber":19,"author":{"gitId":"Juzzanoob"},"content":""},{"lineNumber":20,"author":{"gitId":"Juzzanoob"},"content":"Please view the User Guide [here] to see the list of commands you may use with iSCAM."},{"lineNumber":21,"author":{"gitId":"Juzzanoob"},"content":""},{"lineNumber":22,"author":{"gitId":"Juzzanoob"},"content":"## For Developers"},{"lineNumber":23,"author":{"gitId":"Juzzanoob"},"content":"iSCAM is an ongoing project under the CS2103 Software Engineering module at the National University of Singapore. This project"},{"lineNumber":24,"author":{"gitId":"Juzzanoob"},"content":"simulates an ongoing software project build around a desktop application (initially called _AddressBook_) used for managing contact details."},{"lineNumber":25,"author":{"gitId":"-"},"content":"* It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."},{"lineNumber":26,"author":{"gitId":"-"},"content":"* It comes with a **reasonable level of user and developer documentation**."},{"lineNumber":27,"author":{"gitId":"Juzzanoob"},"content":""},{"lineNumber":28,"author":{"gitId":"Juzzanoob"},"content":"Please view the full Developer Guide [here] for more information."},{"lineNumber":29,"author":{"gitId":"Juzzanoob"},"content":""},{"lineNumber":30,"author":{"gitId":"Juzzanoob"},"content":"For detailed documentation of the initial _AddressBook_ project, see the **[Address Book Product Website](https://se-education.org/addressbook-level3)**."},{"lineNumber":31,"author":{"gitId":"Juzzanoob"},"content":""},{"lineNumber":32,"author":{"gitId":"Juzzanoob"},"content":""},{"lineNumber":33,"author":{"gitId":"Juzzanoob"},"content":"### Acknowledgements"},{"lineNumber":34,"author":{"gitId":"Juzzanoob"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"Juzzanoob":28,"-":6}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"# About Us"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"You can reach us at the email at our individual emails below!"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"### Kelvin"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"\u003cimg src\u003d\"images/zoeykobe.png\" width\u003d\"200px\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"[GitHub](https://github.com/zoeykobe) | [Portfolio](team/kelvin.md) | [Email](zhou_yi_kelvin@u.nus.edu)"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"* Role: Team Leader"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"### Friscilia"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"\u003cimg src\u003d\"images/frisciliasultan.png\" width\u003d\"200px\"\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"[GitHub](https://github.com/frisciliasultan) | [Portfolio](team/friscilia.md) | [Email](frisciliasultan@u.nus.edu)"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"* Role: Developer"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"* Responsibilities: Testing"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"### Isaiah"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"\u003cimg src\u003d\"images/zaiah0505.png\" width\u003d\"200px\"\u003e"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"[GitHub](https://github.com/Zaiah0505) | [Portfolio](team/isaiah.md) | [Email](isaiah.koh@u.nus.edu)"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"* Role: Developer"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"* Responsibilities: Scheduling and Tracking, UI"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"### Jody"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"\u003cimg src\u003d\"images/jodylorah.png\" width\u003d\"200px\"\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"[GitHub](https://github.com/JodyLorah) | [Portfolio](team/jodylorah.md) | [Email](jodylorah@u.nus.edu)"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"* Responsibilities: Code Quality"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"### Qin Liang"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"\u003cimg src\u003d\"images/tomashiwa.png\" width\u003d\"200px\"\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"[GitHub](http://github.com/Tomashiwa) | [Portfolio](team/qinliang.md) | [Email](e0407322@u.nus.edu)"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"* Responsibilities: Integration"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"### Shaun"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"\u003cimg src\u003d\"images/juzzanoob.png\" width\u003d\"200px\"\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"[GitHub](http://github.com/Juzzanoob) | [Portfolio](team/shaun.md) | [Email](e0418165@u.nus.edu)"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"* Responsibilities: Documentation"}],"authorContributionMap":{"JodyLorah":32,"-":28}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"frisciliasultan"},"content":"* is an insurance agent"},{"lineNumber":240,"author":{"gitId":"frisciliasultan"},"content":"* has a need to manage a significant number of clients"},{"lineNumber":241,"author":{"gitId":"frisciliasultan"},"content":"* has significant number of client meetings"},{"lineNumber":242,"author":{"gitId":"frisciliasultan"},"content":"* has a need to track clients\u0027 insurance policy expiration date"},{"lineNumber":243,"author":{"gitId":"frisciliasultan"},"content":"* has a lot of details to remember for each client"},{"lineNumber":244,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":245,"author":{"gitId":"-"},"content":"* can type fast"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"frisciliasultan"},"content":"**Value proposition**: "},{"lineNumber":250,"author":{"gitId":"frisciliasultan"},"content":"* save time by generating a consolidation of meetings and deadlines with the clients"},{"lineNumber":251,"author":{"gitId":"frisciliasultan"},"content":"* target clients better by receiving reminders and tips before a client meeting (client\u0027s favourite food, profile)"},{"lineNumber":252,"author":{"gitId":"frisciliasultan"},"content":"* increase customer retention by receiving reminders of when the client\u0027s insurance is expiring"},{"lineNumber":253,"author":{"gitId":"frisciliasultan"},"content":"* improve convenience by providing a one page solution to an insurance agent\u0027s fast pace life"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"frisciliasultan"},"content":"| Priority | As a …​                                 | I can …​                                             | So that I can…​                                                     |"},{"lineNumber":260,"author":{"gitId":"frisciliasultan"},"content":"| -------- | ------------------------------------------ | ------------------------------------------------------- | ---------------------------------------------------------------------- |"},{"lineNumber":261,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions                                  | refer to instructions when I forget how to use the App                 |"},{"lineNumber":262,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | add a new person                                        |                                                                        |"},{"lineNumber":263,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | delete a person                                         | remove entries that I no longer need                                   |"},{"lineNumber":264,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | find a person by name                                   | locate details of persons without having to go through the entire list |"},{"lineNumber":265,"author":{"gitId":"frisciliasultan"},"content":"| `* * *`  | popular insurance agent                    | view all my appointments without browsing the whole app | get a quick reminder of my appointments                                |"},{"lineNumber":266,"author":{"gitId":"frisciliasultan"},"content":"| `* * *`  | busy insurance agent                       | schedule my meetings with my contacts                   | know when I am meeting my clients                                      |"},{"lineNumber":267,"author":{"gitId":"frisciliasultan"},"content":"| `* * *`  | insurance agent                            | track my clients’ insurance expiry                      | remind my clients to renew their contract                              |"},{"lineNumber":268,"author":{"gitId":"-"},"content":"| `* *`    | user                                       | hide private contact details                            | minimize chance of someone else seeing them by accident                |"},{"lineNumber":269,"author":{"gitId":"frisciliasultan"},"content":"| `* *`    | time-constrained insurance agent           | view my tasks and appointments in a chronological list  | know what work to prioritize                                           |"},{"lineNumber":270,"author":{"gitId":"frisciliasultan"},"content":"| `* *`    | opportunistic insurance agent              | filter my clients by their existing insurance plans     | upsell a new, similar plan to them                                     |"},{"lineNumber":271,"author":{"gitId":"-"},"content":"| `*`      | user with many persons in the address book | sort persons by name                                    | locate a person easily                                                 |"},{"lineNumber":272,"author":{"gitId":"frisciliasultan"},"content":"| `*`      | insurance agent with many contacts         | save my client’s likes/dislikes                         | interact with them more personally                                     |"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"Tomashiwa"},"content":"(For all use cases below, the **System** is the `iScam` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"Tomashiwa"},"content":"**Use case: Add a client**"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":281,"author":{"gitId":"Tomashiwa"},"content":"1. User requests to add a client with parameters like name, contact details, age etc."},{"lineNumber":282,"author":{"gitId":"Tomashiwa"},"content":"2. iScam shows the client to be added."},{"lineNumber":283,"author":{"gitId":"Tomashiwa"},"content":"3. User confirm the addition."},{"lineNumber":284,"author":{"gitId":"Tomashiwa"},"content":"4. iScam adds the client."},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"Tomashiwa"},"content":"    Use case ends."},{"lineNumber":287,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":288,"author":{"gitId":"Tomashiwa"},"content":"**Extensions**"},{"lineNumber":289,"author":{"gitId":"Tomashiwa"},"content":"* 1a. iScam detects an error in the given client."},{"lineNumber":290,"author":{"gitId":"Tomashiwa"},"content":"    * 1a1. iScam requests for correction."},{"lineNumber":291,"author":{"gitId":"Tomashiwa"},"content":"    * 1a2. User corrected the client info."},{"lineNumber":292,"author":{"gitId":"Tomashiwa"},"content":"    * Steps 1a1-1a2 are repeated until the data entered are correct. "},{"lineNumber":293,"author":{"gitId":"Tomashiwa"},"content":"      "},{"lineNumber":294,"author":{"gitId":"Tomashiwa"},"content":"      Use case resumes from step 2."},{"lineNumber":295,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":296,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":297,"author":{"gitId":"Tomashiwa"},"content":"* 3a. User chooses to cancel the addition."},{"lineNumber":298,"author":{"gitId":"Tomashiwa"},"content":"    * 3a1. iScam requests to confirm the cancellation."},{"lineNumber":299,"author":{"gitId":"Tomashiwa"},"content":"    * 3a2. User confirms the cancellation."},{"lineNumber":300,"author":{"gitId":"Tomashiwa"},"content":"      "},{"lineNumber":301,"author":{"gitId":"Tomashiwa"},"content":"      Use case ends."},{"lineNumber":302,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":303,"author":{"gitId":"Tomashiwa"},"content":"**Use case: List clients**"},{"lineNumber":304,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":305,"author":{"gitId":"Tomashiwa"},"content":"**MSS**"},{"lineNumber":306,"author":{"gitId":"Tomashiwa"},"content":"1. User requests to list clients."},{"lineNumber":307,"author":{"gitId":"Tomashiwa"},"content":"2. iScam shows a list of clients."},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"   Use case ends."},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":312,"author":{"gitId":"Tomashiwa"},"content":"* 1a. The list is empty."},{"lineNumber":313,"author":{"gitId":"Tomashiwa"},"content":"    * 1a1. iScam shows a message to indicate that there is no client."},{"lineNumber":314,"author":{"gitId":"Tomashiwa"},"content":"      "},{"lineNumber":315,"author":{"gitId":"Tomashiwa"},"content":"      Use case ends."},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"Tomashiwa"},"content":"**Use case: Update a client**"},{"lineNumber":318,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":319,"author":{"gitId":"Tomashiwa"},"content":"**MSS**"},{"lineNumber":320,"author":{"gitId":"Tomashiwa"},"content":"1. User requests to update a client with new parameters."},{"lineNumber":321,"author":{"gitId":"Tomashiwa"},"content":"2. iScam shows a preview of the updated client."},{"lineNumber":322,"author":{"gitId":"Tomashiwa"},"content":"3. User confirm the update."},{"lineNumber":323,"author":{"gitId":"Tomashiwa"},"content":"4. iScam updates the client."},{"lineNumber":324,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":325,"author":{"gitId":"Tomashiwa"},"content":"    Use case ends."},{"lineNumber":326,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":327,"author":{"gitId":"Tomashiwa"},"content":"**Extensions**"},{"lineNumber":328,"author":{"gitId":"Tomashiwa"},"content":"* 1a. iScam detects an error in the new parameters."},{"lineNumber":329,"author":{"gitId":"Tomashiwa"},"content":"    * 1a1. iScam requests for correction."},{"lineNumber":330,"author":{"gitId":"Tomashiwa"},"content":"    * 1a2. User corrected the update info."},{"lineNumber":331,"author":{"gitId":"Tomashiwa"},"content":"    * Steps 1a1-1a2 are repeated until the data entered are correct. "},{"lineNumber":332,"author":{"gitId":"Tomashiwa"},"content":"      "},{"lineNumber":333,"author":{"gitId":"Tomashiwa"},"content":"      Use case resumes from step 2."},{"lineNumber":334,"author":{"gitId":"Tomashiwa"},"content":"    "},{"lineNumber":335,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":336,"author":{"gitId":"Tomashiwa"},"content":"* 3a. User chooses to cancel the update."},{"lineNumber":337,"author":{"gitId":"Tomashiwa"},"content":"    * 3a1. iScam requests to confirm the cancellation."},{"lineNumber":338,"author":{"gitId":"Tomashiwa"},"content":"    * 3a2. User confirms the cancellation."},{"lineNumber":339,"author":{"gitId":"-"},"content":"      "},{"lineNumber":340,"author":{"gitId":"-"},"content":"      Use case ends."},{"lineNumber":341,"author":{"gitId":"-"},"content":"    "},{"lineNumber":342,"author":{"gitId":"Tomashiwa"},"content":"**Use case: Search clients**"},{"lineNumber":343,"author":{"gitId":"-"},"content":""},{"lineNumber":344,"author":{"gitId":"Tomashiwa"},"content":"**MSS**"},{"lineNumber":345,"author":{"gitId":"Tomashiwa"},"content":"1. User requests to find clients that matches a search term."},{"lineNumber":346,"author":{"gitId":"Tomashiwa"},"content":"2. iScam shows a list of qualified clients."},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":351,"author":{"gitId":"Tomashiwa"},"content":"* 1a. There is no client in AddressBook."},{"lineNumber":352,"author":{"gitId":"Tomashiwa"},"content":"    * 1a1. iScam shows a message to indicate that there is no client."},{"lineNumber":353,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":354,"author":{"gitId":"Tomashiwa"},"content":"        Use case ends."},{"lineNumber":355,"author":{"gitId":"Tomashiwa"},"content":"    "},{"lineNumber":356,"author":{"gitId":"-"},"content":""},{"lineNumber":357,"author":{"gitId":"Tomashiwa"},"content":"* 1b. The search term is empty."},{"lineNumber":358,"author":{"gitId":"Tomashiwa"},"content":"    * 1b1. iScam shows a message to indicate that a search term is required."},{"lineNumber":359,"author":{"gitId":"Tomashiwa"},"content":"    "},{"lineNumber":360,"author":{"gitId":"Tomashiwa"},"content":"        Use case ends"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"Tomashiwa"},"content":"**Use case: Delete a client**"},{"lineNumber":363,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":364,"author":{"gitId":"Tomashiwa"},"content":"**MSS**"},{"lineNumber":365,"author":{"gitId":"Tomashiwa"},"content":"1. User requests to delete a client."},{"lineNumber":366,"author":{"gitId":"Tomashiwa"},"content":"2. iScam requests to confirm the deletion."},{"lineNumber":367,"author":{"gitId":"Tomashiwa"},"content":"3. User confirms the deletion."},{"lineNumber":368,"author":{"gitId":"Tomashiwa"},"content":"4. iScam delete the client."},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"Tomashiwa"},"content":"    Use case ends."},{"lineNumber":371,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":372,"author":{"gitId":"Tomashiwa"},"content":"**Extensions**"},{"lineNumber":373,"author":{"gitId":"Tomashiwa"},"content":"* 1a. The client does not exist."},{"lineNumber":374,"author":{"gitId":"Tomashiwa"},"content":"    * 1a1. iScam requests for correction."},{"lineNumber":375,"author":{"gitId":"Tomashiwa"},"content":"    * 1a2. User corrected which client to delete."},{"lineNumber":376,"author":{"gitId":"Tomashiwa"},"content":"    * Steps 1a1-1a2 are repeated until the client entered is valid."},{"lineNumber":377,"author":{"gitId":"Tomashiwa"},"content":"        "},{"lineNumber":378,"author":{"gitId":"Tomashiwa"},"content":"        Use case resumes from step 2."},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"Tomashiwa"},"content":"* 2a. User chooses to cancel the deletion."},{"lineNumber":382,"author":{"gitId":"Tomashiwa"},"content":"    * 2a1. iScam requests to confirm the cancellation."},{"lineNumber":383,"author":{"gitId":"Tomashiwa"},"content":"    * 2a2. User confirms the cancellation."},{"lineNumber":384,"author":{"gitId":"Tomashiwa"},"content":"    "},{"lineNumber":385,"author":{"gitId":"Tomashiwa"},"content":"        Use case ends."},{"lineNumber":386,"author":{"gitId":"-"},"content":""},{"lineNumber":387,"author":{"gitId":"Tomashiwa"},"content":"**Use case: Add a meeting**"},{"lineNumber":388,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":389,"author":{"gitId":"Tomashiwa"},"content":"**MSS**"},{"lineNumber":390,"author":{"gitId":"Tomashiwa"},"content":"1. User requests to add a meeting with a client."},{"lineNumber":391,"author":{"gitId":"Tomashiwa"},"content":"2. iScam adds the meeting."},{"lineNumber":392,"author":{"gitId":"Tomashiwa"},"content":"    "},{"lineNumber":393,"author":{"gitId":"Tomashiwa"},"content":"    Use case ends."},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"Tomashiwa"},"content":"**Extensions**"},{"lineNumber":396,"author":{"gitId":"Tomashiwa"},"content":"* 1a. The client does not exist."},{"lineNumber":397,"author":{"gitId":"Tomashiwa"},"content":"    * 1a1. iScam shows a message to indicate that the client specified does not exist."},{"lineNumber":398,"author":{"gitId":"Tomashiwa"},"content":"    "},{"lineNumber":399,"author":{"gitId":"Tomashiwa"},"content":"        Use case ends."},{"lineNumber":400,"author":{"gitId":"Tomashiwa"},"content":"    "},{"lineNumber":401,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":402,"author":{"gitId":"Tomashiwa"},"content":"* 1b. iScam detects an error in the parameters."},{"lineNumber":403,"author":{"gitId":"Tomashiwa"},"content":"    * 1b1. iScam requests for correction."},{"lineNumber":404,"author":{"gitId":"Tomashiwa"},"content":"    * 1b2. User corrected the parameters."},{"lineNumber":405,"author":{"gitId":"Tomashiwa"},"content":"    * Steps 1b1-1b2 are repeated until the parameters entered are correct."},{"lineNumber":406,"author":{"gitId":"Tomashiwa"},"content":"    "},{"lineNumber":407,"author":{"gitId":"Tomashiwa"},"content":"        Use case resume from step 2."},{"lineNumber":408,"author":{"gitId":"Tomashiwa"},"content":"    "},{"lineNumber":409,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":410,"author":{"gitId":"Tomashiwa"},"content":"* 1c. A meeting with that date and time already exists."},{"lineNumber":411,"author":{"gitId":"Tomashiwa"},"content":"    * 1c1. iScam shows a message that a meeting with that date and time already exists."},{"lineNumber":412,"author":{"gitId":"Tomashiwa"},"content":"        "},{"lineNumber":413,"author":{"gitId":"Tomashiwa"},"content":"        Use case ends."},{"lineNumber":414,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":415,"author":{"gitId":"Tomashiwa"},"content":"**Use case: List meetings**"},{"lineNumber":416,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":417,"author":{"gitId":"Tomashiwa"},"content":"**MSS**"},{"lineNumber":418,"author":{"gitId":"Tomashiwa"},"content":"1. User requests to list meetings."},{"lineNumber":419,"author":{"gitId":"Tomashiwa"},"content":"2. iScam shows a list of meetings."},{"lineNumber":420,"author":{"gitId":"Tomashiwa"},"content":"    "},{"lineNumber":421,"author":{"gitId":"Tomashiwa"},"content":"    Use case ends."},{"lineNumber":422,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":423,"author":{"gitId":"Tomashiwa"},"content":"**Extensions**"},{"lineNumber":424,"author":{"gitId":"Tomashiwa"},"content":"* 1a. The list is empty."},{"lineNumber":425,"author":{"gitId":"Tomashiwa"},"content":"    * 1a1. iScam shows a message to indicate that there is no client."},{"lineNumber":426,"author":{"gitId":"Tomashiwa"},"content":"      "},{"lineNumber":427,"author":{"gitId":"Tomashiwa"},"content":"        Use case ends."},{"lineNumber":428,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":429,"author":{"gitId":"Tomashiwa"},"content":"**Use case: Update a meeting**"},{"lineNumber":430,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":431,"author":{"gitId":"Tomashiwa"},"content":"**MSS**"},{"lineNumber":432,"author":{"gitId":"Tomashiwa"},"content":"1. User requests to update a meeting with new parameters."},{"lineNumber":433,"author":{"gitId":"Tomashiwa"},"content":"2. iScam shows a preview of the updated meeting."},{"lineNumber":434,"author":{"gitId":"Tomashiwa"},"content":"3. User confirms the update."},{"lineNumber":435,"author":{"gitId":"Tomashiwa"},"content":"4. iScam updates the meeting."},{"lineNumber":436,"author":{"gitId":"Tomashiwa"},"content":"    "},{"lineNumber":437,"author":{"gitId":"Tomashiwa"},"content":"    Use case ends."},{"lineNumber":438,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":439,"author":{"gitId":"Tomashiwa"},"content":"**Extensions**"},{"lineNumber":440,"author":{"gitId":"Tomashiwa"},"content":"* 1a. iScam detects an error with the new parameters."},{"lineNumber":441,"author":{"gitId":"Tomashiwa"},"content":"    * 1a1. iScam requests for correction."},{"lineNumber":442,"author":{"gitId":"Tomashiwa"},"content":"    * 1a2. User corrected the parameters."},{"lineNumber":443,"author":{"gitId":"Tomashiwa"},"content":"    * Steps 1a1-1a2 are repeated until the parameters entered are correct. "},{"lineNumber":444,"author":{"gitId":"Tomashiwa"},"content":"      "},{"lineNumber":445,"author":{"gitId":"Tomashiwa"},"content":"        Use case resume from step 2."},{"lineNumber":446,"author":{"gitId":"Tomashiwa"},"content":"    "},{"lineNumber":447,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":448,"author":{"gitId":"Tomashiwa"},"content":"* 1b. The new parameters\u0027 date or time is in conflict with other existing meetings."},{"lineNumber":449,"author":{"gitId":"Tomashiwa"},"content":"    * 1b1. iScam shows a message that a meeting with that date and time already exists."},{"lineNumber":450,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":451,"author":{"gitId":"Tomashiwa"},"content":"        Use case ends."},{"lineNumber":452,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":453,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":454,"author":{"gitId":"Tomashiwa"},"content":"* 2a. User chooses to cancel the update."},{"lineNumber":455,"author":{"gitId":"Tomashiwa"},"content":"    * 2a1. iScam requests to confirm the cancellation."},{"lineNumber":456,"author":{"gitId":"Tomashiwa"},"content":"    * 2a2. User confirms the cancellation."},{"lineNumber":457,"author":{"gitId":"Tomashiwa"},"content":"      "},{"lineNumber":458,"author":{"gitId":"Tomashiwa"},"content":"        Use case ends."},{"lineNumber":459,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":460,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":461,"author":{"gitId":"Tomashiwa"},"content":"**Use case: Delete a meeting**"},{"lineNumber":462,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":463,"author":{"gitId":"Tomashiwa"},"content":"**MSS**"},{"lineNumber":464,"author":{"gitId":"Tomashiwa"},"content":"1. User requests to delete a meeting."},{"lineNumber":465,"author":{"gitId":"Tomashiwa"},"content":"2. iScam requests to confirm the deletion."},{"lineNumber":466,"author":{"gitId":"Tomashiwa"},"content":"3. User confirms the deletion."},{"lineNumber":467,"author":{"gitId":"Tomashiwa"},"content":"4. iScam delete the meeting."},{"lineNumber":468,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":469,"author":{"gitId":"Tomashiwa"},"content":"    Use case ends."},{"lineNumber":470,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":471,"author":{"gitId":"Tomashiwa"},"content":"**Extensions**"},{"lineNumber":472,"author":{"gitId":"Tomashiwa"},"content":"* 1a. The meeting does not exist."},{"lineNumber":473,"author":{"gitId":"Tomashiwa"},"content":"    * 1a1. iScam requests for correction."},{"lineNumber":474,"author":{"gitId":"Tomashiwa"},"content":"    * 1a2. User corrected which meeting to delete."},{"lineNumber":475,"author":{"gitId":"Tomashiwa"},"content":"    * Steps 1a1-1a2 are repeated until the meeting entered is valid."},{"lineNumber":476,"author":{"gitId":"Tomashiwa"},"content":"        "},{"lineNumber":477,"author":{"gitId":"Tomashiwa"},"content":"        Use case resumes from step 2."},{"lineNumber":478,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":479,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":480,"author":{"gitId":"Tomashiwa"},"content":"* 2a. User chooses to cancel the deletion."},{"lineNumber":481,"author":{"gitId":"Tomashiwa"},"content":"    * 2a1. iScam requests to confirm the cancellation."},{"lineNumber":482,"author":{"gitId":"Tomashiwa"},"content":"    * 2a2. User confirms the cancellation."},{"lineNumber":483,"author":{"gitId":"Tomashiwa"},"content":"    "},{"lineNumber":484,"author":{"gitId":"Tomashiwa"},"content":"        Use case ends."},{"lineNumber":485,"author":{"gitId":"-"},"content":"    "},{"lineNumber":486,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":487,"author":{"gitId":"-"},"content":""},{"lineNumber":488,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":489,"author":{"gitId":"-"},"content":""},{"lineNumber":490,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":491,"author":{"gitId":"Tomashiwa"},"content":"2.  Should be able to hold up to 1000 clients and meetings without a noticeable sluggishness in performance for typical usage."},{"lineNumber":492,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":493,"author":{"gitId":"Tomashiwa"},"content":"4.  A user should be able to quickly identify the purpose of different interface elements through larger buttons, recognizable color scheme etc. "},{"lineNumber":494,"author":{"gitId":"Tomashiwa"},"content":"5.  An average user should be able to get a grasp on the user interface within a few iteration of usage"},{"lineNumber":495,"author":{"gitId":"-"},"content":""},{"lineNumber":496,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":497,"author":{"gitId":"-"},"content":""},{"lineNumber":498,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":499,"author":{"gitId":"-"},"content":""},{"lineNumber":500,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":501,"author":{"gitId":"-"},"content":""},{"lineNumber":502,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":503,"author":{"gitId":"-"},"content":""},{"lineNumber":504,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":505,"author":{"gitId":"-"},"content":""},{"lineNumber":506,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":507,"author":{"gitId":"-"},"content":""},{"lineNumber":508,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":509,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":510,"author":{"gitId":"-"},"content":""},{"lineNumber":511,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":512,"author":{"gitId":"-"},"content":""},{"lineNumber":513,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":514,"author":{"gitId":"-"},"content":""},{"lineNumber":515,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":516,"author":{"gitId":"-"},"content":""},{"lineNumber":517,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":518,"author":{"gitId":"-"},"content":""},{"lineNumber":519,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":520,"author":{"gitId":"-"},"content":""},{"lineNumber":521,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":522,"author":{"gitId":"-"},"content":""},{"lineNumber":523,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":524,"author":{"gitId":"-"},"content":""},{"lineNumber":525,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":526,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":527,"author":{"gitId":"-"},"content":""},{"lineNumber":528,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":529,"author":{"gitId":"-"},"content":""},{"lineNumber":530,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":531,"author":{"gitId":"-"},"content":""},{"lineNumber":532,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":533,"author":{"gitId":"-"},"content":""},{"lineNumber":534,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":535,"author":{"gitId":"-"},"content":""},{"lineNumber":536,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":537,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":538,"author":{"gitId":"-"},"content":""},{"lineNumber":539,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":540,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":541,"author":{"gitId":"-"},"content":""},{"lineNumber":542,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":543,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":544,"author":{"gitId":"-"},"content":""},{"lineNumber":545,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":546,"author":{"gitId":"-"},"content":""},{"lineNumber":547,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":548,"author":{"gitId":"-"},"content":""},{"lineNumber":549,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":550,"author":{"gitId":"-"},"content":""},{"lineNumber":551,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":552,"author":{"gitId":"-"},"content":""},{"lineNumber":553,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"Tomashiwa":188,"frisciliasultan":18,"-":347}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"zoeykobe"},"content":"iScam is a **desktop app for insurance agents to manage clients and meetings, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, iScam can get your client management tasks done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"zoeykobe"},"content":"1. Download the latest `iScam.jar` from [here](https://github.com/se-edu/iScam-level3/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"zoeykobe"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your iScam."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"zoeykobe"},"content":"   * **`list`** : Lists all clients."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"zoeykobe"},"content":"   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a client named `John Doe` to iScam."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"zoeykobe"},"content":"   * **`delete`**`3` : Deletes the 3rd client shown in the current list."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"zoeykobe"},"content":"   * **`clear`** : Deletes all clients."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"zoeykobe"},"content":"* If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"zoeykobe"},"content":"Shows a message explaining how to access the help page."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"zoeykobe"},"content":"### Adding a client: `add`"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"zoeykobe"},"content":"Adds a client to iScam."},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":83,"author":{"gitId":"zoeykobe"},"content":"A client can have any number of tags (including 0)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":87,"author":{"gitId":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":88,"author":{"gitId":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"zoeykobe"},"content":"### Listing all clients : `list`"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"zoeykobe"},"content":"Shows a list of all clients in iScam."},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"zoeykobe"},"content":"### Editing a client : `edit`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"zoeykobe"},"content":"Edits an existing client in iScam."},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"zoeykobe"},"content":"* Edits the client at the specified `INDEX`. The index refers to the index number shown in the displayed client list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":103,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":104,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":105,"author":{"gitId":"zoeykobe"},"content":"* When editing tags, the existing tags of the client will be removed i.e adding of tags is not cumulative."},{"lineNumber":106,"author":{"gitId":"zoeykobe"},"content":"* You can remove all the client’s tags by typing `t/` without"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    specifying any tags after it."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":110,"author":{"gitId":"zoeykobe"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st client to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":111,"author":{"gitId":"zoeykobe"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd client to be `Betsy Crower` and clears all existing tags."},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"zoeykobe"},"content":"### Locating clients by name: `find`"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"zoeykobe"},"content":"Finds clients whose names contain any of the given keywords."},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`"},{"lineNumber":120,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":121,"author":{"gitId":"-"},"content":"* Only the name is searched."},{"lineNumber":122,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":123,"author":{"gitId":"zoeykobe"},"content":"* Clients matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":124,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"},{"lineNumber":129,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"zoeykobe"},"content":"### Deleting a client : `delete`"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"zoeykobe"},"content":"Deletes the specified client from iScam."},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"zoeykobe"},"content":"* Deletes the client at the specified `INDEX`."},{"lineNumber":138,"author":{"gitId":"zoeykobe"},"content":"* The index refers to the index number shown in the displayed client list."},{"lineNumber":139,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":142,"author":{"gitId":"zoeykobe"},"content":"* `list` followed by `delete 2` deletes the 2nd client in iScam."},{"lineNumber":143,"author":{"gitId":"zoeykobe"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st client in the results of the `find` command."},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"zoeykobe"},"content":"Clears all entries from iScam."},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"zoeykobe"},"content":"iScam data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"zoeykobe"},"content":"iScam data are saved as a JSON file `[JAR file location]/data/iScam.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":166,"author":{"gitId":"zoeykobe"},"content":"If your changes to the data file makes its format invalid, iScam will discard all data and start with an empty data file at the next run."},{"lineNumber":167,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":178,"author":{"gitId":"zoeykobe"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous iScam home folder."},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":185,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":186,"author":{"gitId":"-"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":187,"author":{"gitId":"-"},"content":"**Clear** | `clear`"},{"lineNumber":188,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"},{"lineNumber":189,"author":{"gitId":"-"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":190,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`"},{"lineNumber":191,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":192,"author":{"gitId":"-"},"content":"**Help** | `help`"}],"authorContributionMap":{"zoeykobe":35,"-":157}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"    public static final String MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX \u003d \"The client index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public static final String MESSAGE_CLIENTS_LISTED_OVERVIEW \u003d \"%1$d clients listed!\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":2,"-":11}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the AddressBook."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    /** Returns an unmodifiable view of the filtered list of clients */"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    ObservableList\u003cClient\u003e getFilteredClientList();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":3,"-":47}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return model.getAddressBook();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"    public ObservableList\u003cClient\u003e getFilteredClientList() {"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"        return model.getFilteredClientList();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":3,"-":78}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":" * Adds a client to the address book."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a client to the address book. \""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New client added: %1$s\";"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This client already exists in the address book\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"    private final Client toAdd;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"     * Creates an AddCommand to add the specified {@code Client}"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"    public AddCommand(Client client) {"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"        requireNonNull(client);"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"        toAdd \u003d client;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"        if (model.hasClient(toAdd)) {"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"        model.addClient(toAdd);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":13,"-":54}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":" * Deletes a client identified using it\u0027s displayed index from the address book."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"            + \": Deletes the client identified by the index number used in the displayed client list.\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    public static final String MESSAGE_DELETE_CLIENT_SUCCESS \u003d \"Deleted Client: %1$s\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"        Client clientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"        model.deleteClient(clientToDelete);"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":9,"-":44}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Address;"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Email;"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Name;"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Phone;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":" * Edits the details of an existing client in the address book."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the client identified \""},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"            + \"by the index number used in the displayed client list. \""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"    public static final String MESSAGE_EDIT_CLIENT_SUCCESS \u003d \"Edited Client: %1$s\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This client already exists in the address book.\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"    private final EditClientDescriptor editClientDescriptor;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"     * @param index of the client in the filtered client list to edit"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"     * @param editClientDescriptor details to edit the client with"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"    public EditCommand(Index index, EditClientDescriptor editClientDescriptor) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"        requireNonNull(editClientDescriptor);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":"        this.editClientDescriptor \u003d new EditClientDescriptor(editClientDescriptor);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":71,"author":{"gitId":"JodyLorah"},"content":"        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":"        Client clientToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":78,"author":{"gitId":"JodyLorah"},"content":"        Client editedClient \u003d createEditedClient(clientToEdit, editClientDescriptor);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":"        if (!clientToEdit.isSameClient(editedClient) \u0026\u0026 model.hasClient(editedClient)) {"},{"lineNumber":81,"author":{"gitId":"JodyLorah"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"JodyLorah"},"content":"        model.setClient(clientToEdit, editedClient);"},{"lineNumber":85,"author":{"gitId":"JodyLorah"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":86,"author":{"gitId":"JodyLorah"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_CLIENT_SUCCESS, editedClient));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"JodyLorah"},"content":"     * Creates and returns a {@code Client} with the details of {@code clientToEdit}"},{"lineNumber":91,"author":{"gitId":"JodyLorah"},"content":"     * edited with {@code editClientDescriptor}."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"JodyLorah"},"content":"    private static Client createEditedClient(Client clientToEdit, EditClientDescriptor editClientDescriptor) {"},{"lineNumber":94,"author":{"gitId":"JodyLorah"},"content":"        assert clientToEdit !\u003d null;"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"JodyLorah"},"content":"        Name updatedName \u003d editClientDescriptor.getName().orElse(clientToEdit.getName());"},{"lineNumber":97,"author":{"gitId":"JodyLorah"},"content":"        Phone updatedPhone \u003d editClientDescriptor.getPhone().orElse(clientToEdit.getPhone());"},{"lineNumber":98,"author":{"gitId":"JodyLorah"},"content":"        Email updatedEmail \u003d editClientDescriptor.getEmail().orElse(clientToEdit.getEmail());"},{"lineNumber":99,"author":{"gitId":"JodyLorah"},"content":"        Address updatedAddress \u003d editClientDescriptor.getAddress().orElse(clientToEdit.getAddress());"},{"lineNumber":100,"author":{"gitId":"JodyLorah"},"content":"        Set\u003cTag\u003e updatedTags \u003d editClientDescriptor.getTags().orElse(clientToEdit.getTags());"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"JodyLorah"},"content":"        return new Client(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":120,"author":{"gitId":"JodyLorah"},"content":"                \u0026\u0026 editClientDescriptor.equals(e.editClientDescriptor);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"JodyLorah"},"content":"     * Stores the details to edit the client with. Each non-empty field value will replace the"},{"lineNumber":125,"author":{"gitId":"JodyLorah"},"content":"     * corresponding field value of the client."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"JodyLorah"},"content":"    public static class EditClientDescriptor {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"JodyLorah"},"content":"        public EditClientDescriptor() {}"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":138,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":139,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":140,"author":{"gitId":"JodyLorah"},"content":"        public EditClientDescriptor(EditClientDescriptor toCopy) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":150,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":188,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":189,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":190,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":196,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":197,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":198,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":199,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":212,"author":{"gitId":"JodyLorah"},"content":"            if (!(other instanceof EditClientDescriptor)) {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":217,"author":{"gitId":"JodyLorah"},"content":"            EditClientDescriptor e \u003d (EditClientDescriptor) other;"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":44,"-":182}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.NameContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":" * Finds and lists all clients in address book whose name contains any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all clients whose names contain any of \""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"        model.updateFilteredClientList(predicate);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"                String.format(Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW, model.getFilteredClientList().size()));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":5,"-":37}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":" * Lists all clients in the address book to the user."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all clients\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":4,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Address;"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Email;"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Name;"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Phone;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"        Client client \u003d new Client(name, phone, email, address, tagList);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"        return new AddCommand(client);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":7,"-":53}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"        EditClientDescriptor editClientDescriptor \u003d new EditClientDescriptor();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"            editClientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"            editClientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"            editClientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"            editClientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editClientDescriptor::setTags);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"        if (!editClientDescriptor.isAnyFieldEdited()) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"        return new EditCommand(index, editClientDescriptor);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":9,"-":73}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.NameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":1,"-":32}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Address;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Email;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Name;"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Phone;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":4,"-":120}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.UniqueClientList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":" * Duplicates are not allowed (by .isSameClient comparison)"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"    private final UniqueClientList clients;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"        clients \u003d new UniqueClientList();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public AddressBook() {}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"     * Creates an AddressBook using the Clients in the {@code toBeCopied}"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"     * Replaces the contents of the client list with {@code clients}."},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"     * {@code clients} must not contain duplicate clients."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"    public void setClients(List\u003cClient\u003e clients) {"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"        this.clients.setClients(clients);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"        setClients(newData.getClientList());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"    //// client-level operations"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"     * Returns true if a client with the same identity as {@code client} exists in the address book."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"    public boolean hasClient(Client client) {"},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":"        requireNonNull(client);"},{"lineNumber":66,"author":{"gitId":"JodyLorah"},"content":"        return clients.contains(client);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":"     * Adds a client to the address book."},{"lineNumber":71,"author":{"gitId":"JodyLorah"},"content":"     * The client must not already exist in the address book."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":"    public void addClient(Client p) {"},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":"        clients.add(p);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"JodyLorah"},"content":"     * Replaces the given client {@code target} in the list with {@code editedClient}."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":"     * The client identity of {@code editedClient} must not be the same as another existing client in the address book."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"JodyLorah"},"content":"    public void setClient(Client target, Client editedClient) {"},{"lineNumber":83,"author":{"gitId":"JodyLorah"},"content":"        requireNonNull(editedClient);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"JodyLorah"},"content":"        clients.setClient(target, editedClient);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"JodyLorah"},"content":"    public void removeClient(Client key) {"},{"lineNumber":93,"author":{"gitId":"JodyLorah"},"content":"        clients.remove(key);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":100,"author":{"gitId":"JodyLorah"},"content":"        return clients.asUnmodifiableObservableList().size() + \" clients\";"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"JodyLorah"},"content":"    public ObservableList\u003cClient\u003e getClientList() {"},{"lineNumber":106,"author":{"gitId":"JodyLorah"},"content":"        return clients.asUnmodifiableObservableList();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":113,"author":{"gitId":"JodyLorah"},"content":"                \u0026\u0026 clients.equals(((AddressBook) other).clients));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":118,"author":{"gitId":"JodyLorah"},"content":"        return clients.hashCode();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":32,"-":88}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    Predicate\u003cClient\u003e PREDICATE_SHOW_ALL_CLIENTS \u003d unused -\u003e true;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"     * Returns true if a client with the same identity as {@code client} exists in the address book."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"    boolean hasClient(Client client);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"     * Deletes the given client."},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"     * The client must exist in the address book."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"    void deleteClient(Client target);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":"     * Adds the given client."},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"     * {@code client} must not already exist in the address book."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":"    void addClient(Client client);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":"     * Replaces the given client {@code target} with {@code editedClient}."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":75,"author":{"gitId":"JodyLorah"},"content":"     * The client identity of {@code editedClient} must not be the same as another existing client in the address book."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":"    void setClient(Client target, Client editedClient);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"JodyLorah"},"content":"    /** Returns an unmodifiable view of the filtered client list */"},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":"    ObservableList\u003cClient\u003e getFilteredClientList();"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"JodyLorah"},"content":"     * Updates the filter of the filtered client list to filter by the given {@code predicate}."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"JodyLorah"},"content":"    void updateFilteredClientList(Predicate\u003cClient\u003e predicate);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":17,"-":70}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    private final FilteredList\u003cClient\u003e filteredClients;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"        filteredClients \u003d new FilteredList\u003c\u003e(this.addressBook.getClientList());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"JodyLorah"},"content":"    public boolean hasClient(Client client) {"},{"lineNumber":93,"author":{"gitId":"JodyLorah"},"content":"        requireNonNull(client);"},{"lineNumber":94,"author":{"gitId":"JodyLorah"},"content":"        return addressBook.hasClient(client);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"JodyLorah"},"content":"    public void deleteClient(Client target) {"},{"lineNumber":99,"author":{"gitId":"JodyLorah"},"content":"        addressBook.removeClient(target);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"JodyLorah"},"content":"    public void addClient(Client client) {"},{"lineNumber":104,"author":{"gitId":"JodyLorah"},"content":"        addressBook.addClient(client);"},{"lineNumber":105,"author":{"gitId":"JodyLorah"},"content":"        updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"JodyLorah"},"content":"    public void setClient(Client target, Client editedClient) {"},{"lineNumber":110,"author":{"gitId":"JodyLorah"},"content":"        requireAllNonNull(target, editedClient);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"JodyLorah"},"content":"        addressBook.setClient(target, editedClient);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"JodyLorah"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Client List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"JodyLorah"},"content":"     * Returns an unmodifiable view of the list of {@code Client} backed by the internal list of"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitId":"JodyLorah"},"content":"    public ObservableList\u003cClient\u003e getFilteredClientList() {"},{"lineNumber":123,"author":{"gitId":"JodyLorah"},"content":"        return filteredClients;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitId":"JodyLorah"},"content":"    public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":129,"author":{"gitId":"JodyLorah"},"content":"        filteredClients.setPredicate(predicate);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":148,"author":{"gitId":"JodyLorah"},"content":"                \u0026\u0026 filteredClients.equals(other.filteredClients);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":21,"-":130}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"     * Returns an unmodifiable view of the clients list."},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"     * This list will not contain any duplicate clients."},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    ObservableList\u003cClient\u003e getClientList();"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":4,"-":13}},{"path":"src/main/java/seedu/address/model/client/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":" * Represents a Client\u0027s address in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":2,"-":55}},{"path":"src/main/java/seedu/address/model/client/Client.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":" * Represents a Client in the address book."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"public class Client {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"    private Name name;"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    private Phone phone;"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"    private Email email;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    private Address address;"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    public Client(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"     * Returns true if both clients have the same name."},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":"     * This defines a weaker notion of equality between two clients."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":"    public boolean isSameClient(Client otherClient) {"},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"        if (otherClient \u003d\u003d this) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":"        return otherClient !\u003d null"},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":"                \u0026\u0026 otherClient.getName().equals(getName());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":"     * Returns true if both clients have the same identity and data fields."},{"lineNumber":78,"author":{"gitId":"JodyLorah"},"content":"     * This defines a stronger notion of equality between two clients."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"JodyLorah"},"content":"        if (!(other instanceof Client)) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"JodyLorah"},"content":"        Client otherClient \u003d (Client) other;"},{"lineNumber":91,"author":{"gitId":"JodyLorah"},"content":"        return otherClient.getName().equals(getName())"},{"lineNumber":92,"author":{"gitId":"JodyLorah"},"content":"                \u0026\u0026 otherClient.getPhone().equals(getPhone())"},{"lineNumber":93,"author":{"gitId":"JodyLorah"},"content":"                \u0026\u0026 otherClient.getEmail().equals(getEmail())"},{"lineNumber":94,"author":{"gitId":"JodyLorah"},"content":"                \u0026\u0026 otherClient.getAddress().equals(getAddress())"},{"lineNumber":95,"author":{"gitId":"JodyLorah"},"content":"                \u0026\u0026 otherClient.getTags().equals(getTags());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .append(getAddress());"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":24,"-":99}},{"path":"src/main/java/seedu/address/model/client/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":" * Represents a Client\u0027s email in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param email A valid email address."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Email(String email) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        value \u003d email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":2,"-":65}},{"path":"src/main/java/seedu/address/model/client/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":" * Represents a Client\u0027s name in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":2,"-":57}},{"path":"src/main/java/seedu/address/model/client/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":" * Tests that a {@code Client}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cClient\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"    public boolean test(Client client) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(client.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":5,"-":26}},{"path":"src/main/java/seedu/address/model/client/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":" * Represents a Client\u0027s phone number in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":2,"-":51}},{"path":"src/main/java/seedu/address/model/client/UniqueClientList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.exceptions.ClientNotFoundException;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.exceptions.DuplicateClientException;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":" * A list of clients that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":" * A client is considered unique by comparing using {@code Client#isSameClient(Client)}. As such, adding and updating of"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":" * clients uses Client#isSameClient(Client) for equality so as to ensure that the client being added or updated is"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":" * unique in terms of identity in the UniqueClientList. However, the removal of a client uses Client#equals(Object) so"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":" * as to ensure that the client with exactly the same fields will be removed."},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":" *"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":" *"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":" * @see Client#isSameClient(Client)"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"public class UniqueClientList implements Iterable\u003cClient\u003e {"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    private final ObservableList\u003cClient\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"    private final ObservableList\u003cClient\u003e internalUnmodifiableList \u003d"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"     * Returns true if the list contains an equivalent client as the given argument."},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    public boolean contains(Client toCheck) {"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        return internalList.stream().anyMatch(toCheck::isSameClient);"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"     * Adds a client to the list."},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"     * The client must not already exist in the list."},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"    public void add(Client toAdd) {"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"        requireNonNull(toAdd);"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"        if (contains(toAdd)) {"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"            throw new DuplicateClientException();"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"        internalList.add(toAdd);"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"     * Replaces the client {@code target} in the list with {@code editedClient}."},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"     * {@code target} must exist in the list."},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"     * The client identity of {@code editedClient} must not be the same as another existing client in the list."},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"    public void setClient(Client target, Client editedClient) {"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"        requireAllNonNull(target, editedClient);"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"            throw new ClientNotFoundException();"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"        if (!target.isSameClient(editedClient) \u0026\u0026 contains(editedClient)) {"},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":"            throw new DuplicateClientException();"},{"lineNumber":66,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"        internalList.set(index, editedClient);"},{"lineNumber":69,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":71,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":"     * Removes the equivalent client from the list."},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":"     * The client must exist in the list."},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"JodyLorah"},"content":"    public void remove(Client toRemove) {"},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":78,"author":{"gitId":"JodyLorah"},"content":"            throw new ClientNotFoundException();"},{"lineNumber":79,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":82,"author":{"gitId":"JodyLorah"},"content":"    public void setClients(UniqueClientList replacement) {"},{"lineNumber":83,"author":{"gitId":"JodyLorah"},"content":"        requireNonNull(replacement);"},{"lineNumber":84,"author":{"gitId":"JodyLorah"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":85,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":87,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"JodyLorah"},"content":"     * Replaces the contents of this list with {@code clients}."},{"lineNumber":89,"author":{"gitId":"JodyLorah"},"content":"     * {@code clients} must not contain duplicate clients."},{"lineNumber":90,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"JodyLorah"},"content":"    public void setClients(List\u003cClient\u003e clients) {"},{"lineNumber":92,"author":{"gitId":"JodyLorah"},"content":"        requireAllNonNull(clients);"},{"lineNumber":93,"author":{"gitId":"JodyLorah"},"content":"        if (!clientsAreUnique(clients)) {"},{"lineNumber":94,"author":{"gitId":"JodyLorah"},"content":"            throw new DuplicateClientException();"},{"lineNumber":95,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":97,"author":{"gitId":"JodyLorah"},"content":"        internalList.setAll(clients);"},{"lineNumber":98,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":100,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"JodyLorah"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":102,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"JodyLorah"},"content":"    public ObservableList\u003cClient\u003e asUnmodifiableObservableList() {"},{"lineNumber":104,"author":{"gitId":"JodyLorah"},"content":"        return internalUnmodifiableList;"},{"lineNumber":105,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":107,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"JodyLorah"},"content":"    public Iterator\u003cClient\u003e iterator() {"},{"lineNumber":109,"author":{"gitId":"JodyLorah"},"content":"        return internalList.iterator();"},{"lineNumber":110,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":112,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"JodyLorah"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitId":"JodyLorah"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":115,"author":{"gitId":"JodyLorah"},"content":"                || (other instanceof UniqueClientList // instanceof handles nulls"},{"lineNumber":116,"author":{"gitId":"JodyLorah"},"content":"                        \u0026\u0026 internalList.equals(((UniqueClientList) other).internalList));"},{"lineNumber":117,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":119,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"JodyLorah"},"content":"    public int hashCode() {"},{"lineNumber":121,"author":{"gitId":"JodyLorah"},"content":"        return internalList.hashCode();"},{"lineNumber":122,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":124,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"JodyLorah"},"content":"     * Returns true if {@code clients} contains only unique clients."},{"lineNumber":126,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"JodyLorah"},"content":"    private boolean clientsAreUnique(List\u003cClient\u003e clients) {"},{"lineNumber":128,"author":{"gitId":"JodyLorah"},"content":"        for (int i \u003d 0; i \u003c clients.size() - 1; i++) {"},{"lineNumber":129,"author":{"gitId":"JodyLorah"},"content":"            for (int j \u003d i + 1; j \u003c clients.size(); j++) {"},{"lineNumber":130,"author":{"gitId":"JodyLorah"},"content":"                if (clients.get(i).isSameClient(clients.get(j))) {"},{"lineNumber":131,"author":{"gitId":"JodyLorah"},"content":"                    return false;"},{"lineNumber":132,"author":{"gitId":"JodyLorah"},"content":"                }"},{"lineNumber":133,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"JodyLorah"},"content":"        return true;"},{"lineNumber":136,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":137}},{"path":"src/main/java/seedu/address/model/client/exceptions/ClientNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.model.client.exceptions;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Signals that the operation is unable to find the specified client."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class ClientNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"JodyLorah":6}},{"path":"src/main/java/seedu/address/model/client/exceptions/DuplicateClientException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.model.client.exceptions;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Signals that the operation will result in duplicate Clients (Clients are considered duplicates if they have the same"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" * identity)."},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"public class DuplicateClientException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    public DuplicateClientException() {"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"        super(\"Operation would result in duplicate clients\");"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":11}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Address;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Email;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Name;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Phone;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    public static Client[] getSampleClients() {"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        return new Client[] {"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"            new Client(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"            new Client(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"            new Client(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"            new Client(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"            new Client(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"            new Client(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"        for (Client sampleClient : getSampleClients()) {"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"            sampleAb.addClient(sampleClient);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":15,"-":45}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Address;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Email;"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Name;"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Phone;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":" * Jackson-friendly version of {@link Client}."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"class JsonAdaptedClient {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Client\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"     * Constructs a {@code JsonAdaptedClient} with the given client details."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"    public JsonAdaptedClient(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"     * Converts a given {@code Client} into this class for Jackson use."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"    public JsonAdaptedClient(Client source) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"     * Converts this Jackson-friendly adapted client object into the model\u0027s {@code Client} object."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted client."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":"    public Client toModelType() throws IllegalValueException {"},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"        final List\u003cTag\u003e clientTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":"            clientTags.add(tag.toModelType());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"JodyLorah"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(clientTags);"},{"lineNumber":106,"author":{"gitId":"JodyLorah"},"content":"        return new Client(modelName, modelPhone, modelEmail, modelAddress, modelTags);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":19,"-":90}},{"path":"src/main/java/seedu/address/storage/JsonAddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorage implements AddressBookStorage {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public JsonAddressBookStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Similar to {@link #readAddressBook()}."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("},{"lineNumber":49,"author":{"gitId":"-"},"content":"                filePath, JsonSerializableAddressBook.class);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!jsonAddressBook.isPresent()) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":1,"-":80}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")"},{"lineNumber":20,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"Clients list contains duplicate client(s).\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    private final List\u003cJsonAdaptedClient\u003e clients \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given clients."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"clients\") List\u003cJsonAdaptedClient\u003e clients) {"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"        this.clients.addAll(clients);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"        clients.addAll(source.getClientList().stream().map(JsonAdaptedClient::new).collect(Collectors.toList()));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"        for (JsonAdaptedClient jsonAdaptedClient : clients) {"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"            Client client \u003d jsonAdaptedClient.toModelType();"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"            if (addressBook.hasClient(client)) {"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_CLIENT);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"            addressBook.addClient(client);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":12,"-":48}},{"path":"src/main/java/seedu/address/ui/ClientCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":" * An UI component that displays information of a {@code Client}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"public class ClientCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"    private static final String FXML \u003d \"ClientListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    public final Client client;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"     * Creates a {@code ClientCode} with the given {@code Client} and index to display."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"    public ClientCard(Client client, int displayedIndex) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"        this.client \u003d client;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"        name.setText(client.getName().fullName);"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"        phone.setText(client.getPhone().value);"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"        address.setText(client.getAddress().value);"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"        email.setText(client.getEmail().value);"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"        client.getTags().stream()"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"        if (!(other instanceof ClientCard)) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":"        ClientCard card \u003d (ClientCard) other;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":75,"author":{"gitId":"JodyLorah"},"content":"                \u0026\u0026 client.equals(card.client);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":16,"-":61}},{"path":"src/main/java/seedu/address/ui/ClientListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":" * Panel containing the list of clients."},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"public class ClientListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"    private static final String FXML \u003d \"ClientListPanel.fxml\";"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ClientListPanel.class);"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"    private ListView\u003cClient\u003e clientListView;"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"     * Creates a {@code ClientListPanel} with the given {@code ObservableList}."},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    public ClientListPanel(ObservableList\u003cClient\u003e clientList) {"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"        clientListView.setItems(clientList);"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"        clientListView.setCellFactory(listView -\u003e new ClientListViewCell());"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Client} using a {@code ClientCard}."},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"    class ClientListViewCell extends ListCell\u003cClient\u003e {"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        @Override"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"        protected void updateItem(Client client, boolean empty) {"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"            super.updateItem(client, empty);"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"            if (empty || client \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"                setGraphic(null);"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"                setText(null);"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"                setGraphic(new ClientCard(client, getIndex() + 1).getRoot());"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":49}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    private ClientListPanel clientListPanel;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"    private StackPane clientListPanelPlaceholder;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":87,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":88,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":89,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":90,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":96,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":100,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":113,"author":{"gitId":"JodyLorah"},"content":"        clientListPanel \u003d new ClientListPanel(logic.getFilteredClientList());"},{"lineNumber":114,"author":{"gitId":"JodyLorah"},"content":"        clientListPanelPlaceholder.getChildren().add(clientListPanel.getRoot());"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"JodyLorah"},"content":"    public ClientListPanel getClientListPanel() {"},{"lineNumber":167,"author":{"gitId":"JodyLorah"},"content":"        return clientListPanel;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":6,"-":190}},{"path":"src/main/resources/view/ClientListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"  \u003cListView fx:id\u003d\"clientListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"JodyLorah":1,"-":7}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":".cell_big_label {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_small_label {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":".stack-pane {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":".pane-with-border {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":".status-bar {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":".result-display {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":".result-display .label {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":".status-bar .label {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":".status-bar-with-border {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":".status-bar-with-border .label {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":".grid-pane {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":".context-menu {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":".context-menu .label {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":".menu-bar {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":".menu-bar .label {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":".menu .left-container {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-background-color: black;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"/*"},{"lineNumber":211,"author":{"gitId":"-"},"content":" * Metro style Push Button"},{"lineNumber":212,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira"},{"lineNumber":213,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":214,"author":{"gitId":"-"},"content":" */"},{"lineNumber":215,"author":{"gitId":"-"},"content":".button {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":".button:hover {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  -fx-background-color: white;"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":".button:focused {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:default {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:default:hover {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":".dialog-pane {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-fill: white;"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":".scroll-bar {"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":".scroll-bar .thumb {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;"},{"lineNumber":308,"author":{"gitId":"-"},"content":"}"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"#cardPane {"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;"},{"lineNumber":313,"author":{"gitId":"-"},"content":"}"},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"#commandTypeLabel {"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"#commandTextField {"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"JodyLorah"},"content":"#filterField, #clientListPanel, #clientWebpage {"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"},{"lineNumber":333,"author":{"gitId":"-"},"content":"}"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"#resultDisplay .content {"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":338,"author":{"gitId":"-"},"content":"}"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"#tags {"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;"},{"lineNumber":343,"author":{"gitId":"-"},"content":"}"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"#tags .label {"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;"},{"lineNumber":352,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":1,"-":351}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"        \u003cVBox fx:id\u003d\"clientList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"          \u003cStackPane fx:id\u003d\"clientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"JodyLorah":2,"-":58}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidAndValidClientAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":"  \"client\": [ {"},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"    \"name\": \"Valid Client\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    \"name\": \"Client With Invalid Phone Field\","},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\","},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":3,"-":10}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidClientAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":"  \"clients\": [ {"},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"    \"name\": \"Client with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":8,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":2,"-":6}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicateClientAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":"  \"clients\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"tagged\": [ \"friends\" ]"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":1,"-":13}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidClientAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":"  \"clients\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"invalid@email!3e\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":8,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":1,"-":7}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalClientsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":"  \"_comment\": \"AddressBook save file which contains the same Client values as in TypicalClients#getTypicalAddressBook()\","},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"  \"clients\" : [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ]"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\","},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\","},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\","},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\","},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\","},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\","},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\","},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\","},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\","},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\","},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\","},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\","},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\","},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\","},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":2,"-":44}},{"path":"src/test/java/seedu/address/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core.index;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"        final Index fifthClientIndex \u003d Index.fromOneBased(5);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(fifthClientIndex.equals(Index.fromOneBased(5)));"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(fifthClientIndex.equals(Index.fromZeroBased(4)));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(fifthClientIndex.equals(fifthClientIndex));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(fifthClientIndex.equals(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(fifthClientIndex.equals(5.0f));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(fifthClientIndex.equals(Index.fromOneBased(1)));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":7,"-":53}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":84,"author":{"gitId":"JodyLorah"},"content":"        Client expectedClient \u003d new ClientBuilder(AMY).withTags().build();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":86,"author":{"gitId":"JodyLorah"},"content":"        expectedModel.addClient(expectedClient);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"JodyLorah"},"content":"    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredClientList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":9,"-":153}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"    public void execute_newClient_success() {"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"        Client validClient \u003d new ClientBuilder().build();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"        expectedModel.addClient(validClient);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"        assertCommandSuccess(new AddCommand(validClient), model,"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validClient), expectedModel);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"    public void execute_duplicateClient_throwsCommandException() {"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"        Client clientInList \u003d model.getAddressBook().getClientList().get(0);"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"        assertCommandFailure(new AddCommand(clientInList), model, AddCommand.MESSAGE_DUPLICATE_CLIENT);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":11,"-":34}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"    public void constructor_nullClient_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    public void execute_clientAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"        ModelStubAcceptingClientAdded modelStub \u003d new ModelStubAcceptingClientAdded();"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        Client validClient \u003d new ClientBuilder().build();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"        CommandResult commandResult \u003d new AddCommand(validClient).execute(modelStub);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validClient), commandResult.getFeedbackToUser());"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(Arrays.asList(validClient), modelStub.clientsAdded);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"    public void execute_duplicateClient_throwsCommandException() {"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"        Client validClient \u003d new ClientBuilder().build();"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"        AddCommand addCommand \u003d new AddCommand(validClient);"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"        ModelStub modelStub \u003d new ModelStubWithClient(validClient);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_CLIENT, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"        Client alice \u003d new ClientBuilder().withName(\"Alice\").build();"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"        Client bob \u003d new ClientBuilder().withName(\"Bob\").build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":"        // different client -\u003e returns false"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":112,"author":{"gitId":"JodyLorah"},"content":"        public void addClient(Client client) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":127,"author":{"gitId":"JodyLorah"},"content":"        public boolean hasClient(Client client) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":132,"author":{"gitId":"JodyLorah"},"content":"        public void deleteClient(Client target) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitId":"JodyLorah"},"content":"        public void setClient(Client target, Client editedClient) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":142,"author":{"gitId":"JodyLorah"},"content":"        public ObservableList\u003cClient\u003e getFilteredClientList() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":147,"author":{"gitId":"JodyLorah"},"content":"        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"JodyLorah"},"content":"     * A Model stub that contains a single client."},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"JodyLorah"},"content":"    private class ModelStubWithClient extends ModelStub {"},{"lineNumber":156,"author":{"gitId":"JodyLorah"},"content":"        private final Client client;"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"JodyLorah"},"content":"        ModelStubWithClient(Client client) {"},{"lineNumber":159,"author":{"gitId":"JodyLorah"},"content":"            requireNonNull(client);"},{"lineNumber":160,"author":{"gitId":"JodyLorah"},"content":"            this.client \u003d client;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":164,"author":{"gitId":"JodyLorah"},"content":"        public boolean hasClient(Client client) {"},{"lineNumber":165,"author":{"gitId":"JodyLorah"},"content":"            requireNonNull(client);"},{"lineNumber":166,"author":{"gitId":"JodyLorah"},"content":"            return this.client.isSameClient(client);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"JodyLorah"},"content":"     * A Model stub that always accept the client being added."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"JodyLorah"},"content":"    private class ModelStubAcceptingClientAdded extends ModelStub {"},{"lineNumber":174,"author":{"gitId":"JodyLorah"},"content":"        final ArrayList\u003cClient\u003e clientsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":177,"author":{"gitId":"JodyLorah"},"content":"        public boolean hasClient(Client client) {"},{"lineNumber":178,"author":{"gitId":"JodyLorah"},"content":"            requireNonNull(client);"},{"lineNumber":179,"author":{"gitId":"JodyLorah"},"content":"            return clientsAdded.stream().anyMatch(client::isSameClient);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":183,"author":{"gitId":"JodyLorah"},"content":"        public void addClient(Client client) {"},{"lineNumber":184,"author":{"gitId":"JodyLorah"},"content":"            requireNonNull(client);"},{"lineNumber":185,"author":{"gitId":"JodyLorah"},"content":"            clientsAdded.add(client);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":41,"-":153}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":1,"-":31}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.testutil.EditClientDescriptorBuilder;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"    public static final EditCommand.EditClientDescriptor DESC_AMY;"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"    public static final EditCommand.EditClientDescriptor DESC_BOB;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"        DESC_AMY \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":"        DESC_BOB \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"JodyLorah"},"content":"     * - the address book, filtered client list and selected client in {@code actualModel} remain unchanged"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":107,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":108,"author":{"gitId":"JodyLorah"},"content":"        List\u003cClient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredClientList());"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":112,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredClientList());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"JodyLorah"},"content":"     * Updates {@code model}\u0027s filtered list to show only the client at the given {@code targetIndex} in the"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"JodyLorah"},"content":"    public static void showClientAtIndex(Model model, Index targetIndex) {"},{"lineNumber":119,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredClientList().size());"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"JodyLorah"},"content":"        Client client \u003d model.getFilteredClientList().get(targetIndex.getZeroBased());"},{"lineNumber":122,"author":{"gitId":"JodyLorah"},"content":"        final String[] splitName \u003d client.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":123,"author":{"gitId":"JodyLorah"},"content":"        model.updateFilteredClientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(1, model.getFilteredClientList().size());"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":17,"-":111}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CLIENT);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"        expectedModel.deleteClient(clientToDelete);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"        showClientAtIndex(model, INDEX_FIRST_CLIENT);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CLIENT);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"        expectedModel.deleteClient(clientToDelete);"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"        showNoClient(expectedModel);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"        showClientAtIndex(model, INDEX_FIRST_CLIENT);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getClientList().size());"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":81,"author":{"gitId":"JodyLorah"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_CLIENT);"},{"lineNumber":82,"author":{"gitId":"JodyLorah"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_CLIENT);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitId":"JodyLorah"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_CLIENT);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"JodyLorah"},"content":"        // different client -\u003e returns false"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"JodyLorah"},"content":"    private void showNoClient(Model model) {"},{"lineNumber":105,"author":{"gitId":"JodyLorah"},"content":"        model.updateFilteredClientList(p -\u003e false);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(model.getFilteredClientList().isEmpty());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":28,"-":81}},{"path":"src/test/java/seedu/address/logic/commands/EditClientDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.testutil.EditClientDescriptorBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"public class EditClientDescriptorTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"        EditClientDescriptor descriptorWithSameValues \u003d new EditClientDescriptor(DESC_AMY);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"        EditClientDescriptor editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":9,"-":49}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.testutil.EditClientDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"        Client editedClient \u003d new ClientBuilder().build();"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(editedClient).build();"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, descriptor);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"        expectedModel.setClient(model.getFilteredClientList().get(0), editedClient);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"        Index indexLastClient \u003d Index.fromOneBased(model.getFilteredClientList().size());"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"        Client lastClient \u003d model.getFilteredClientList().get(indexLastClient.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"        ClientBuilder clientInList \u003d new ClientBuilder(lastClient);"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"        Client editedClient \u003d clientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastClient, descriptor);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":"        expectedModel.setClient(lastClient, editedClient);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, new EditClientDescriptor());"},{"lineNumber":75,"author":{"gitId":"JodyLorah"},"content":"        Client editedClient \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":86,"author":{"gitId":"JodyLorah"},"content":"        showClientAtIndex(model, INDEX_FIRST_CLIENT);"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"JodyLorah"},"content":"        Client clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"},{"lineNumber":89,"author":{"gitId":"JodyLorah"},"content":"        Client editedClient \u003d new ClientBuilder(clientInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":90,"author":{"gitId":"JodyLorah"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT,"},{"lineNumber":91,"author":{"gitId":"JodyLorah"},"content":"                new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"JodyLorah"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":96,"author":{"gitId":"JodyLorah"},"content":"        expectedModel.setClient(model.getFilteredClientList().get(0), editedClient);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"JodyLorah"},"content":"    public void execute_duplicateClientUnfilteredList_failure() {"},{"lineNumber":103,"author":{"gitId":"JodyLorah"},"content":"        Client firstClient \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"},{"lineNumber":104,"author":{"gitId":"JodyLorah"},"content":"        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(firstClient).build();"},{"lineNumber":105,"author":{"gitId":"JodyLorah"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_CLIENT, descriptor);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"JodyLorah"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CLIENT);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"JodyLorah"},"content":"    public void execute_duplicateClientFilteredList_failure() {"},{"lineNumber":112,"author":{"gitId":"JodyLorah"},"content":"        showClientAtIndex(model, INDEX_FIRST_CLIENT);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"JodyLorah"},"content":"        // edit client in filtered list into a duplicate in address book"},{"lineNumber":115,"author":{"gitId":"JodyLorah"},"content":"        Client clientInList \u003d model.getAddressBook().getClientList().get(INDEX_SECOND_CLIENT.getZeroBased());"},{"lineNumber":116,"author":{"gitId":"JodyLorah"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT,"},{"lineNumber":117,"author":{"gitId":"JodyLorah"},"content":"                new EditClientDescriptorBuilder(clientInList).build());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"JodyLorah"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CLIENT);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"JodyLorah"},"content":"    public void execute_invalidClientIndexUnfilteredList_failure() {"},{"lineNumber":124,"author":{"gitId":"JodyLorah"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"},{"lineNumber":125,"author":{"gitId":"JodyLorah"},"content":"        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"JodyLorah"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"JodyLorah"},"content":"    public void execute_invalidClientIndexFilteredList_failure() {"},{"lineNumber":137,"author":{"gitId":"JodyLorah"},"content":"        showClientAtIndex(model, INDEX_FIRST_CLIENT);"},{"lineNumber":138,"author":{"gitId":"JodyLorah"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":140,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getClientList().size());"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":143,"author":{"gitId":"JodyLorah"},"content":"                new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"JodyLorah"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":150,"author":{"gitId":"JodyLorah"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, DESC_AMY);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":153,"author":{"gitId":"JodyLorah"},"content":"        EditClientDescriptor copyDescriptor \u003d new EditClientDescriptor(DESC_AMY);"},{"lineNumber":154,"author":{"gitId":"JodyLorah"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_CLIENT, copyDescriptor);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":167,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_CLIENT, DESC_AMY)));"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":170,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_CLIENT, DESC_BOB)));"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":58,"-":115}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.CARL;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.ELLE;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.FIONA;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"        // different client -\u003e returns false"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"    public void execute_zeroKeywords_noClientFound() {"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"        expectedModel.updateFilteredClientList(predicate);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredClientList());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"    public void execute_multipleKeywords_multipleClientsFound() {"},{"lineNumber":69,"author":{"gitId":"JodyLorah"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 3);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":"        expectedModel.updateFilteredClientList(predicate);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredClientList());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":15,"-":68}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        showClientAtIndex(model, INDEX_FIRST_CLIENT);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":4,"-":35}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.AMY;"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.BOB;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Address;"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Email;"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Name;"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Phone;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"        Client expectedClient \u003d new ClientBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":71,"author":{"gitId":"JodyLorah"},"content":"        Client expectedClientMultipleTags \u003d new ClientBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedClientMultipleTags));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":"        Client expectedClient \u003d new ClientBuilder(AMY).withTags().build();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":82,"author":{"gitId":"JodyLorah"},"content":"                new AddCommand(expectedClient));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // invalid address"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":18,"-":123}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.NameContainsKeywordsPredicate;"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.testutil.ClientUtil;"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.testutil.EditClientDescriptorBuilder;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"        Client client \u003d new ClientBuilder().build();"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(ClientUtil.getAddCommand(client));"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(new AddCommand(client), command);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased());"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_CLIENT), command);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"        Client client \u003d new ClientBuilder().build();"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(client).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"                + INDEX_FIRST_CLIENT.getOneBased() + \" \" + ClientUtil.getEditClientDescriptorDetails(descriptor));"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_CLIENT, descriptor), command);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":16,"-":85}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_CLIENT));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":2,"-":30}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CLIENT;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Address;"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Email;"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Name;"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Phone;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.testutil.EditClientDescriptorBuilder;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"JodyLorah"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Client} being edited,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":110,"author":{"gitId":"JodyLorah"},"content":"        Index targetIndex \u003d INDEX_SECOND_CLIENT;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"JodyLorah"},"content":"        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":124,"author":{"gitId":"JodyLorah"},"content":"        Index targetIndex \u003d INDEX_FIRST_CLIENT;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"JodyLorah"},"content":"        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":137,"author":{"gitId":"JodyLorah"},"content":"        Index targetIndex \u003d INDEX_THIRD_CLIENT;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":139,"author":{"gitId":"JodyLorah"},"content":"        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":145,"author":{"gitId":"JodyLorah"},"content":"        descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":151,"author":{"gitId":"JodyLorah"},"content":"        descriptor \u003d new EditClientDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // address"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":157,"author":{"gitId":"JodyLorah"},"content":"        descriptor \u003d new EditClientDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":163,"author":{"gitId":"JodyLorah"},"content":"        descriptor \u003d new EditClientDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":170,"author":{"gitId":"JodyLorah"},"content":"        Index targetIndex \u003d INDEX_FIRST_CLIENT;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"JodyLorah"},"content":"        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":186,"author":{"gitId":"JodyLorah"},"content":"        Index targetIndex \u003d INDEX_FIRST_CLIENT;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":188,"author":{"gitId":"JodyLorah"},"content":"        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":195,"author":{"gitId":"JodyLorah"},"content":"        descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":203,"author":{"gitId":"JodyLorah"},"content":"        Index targetIndex \u003d INDEX_THIRD_CLIENT;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"JodyLorah"},"content":"        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withTags().build();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":27,"-":184}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":1,"-":33}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Address;"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Email;"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Name;"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Phone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":7,"-":189}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.ALICE;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.exceptions.DuplicateClientException;"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(Collections.emptyList(), addressBook.getClientList());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"    public void resetData_withDuplicateClients_throwsDuplicateClientException() {"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"        // Two clients with the same identity fields"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"        List\u003cClient\u003e newClients \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newClients);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(DuplicateClientException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"    public void hasClient_nullClient_throwsNullPointerException() {"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasClient(null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"    public void hasClient_clientNotInAddressBook_returnsFalse() {"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(addressBook.hasClient(ALICE));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"    public void hasClient_clientInAddressBook_returnsTrue() {"},{"lineNumber":69,"author":{"gitId":"JodyLorah"},"content":"        addressBook.addClient(ALICE);"},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(addressBook.hasClient(ALICE));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":"    public void hasClient_clientWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":75,"author":{"gitId":"JodyLorah"},"content":"        addressBook.addClient(ALICE);"},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":"        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":78,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(addressBook.hasClient(editedAlice));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"JodyLorah"},"content":"    public void getClientList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":83,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getClientList().remove(0));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"JodyLorah"},"content":"     * A stub ReadOnlyAddressBook whose clients list can violate interface constraints."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":90,"author":{"gitId":"JodyLorah"},"content":"        private final ObservableList\u003cClient\u003e clients \u003d FXCollections.observableArrayList();"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"JodyLorah"},"content":"        AddressBookStub(Collection\u003cClient\u003e clients) {"},{"lineNumber":93,"author":{"gitId":"JodyLorah"},"content":"            this.clients.setAll(clients);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitId":"JodyLorah"},"content":"        public ObservableList\u003cClient\u003e getClientList() {"},{"lineNumber":98,"author":{"gitId":"JodyLorah"},"content":"            return clients;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":31,"-":71}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.ALICE;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.BENSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":"    public void hasClient_nullClient_throwsNullPointerException() {"},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasClient(null));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"JodyLorah"},"content":"    public void hasClient_clientNotInAddressBook_returnsFalse() {"},{"lineNumber":82,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(modelManager.hasClient(ALICE));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"JodyLorah"},"content":"    public void hasClient_clientInAddressBook_returnsTrue() {"},{"lineNumber":87,"author":{"gitId":"JodyLorah"},"content":"        modelManager.addClient(ALICE);"},{"lineNumber":88,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(modelManager.hasClient(ALICE));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"JodyLorah"},"content":"    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredClientList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":98,"author":{"gitId":"JodyLorah"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withClient(ALICE).withClient(BENSON).build();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":121,"author":{"gitId":"JodyLorah"},"content":"        modelManager.updateFilteredClientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":125,"author":{"gitId":"JodyLorah"},"content":"        modelManager.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":16,"-":116}},{"path":"src/test/java/seedu/address/model/client/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":1,"-":35}},{"path":"src/test/java/seedu/address/model/client/ClientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.ALICE;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"public class ClientTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"        Client client \u003d new ClientBuilder().build();"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e client.getTags().remove(0));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    public void isSameClient() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(ALICE.isSameClient(ALICE));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(ALICE.isSameClient(null));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"        Client editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(ALICE.isSameClient(editedAlice));"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"        editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(ALICE.isSameClient(editedAlice));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"        Client editedBob \u003d new ClientBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(BOB.isSameClient(editedBob));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"        editedBob \u003d new ClientBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(BOB.isSameClient(editedBob));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"        Client aliceCopy \u003d new ClientBuilder(ALICE).build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"        // different client -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":"        Client editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":"        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":"        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":84,"author":{"gitId":"JodyLorah"},"content":"        editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":88,"author":{"gitId":"JodyLorah"},"content":"        editedAlice \u003d new ClientBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":25,"-":66}},{"path":"src/test/java/seedu/address/model/client/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // valid email"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":1,"-":60}},{"path":"src/test/java/seedu/address/model/client/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"        // different client -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":10,"-":65}},{"path":"src/test/java/seedu/address/model/client/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":1,"-":39}},{"path":"src/test/java/seedu/address/model/client/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":1,"-":39}},{"path":"src/test/java/seedu/address/model/client/UniqueClientListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.ALICE;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.BOB;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.exceptions.ClientNotFoundException;"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.exceptions.DuplicateClientException;"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"public class UniqueClientListTest {"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    private final UniqueClientList uniqueClientList \u003d new UniqueClientList();"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    public void contains_nullClient_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.contains(null));"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"    public void contains_clientNotInList_returnsFalse() {"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(uniqueClientList.contains(ALICE));"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"    public void contains_clientInList_returnsTrue() {"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"        uniqueClientList.add(ALICE);"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(uniqueClientList.contains(ALICE));"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"    public void contains_clientWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"        uniqueClientList.add(ALICE);"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"                .build();"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(uniqueClientList.contains(editedAlice));"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"    public void add_nullClient_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.add(null));"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"    public void add_duplicateClient_throwsDuplicateClientException() {"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"        uniqueClientList.add(ALICE);"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.add(ALICE));"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"    public void setClient_nullTargetClient_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClient(null, ALICE));"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":66,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":"    public void setClient_nullEditedClient_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClient(ALICE, null));"},{"lineNumber":69,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":71,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":"    public void setClient_targetClientNotInList_throwsClientNotFoundException() {"},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(ClientNotFoundException.class, () -\u003e uniqueClientList.setClient(ALICE, ALICE));"},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":"    public void setClient_editedClientIsSameClient_success() {"},{"lineNumber":78,"author":{"gitId":"JodyLorah"},"content":"        uniqueClientList.add(ALICE);"},{"lineNumber":79,"author":{"gitId":"JodyLorah"},"content":"        uniqueClientList.setClient(ALICE, ALICE);"},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":"        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"},{"lineNumber":81,"author":{"gitId":"JodyLorah"},"content":"        expectedUniqueClientList.add(ALICE);"},{"lineNumber":82,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(expectedUniqueClientList, uniqueClientList);"},{"lineNumber":83,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":85,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"JodyLorah"},"content":"    public void setClient_editedClientHasSameIdentity_success() {"},{"lineNumber":87,"author":{"gitId":"JodyLorah"},"content":"        uniqueClientList.add(ALICE);"},{"lineNumber":88,"author":{"gitId":"JodyLorah"},"content":"        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":89,"author":{"gitId":"JodyLorah"},"content":"                .build();"},{"lineNumber":90,"author":{"gitId":"JodyLorah"},"content":"        uniqueClientList.setClient(ALICE, editedAlice);"},{"lineNumber":91,"author":{"gitId":"JodyLorah"},"content":"        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"},{"lineNumber":92,"author":{"gitId":"JodyLorah"},"content":"        expectedUniqueClientList.add(editedAlice);"},{"lineNumber":93,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(expectedUniqueClientList, uniqueClientList);"},{"lineNumber":94,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":96,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"JodyLorah"},"content":"    public void setClient_editedClientHasDifferentIdentity_success() {"},{"lineNumber":98,"author":{"gitId":"JodyLorah"},"content":"        uniqueClientList.add(ALICE);"},{"lineNumber":99,"author":{"gitId":"JodyLorah"},"content":"        uniqueClientList.setClient(ALICE, BOB);"},{"lineNumber":100,"author":{"gitId":"JodyLorah"},"content":"        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"},{"lineNumber":101,"author":{"gitId":"JodyLorah"},"content":"        expectedUniqueClientList.add(BOB);"},{"lineNumber":102,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(expectedUniqueClientList, uniqueClientList);"},{"lineNumber":103,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":105,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"JodyLorah"},"content":"    public void setClient_editedClientHasNonUniqueIdentity_throwsDuplicateClientException() {"},{"lineNumber":107,"author":{"gitId":"JodyLorah"},"content":"        uniqueClientList.add(ALICE);"},{"lineNumber":108,"author":{"gitId":"JodyLorah"},"content":"        uniqueClientList.add(BOB);"},{"lineNumber":109,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.setClient(ALICE, BOB));"},{"lineNumber":110,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":112,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"JodyLorah"},"content":"    public void remove_nullClient_throwsNullPointerException() {"},{"lineNumber":114,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.remove(null));"},{"lineNumber":115,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":117,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"JodyLorah"},"content":"    public void remove_clientDoesNotExist_throwsClientNotFoundException() {"},{"lineNumber":119,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(ClientNotFoundException.class, () -\u003e uniqueClientList.remove(ALICE));"},{"lineNumber":120,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":122,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"JodyLorah"},"content":"    public void remove_existingClient_removesClient() {"},{"lineNumber":124,"author":{"gitId":"JodyLorah"},"content":"        uniqueClientList.add(ALICE);"},{"lineNumber":125,"author":{"gitId":"JodyLorah"},"content":"        uniqueClientList.remove(ALICE);"},{"lineNumber":126,"author":{"gitId":"JodyLorah"},"content":"        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"},{"lineNumber":127,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(expectedUniqueClientList, uniqueClientList);"},{"lineNumber":128,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":130,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"JodyLorah"},"content":"    public void setClients_nullUniqueClientList_throwsNullPointerException() {"},{"lineNumber":132,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClients((UniqueClientList) null));"},{"lineNumber":133,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":135,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"JodyLorah"},"content":"    public void setClients_uniqueClientList_replacesOwnListWithProvidedUniqueClientList() {"},{"lineNumber":137,"author":{"gitId":"JodyLorah"},"content":"        uniqueClientList.add(ALICE);"},{"lineNumber":138,"author":{"gitId":"JodyLorah"},"content":"        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"},{"lineNumber":139,"author":{"gitId":"JodyLorah"},"content":"        expectedUniqueClientList.add(BOB);"},{"lineNumber":140,"author":{"gitId":"JodyLorah"},"content":"        uniqueClientList.setClients(expectedUniqueClientList);"},{"lineNumber":141,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(expectedUniqueClientList, uniqueClientList);"},{"lineNumber":142,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":144,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"JodyLorah"},"content":"    public void setClients_nullList_throwsNullPointerException() {"},{"lineNumber":146,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClients((List\u003cClient\u003e) null));"},{"lineNumber":147,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":149,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"JodyLorah"},"content":"    public void setClients_list_replacesOwnListWithProvidedList() {"},{"lineNumber":151,"author":{"gitId":"JodyLorah"},"content":"        uniqueClientList.add(ALICE);"},{"lineNumber":152,"author":{"gitId":"JodyLorah"},"content":"        List\u003cClient\u003e clientList \u003d Collections.singletonList(BOB);"},{"lineNumber":153,"author":{"gitId":"JodyLorah"},"content":"        uniqueClientList.setClients(clientList);"},{"lineNumber":154,"author":{"gitId":"JodyLorah"},"content":"        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"},{"lineNumber":155,"author":{"gitId":"JodyLorah"},"content":"        expectedUniqueClientList.add(BOB);"},{"lineNumber":156,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(expectedUniqueClientList, uniqueClientList);"},{"lineNumber":157,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":159,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":160,"author":{"gitId":"JodyLorah"},"content":"    public void setClients_listWithDuplicateClients_throwsDuplicateClientException() {"},{"lineNumber":161,"author":{"gitId":"JodyLorah"},"content":"        List\u003cClient\u003e listWithDuplicateClients \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":162,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.setClients(listWithDuplicateClients));"},{"lineNumber":163,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":165,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"JodyLorah"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":167,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":168,"author":{"gitId":"JodyLorah"},"content":"            -\u003e uniqueClientList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":169,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":170}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedClientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.storage.JsonAdaptedClient.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Address;"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Email;"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Name;"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Phone;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"public class JsonAdaptedClientTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"    public void toModelType_validClientDetails_returnsClient() throws Exception {"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"        JsonAdaptedClient client \u003d new JsonAdaptedClient(BENSON);"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(BENSON, client.toModelType());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"        JsonAdaptedClient client \u003d"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"                new JsonAdaptedClient(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"        JsonAdaptedClient client \u003d new JsonAdaptedClient(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"        JsonAdaptedClient client \u003d"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"                new JsonAdaptedClient(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":66,"author":{"gitId":"JodyLorah"},"content":"        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":"        JsonAdaptedClient client \u003d"},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":"                new JsonAdaptedClient(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":81,"author":{"gitId":"JodyLorah"},"content":"        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":83,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitId":"JodyLorah"},"content":"        JsonAdaptedClient client \u003d"},{"lineNumber":89,"author":{"gitId":"JodyLorah"},"content":"                new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":91,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitId":"JodyLorah"},"content":"        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":98,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":105,"author":{"gitId":"JodyLorah"},"content":"        JsonAdaptedClient client \u003d"},{"lineNumber":106,"author":{"gitId":"JodyLorah"},"content":"                new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"},{"lineNumber":107,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(IllegalValueException.class, client::toModelType);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":33,"-":77}},{"path":"src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.ALICE;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.HOON;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.IDA;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"    public void readAddressBook_invalidClientAddressBook_throwDataConversionException() {"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidClientAddressBook.json\"));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"    public void readAddressBook_invalidAndValidClientAddressBook_throwDataConversionException() {"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidClientAddressBook.json\"));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Save in new file and read back"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back"},{"lineNumber":75,"author":{"gitId":"JodyLorah"},"content":"        original.addClient(HOON);"},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":"        original.removeClient(ALICE);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path"},{"lineNumber":82,"author":{"gitId":"JodyLorah"},"content":"        original.addClient(IDA);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":11,"-":99}},{"path":"src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.testutil.TypicalClients;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"    private static final Path TYPICAL_CLIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalClientsAddressBook.json\");"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    private static final Path INVALID_CLIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidClientAddressBook.json\");"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"    private static final Path DUPLICATE_CLIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateClientAddressBook.json\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    public void toModelType_typicalClientsFile_success() throws Exception {"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_CLIENTS_FILE,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"        AddressBook typicalClientsAddressBook \u003d TypicalClients.getTypicalAddressBook();"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(addressBookFromFile, typicalClientsAddressBook);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    public void toModelType_invalidClientFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_CLIENT_FILE,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"    public void toModelType_duplicateClients_throwsIllegalValueException() throws Exception {"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_CLIENT_FILE,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_CLIENT,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":13,"-":34}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class."},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":1,"-":67}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withClient(\"John\", \"Doe\").build();}"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"     * Adds a new {@code Client} to the {@code AddressBook} that we are building."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    public AddressBookBuilder withClient(Client client) {"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"        addressBook.addClient(client);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook build() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":5,"-":29}},{"path":"src/test/java/seedu/address/testutil/ClientBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Address;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Email;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Name;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Phone;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":" * A utility class to help with building Client objects."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"public class ClientBuilder {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"     * Creates a {@code ClientBuilder} with the default details."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    public ClientBuilder() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"     * Initializes the ClientBuilder with the data of {@code clientToCopy}."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"    public ClientBuilder(Client clientToCopy) {"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"        name \u003d clientToCopy.getName();"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"        phone \u003d clientToCopy.getPhone();"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"        email \u003d clientToCopy.getEmail();"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"        address \u003d clientToCopy.getAddress();"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"        tags \u003d new HashSet\u003c\u003e(clientToCopy.getTags());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"     * Sets the {@code Name} of the {@code Client} that we are building."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"    public ClientBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Client} that we are building."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"    public ClientBuilder withTags(String ... tags) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"JodyLorah"},"content":"     * Sets the {@code Address} of the {@code Client} that we are building."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"JodyLorah"},"content":"    public ClientBuilder withAddress(String address) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":"     * Sets the {@code Phone} of the {@code Client} that we are building."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"JodyLorah"},"content":"    public ClientBuilder withPhone(String phone) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"JodyLorah"},"content":"     * Sets the {@code Email} of the {@code Client} that we are building."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"JodyLorah"},"content":"    public ClientBuilder withEmail(String email) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"JodyLorah"},"content":"    public Client build() {"},{"lineNumber":93,"author":{"gitId":"JodyLorah"},"content":"        return new Client(name, phone, email, address, tags);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":28,"-":68}},{"path":"src/test/java/seedu/address/testutil/ClientUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":" * A utility class for Client."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"public class ClientUtil {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"     * Returns an add command string for adding the {@code client}."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    public static String getAddCommand(Client client) {"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getClientDetails(client);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"     * Returns the part of command string for the given {@code client}\u0027s details."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"    public static String getClientDetails(Client client) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"        sb.append(PREFIX_NAME + client.getName().fullName + \" \");"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"        sb.append(PREFIX_PHONE + client.getPhone().value + \" \");"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"        sb.append(PREFIX_EMAIL + client.getEmail().value + \" \");"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        sb.append(PREFIX_ADDRESS + client.getAddress().value + \" \");"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"        client.getTags().stream().forEach("},{"lineNumber":38,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"     * Returns the part of command string for the given {@code EditClientDescriptor}\u0027s details."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"    public static String getEditClientDescriptorDetails(EditClientDescriptor descriptor) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":16,"-":46}},{"path":"src/test/java/seedu/address/testutil/EditClientDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Address;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Email;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Name;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Phone;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":" * A utility class to help with building EditClientDescriptor objects."},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"public class EditClientDescriptorBuilder {"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    private EditClientDescriptor descriptor;"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    public EditClientDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"        descriptor \u003d new EditClientDescriptor();"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    public EditClientDescriptorBuilder(EditClientDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"        this.descriptor \u003d new EditClientDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"     * Returns an {@code EditClientDescriptor} with fields containing {@code client}\u0027s details"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    public EditClientDescriptorBuilder(Client client) {"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"        descriptor \u003d new EditClientDescriptor();"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"        descriptor.setName(client.getName());"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        descriptor.setPhone(client.getPhone());"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"        descriptor.setEmail(client.getEmail());"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"        descriptor.setAddress(client.getAddress());"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"        descriptor.setTags(client.getTags());"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"     * Sets the {@code Name} of the {@code EditClientDescriptor} that we are building."},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"    public EditClientDescriptorBuilder withName(String name) {"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"        return this;"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"     * Sets the {@code Phone} of the {@code EditClientDescriptor} that we are building."},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"    public EditClientDescriptorBuilder withPhone(String phone) {"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"        return this;"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"     * Sets the {@code Email} of the {@code EditClientDescriptor} that we are building."},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"    public EditClientDescriptorBuilder withEmail(String email) {"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"        return this;"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":66,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":"     * Sets the {@code Address} of the {@code EditClientDescriptor} that we are building."},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"JodyLorah"},"content":"    public EditClientDescriptorBuilder withAddress(String address) {"},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":71,"author":{"gitId":"JodyLorah"},"content":"        return this;"},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"JodyLorah"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditClientDescriptor}"},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":"     * that we are building."},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"JodyLorah"},"content":"    public EditClientDescriptorBuilder withTags(String... tags) {"},{"lineNumber":79,"author":{"gitId":"JodyLorah"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":81,"author":{"gitId":"JodyLorah"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":84,"author":{"gitId":"JodyLorah"},"content":"    public EditClientDescriptor build() {"},{"lineNumber":85,"author":{"gitId":"JodyLorah"},"content":"        return descriptor;"},{"lineNumber":86,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":87}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"     * Returns the middle index of the client in the {@code model}\u0027s client list."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"        return Index.fromOneBased(model.getFilteredClientList().size() / 2);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"     * Returns the last index of the client in the {@code model}\u0027s client list."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"        return Index.fromOneBased(model.getFilteredClientList().size());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"     * Returns the client in the {@code model}\u0027s client list at {@code index}."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"    public static Client getClient(Model model, Index index) {"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"        return model.getFilteredClientList().get(index.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":8,"-":47}},{"path":"src/test/java/seedu/address/testutil/TypicalClients.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":" * A utility class containing a list of {@code Client} objects to be used in tests."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"public class TypicalClients {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    public static final Client ALICE \u003d new ClientBuilder().withName(\"Alice Pauline\")"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    public static final Client BENSON \u003d new ClientBuilder().withName(\"Benson Meier\")"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    public static final Client CARL \u003d new ClientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"    public static final Client DANIEL \u003d new ClientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"    public static final Client ELLE \u003d new ClientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"    public static final Client FIONA \u003d new ClientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"    public static final Client GEORGE \u003d new ClientBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"    public static final Client HOON \u003d new ClientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"    public static final Client IDA \u003d new ClientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"    // Manually added - Client\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"    public static final Client AMY \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"    public static final Client BOB \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"    private TypicalClients() {} // prevents instantiation"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"     * Returns an {@code AddressBook} with all the typical clients."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":"        for (Client client : getTypicalClients()) {"},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"            ab.addClient(client);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":"    public static List\u003cClient\u003e getTypicalClients() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":20,"-":56}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"    public static final Index INDEX_FIRST_CLIENT \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"    public static final Index INDEX_SECOND_CLIENT \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public static final Index INDEX_THIRD_CLIENT \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":3,"-":9}}]
