[{"path":".vscode/settings.json","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"{"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"    \"files.eol\": \"\\n\","},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"    \"files.insertFinalNewline\": true,"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"    \"files.trimTrailingWhitespace\": true,"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"    \"java.checkstyle.version\": \"8.29\","},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"    \"java.checkstyle.configuration\": \"${workspaceFolder}/config/checkstyle/checkstyle.xml\","},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"    \"java.checkstyle.properties\": {"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"        \"config_loc\": \"${workspaceFolder}/config/checkstyle\""},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"    },"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"    \"java.codeGeneration.hashCodeEquals.useInstanceof\": true,"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"    \"java.completion.importOrder\": ["},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"        \"java\","},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"        \"javax\","},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"        \"com\","},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"        \"org\""},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    ],"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    \"java.configuration.updateBuildConfiguration\": \"automatic\","},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"    \"java.format.settings.url\": \"https://gist.githubusercontent.com/stein212/1eb6ed21d06c4a79d54a5a2cb074539b/raw/a2ff1d152a1bafd1b5000988724aa4400738abde/eclipse-formatter.xml\","},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":19}},{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103-T14-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103-T14-1/tp/actions)"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103-T14-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103-T14-1/tp)"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"**SunRez** is a desktop app designed for college residential staff to efficiently manage student housing services. It is optimized for use via a Command Line Interface (CLI)."},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"**SunRez** has the following features:"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of maintenance issues"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of student records"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of room records"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"If this is your first time using/contributing to **SunRez**, check out our guides in the [Site Map](#site-map) section below."},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"## Site Map"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"* [User Guide](docs/UserGuide.md)"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"* [Developer Guide](docs/DeveloperGuide.md)"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"* [About Us](docs/AboutUs.md)"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"* [Github](https://github.com/AY2021S2-CS2103-T14-1/tp)"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"## Acknowledgements"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"* Favicon designed by [FreeLogoDesign](https://www.freelogodesign.org/)."},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"## License: [MIT](LICENSE)"}],"authorContributionMap":{"benedictkhoomw":25,"-":3}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    String jUnitVersion \u003d \u00275.6.0\u0027"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    archiveName \u003d \u0027addressbook.jar\u0027"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027"}],"authorContributionMap":{"stein414":1,"-":71}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"You can reach us at the email `e0205114[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"### Azeem Vasanwala"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"\u003cimg src\u003d\"images/drwala.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"[[github](https://github.com/DrWala)]"},{"lineNumber":17,"author":{"gitId":"-"},"content":"[[portfolio](team/azeem.md)]"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"* Role: Developer"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"* Responsibilities: Testing, Rooms feature"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"### Benedict Khoo"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"\u003cimg src\u003d\"images/benedictkhoomw.png\" width\u003d\"200px\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"[[github](https://github.com/benedictkhoomw)]"},{"lineNumber":27,"author":{"gitId":"-"},"content":"[[portfolio](team/benedict.md)]"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"* Role: Developer"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"* Responsibilities: Documentation, Storage Integration"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"### Colin Tan"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"\u003cimg src\u003d\"images/colintkn.png\" width\u003d\"200px\"\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"[[github](https://github.com/colintkn)]"},{"lineNumber":37,"author":{"gitId":"-"},"content":"[[portfolio](team/colin.md)]"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"* Role: Developer"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"* Responsibilities: Integration, Resident Feature"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"### Ian Soo"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"\u003cimg src\u003d\"images/stein414.png\" width\u003d\"200px\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"[[github](https://github.com/stein414)]"},{"lineNumber":47,"author":{"gitId":"-"},"content":"[[portfolio](team/ian.md)]"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"* Role: Developer, VS Code Expert"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"* Responsibilities: Code Quality, Issue Feature"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"### Linh"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"\u003cimg src\u003d\"images/cnlinh.png\" width\u003d\"200px\"\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"[[github](https://github.com/cnlinh)]"},{"lineNumber":57,"author":{"gitId":"-"},"content":"[[portfolio](team/linh.md)]"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"* Role: Team Lead"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"* Responsibilities: UI"}],"authorContributionMap":{"cnlinh":4,"benedictkhoomw":3,"stein414":3,"colintkn":3,"-":44,"DrWala":3}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"stein414"},"content":"Nina works as a housing service management officer for a Residential College* (in NUS). She is the sole manager of the office. She:"},{"lineNumber":240,"author":{"gitId":"stein414"},"content":"* has to manage a large number of residents and rooms (\u003e 600)"},{"lineNumber":241,"author":{"gitId":"stein414"},"content":"* needs to efficiently assign rooms to residents"},{"lineNumber":242,"author":{"gitId":"stein414"},"content":"* handles room allocation exercise every semester"},{"lineNumber":243,"author":{"gitId":"stein414"},"content":"* needs to track room issues reported by students during the semester"},{"lineNumber":244,"author":{"gitId":"stein414"},"content":"* needs to update the issue lifecycle (reported \u003d\u003e maintenance ongoing \u003d\u003e fixed/closed)"},{"lineNumber":245,"author":{"gitId":"stein414"},"content":"* prefers typing over interacting via GUI"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"stein414"},"content":"**Value proposition**: manage residents, rooms, and allocations faster than a typical GUI app."},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"stein414"},"content":"| Priority | As a … | I want to … | So that I can…|"},{"lineNumber":255,"author":{"gitId":"stein414"},"content":"| - | - | - | - |"},{"lineNumber":256,"author":{"gitId":"stein414"},"content":"| `* * *` | new user | see usage instructions | refer to instructions if I forget how to use the app |"},{"lineNumber":257,"author":{"gitId":"stein414"},"content":"| `* * *` | confused user | have a help command | learn how to use the application |"},{"lineNumber":258,"author":{"gitId":"-"},"content":"| `* * *` | user | add a new person | |"},{"lineNumber":259,"author":{"gitId":"stein414"},"content":"| `* * *` | user | add issues | |"},{"lineNumber":260,"author":{"gitId":"stein414"},"content":"| `* * *` | user | see a list of pending tasks sorted by deadline | prioritise which to do |"},{"lineNumber":261,"author":{"gitId":"stein414"},"content":"| `* * *` | user | search for tasks | |"},{"lineNumber":262,"author":{"gitId":"stein414"},"content":"| `* * *` | user | close issues | focus on open issues |"},{"lineNumber":263,"author":{"gitId":"stein414"},"content":"| `* * *` | user | update issues | |"},{"lineNumber":264,"author":{"gitId":"stein414"},"content":"| `* * *` | user | remove issues | |"},{"lineNumber":265,"author":{"gitId":"stein414"},"content":"| `* * *` | user | add residents | |"},{"lineNumber":266,"author":{"gitId":"stein414"},"content":"| `* * *` | user | search for residents | |"},{"lineNumber":267,"author":{"gitId":"stein414"},"content":"| `* * *` | user | update resident details | ensure their information is up to date |"},{"lineNumber":268,"author":{"gitId":"stein414"},"content":"| `* * *` | user | remove residents | |"},{"lineNumber":269,"author":{"gitId":"stein414"},"content":"| `* * *` | user | add new rooms | |"},{"lineNumber":270,"author":{"gitId":"stein414"},"content":"| `* * *` | user | see a list of rooms with their statuses | know which rooms are available |"},{"lineNumber":271,"author":{"gitId":"stein414"},"content":"| `* * *` | user | search for rooms | |"},{"lineNumber":272,"author":{"gitId":"stein414"},"content":"| `* * *` | user | update room details | |"},{"lineNumber":273,"author":{"gitId":"stein414"},"content":"| `* * *` | user | remove rooms | |"},{"lineNumber":274,"author":{"gitId":"stein414"},"content":"| `* *` | user | see both available rooms and unassigned residents side by side | easily match residents to rooms |"},{"lineNumber":275,"author":{"gitId":"stein414"},"content":"| `* *` | careless user | undo previous commands | easily fix any errors I might make |"},{"lineNumber":276,"author":{"gitId":"stein414"},"content":"| `* *` | careless user | redo previous commands | easily fix an erroneous undo |"},{"lineNumber":277,"author":{"gitId":"stein414"},"content":"| `* * *` | user | allocate a resident to a room | |"},{"lineNumber":278,"author":{"gitId":"stein414"},"content":"| `* * *` | user | deallocate a resident from a room | |"},{"lineNumber":279,"author":{"gitId":"benedictkhoomw"},"content":"| `* *` | power user | access my command history | efficiently repeat similar commands |"},{"lineNumber":280,"author":{"gitId":"cnlinh"},"content":"| `* *` | power user | create aliases for longer commands | avoid typing the same command multiple times | "},{"lineNumber":281,"author":{"gitId":"stein414"},"content":""},{"lineNumber":282,"author":{"gitId":"stein414"},"content":"## Use cases"},{"lineNumber":283,"author":{"gitId":"stein414"},"content":""},{"lineNumber":284,"author":{"gitId":"stein414"},"content":"(For all use cases below, the **System** is the `SunRez` and the **Actor** is the `user`, unless specified otherwise. All Use Cases are prefixed with `UC` followed by a 3 digit code)"},{"lineNumber":285,"author":{"gitId":"stein414"},"content":""},{"lineNumber":286,"author":{"gitId":"stein414"},"content":""},{"lineNumber":287,"author":{"gitId":"stein414"},"content":"### UC-001 Add a resident"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"stein414"},"content":"**MSS**"},{"lineNumber":290,"author":{"gitId":"stein414"},"content":""},{"lineNumber":291,"author":{"gitId":"stein414"},"content":"1. User requests to add a specific resident to the list."},{"lineNumber":292,"author":{"gitId":"stein414"},"content":"2. SunRez adds the resident and saves the changes."},{"lineNumber":293,"author":{"gitId":"stein414"},"content":""},{"lineNumber":294,"author":{"gitId":"stein414"},"content":"Use case ends."},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"stein414"},"content":"**Extensions**"},{"lineNumber":297,"author":{"gitId":"stein414"},"content":""},{"lineNumber":298,"author":{"gitId":"benedictkhoomw"},"content":"* 1a. The resident\u0027s details are incorrectly formatted (e.g. phone number/email/year format does not conform, OR room number is invalid)."},{"lineNumber":299,"author":{"gitId":"stein414"},"content":"    * 1a1. SunRez displays an error stating which field is incorrectly formatted and requests the user to try again after fixing the stated error."},{"lineNumber":300,"author":{"gitId":"benedictkhoomw"},"content":"    "},{"lineNumber":301,"author":{"gitId":"stein414"},"content":"        Use case ends."},{"lineNumber":302,"author":{"gitId":"stein414"},"content":"* 1b. The resident\u0027s phone number or email are in use by an existing resident."},{"lineNumber":303,"author":{"gitId":"stein414"},"content":"    * 1b1. SunRez displays an error stating which field is already in use and requests the user to try again after fixing the stated error."},{"lineNumber":304,"author":{"gitId":"benedictkhoomw"},"content":"    "},{"lineNumber":305,"author":{"gitId":"stein414"},"content":"        Use case ends."},{"lineNumber":306,"author":{"gitId":"benedictkhoomw"},"content":"* 2a. SunRez encounters an error while saving the content."},{"lineNumber":307,"author":{"gitId":"stein414"},"content":"    * 2a1. SunRez shows an error message and requests the user to try their command again."},{"lineNumber":308,"author":{"gitId":"benedictkhoomw"},"content":"    "},{"lineNumber":309,"author":{"gitId":"stein414"},"content":"        Use case ends."},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"stein414"},"content":"### UC-002 List all residents"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"stein414"},"content":"1. User requests to list residents."},{"lineNumber":317,"author":{"gitId":"stein414"},"content":"2. SunRez shows a list of residents."},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":324,"author":{"gitId":"benedictkhoomw"},"content":"    "},{"lineNumber":325,"author":{"gitId":"stein414"},"content":"    Use case ends."},{"lineNumber":326,"author":{"gitId":"stein414"},"content":""},{"lineNumber":327,"author":{"gitId":"stein414"},"content":""},{"lineNumber":328,"author":{"gitId":"stein414"},"content":"### UC-003 Find residents"},{"lineNumber":329,"author":{"gitId":"stein414"},"content":""},{"lineNumber":330,"author":{"gitId":"stein414"},"content":"**MSS**"},{"lineNumber":331,"author":{"gitId":"stein414"},"content":""},{"lineNumber":332,"author":{"gitId":"stein414"},"content":"1. User searches for a resident by keywords."},{"lineNumber":333,"author":{"gitId":"stein414"},"content":"2. SunRez shows a list of residents whose name contain any of the keywords."},{"lineNumber":334,"author":{"gitId":"stein414"},"content":""},{"lineNumber":335,"author":{"gitId":"stein414"},"content":"Use case ends."},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"stein414"},"content":"**Extensions**"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"stein414"},"content":"* 2a. There are no residents matching the keywords."},{"lineNumber":340,"author":{"gitId":"stein414"},"content":"    * 2a1. An empty list is displayed."},{"lineNumber":341,"author":{"gitId":"benedictkhoomw"},"content":"    "},{"lineNumber":342,"author":{"gitId":"stein414"},"content":"        Use case ends."},{"lineNumber":343,"author":{"gitId":"-"},"content":""},{"lineNumber":344,"author":{"gitId":"stein414"},"content":"### UC-004 Edit a resident record"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"stein414"},"content":"1. User requests to list residents."},{"lineNumber":349,"author":{"gitId":"stein414"},"content":"2. SunRez shows a list of residents."},{"lineNumber":350,"author":{"gitId":"stein414"},"content":"3. User requests to edit a specific resident based on the index from the list displayed in step 2."},{"lineNumber":351,"author":{"gitId":"stein414"},"content":"4. SunRez edits the residents and saves the changes."},{"lineNumber":352,"author":{"gitId":"stein414"},"content":""},{"lineNumber":353,"author":{"gitId":"stein414"},"content":"Use case ends."},{"lineNumber":354,"author":{"gitId":"-"},"content":""},{"lineNumber":355,"author":{"gitId":"stein414"},"content":"**Extensions**"},{"lineNumber":356,"author":{"gitId":"stein414"},"content":""},{"lineNumber":357,"author":{"gitId":"stein414"},"content":"* 2a. The list of residents is empty."},{"lineNumber":358,"author":{"gitId":"benedictkhoomw"},"content":"    "},{"lineNumber":359,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":360,"author":{"gitId":"stein414"},"content":"* 3a. The resident\u0027s details are invalid (e.g phone number/email/dob format does not conform, OR room number is invalid)."},{"lineNumber":361,"author":{"gitId":"stein414"},"content":"    * 3a1. SunRez shows an error message stating which field is incorrectly formatted and requests the user to try again."},{"lineNumber":362,"author":{"gitId":"benedictkhoomw"},"content":"    "},{"lineNumber":363,"author":{"gitId":"stein414"},"content":"        Use case resumes at step 2."},{"lineNumber":364,"author":{"gitId":"stein414"},"content":""},{"lineNumber":365,"author":{"gitId":"stein414"},"content":""},{"lineNumber":366,"author":{"gitId":"stein414"},"content":"### UC-005 Delete a resident"},{"lineNumber":367,"author":{"gitId":"stein414"},"content":""},{"lineNumber":368,"author":{"gitId":"stein414"},"content":"**MSS**"},{"lineNumber":369,"author":{"gitId":"stein414"},"content":""},{"lineNumber":370,"author":{"gitId":"stein414"},"content":"1. User requests to list residents."},{"lineNumber":371,"author":{"gitId":"stein414"},"content":"2. SunRez shows a list of residents."},{"lineNumber":372,"author":{"gitId":"stein414"},"content":"3. User requests to delete a specific resident based on the index from the list displayed in step 2."},{"lineNumber":373,"author":{"gitId":"stein414"},"content":"4. SunRez deletes the specified resident and saves the changes."},{"lineNumber":374,"author":{"gitId":"stein414"},"content":""},{"lineNumber":375,"author":{"gitId":"stein414"},"content":"Use case ends."},{"lineNumber":376,"author":{"gitId":"-"},"content":""},{"lineNumber":377,"author":{"gitId":"stein414"},"content":"**Extensions**"},{"lineNumber":378,"author":{"gitId":"stein414"},"content":""},{"lineNumber":379,"author":{"gitId":"stein414"},"content":"* 2a. The list of residents is empty."},{"lineNumber":380,"author":{"gitId":"benedictkhoomw"},"content":"    "},{"lineNumber":381,"author":{"gitId":"stein414"},"content":"    Use case ends."},{"lineNumber":382,"author":{"gitId":"stein414"},"content":"* 3a. The specified resident does not exist."},{"lineNumber":383,"author":{"gitId":"benedictkhoomw"},"content":"    * 3a1. SunRez shows an error message."},{"lineNumber":384,"author":{"gitId":"benedictkhoomw"},"content":"    "},{"lineNumber":385,"author":{"gitId":"stein414"},"content":"        Use case resumes at step 2."},{"lineNumber":386,"author":{"gitId":"stein414"},"content":""},{"lineNumber":387,"author":{"gitId":"stein414"},"content":""},{"lineNumber":388,"author":{"gitId":"stein414"},"content":"### UC-006 Add a room"},{"lineNumber":389,"author":{"gitId":"stein414"},"content":""},{"lineNumber":390,"author":{"gitId":"stein414"},"content":"**MSS**"},{"lineNumber":391,"author":{"gitId":"stein414"},"content":""},{"lineNumber":392,"author":{"gitId":"stein414"},"content":"1. User requests to add a specific room to the list."},{"lineNumber":393,"author":{"gitId":"stein414"},"content":"2. SunRez adds the room and saves the changes."},{"lineNumber":394,"author":{"gitId":"stein414"},"content":""},{"lineNumber":395,"author":{"gitId":"stein414"},"content":"Use case ends."},{"lineNumber":396,"author":{"gitId":"stein414"},"content":""},{"lineNumber":397,"author":{"gitId":"stein414"},"content":"**Extensions**"},{"lineNumber":398,"author":{"gitId":"stein414"},"content":"* 1a. The room\u0027s details are invalid (e.g room number format is not valid)."},{"lineNumber":399,"author":{"gitId":"stein414"},"content":"    * 1a1. SunRez shows an error stating which field is incorrectly formatted and requests the user to try again after fixing the stated error."},{"lineNumber":400,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":401,"author":{"gitId":"stein414"},"content":"        Use case ends."},{"lineNumber":402,"author":{"gitId":"stein414"},"content":""},{"lineNumber":403,"author":{"gitId":"stein414"},"content":""},{"lineNumber":404,"author":{"gitId":"stein414"},"content":"### UC-007 List all rooms"},{"lineNumber":405,"author":{"gitId":"stein414"},"content":""},{"lineNumber":406,"author":{"gitId":"stein414"},"content":"Similar to *UC-002 List all residents*, just replace residents with rooms."},{"lineNumber":407,"author":{"gitId":"stein414"},"content":""},{"lineNumber":408,"author":{"gitId":"stein414"},"content":""},{"lineNumber":409,"author":{"gitId":"stein414"},"content":"### UC-008 Find rooms"},{"lineNumber":410,"author":{"gitId":"stein414"},"content":""},{"lineNumber":411,"author":{"gitId":"stein414"},"content":"Similar to *UC-003 Find residents*, just replace resident with room."},{"lineNumber":412,"author":{"gitId":"stein414"},"content":""},{"lineNumber":413,"author":{"gitId":"stein414"},"content":""},{"lineNumber":414,"author":{"gitId":"stein414"},"content":"### UC-009 Edit a room record"},{"lineNumber":415,"author":{"gitId":"stein414"},"content":""},{"lineNumber":416,"author":{"gitId":"stein414"},"content":"**MSS**"},{"lineNumber":417,"author":{"gitId":"stein414"},"content":""},{"lineNumber":418,"author":{"gitId":"stein414"},"content":"1. User requests to list rooms."},{"lineNumber":419,"author":{"gitId":"stein414"},"content":"2. SunRez shows a list of rooms."},{"lineNumber":420,"author":{"gitId":"stein414"},"content":"3. User requests to edit a specific room based on the index from the list displayed in step 2."},{"lineNumber":421,"author":{"gitId":"stein414"},"content":"4. SunRez edits the room and saves the changes."},{"lineNumber":422,"author":{"gitId":"stein414"},"content":""},{"lineNumber":423,"author":{"gitId":"stein414"},"content":"Use case ends."},{"lineNumber":424,"author":{"gitId":"stein414"},"content":""},{"lineNumber":425,"author":{"gitId":"stein414"},"content":"**Extensions**"},{"lineNumber":426,"author":{"gitId":"stein414"},"content":""},{"lineNumber":427,"author":{"gitId":"stein414"},"content":"* 2a. The list of rooms is empty. "},{"lineNumber":428,"author":{"gitId":"benedictkhoomw"},"content":"    "},{"lineNumber":429,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":430,"author":{"gitId":"benedictkhoomw"},"content":"* 3a. The room\u0027s details are invalid (e.g. room number format is not valid)."},{"lineNumber":431,"author":{"gitId":"stein414"},"content":"    * 3a1. SunRez shows an error message stating which field is incorrectly formatted and requests the user to try again."},{"lineNumber":432,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":433,"author":{"gitId":"stein414"},"content":"        Use case resumes at step 2."},{"lineNumber":434,"author":{"gitId":"stein414"},"content":""},{"lineNumber":435,"author":{"gitId":"stein414"},"content":""},{"lineNumber":436,"author":{"gitId":"stein414"},"content":"### UC-010 Delete a room"},{"lineNumber":437,"author":{"gitId":"stein414"},"content":""},{"lineNumber":438,"author":{"gitId":"stein414"},"content":"Similar to *UC-005 Delete a resident*, just replace resident with room."},{"lineNumber":439,"author":{"gitId":"stein414"},"content":""},{"lineNumber":440,"author":{"gitId":"-"},"content":""},{"lineNumber":441,"author":{"gitId":"stein414"},"content":"### UC-011 Add an open issue"},{"lineNumber":442,"author":{"gitId":"stein414"},"content":""},{"lineNumber":443,"author":{"gitId":"stein414"},"content":"**MSS**"},{"lineNumber":444,"author":{"gitId":"stein414"},"content":""},{"lineNumber":445,"author":{"gitId":"stein414"},"content":"1. User requests to add a specific open issue to the list."},{"lineNumber":446,"author":{"gitId":"stein414"},"content":"2. SunRez adds the issue and saves the changes."},{"lineNumber":447,"author":{"gitId":"stein414"},"content":""},{"lineNumber":448,"author":{"gitId":"stein414"},"content":"Use case ends."},{"lineNumber":449,"author":{"gitId":"stein414"},"content":""},{"lineNumber":450,"author":{"gitId":"stein414"},"content":"**Extensions**"},{"lineNumber":451,"author":{"gitId":"benedictkhoomw"},"content":"* 1a. The issue\u0027s details are invalid (e.g. invalid room number)."},{"lineNumber":452,"author":{"gitId":"stein414"},"content":"    * 1a1. SunRez shows an error stating which field is incorrectly formatted and requests the user to try again after fixing the stated error. "},{"lineNumber":453,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":454,"author":{"gitId":"stein414"},"content":"        Use case ends."},{"lineNumber":455,"author":{"gitId":"stein414"},"content":""},{"lineNumber":456,"author":{"gitId":"stein414"},"content":""},{"lineNumber":457,"author":{"gitId":"stein414"},"content":"### UC-012 List all issues"},{"lineNumber":458,"author":{"gitId":"stein414"},"content":""},{"lineNumber":459,"author":{"gitId":"stein414"},"content":"Similar to *UC-002 List all residents*, just replace residents with issues."},{"lineNumber":460,"author":{"gitId":"stein414"},"content":""},{"lineNumber":461,"author":{"gitId":"stein414"},"content":"### UC-013 Find issues"},{"lineNumber":462,"author":{"gitId":"stein414"},"content":""},{"lineNumber":463,"author":{"gitId":"stein414"},"content":"Similar to *UC-003 Find residents*, just replace residents with issues."},{"lineNumber":464,"author":{"gitId":"stein414"},"content":""},{"lineNumber":465,"author":{"gitId":"stein414"},"content":"### UC-014 Edit an issue record"},{"lineNumber":466,"author":{"gitId":"stein414"},"content":""},{"lineNumber":467,"author":{"gitId":"stein414"},"content":"**MSS**"},{"lineNumber":468,"author":{"gitId":"stein414"},"content":""},{"lineNumber":469,"author":{"gitId":"stein414"},"content":"1. User requests to list issues."},{"lineNumber":470,"author":{"gitId":"stein414"},"content":"2. SunRez shows a list of issues."},{"lineNumber":471,"author":{"gitId":"stein414"},"content":"3. User requests to edit a specific issue based on the index from the list displayed in step 2."},{"lineNumber":472,"author":{"gitId":"stein414"},"content":"4. SunRez edits the issue and saves the changes."},{"lineNumber":473,"author":{"gitId":"stein414"},"content":""},{"lineNumber":474,"author":{"gitId":"stein414"},"content":"Use case ends."},{"lineNumber":475,"author":{"gitId":"stein414"},"content":""},{"lineNumber":476,"author":{"gitId":"stein414"},"content":"**Extensions**"},{"lineNumber":477,"author":{"gitId":"stein414"},"content":""},{"lineNumber":478,"author":{"gitId":"stein414"},"content":"* 2a. The list of issue is empty."},{"lineNumber":479,"author":{"gitId":"benedictkhoomw"},"content":"    "},{"lineNumber":480,"author":{"gitId":"stein414"},"content":"    Use case ends."},{"lineNumber":481,"author":{"gitId":"stein414"},"content":"* 3a. The issue\u0027s details are invalid (e.g invalid room number)."},{"lineNumber":482,"author":{"gitId":"stein414"},"content":"    * 3a1. SunRez shows an error message stating which field is incorrectly formatted and requests the user to try again."},{"lineNumber":483,"author":{"gitId":"benedictkhoomw"},"content":"    "},{"lineNumber":484,"author":{"gitId":"stein414"},"content":"        Use case resumes at step 2."},{"lineNumber":485,"author":{"gitId":"stein414"},"content":""},{"lineNumber":486,"author":{"gitId":"stein414"},"content":""},{"lineNumber":487,"author":{"gitId":"stein414"},"content":"### UC-015 Close an issue"},{"lineNumber":488,"author":{"gitId":"stein414"},"content":""},{"lineNumber":489,"author":{"gitId":"stein414"},"content":"**MSS**"},{"lineNumber":490,"author":{"gitId":"stein414"},"content":""},{"lineNumber":491,"author":{"gitId":"stein414"},"content":"1. User requests to list issues."},{"lineNumber":492,"author":{"gitId":"stein414"},"content":"2. SunRez shows a list of issues."},{"lineNumber":493,"author":{"gitId":"stein414"},"content":"3. User requests to mark a specific issue as closed based on the index from the list displayed in step 2."},{"lineNumber":494,"author":{"gitId":"stein414"},"content":"4. SunRez marks the issue as closed and saves the changes."},{"lineNumber":495,"author":{"gitId":"stein414"},"content":""},{"lineNumber":496,"author":{"gitId":"stein414"},"content":"Use case ends."},{"lineNumber":497,"author":{"gitId":"-"},"content":""},{"lineNumber":498,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":499,"author":{"gitId":"-"},"content":""},{"lineNumber":500,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":501,"author":{"gitId":"-"},"content":""},{"lineNumber":502,"author":{"gitId":"stein414"},"content":"    Use case ends."},{"lineNumber":503,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":504,"author":{"gitId":"stein414"},"content":"    * 3a1. SunRez shows an error message."},{"lineNumber":505,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":506,"author":{"gitId":"stein414"},"content":"        Use case resumes at step 2."},{"lineNumber":507,"author":{"gitId":"stein414"},"content":""},{"lineNumber":508,"author":{"gitId":"stein414"},"content":"### UC-016 Delete an issue"},{"lineNumber":509,"author":{"gitId":"stein414"},"content":""},{"lineNumber":510,"author":{"gitId":"stein414"},"content":"Similar to *UC-005 Delete a resident*, just replace resident with issue."},{"lineNumber":511,"author":{"gitId":"stein414"},"content":""},{"lineNumber":512,"author":{"gitId":"stein414"},"content":"### UC-017 Undo Previous Command"},{"lineNumber":513,"author":{"gitId":"-"},"content":""},{"lineNumber":514,"author":{"gitId":"stein414"},"content":"**MSS**"},{"lineNumber":515,"author":{"gitId":"stein414"},"content":""},{"lineNumber":516,"author":{"gitId":"stein414"},"content":"1.  User requests to undo previous command."},{"lineNumber":517,"author":{"gitId":"stein414"},"content":"2.  Previous command is undone and SunRez\u0027s state is reverted to before that command."},{"lineNumber":518,"author":{"gitId":"-"},"content":""},{"lineNumber":519,"author":{"gitId":"stein414"},"content":"Use case ends."},{"lineNumber":520,"author":{"gitId":"stein414"},"content":""},{"lineNumber":521,"author":{"gitId":"stein414"},"content":"**Extensions**"},{"lineNumber":522,"author":{"gitId":"stein414"},"content":""},{"lineNumber":523,"author":{"gitId":"stein414"},"content":"* 1a. There are no previous commands that change state."},{"lineNumber":524,"author":{"gitId":"stein414"},"content":"    * 1a1 SunRez shows an error message."},{"lineNumber":525,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":526,"author":{"gitId":"stein414"},"content":"        Use case ends."},{"lineNumber":527,"author":{"gitId":"stein414"},"content":""},{"lineNumber":528,"author":{"gitId":"stein414"},"content":"### UC-018 Redo Previous Command"},{"lineNumber":529,"author":{"gitId":"stein414"},"content":""},{"lineNumber":530,"author":{"gitId":"stein414"},"content":"**MSS**"},{"lineNumber":531,"author":{"gitId":"stein414"},"content":""},{"lineNumber":532,"author":{"gitId":"stein414"},"content":"1.  User requests to redo previously undone command."},{"lineNumber":533,"author":{"gitId":"stein414"},"content":"2.  Previous undone command is redone and SunRez\u0027s state is updated accordingly."},{"lineNumber":534,"author":{"gitId":"stein414"},"content":""},{"lineNumber":535,"author":{"gitId":"stein414"},"content":"Use case ends."},{"lineNumber":536,"author":{"gitId":"stein414"},"content":""},{"lineNumber":537,"author":{"gitId":"stein414"},"content":"**Extensions**"},{"lineNumber":538,"author":{"gitId":"stein414"},"content":""},{"lineNumber":539,"author":{"gitId":"stein414"},"content":"* 1a. There are no previously undone commands."},{"lineNumber":540,"author":{"gitId":"stein414"},"content":"    * 1a1 SunRez shows an error message."},{"lineNumber":541,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":542,"author":{"gitId":"stein414"},"content":"        Use case ends."},{"lineNumber":543,"author":{"gitId":"stein414"},"content":""},{"lineNumber":544,"author":{"gitId":"stein414"},"content":"### UC-019 Allocate a Room"},{"lineNumber":545,"author":{"gitId":"stein414"},"content":""},{"lineNumber":546,"author":{"gitId":"stein414"},"content":"**MSS**"},{"lineNumber":547,"author":{"gitId":"stein414"},"content":""},{"lineNumber":548,"author":{"gitId":"stein414"},"content":"1. User requests to list unassigned residents and unallocated rooms."},{"lineNumber":549,"author":{"gitId":"stein414"},"content":"2. SunRez displays unassigned residents and unallocated rooms side-by-side."},{"lineNumber":550,"author":{"gitId":"stein414"},"content":"3. User requests to allocate a room to a resident."},{"lineNumber":551,"author":{"gitId":"stein414"},"content":"4. SunRez allocates the room and saves the changes."},{"lineNumber":552,"author":{"gitId":"stein414"},"content":""},{"lineNumber":553,"author":{"gitId":"stein414"},"content":"**Extensions**"},{"lineNumber":554,"author":{"gitId":"-"},"content":""},{"lineNumber":555,"author":{"gitId":"stein414"},"content":"* 2a. There are no unassigned residents or unassigned."},{"lineNumber":556,"author":{"gitId":"benedictkhoomw"},"content":"    "},{"lineNumber":557,"author":{"gitId":"stein414"},"content":"    Use case ends."},{"lineNumber":558,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":559,"author":{"gitId":"stein414"},"content":"    * 3a1. SunRez shows an error message."},{"lineNumber":560,"author":{"gitId":"-"},"content":""},{"lineNumber":561,"author":{"gitId":"-"},"content":"        Use case resumes at step 2."},{"lineNumber":562,"author":{"gitId":"-"},"content":""},{"lineNumber":563,"author":{"gitId":"-"},"content":""},{"lineNumber":564,"author":{"gitId":"stein414"},"content":"### UC-020 Deallocate a Room"},{"lineNumber":565,"author":{"gitId":"stein414"},"content":""},{"lineNumber":566,"author":{"gitId":"stein414"},"content":"**MSS**"},{"lineNumber":567,"author":{"gitId":"stein414"},"content":""},{"lineNumber":568,"author":{"gitId":"stein414"},"content":"1. User requests to list room allocations."},{"lineNumber":569,"author":{"gitId":"stein414"},"content":"2. SunRez displays rooms, each with its corresponding allocated resident."},{"lineNumber":570,"author":{"gitId":"stein414"},"content":"3. User requests to deallocate a room based on the index from the list displayed in step 2."},{"lineNumber":571,"author":{"gitId":"stein414"},"content":"4. SunRez deallocates the room and saves the changes."},{"lineNumber":572,"author":{"gitId":"-"},"content":""},{"lineNumber":573,"author":{"gitId":"stein414"},"content":"**Extensions**"},{"lineNumber":574,"author":{"gitId":"stein414"},"content":""},{"lineNumber":575,"author":{"gitId":"stein414"},"content":"* 2a. There are no unassigned residents or unassigned."},{"lineNumber":576,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":577,"author":{"gitId":"stein414"},"content":"    Use case ends."},{"lineNumber":578,"author":{"gitId":"stein414"},"content":"* 3a. The given index is invalid."},{"lineNumber":579,"author":{"gitId":"stein414"},"content":"    * 3a1. SunRez shows an error message."},{"lineNumber":580,"author":{"gitId":"-"},"content":""},{"lineNumber":581,"author":{"gitId":"stein414"},"content":"        Use case resumes at step 2."},{"lineNumber":582,"author":{"gitId":"stein414"},"content":""},{"lineNumber":583,"author":{"gitId":"stein414"},"content":""},{"lineNumber":584,"author":{"gitId":"benedictkhoomw"},"content":"### UC-021 Access Command History"},{"lineNumber":585,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":586,"author":{"gitId":"benedictkhoomw"},"content":"**MSS**"},{"lineNumber":587,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":588,"author":{"gitId":"benedictkhoomw"},"content":"1. User requests to view command history."},{"lineNumber":589,"author":{"gitId":"benedictkhoomw"},"content":"2. SunRez displays command history, in reverse order of entry."},{"lineNumber":590,"author":{"gitId":"benedictkhoomw"},"content":"3. User selects a previously entered command."},{"lineNumber":591,"author":{"gitId":"benedictkhoomw"},"content":"4. SunRez fills the command field with the selected command."},{"lineNumber":592,"author":{"gitId":"benedictkhoomw"},"content":"5. User modifies and/or executes the command."},{"lineNumber":593,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":594,"author":{"gitId":"benedictkhoomw"},"content":"Use case ends."},{"lineNumber":595,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":596,"author":{"gitId":"benedictkhoomw"},"content":"**Extensions**"},{"lineNumber":597,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":598,"author":{"gitId":"benedictkhoomw"},"content":"* 1a. There is no command history."},{"lineNumber":599,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":600,"author":{"gitId":"benedictkhoomw"},"content":"    Use case ends."},{"lineNumber":601,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":602,"author":{"gitId":"cnlinh"},"content":"### UC-022 Add an alias"},{"lineNumber":603,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":604,"author":{"gitId":"cnlinh"},"content":"**MSS**"},{"lineNumber":605,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":606,"author":{"gitId":"cnlinh"},"content":"1. User wants to assign an alias name for a command."},{"lineNumber":607,"author":{"gitId":"cnlinh"},"content":"2. SunRez validates the alias name and command."},{"lineNumber":608,"author":{"gitId":"cnlinh"},"content":"3. SunRez saves the alias mapping to the user’s preferences."},{"lineNumber":609,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":610,"author":{"gitId":"cnlinh"},"content":"Use case ends."},{"lineNumber":611,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":612,"author":{"gitId":"cnlinh"},"content":"**Extensions**"},{"lineNumber":613,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":614,"author":{"gitId":"cnlinh"},"content":"* 1a. Alias name is invalid."},{"lineNumber":615,"author":{"gitId":"cnlinh"},"content":"    * 1a1. SunRez shows an error message. "},{"lineNumber":616,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":617,"author":{"gitId":"cnlinh"},"content":"        Use case ends."},{"lineNumber":618,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":619,"author":{"gitId":"cnlinh"},"content":"* 2a. An alias with the same name exists."},{"lineNumber":620,"author":{"gitId":"cnlinh"},"content":"    * 2a1. SunRez overwrites the existing alias. "},{"lineNumber":621,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":622,"author":{"gitId":"cnlinh"},"content":"        Use case resumes from step 3."},{"lineNumber":623,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":624,"author":{"gitId":"stein414"},"content":"## Non-Functional Requirements"},{"lineNumber":625,"author":{"gitId":"-"},"content":""},{"lineNumber":626,"author":{"gitId":"-"},"content":"1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":627,"author":{"gitId":"stein414"},"content":"2. Should be able to hold up to 1000 records (residents, rooms and issues) without a noticeable sluggishness in performance for typical usage."},{"lineNumber":628,"author":{"gitId":"-"},"content":"3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":629,"author":{"gitId":"stein414"},"content":"4. A user should be able to learn the basic commands within half an hour of initial usage."},{"lineNumber":630,"author":{"gitId":"stein414"},"content":"5. Should work without the internet."},{"lineNumber":631,"author":{"gitId":"stein414"},"content":"6. Should be a highly portable to enable transfer between different computers with different OS."},{"lineNumber":632,"author":{"gitId":"stein414"},"content":"7. Executable program should occupy less than 20MB on the computer."},{"lineNumber":633,"author":{"gitId":"stein414"},"content":"8. Should not require an installer."},{"lineNumber":634,"author":{"gitId":"stein414"},"content":"9. The data should not be stored in a Database Management System (DBMS)."},{"lineNumber":635,"author":{"gitId":"stein414"},"content":"10. Should not depend on any remote server."},{"lineNumber":636,"author":{"gitId":"-"},"content":""},{"lineNumber":637,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":638,"author":{"gitId":"-"},"content":""},{"lineNumber":639,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":640,"author":{"gitId":"-"},"content":""},{"lineNumber":641,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":642,"author":{"gitId":"stein414"},"content":"* **Residential College (RC)**: A university residence for students that offers a 2-year program at NUS"},{"lineNumber":643,"author":{"gitId":"stein414"},"content":"* **NUS**: The National University of Singapore"},{"lineNumber":644,"author":{"gitId":"stein414"},"content":"* **Resident**: A university student staying in the Residential College"},{"lineNumber":645,"author":{"gitId":"stein414"},"content":"* **Issue**: A maintenance problem that concerns the condition of a room"},{"lineNumber":646,"author":{"gitId":"-"},"content":""},{"lineNumber":647,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":648,"author":{"gitId":"-"},"content":""},{"lineNumber":649,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":650,"author":{"gitId":"-"},"content":""},{"lineNumber":651,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":652,"author":{"gitId":"-"},"content":""},{"lineNumber":653,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":654,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":655,"author":{"gitId":"-"},"content":""},{"lineNumber":656,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":657,"author":{"gitId":"-"},"content":""},{"lineNumber":658,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":659,"author":{"gitId":"-"},"content":""},{"lineNumber":660,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":661,"author":{"gitId":"-"},"content":""},{"lineNumber":662,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":663,"author":{"gitId":"-"},"content":""},{"lineNumber":664,"author":{"gitId":"stein414"},"content":"   2. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":665,"author":{"gitId":"-"},"content":""},{"lineNumber":666,"author":{"gitId":"stein414"},"content":"2. Saving window preferences"},{"lineNumber":667,"author":{"gitId":"-"},"content":""},{"lineNumber":668,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":669,"author":{"gitId":"-"},"content":""},{"lineNumber":670,"author":{"gitId":"stein414"},"content":"   2. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":671,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":672,"author":{"gitId":"-"},"content":""},{"lineNumber":673,"author":{"gitId":"stein414"},"content":"3. _{ more test cases … }_"},{"lineNumber":674,"author":{"gitId":"-"},"content":""},{"lineNumber":675,"author":{"gitId":"-"},"content":""},{"lineNumber":676,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":677,"author":{"gitId":"-"},"content":""},{"lineNumber":678,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":679,"author":{"gitId":"-"},"content":""},{"lineNumber":680,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":681,"author":{"gitId":"-"},"content":""},{"lineNumber":682,"author":{"gitId":"stein414"},"content":"2. _{ more test cases … }_"}],"authorContributionMap":{"benedictkhoomw":46,"cnlinh":21,"stein414":288,"-":327}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"## Introduction"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"**SunRez** is a desktop app designed for college residential staff to efficiently manage student housing services. It is optimized for use via a Command Line Interface (CLI)."},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"**SunRez** has the following features:"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of maintenance issues"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of student records"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of room records"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"2. Download the latest `sunrez.jar` from [here](https://github.com/AY2021S2-CS2103-T14-1/tp/releases)."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your SunRez."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"4. Double-click the file to start the app. A GUI like the one pictured below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"5. Type a command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"    * **`rlist`** : Lists all residents."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    * **`radd`**`n/Joseph Tan p/84666774 e/e0103994@u.nus.edu y/2 r/01-234` : Adds a resident named `Joseph Tan` with phone number `84666774`, email `e0103994@u.nus.edu`, a 2nd year student, allocated to room `01-234`."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"    * **`rdel`**`3` : Deletes the 3rd resident shown in the current resident list."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    * **`exit`** : Exits the app."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"6. Refer to the [Features](#features) below for details of each command."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"  e.g. `d/DESCRIPTION [t/TIMESTAMP]` can be used as `d/Broken chair t/2020/3/23 11:59pm` or as `d/Broken chair`."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"* If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"  e.g. if you specify `n/John Doe n/Jane Doe`, only `n/Jane Doe` will be taken."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"### Show help : `help`"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"Shows a message explaining how to access the help page."},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"### Add a resident : `radd`"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"Adds a resident to the housing management system."},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"Format: `radd n/NAME p/PHONE_NUMBER e/EMAIL y/YEAR [r/ROOM]`"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"* `radd n/Joseph Tan p/84666774 e/e0103994@u.nus.edu y/2 r/01-234` Adds a resident named `Joseph Tan` with phone number `84666774`, email `e0103994@u.nus.edu`, and as a 2nd year student, allocated to room `01-234`."},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"* `radd n/John Doe p/91234567 e/e0123456@u.nus.edu y/3` Adds a resident named `John Doe` with phone number `91234567`, email `e0123456@u.nus.edu`, and as a 3rd year student, without any room allocated."},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"### List all residents : `rlist`"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"Shows a list of all residents in the system sorted by alphabetical order."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"Format: `rlist`"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"### Find residents : `rfind`"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"Finds residents whose names contain any of the given keywords."},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"Format: `rfind KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"* The search is case-insensitive. e.g. `hans` will match `Hans`."},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`."},{"lineNumber":100,"author":{"gitId":"-"},"content":"* Only the name is searched."},{"lineNumber":101,"author":{"gitId":"benedictkhoomw"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`."},{"lineNumber":102,"author":{"gitId":"benedictkhoomw"},"content":"* Residents matching at least one keyword will be returned (i.e. OR search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`."},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"* `rfind john` returns `john` and `John Doe`."},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"* `rfind alex david` returns `Alex Yeoh`, `Alexander Graham`, and `David Li`."},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":108,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":109,"author":{"gitId":"colintkn"},"content":"### Edit a resident record : `redit`"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"benedictkhoomw"},"content":"Edits the existing resident record at a specified index."},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"colintkn"},"content":"Format: `redit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [r/ROOM]`"},{"lineNumber":114,"author":{"gitId":"benedictkhoomw"},"content":"* `INDEX` refers to the index number shown in the displayed resident list. `INDEX` **must be a positive integer: 1, 2, 3, …**."},{"lineNumber":115,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":116,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":117,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":118,"author":{"gitId":"colintkn"},"content":"Example:"},{"lineNumber":119,"author":{"gitId":"colintkn"},"content":"* `redit 1 p/91234567 e/e0123456@u.nus.edu` Edits the phone number and email address of the 1st resident to be `91234567` and `e0123456@u.nus.edu` respectively."},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"colintkn"},"content":"### Delete a resident : `rdel`"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"benedictkhoomw"},"content":"Deletes the resident record at a specified index."},{"lineNumber":125,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":126,"author":{"gitId":"colintkn"},"content":"Format: `rdel INDEX`"},{"lineNumber":127,"author":{"gitId":"benedictkhoomw"},"content":"* `INDEX` refers to the index number shown in the displayed resident list. `INDEX` **must be a positive integer 1,2,3, ...**."},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"colintkn"},"content":"Example:"},{"lineNumber":130,"author":{"gitId":"colintkn"},"content":"* `rdel 1` deletes the 1st resident in the resident list."},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"DrWala"},"content":"### Add a room : `oadd`"},{"lineNumber":134,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":135,"author":{"gitId":"DrWala"},"content":"Adds a room to the housing management system."},{"lineNumber":136,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":137,"author":{"gitId":"DrWala"},"content":"Format: `oadd r/ROOM_NO t/TYPE o/OCCUPATION_STATUS [g/TAG]`"},{"lineNumber":138,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":139,"author":{"gitId":"DrWala"},"content":"Example:"},{"lineNumber":140,"author":{"gitId":"DrWala"},"content":"* `oadd r/10-112 t/corridor_ac o/Y g/SHN` Adds a room numbered `10-112` of type `corridor_ac` with the tag `SHN` and occupation status `Y(es)`."},{"lineNumber":141,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":142,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":143,"author":{"gitId":"DrWala"},"content":"### List all rooms : `olist`"},{"lineNumber":144,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":145,"author":{"gitId":"DrWala"},"content":"Shows a list of all rooms in the system sorted by room number."},{"lineNumber":146,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":147,"author":{"gitId":"DrWala"},"content":"Format: `olist`"},{"lineNumber":148,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":149,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":150,"author":{"gitId":"DrWala"},"content":"### Find rooms : `ofind`"},{"lineNumber":151,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":152,"author":{"gitId":"benedictkhoomw"},"content":"Finds all rooms that contain any of the given keywords."},{"lineNumber":153,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":154,"author":{"gitId":"DrWala"},"content":"Format: `ofind KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":155,"author":{"gitId":"benedictkhoomw"},"content":"* The search matches any part of the room number. e.g. `10` will match `10-111` and `14-101`."},{"lineNumber":156,"author":{"gitId":"DrWala"},"content":"* The order of the keywords does not matter. e.g. `11- 10-` will match `10-100`, `10-101`, `11-100`, and `11-101`."},{"lineNumber":157,"author":{"gitId":"DrWala"},"content":"* Only the room number is searched."},{"lineNumber":158,"author":{"gitId":"benedictkhoomw"},"content":"* Rooms matching at least one keyword will be returned (i.e. OR search). e.g. `10 20` will return `10-100`, `11-120`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":161,"author":{"gitId":"DrWala"},"content":"* `ofind 10-` returns `10-100`, `10-101`, and `10-102`."},{"lineNumber":162,"author":{"gitId":"DrWala"},"content":"* `ofind 10- 15-` returns `10-100`, `10-101`, `15-100`, and`15-101`."},{"lineNumber":163,"author":{"gitId":"DrWala"},"content":"* `ofind 10` returns `09-100`, `09-110`, `10-100`, and `10-101`."},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"DrWala"},"content":"### Edit a room record : `oedit`"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"benedictkhoomw"},"content":"Edits the existing room record at a specified index."},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"DrWala"},"content":"Format: `oedit INDEX [r/ROOM_NO] [t/TYPE] [o/OCCUPATION_STATUS] [g/TAG]`"},{"lineNumber":171,"author":{"gitId":"benedictkhoomw"},"content":"* `INDEX` refers to the index number shown in the displayed room list. `INDEX` **must be a positive integer 1, 2, 3, …**."},{"lineNumber":172,"author":{"gitId":"DrWala"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":173,"author":{"gitId":"DrWala"},"content":"* Existing values will be updated to the input values."},{"lineNumber":174,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":175,"author":{"gitId":"DrWala"},"content":"Example:"},{"lineNumber":176,"author":{"gitId":"DrWala"},"content":"* `oedit 1 o/Y g/SHN` Edits the status of the 1st room and tag to be `Occupied` and `Y` respectively."},{"lineNumber":177,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":178,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":179,"author":{"gitId":"DrWala"},"content":"### Delete a room : `odel`"},{"lineNumber":180,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":181,"author":{"gitId":"benedictkhoomw"},"content":"Deletes the room at a specified index."},{"lineNumber":182,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":183,"author":{"gitId":"DrWala"},"content":"Format: `odel INDEX`"},{"lineNumber":184,"author":{"gitId":"benedictkhoomw"},"content":"* `INDEX` refers to the index number shown in the displayed resident list. `INDEX` **must be a positive integer 1,2,3, ...**."},{"lineNumber":185,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":186,"author":{"gitId":"benedictkhoomw"},"content":"Example:"},{"lineNumber":187,"author":{"gitId":"DrWala"},"content":"* `odel 1` Deletes the 1st room in the room list."},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"stein414"},"content":""},{"lineNumber":190,"author":{"gitId":"stein414"},"content":"### Add an open issue : `iadd`"},{"lineNumber":191,"author":{"gitId":"stein414"},"content":""},{"lineNumber":192,"author":{"gitId":"stein414"},"content":"Adds an issue to the housing management system."},{"lineNumber":193,"author":{"gitId":"stein414"},"content":""},{"lineNumber":194,"author":{"gitId":"stein414"},"content":"Format: `iadd r/ROOM_NO d/DESCRIPTION [t/TIMESTAMP] [s/STATUS] [c/CATEGORY]`"},{"lineNumber":195,"author":{"gitId":"stein414"},"content":""},{"lineNumber":196,"author":{"gitId":"stein414"},"content":"Example:"},{"lineNumber":197,"author":{"gitId":"stein414"},"content":"* `iadd r/10-100 d/Broken light c/Furniture` Creates an issue for room number `10-100` with description `Broken light` under the category `Furniture`."},{"lineNumber":198,"author":{"gitId":"stein414"},"content":""},{"lineNumber":199,"author":{"gitId":"stein414"},"content":""},{"lineNumber":200,"author":{"gitId":"stein414"},"content":"### List all issues : `ilist`"},{"lineNumber":201,"author":{"gitId":"stein414"},"content":""},{"lineNumber":202,"author":{"gitId":"benedictkhoomw"},"content":"Shows a list of all issues in the system sorted by their timestamp."},{"lineNumber":203,"author":{"gitId":"stein414"},"content":""},{"lineNumber":204,"author":{"gitId":"stein414"},"content":"Format: `ilist`"},{"lineNumber":205,"author":{"gitId":"stein414"},"content":""},{"lineNumber":206,"author":{"gitId":"stein414"},"content":""},{"lineNumber":207,"author":{"gitId":"stein414"},"content":"### Find issues : `ifind`"},{"lineNumber":208,"author":{"gitId":"stein414"},"content":""},{"lineNumber":209,"author":{"gitId":"benedictkhoomw"},"content":"Finds all issues that contain any of the given keywords."},{"lineNumber":210,"author":{"gitId":"stein414"},"content":""},{"lineNumber":211,"author":{"gitId":"stein414"},"content":"Format: `ifind KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":212,"author":{"gitId":"benedictkhoomw"},"content":"* The search is case-insensitive. e.g. `broken` will match `Broken`."},{"lineNumber":213,"author":{"gitId":"benedictkhoomw"},"content":"* The order of the keywords does not matter. e.g. `Broken light` will match `light broken`."},{"lineNumber":214,"author":{"gitId":"stein414"},"content":"* Only the description is searched."},{"lineNumber":215,"author":{"gitId":"stein414"},"content":"* Issues matching at least one keyword will be returned (i.e. OR search). e.g. `Broken window` will return `Broken light`, `Dirty window`, and `Broken window`."},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":218,"author":{"gitId":"stein414"},"content":"* `ifind chair` returns `Broken chair` and `Chair missing wheel`."},{"lineNumber":219,"author":{"gitId":"stein414"},"content":"* `ifind wardrobe table` returns `Wardrobe door broke`, `Table unstable`, and `Table stuck in wardrobe`."},{"lineNumber":220,"author":{"gitId":"stein414"},"content":""},{"lineNumber":221,"author":{"gitId":"stein414"},"content":"### Edit an issue record : `iedit`"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"benedictkhoomw"},"content":"Edits the existing issue record at a specified index."},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"stein414"},"content":"Format: `iedit INDEX [r/ROOM] [d/DESCRIPTION] [t/TIMESTAMP] [s/STATUS] [c/CATEGORY]`"},{"lineNumber":226,"author":{"gitId":"benedictkhoomw"},"content":"* `INDEX` refers to the index number shown in the displayed issue list. `INDEX` **must be a positive integer 1, 2, 3, …**."},{"lineNumber":227,"author":{"gitId":"stein414"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":228,"author":{"gitId":"stein414"},"content":"* Existing values will be updated to the input values."},{"lineNumber":229,"author":{"gitId":"stein414"},"content":""},{"lineNumber":230,"author":{"gitId":"stein414"},"content":"Example:"},{"lineNumber":231,"author":{"gitId":"stein414"},"content":"* `iedit 1 r/20-109 s/Closed` Edits the room number and status of the 1st issue to be `20-109` and `Closed` respectively."},{"lineNumber":232,"author":{"gitId":"stein414"},"content":""},{"lineNumber":233,"author":{"gitId":"stein414"},"content":""},{"lineNumber":234,"author":{"gitId":"stein414"},"content":"### Close an issue : `iclose`"},{"lineNumber":235,"author":{"gitId":"stein414"},"content":""},{"lineNumber":236,"author":{"gitId":"benedictkhoomw"},"content":"Marks as closed the issue at a specified index."},{"lineNumber":237,"author":{"gitId":"stein414"},"content":""},{"lineNumber":238,"author":{"gitId":"stein414"},"content":"Format: `iclose INDEX`"},{"lineNumber":239,"author":{"gitId":"benedictkhoomw"},"content":"* `INDEX` refers to the index number shown in the displayed issue list. `INDEX` **must be a positive integer 1, 2, 3, …**."},{"lineNumber":240,"author":{"gitId":"stein414"},"content":""},{"lineNumber":241,"author":{"gitId":"stein414"},"content":"Example:"},{"lineNumber":242,"author":{"gitId":"stein414"},"content":"* `iclose 1` Closes the 1st issue."},{"lineNumber":243,"author":{"gitId":"stein414"},"content":""},{"lineNumber":244,"author":{"gitId":"stein414"},"content":""},{"lineNumber":245,"author":{"gitId":"stein414"},"content":"### Delete an issue : `idel`"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"benedictkhoomw"},"content":"Deletes the issue at a specified index."},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"stein414"},"content":"Format: `idel INDEX`"},{"lineNumber":250,"author":{"gitId":"benedictkhoomw"},"content":"* `INDEX` refers to the index number shown in the displayed resident list. `INDEX` **must be a positive integer 1,2,3, ...**."},{"lineNumber":251,"author":{"gitId":"stein414"},"content":""},{"lineNumber":252,"author":{"gitId":"stein414"},"content":"Example:"},{"lineNumber":253,"author":{"gitId":"stein414"},"content":"* `idel 1` Deletes the 1st issue."},{"lineNumber":254,"author":{"gitId":"stein414"},"content":""},{"lineNumber":255,"author":{"gitId":"benedictkhoomw"},"content":"### View Command History : `history`"},{"lineNumber":256,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":257,"author":{"gitId":"benedictkhoomw"},"content":"Displays the user\u0027s valid command history, sorted from most to least recent."},{"lineNumber":258,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":259,"author":{"gitId":"benedictkhoomw"},"content":"Format: `history [COUNT]`"},{"lineNumber":260,"author":{"gitId":"benedictkhoomw"},"content":"* `COUNT` refers to the number of most recent command entries to display. `COUNT` **must be a positive integer 1,2,3, ...**."},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":263,"author":{"gitId":"benedictkhoomw"},"content":"* `history` Displays all command entries."},{"lineNumber":264,"author":{"gitId":"benedictkhoomw"},"content":"* `history 5` Displays the 5 most recent command entries."},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"cnlinh"},"content":"### Add alias : `alias`"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"cnlinh"},"content":"Adds a user-defined alias, which represents a shortcut to a longer command."},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"cnlinh"},"content":"Format: `alias a/ALIAS_NAME cmd/COMMAND`"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"cnlinh"},"content":"Examples:"},{"lineNumber":273,"author":{"gitId":"cnlinh"},"content":"* `alias a/ol cmd/olist` Adds `ol` alias which is a shortcut for `olist` command."},{"lineNumber":274,"author":{"gitId":"cnlinh"},"content":"* `alias a/fNemo cmd/rfind Nemo` Adds `fNemo` alias which is a shortcut for `rfind Nemo` command."},{"lineNumber":275,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":276,"author":{"gitId":"benedictkhoomw"},"content":"### Exit the program : `exit`"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"benedictkhoomw"},"content":"### Access Command History"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"benedictkhoomw"},"content":"Previous successful commands can be accessed via the UP and DOWN arrow keys on the keyboard. UP selects the previous command. DOWN selects the next command."},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"benedictkhoomw"},"content":"Example usage:"},{"lineNumber":287,"author":{"gitId":"benedictkhoomw"},"content":"1. Enter some commands as per normal."},{"lineNumber":288,"author":{"gitId":"benedictkhoomw"},"content":"1. Make sure the command box is in focus (e.g. click on it)."},{"lineNumber":289,"author":{"gitId":"benedictkhoomw"},"content":"1. Press the UP arrow key on your keyboard."},{"lineNumber":290,"author":{"gitId":"benedictkhoomw"},"content":"1. SunRez should display the most recent successful command in the command box."},{"lineNumber":291,"author":{"gitId":"benedictkhoomw"},"content":"    * Hit ENTER to run that command again."},{"lineNumber":292,"author":{"gitId":"benedictkhoomw"},"content":"    * Alternatively, select other commands via the UP and DOWN arrow keys."},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"benedictkhoomw"},"content":"### Save the data"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"benedictkhoomw"},"content":"SunRez data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"benedictkhoomw"},"content":"### Edit the data file"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"benedictkhoomw"},"content":"SunRez data is saved as a JSON file `[JAR file location]/data/sunrez.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"benedictkhoomw"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"},{"lineNumber":303,"author":{"gitId":"benedictkhoomw"},"content":"**Caution**: \u003cbr\u003e"},{"lineNumber":304,"author":{"gitId":"benedictkhoomw"},"content":"If your changes to the data file makes its format invalid, SunRez will discard all data and start with an empty data file at the next run."},{"lineNumber":305,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"benedictkhoomw"},"content":"**Q**: How do I transfer my data to another computer?\u003cbr\u003e"},{"lineNumber":312,"author":{"gitId":"benedictkhoomw"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous **SunRez** home folder."},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":319,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":320,"author":{"gitId":"colintkn"},"content":"**Show help** | `help`"},{"lineNumber":321,"author":{"gitId":"colintkn"},"content":"**Add a resident** | `radd n/NAME p/PHONE_NUMBER e/EMAIL y/YEAR` \u003cbr\u003e e.g. `radd n/Joseph Tan p/84666774 e/e0103994@u.nus.edu y/2 r/01-234`"},{"lineNumber":322,"author":{"gitId":"colintkn"},"content":"**List all residents** | `rlist`"},{"lineNumber":323,"author":{"gitId":"colintkn"},"content":"**Find residents** | `rfind KEYWORD [MORE_KEYWORDS]` \u003cbr\u003e e.g. `rfind bob bobby`"},{"lineNumber":324,"author":{"gitId":"colintkn"},"content":"**Edit a resident record** | `redit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [r/ROOM]` \u003cbr\u003e e.g. `redit 1 p/91234567 e/e0123456@u.nus.edu`"},{"lineNumber":325,"author":{"gitId":"colintkn"},"content":"**Delete a resident** |  `rdel INDEX` \u003cbr\u003e e.g. `rdel 1`"},{"lineNumber":326,"author":{"gitId":"DrWala"},"content":"**Add a room** |  `oadd r/ROOM_NO t/TYPE o/OCCUPATION_STATUS [g/TAG]` \u003cbr\u003e e.g. `oadd n/17-101 t/corridor_ac o/Y g/SHN`"},{"lineNumber":327,"author":{"gitId":"stein414"},"content":"**List all rooms** |  `olist`"},{"lineNumber":328,"author":{"gitId":"stein414"},"content":"**Find rooms** |  `ofind KEYWORD [MORE_KEYWORDS]` \u003cbr\u003e e.g. `ofind 10- 15-`"},{"lineNumber":329,"author":{"gitId":"DrWala"},"content":"**Edit a room record** |  `oedit INDEX [r/ROOM_NO] [t/TYPE] [g/TAG] [o/OCCUPATION_STATUS]` \u003cbr\u003e e.g. `oedit 1 o/Y`"},{"lineNumber":330,"author":{"gitId":"stein414"},"content":"**Delete a room** | `odel INDEX` \u003cbr\u003e e.g. `odel 1`"},{"lineNumber":331,"author":{"gitId":"stein414"},"content":"**Add an open issue** | `iadd r/ROOM_NO d/DESCRIPTION [t/TIMESTAMP] [s/STATUS] [c/CATEGORY]` \u003cbr\u003e e.g. `iadd r/10-100 d/Broken light c/Furniture`"},{"lineNumber":332,"author":{"gitId":"stein414"},"content":"**List all issues** | `ilist`"},{"lineNumber":333,"author":{"gitId":"stein414"},"content":"**Find issues** | `ifind KEYWORD [MORE_KEYWORDS]` \u003cbr\u003e e.g. `ifind wardrobe table`"},{"lineNumber":334,"author":{"gitId":"stein414"},"content":"**Edit an issue record** | `iedit INDEX [r/ROOM] [d/DESCRIPTION] [t/TIMESTAMP] [s/STATUS] [c/CATEGORY]` \u003cbr\u003e e.g. `iedit 1 r/20-109 s/Closed`"},{"lineNumber":335,"author":{"gitId":"stein414"},"content":"**Close an issue** | `iclose INDEX` \u003cbr\u003e e.g. `iclose 1`"},{"lineNumber":336,"author":{"gitId":"stein414"},"content":"**Delete an issue** | `idel INDEX` \u003cbr\u003e e.g. `idel 1`"},{"lineNumber":337,"author":{"gitId":"benedictkhoomw"},"content":"**View command history** | `history [COUNT]` \u003cbr\u003e e.g. `history 5`"},{"lineNumber":338,"author":{"gitId":"cnlinh"},"content":"**Add alias** | `alias a/ALIAS_NAME cmd/COMMAND` \u003cbr\u003e e.g. `alias a/il cmd/ilist`"},{"lineNumber":339,"author":{"gitId":"stein414"},"content":"**Exit the app** | `exit`"}],"authorContributionMap":{"benedictkhoomw":63,"cnlinh":16,"stein414":61,"colintkn":35,"-":121,"DrWala":43}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"title: SunRez"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103-T14-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103-T14-1/tp/actions)"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103-T14-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103-T14-1/tp)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"**SunRez** is a desktop app designed for college residential staff to efficiently manage student housing services. It is optimized for use via a Command Line Interface (CLI). "},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"**SunRez** has the following features:"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of maintenance issues"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of student records"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of room records"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"If this is your first time using/contributing to **SunRez**, check out our guides in the [Site Map](#site-map) section below."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"## Site Map"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"* [User Guide](UserGuide.md)"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"* [Developer Guide](DeveloperGuide.md)"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"* [About Us](AboutUs.md)"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"* [Github](https://github.com/AY2021S2-CS2103-T14-1/tp)"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"## Acknowledgements"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."},{"lineNumber":30,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"* Favicon designed by [FreeLogoDesign](https://www.freelogodesign.org/)."},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"## License: [MIT](https://github.com/AY2021S2-CS2103-T14-1/tp/blob/master/LICENSE)"}],"authorContributionMap":{"benedictkhoomw":21,"-":12}},{"path":"eclipse-formatter.xml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"no\"?\u003e"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"\u003cprofiles version\u003d\"13\"\u003e"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"\u003cprofile kind\u003d\"CodeFormatterProfile\" name\u003d\"Eclipse\" version\u003d\"13\"\u003e"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode\" value\u003d\"enabled\"/\u003e"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.codegen.targetPlatform\" value\u003d\"10\"/\u003e"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.compliance\" value\u003d\"10\"/\u003e"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.problem.assertIdentifier\" value\u003d\"error\"/\u003e"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.problem.enumIdentifier\" value\u003d\"error\"/\u003e"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.source\" value\u003d\"10\"/\u003e"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.align_fields_grouping_blank_lines\" value\u003d\"2147483647\"/\u003e"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.align_type_members_on_columns\" value\u003d\"false\"/\u003e"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression\" value\u003d\"16\"/\u003e"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation\" value\u003d\"0\"/\u003e"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant\" value\u003d\"16\"/\u003e"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call\" value\u003d\"16\"/\u003e"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation\" value\u003d\"16\"/\u003e"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression\" value\u003d\"16\"/\u003e"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_assignment\" value\u003d\"0\"/\u003e"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_binary_expression\" value\u003d\"16\"/\u003e"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_compact_if\" value\u003d\"16\"/\u003e"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_conditional_expression\" value\u003d\"80\"/\u003e"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_enum_constants\" value\u003d\"0\"/\u003e"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer\" value\u003d\"16\"/\u003e"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_expressions_in_for_loop_header\" value\u003d\"0\"/\u003e"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_method_declaration\" value\u003d\"0\"/\u003e"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_module_statements\" value\u003d\"16\"/\u003e"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_multiple_fields\" value\u003d\"16\"/\u003e"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_parameterized_type_references\" value\u003d\"0\"/\u003e"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration\" value\u003d\"16\"/\u003e"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration\" value\u003d\"16\"/\u003e"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_resources_in_try\" value\u003d\"80\"/\u003e"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation\" value\u003d\"16\"/\u003e"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration\" value\u003d\"16\"/\u003e"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration\" value\u003d\"16\"/\u003e"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration\" value\u003d\"16\"/\u003e"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration\" value\u003d\"16\"/\u003e"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration\" value\u003d\"16\"/\u003e"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_type_arguments\" value\u003d\"0\"/\u003e"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_type_parameters\" value\u003d\"0\"/\u003e"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch\" value\u003d\"16\"/\u003e"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_after_imports\" value\u003d\"1\"/\u003e"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_after_package\" value\u003d\"1\"/\u003e"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_field\" value\u003d\"0\"/\u003e"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration\" value\u003d\"0\"/\u003e"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_imports\" value\u003d\"1\"/\u003e"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_member_type\" value\u003d\"1\"/\u003e"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_method\" value\u003d\"1\"/\u003e"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk\" value\u003d\"1\"/\u003e"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_package\" value\u003d\"0\"/\u003e"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_between_import_groups\" value\u003d\"1\"/\u003e"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations\" value\u003d\"1\"/\u003e"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration\" value\u003d\"end_of_line\"/\u003e"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration\" value\u003d\"end_of_line\"/\u003e"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_array_initializer\" value\u003d\"end_of_line\"/\u003e"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_block_in_case\" value\u003d\"end_of_line\"/\u003e"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_block\" value\u003d\"end_of_line\"/\u003e"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration\" value\u003d\"end_of_line\"/\u003e"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_enum_constant\" value\u003d\"end_of_line\"/\u003e"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration\" value\u003d\"end_of_line\"/\u003e"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_lambda_body\" value\u003d\"end_of_line\"/\u003e"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_method_declaration\" value\u003d\"end_of_line\"/\u003e"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_switch\" value\u003d\"end_of_line\"/\u003e"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_type_declaration\" value\u003d\"end_of_line\"/\u003e"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment\" value\u003d\"false\"/\u003e"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment\" value\u003d\"false\"/\u003e"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.count_line_length_from_starting_position\" value\u003d\"true\"/\u003e"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_block_comments\" value\u003d\"true\"/\u003e"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_header\" value\u003d\"false\"/\u003e"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_html\" value\u003d\"true\"/\u003e"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_javadoc_comments\" value\u003d\"true\"/\u003e"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_line_comments\" value\u003d\"true\"/\u003e"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_source_code\" value\u003d\"true\"/\u003e"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.indent_parameter_description\" value\u003d\"true\"/\u003e"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.indent_root_tags\" value\u003d\"true\"/\u003e"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags\" value\u003d\"insert\"/\u003e"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.line_length\" value\u003d\"120\"/\u003e"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries\" value\u003d\"true\"/\u003e"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries\" value\u003d\"true\"/\u003e"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments\" value\u003d\"false\"/\u003e"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.compact_else_if\" value\u003d\"true\"/\u003e"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer\" value\u003d\"1\"/\u003e"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.continuation_indentation\" value\u003d\"2\"/\u003e"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.disabling_tag\" value\u003d\"@formatter:off\"/\u003e"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.enabling_tag\" value\u003d\"@formatter:on\"/\u003e"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line\" value\u003d\"false\"/\u003e"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column\" value\u003d\"true\"/\u003e"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header\" value\u003d\"true\"/\u003e"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header\" value\u003d\"true\"/\u003e"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header\" value\u003d\"true\"/\u003e"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header\" value\u003d\"true\"/\u003e"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases\" value\u003d\"true\"/\u003e"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_empty_lines\" value\u003d\"false\"/\u003e"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_statements_compare_to_block\" value\u003d\"true\"/\u003e"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_statements_compare_to_body\" value\u003d\"true\"/\u003e"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases\" value\u003d\"true\"/\u003e"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch\" value\u003d\"false\"/\u003e"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indentation.size\" value\u003d\"4\"/\u003e"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_enum_constant\" value\u003d\"insert\"/\u003e"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field\" value\u003d\"insert\"/\u003e"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable\" value\u003d\"insert\"/\u003e"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method\" value\u003d\"insert\"/\u003e"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package\" value\u003d\"insert\"/\u003e"},{"lineNumber":104,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":105,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type\" value\u003d\"insert\"/\u003e"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_label\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_type_annotation\" value\u003d\"insert\"/\u003e"},{"lineNumber":109,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing\" value\u003d\"insert\"/\u003e"},{"lineNumber":110,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":111,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":112,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":113,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":114,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration\" value\u003d\"insert\"/\u003e"},{"lineNumber":116,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration\" value\u003d\"insert\"/\u003e"},{"lineNumber":117,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block\" value\u003d\"insert\"/\u003e"},{"lineNumber":118,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant\" value\u003d\"insert\"/\u003e"},{"lineNumber":119,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration\" value\u003d\"insert\"/\u003e"},{"lineNumber":120,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body\" value\u003d\"insert\"/\u003e"},{"lineNumber":121,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration\" value\u003d\"insert\"/\u003e"},{"lineNumber":122,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter\" value\u003d\"insert\"/\u003e"},{"lineNumber":123,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator\" value\u003d\"insert\"/\u003e"},{"lineNumber":124,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":125,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":126,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_binary_operator\" value\u003d\"insert\"/\u003e"},{"lineNumber":127,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":128,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters\" value\u003d\"insert\"/\u003e"},{"lineNumber":129,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block\" value\u003d\"insert\"/\u003e"},{"lineNumber":130,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast\" value\u003d\"insert\"/\u003e"},{"lineNumber":131,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert\" value\u003d\"insert\"/\u003e"},{"lineNumber":132,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case\" value\u003d\"insert\"/\u003e"},{"lineNumber":133,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional\" value\u003d\"insert\"/\u003e"},{"lineNumber":134,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for\" value\u003d\"insert\"/\u003e"},{"lineNumber":135,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement\" value\u003d\"insert\"/\u003e"},{"lineNumber":136,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression\" value\u003d\"insert\"/\u003e"},{"lineNumber":137,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation\" value\u003d\"insert\"/\u003e"},{"lineNumber":138,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer\" value\u003d\"insert\"/\u003e"},{"lineNumber":139,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters\" value\u003d\"insert\"/\u003e"},{"lineNumber":140,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws\" value\u003d\"insert\"/\u003e"},{"lineNumber":141,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments\" value\u003d\"insert\"/\u003e"},{"lineNumber":142,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations\" value\u003d\"insert\"/\u003e"},{"lineNumber":143,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments\" value\u003d\"insert\"/\u003e"},{"lineNumber":144,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments\" value\u003d\"insert\"/\u003e"},{"lineNumber":145,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits\" value\u003d\"insert\"/\u003e"},{"lineNumber":146,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters\" value\u003d\"insert\"/\u003e"},{"lineNumber":147,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws\" value\u003d\"insert\"/\u003e"},{"lineNumber":148,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments\" value\u003d\"insert\"/\u003e"},{"lineNumber":149,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations\" value\u003d\"insert\"/\u003e"},{"lineNumber":150,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations\" value\u003d\"insert\"/\u003e"},{"lineNumber":151,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference\" value\u003d\"insert\"/\u003e"},{"lineNumber":152,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces\" value\u003d\"insert\"/\u003e"},{"lineNumber":153,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments\" value\u003d\"insert\"/\u003e"},{"lineNumber":154,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters\" value\u003d\"insert\"/\u003e"},{"lineNumber":155,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_ellipsis\" value\u003d\"insert\"/\u003e"},{"lineNumber":156,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_lambda_arrow\" value\u003d\"insert\"/\u003e"},{"lineNumber":157,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":158,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":159,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":160,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer\" value\u003d\"insert\"/\u003e"},{"lineNumber":161,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":162,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":163,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":164,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":165,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":166,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":167,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":168,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":169,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":170,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":171,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":172,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":173,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":174,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":175,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":176,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":177,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":178,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":179,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional\" value\u003d\"insert\"/\u003e"},{"lineNumber":180,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":181,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for\" value\u003d\"insert\"/\u003e"},{"lineNumber":182,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources\" value\u003d\"insert\"/\u003e"},{"lineNumber":183,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_unary_operator\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":184,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter\" value\u003d\"insert\"/\u003e"},{"lineNumber":185,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator\" value\u003d\"insert\"/\u003e"},{"lineNumber":186,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration\" value\u003d\"insert\"/\u003e"},{"lineNumber":187,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_binary_operator\" value\u003d\"insert\"/\u003e"},{"lineNumber":188,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":189,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":190,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":191,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer\" value\u003d\"insert\"/\u003e"},{"lineNumber":192,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":193,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":194,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":195,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":196,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":197,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":198,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":199,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":200,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":201,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":202,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":203,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":204,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":205,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":206,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":207,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":208,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert\" value\u003d\"insert\"/\u003e"},{"lineNumber":209,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":210,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional\" value\u003d\"insert\"/\u003e"},{"lineNumber":211,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":212,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for\" value\u003d\"insert\"/\u003e"},{"lineNumber":213,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":214,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":215,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":216,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":217,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":218,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":219,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":220,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":221,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":222,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":223,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":224,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":225,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":226,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":227,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":228,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":229,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":230,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":231,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":232,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":233,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_ellipsis\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":234,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_lambda_arrow\" value\u003d\"insert\"/\u003e"},{"lineNumber":235,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":236,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":237,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":238,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration\" value\u003d\"insert\"/\u003e"},{"lineNumber":239,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration\" value\u003d\"insert\"/\u003e"},{"lineNumber":240,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer\" value\u003d\"insert\"/\u003e"},{"lineNumber":241,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block\" value\u003d\"insert\"/\u003e"},{"lineNumber":242,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration\" value\u003d\"insert\"/\u003e"},{"lineNumber":243,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant\" value\u003d\"insert\"/\u003e"},{"lineNumber":244,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration\" value\u003d\"insert\"/\u003e"},{"lineNumber":245,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration\" value\u003d\"insert\"/\u003e"},{"lineNumber":246,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch\" value\u003d\"insert\"/\u003e"},{"lineNumber":247,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration\" value\u003d\"insert\"/\u003e"},{"lineNumber":248,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":249,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":250,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":251,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":252,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":253,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch\" value\u003d\"insert\"/\u003e"},{"lineNumber":254,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":255,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":256,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for\" value\u003d\"insert\"/\u003e"},{"lineNumber":257,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if\" value\u003d\"insert\"/\u003e"},{"lineNumber":258,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":259,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":260,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":261,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch\" value\u003d\"insert\"/\u003e"},{"lineNumber":262,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized\" value\u003d\"insert\"/\u003e"},{"lineNumber":263,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try\" value\u003d\"insert\"/\u003e"},{"lineNumber":264,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while\" value\u003d\"insert\"/\u003e"},{"lineNumber":265,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return\" value\u003d\"insert\"/\u003e"},{"lineNumber":266,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw\" value\u003d\"insert\"/\u003e"},{"lineNumber":267,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":268,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":269,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional\" value\u003d\"insert\"/\u003e"},{"lineNumber":270,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":271,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":272,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":273,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_semicolon\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":274,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_unary_operator\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":275,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":276,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":277,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":278,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":279,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":280,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":281,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":282,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation\" value\u003d\"do not insert\"/\u003e"},{"lineNumber":283,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.join_lines_in_comments\" value\u003d\"false\"/\u003e"},{"lineNumber":284,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.join_wrapped_lines\" value\u003d\"false\"/\u003e"},{"lineNumber":285,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line\" value\u003d\"false\"/\u003e"},{"lineNumber":286,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line\" value\u003d\"false\"/\u003e"},{"lineNumber":287,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line\" value\u003d\"false\"/\u003e"},{"lineNumber":288,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line\" value\u003d\"false\"/\u003e"},{"lineNumber":289,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.lineSplit\" value\u003d\"120\"/\u003e"},{"lineNumber":290,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column\" value\u003d\"false\"/\u003e"},{"lineNumber":291,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column\" value\u003d\"false\"/\u003e"},{"lineNumber":292,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body\" value\u003d\"0\"/\u003e"},{"lineNumber":293,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve\" value\u003d\"1\"/\u003e"},{"lineNumber":294,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_annotation\" value\u003d\"common_lines\"/\u003e"},{"lineNumber":295,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_catch_clause\" value\u003d\"common_lines\"/\u003e"},{"lineNumber":296,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_enum_constant_declaration\" value\u003d\"common_lines\"/\u003e"},{"lineNumber":297,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_for_statment\" value\u003d\"common_lines\"/\u003e"},{"lineNumber":298,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_if_while_statement\" value\u003d\"common_lines\"/\u003e"},{"lineNumber":299,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_lambda_declaration\" value\u003d\"common_lines\"/\u003e"},{"lineNumber":300,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_method_delcaration\" value\u003d\"common_lines\"/\u003e"},{"lineNumber":301,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_method_invocation\" value\u003d\"common_lines\"/\u003e"},{"lineNumber":302,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_switch_statement\" value\u003d\"common_lines\"/\u003e"},{"lineNumber":303,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_try_clause\" value\u003d\"common_lines\"/\u003e"},{"lineNumber":304,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line\" value\u003d\"true\"/\u003e"},{"lineNumber":305,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.tabulation.char\" value\u003d\"tab\"/\u003e"},{"lineNumber":306,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.tabulation.size\" value\u003d\"4\"/\u003e"},{"lineNumber":307,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.use_on_off_tags\" value\u003d\"false\"/\u003e"},{"lineNumber":308,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations\" value\u003d\"false\"/\u003e"},{"lineNumber":309,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_before_assignment_operator\" value\u003d\"false\"/\u003e"},{"lineNumber":310,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_before_binary_operator\" value\u003d\"true\"/\u003e"},{"lineNumber":311,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_before_conditional_operator\" value\u003d\"true\"/\u003e"},{"lineNumber":312,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch\" value\u003d\"true\"/\u003e"},{"lineNumber":313,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested\" value\u003d\"true\"/\u003e"},{"lineNumber":314,"author":{"gitId":"stein414"},"content":"\u003c/profile\u003e"},{"lineNumber":315,"author":{"gitId":"stein414"},"content":"\u003c/profiles\u003e"}],"authorContributionMap":{"stein414":315}},{"path":"setup/setup.sh","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"cp setup/pre-commit .git/hooks/pre-commit"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"chmod +x .git/hooks/pre-commit"}],"authorContributionMap":{"stein414":3}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import java.util.Locale;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":37,"author":{"gitId":"-"},"content":" */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"        Locale sgLocale \u003d new Locale(\"en\", \"SG\");"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"        Locale.setDefault(sgLocale);"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":127,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":155,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"stein414":4,"-":183}},{"path":"src/main/java/seedu/address/commons/core/Alias.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"//Solution below adapted from https://github.com/briyanii/main"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"package seedu.address.commons.core;"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import java.io.Serializable;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import java.util.regex.Pattern;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":" * Represents an user-defined alias for a command shortcut"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":" * Guarantees: fields are present and not null, field values are validated, immutable."},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":" */"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"public class Alias implements Serializable {"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Only alphanumeric characters are allowed in alias names\";"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    public static final String NAME_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    private final String aliasName;"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"    private final String command;"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"     * Creates an empty Alias object."},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"    public Alias() {"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"        this.aliasName \u003d null;"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"        this.command \u003d null;"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"     * Creates an Alias object."},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"    public Alias(String aliasName, String command) {"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"        requireAllNonNull(aliasName, command);"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"        checkArgument(isValidName(aliasName), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"        this.aliasName \u003d aliasName;"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"        this.command \u003d command;"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"     * Validates alias name."},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"    public static boolean isValidName(String aliasName) {"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"        return Pattern.matches(NAME_REGEX, aliasName);"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"    public String getAliasName() {"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"        return aliasName;"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"    public String getCommand() {"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"        return command;"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"    public int hashCode() {"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"        return Objects.hash(aliasName, command);"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"            return true;"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":"        if (!(obj instanceof Alias)) {"},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"            return false;"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"        Alias other \u003d (Alias) obj;"},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"        return aliasName.equals(other.aliasName)"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"                \u0026\u0026 command.equals(other.command);"},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"cnlinh"},"content":"    public String toString() {"},{"lineNumber":78,"author":{"gitId":"cnlinh"},"content":"        return \"Alias: \" + aliasName + \" Command: \" + command;"},{"lineNumber":79,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":80}},{"path":"src/main/java/seedu/address/commons/core/AliasMapping.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"//Solution below adapted from https://github.com/briyanii/main"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"package seedu.address.commons.core;"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import java.io.Serializable;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.ViewHistoryCommand;"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.alias.AliasCommand;"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.issue.AddIssueCommand;"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.issue.DeleteIssueCommand;"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.issue.EditIssueCommand;"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.issue.FindIssueCommand;"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.issue.ListIssueCommand;"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.resident.DeleteResidentCommand;"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.resident.FindResidentCommand;"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.resident.ListResidentCommand;"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.room.AddRoomCommand;"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.room.DeleteRoomCommand;"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.room.EditRoomCommand;"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.room.FindRoomCommand;"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.room.ListRoomCommand;"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":" * Represents the current user\u0027s {@code Alias} command mapping."},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":" * Guarantees: fields are present and not null, fields values are mutable"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":" */"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"public class AliasMapping implements Serializable {"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"    private Map\u003cString, Alias\u003e mapping;"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"    public AliasMapping() {"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"        this.mapping \u003d new HashMap\u003c\u003e();"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"    private AliasMapping(AliasMapping aliasMapping) {"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"        requireNonNull(aliasMapping);"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"        this.mapping \u003d new HashMap\u003c\u003e(aliasMapping.mapping);"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"     * Returns an Alias object from alias name."},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"    public Alias getAlias(String aliasName) {"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"        return mapping.get(aliasName);"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"     * Adds a new Alias object to the current mapping."},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"    public void addAlias(Alias alias) {"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"        mapping.put(alias.getAliasName(), alias);"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"     * Checks if the current mapping contains an Alias based on alias name."},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"    public boolean containsAlias(String aliasName) {"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"        return mapping.containsKey(aliasName);"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"     * Check if alias name is a reserved keyword."},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"    public boolean isReservedKeyword(String aliasName) {"},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"        switch (aliasName) {"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d System Commands \u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":"        case AliasCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitId":"cnlinh"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitId":"cnlinh"},"content":"        case ViewHistoryCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":80,"author":{"gitId":"cnlinh"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d Resident Commands \u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":81,"author":{"gitId":"cnlinh"},"content":"        case AddResidentCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitId":"cnlinh"},"content":"        case EditResidentCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitId":"cnlinh"},"content":"        case DeleteResidentCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitId":"cnlinh"},"content":"        case FindResidentCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitId":"cnlinh"},"content":"        case ListResidentCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":87,"author":{"gitId":"cnlinh"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d Room Commands \u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":88,"author":{"gitId":"cnlinh"},"content":"        case AddRoomCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitId":"cnlinh"},"content":"        case EditRoomCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitId":"cnlinh"},"content":"        case DeleteRoomCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitId":"cnlinh"},"content":"        case FindRoomCommand.COMMAND_WORD:"},{"lineNumber":92,"author":{"gitId":"cnlinh"},"content":"        case ListRoomCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":94,"author":{"gitId":"cnlinh"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d Issue Commands \u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":95,"author":{"gitId":"cnlinh"},"content":"        case AddIssueCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitId":"cnlinh"},"content":"        case ListIssueCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitId":"cnlinh"},"content":"        case FindIssueCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitId":"cnlinh"},"content":"        case EditIssueCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitId":"cnlinh"},"content":"        case DeleteIssueCommand.COMMAND_WORD:"},{"lineNumber":100,"author":{"gitId":"cnlinh"},"content":"            return true;"},{"lineNumber":101,"author":{"gitId":"cnlinh"},"content":"        default:"},{"lineNumber":102,"author":{"gitId":"cnlinh"},"content":"            return false;"},{"lineNumber":103,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":106,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"cnlinh"},"content":"     * Check if the command used is an existing alias."},{"lineNumber":108,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"cnlinh"},"content":"    public boolean isRecursiveKeyword(String commandWord) {"},{"lineNumber":110,"author":{"gitId":"cnlinh"},"content":"        return mapping.containsKey(commandWord);"},{"lineNumber":111,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":113,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"cnlinh"},"content":"    public int hashCode() {"},{"lineNumber":115,"author":{"gitId":"cnlinh"},"content":"        return mapping.hashCode();"},{"lineNumber":116,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":118,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":119,"author":{"gitId":"cnlinh"},"content":"    public boolean equals(Object o) {"},{"lineNumber":120,"author":{"gitId":"cnlinh"},"content":"        if (o \u003d\u003d this) {"},{"lineNumber":121,"author":{"gitId":"cnlinh"},"content":"            return true;"},{"lineNumber":122,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"cnlinh"},"content":"        if (!(o instanceof AliasMapping)) {"},{"lineNumber":124,"author":{"gitId":"cnlinh"},"content":"            return false;"},{"lineNumber":125,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":127,"author":{"gitId":"cnlinh"},"content":"        AliasMapping am \u003d (AliasMapping) o;"},{"lineNumber":128,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":129,"author":{"gitId":"cnlinh"},"content":"        return mapping.keySet().stream().allMatch(key -\u003e mapping.get(key).equals(am.mapping.get(key)));"},{"lineNumber":130,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":131}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX \u003d \"The resident index provided is invalid\";"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_RESIDENTS_LISTED_OVERVIEW \u003d \"%1$d residents listed!\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_INVALID_ROOM_DISPLAYED_INDEX \u003d \"The room index provided is invalid\";"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_ROOMS_LISTED_OVERVIEW \u003d \"%1$d rooms listed!\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX \u003d \"The issue index provided is invalid\";"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_ISSUES_LISTED_OVERVIEW \u003d \"%1$d issues listed!\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"stein414":2,"colintkn":2,"-":13,"DrWala":3}},{"path":"src/main/java/seedu/address/commons/util/EnumUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":" * Utility methods related to Enums"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"public class EnumUtil {"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"    // Taken from https://stackoverflow.com/a/13783744"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"     * Returns all enum values of a provided enum as a String array"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"     * @param e Enum to get string values of"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"     * @return String array containing the enum values"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    public static String[] getNames(Class\u003c? extends Enum\u003c?\u003e\u003e e) {"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"        return Arrays.stream(e.getEnumConstants()).map(Enum::name).toArray(String[]::new);"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":20}},{"path":"src/main/java/seedu/address/commons/util/MathUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":" * Helper functions for common math operations."},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"public class MathUtil {"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"     * To prevent instantiation."},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"    private MathUtil() {"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"     * Clamps a value between an inclusive upper and lower bound."},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns {@code min} if {@code value} \u003c {@code min}. Returns {@code max} if {@code value} \u003e {@code max}."},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"     * Otherwise, returns {@code value}."},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"     * @param value The value to clamp."},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"     * @param min The inclusive lower bound."},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"     * @param max The inclusive upper bound."},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The clamped value."},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    public static int clamp(int value, int min, int max) {"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        if (value \u003c min) {"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"            return min;"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        if (value \u003e max) {"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"            return max;"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"        return value;"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":33}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Ignores case, but a full word match is required."},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"     * \u003cbr\u003e"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"     * examples:"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"     * \u003cpre\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * \u003c/pre\u003e"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param word     cannot be null, cannot be empty, must be a single word"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(word);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"     * Ignores case."},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"     * \u003cbr\u003e"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"     * examples:"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"     * \u003cpre\u003e"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"     *       containsIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"     *       containsIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"     *       containsIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"     * \u003c/pre\u003e"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"     * @param sentence cannot be null"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"     * @param word     cannot be null, cannot be empty, must be a single word"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"    public static boolean containsIgnoreCase(String sentence, String word) {"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"        requireNonNull(sentence);"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"        requireNonNull(word);"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":""},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"        String preppedWord \u003d word.trim().toLowerCase();"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":""},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"        String preppedSentence \u003d sentence.toLowerCase();"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":""},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"        return Arrays.stream(wordsInPreppedSentence)"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"                .anyMatch(preppedSentenceWord -\u003e preppedSentenceWord.contains(preppedWord));"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(t);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        requireNonNull(s);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"stein414":36,"-":67}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws ParseException   If an error occurs during parsing."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the AddressBook."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"    /** Returns an unmodifiable view of the filtered list of residents */"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    ObservableList\u003cResident\u003e getFilteredResidentList();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"    /** Returns an unmodifiable view of the filtered list of rooms */"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"    ObservableList\u003cRoom\u003e getFilteredRoomList();"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"    /** Returns an unmodifiable view of the filtered list of issues */"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    ObservableList\u003cIssue\u003e getFilteredIssueList();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the command history."},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"    ReadOnlyCommandHistory getCommandHistory();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":6,"stein414":4,"colintkn":3,"-":49,"DrWala":3}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText, model.getUserPrefs());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        model.appendCommandHistoryEntry(commandText);"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return model.getAddressBook();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"    public ObservableList\u003cResident\u003e getFilteredResidentList() {"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"        return model.getFilteredResidentList();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"    public ObservableList\u003cRoom\u003e getFilteredRoomList() {"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"        return model.getFilteredRoomList();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"    public ObservableList\u003cIssue\u003e getFilteredIssueList() {"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"        return model.getFilteredIssueList();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"    public ReadOnlyCommandHistory getCommandHistory() {"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"        return model.getCommandHistory();"},{"lineNumber":101,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":8,"cnlinh":2,"stein414":4,"colintkn":3,"-":81,"DrWala":4}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"SunRez has been cleared!\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":22,"DrWala":1}},{"path":"src/main/java/seedu/address/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    private final boolean isResidentCommand;"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    private final boolean isRoomCommand;"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"     * Help information should be shown to the user."},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final boolean showHelp;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"     * The application should exit."},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final boolean exit;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    public CommandResult(String feedbackToUser, boolean isResidentCommand, boolean isRoomCommand, boolean showHelp,"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"                         boolean exit) {"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        this.isResidentCommand \u003d isResidentCommand;"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"        this.isRoomCommand \u003d isRoomCommand;"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"        this.showHelp \u003d showHelp;"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        this.exit \u003d exit;"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"     * Constructs a simpler CommandResult which assumes that the command is neither a resident nor room command."},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"     * The command therefore can only be a help or exit command."},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"     * @param feedbackToUser Feedback string to return to user."},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"     * @param showHelp Indication if command is a help command."},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"     * @param exit Indication if command is an exit command."},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        this.isResidentCommand \u003d false;"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"        this.isRoomCommand \u003d false;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * and other fields set to their default value."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"        this(feedbackToUser, false, false, false, false);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return feedbackToUser;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"     * Sets the state of this command result to indicate that it is a Resident command"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"     * @return CommandResult object indicating the result of the executed command"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"    public CommandResult setResidentCommand() {"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"        return new CommandResult(this.feedbackToUser, true, false, this.showHelp, this.exit);"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"     * Indicates if this CommandResult was the result of a Resident command"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"     * @return CommandResult object indicating the result of the executed command"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"    public boolean isResidentCommand() {"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"        return this.isResidentCommand;"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"     * Sets the state of this command result to indicate that it is a Room command"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"     * @return CommandResult object indicating the result of the executed command"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"    public CommandResult setRoomCommand() {"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"        return new CommandResult(this.feedbackToUser, false, true, this.showHelp, this.exit);"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"     * Indicates if this CommandResult was the result of a Room command"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"     * @return CommandResult object indicating the result of the executed command"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"    public boolean isRoomCommand() {"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"        return this.isRoomCommand;"},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return showHelp;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public boolean isExit() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return exit;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":68,"DrWala":65}},{"path":"src/main/java/seedu/address/logic/commands/ViewHistoryCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":" * Displays the most recent commands entered to the user."},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"public class ViewHistoryCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"            + \": Displays the COUNT most recent commands entered. \""},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"            + \"If COUNT is not specified, then it displays all commands entered.\\n\""},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"            + \"Parameters: COUNT (optional, must be a positive integer)\\n\""},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"            + \"Example: \" + COMMAND_WORD + \" 5\";"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_INVALID_COUNT \u003d \"The provided COUNT is invalid. \""},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"            + \"Valid range: %d to %d (inclusive)\";"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_EMPTY_HISTORY \u003d \"No non-empty commands have been entered yet.\";"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_HEADER_SUCCESS \u003d \"Last %d command(s):\\n\";"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_ENTRY_FORMAT \u003d \"%d:\\t%s\\n\";"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    private final Optional\u003cInteger\u003e optCount;"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a new {@code ViewHistoryCommand} with the given number of entries to display."},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"     * @param count The number of entries to display."},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    public ViewHistoryCommand(int count) {"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        this.optCount \u003d Optional.of(count);"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a new {@code ViewHistoryCommand} that displays the entire command history."},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"    public ViewHistoryCommand() {"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"        optCount \u003d Optional.empty();"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"                || (other instanceof ViewHistoryCommand // instanceof handles nulls"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"                \u0026\u0026 optCount.equals(((ViewHistoryCommand) other).optCount)); // state check"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"     * Displays the requested number of command history entries."},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"     * @param model {@code Model} which the command should operate on."},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A {@code CommandResult} with the command history to display."},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws CommandException If the {@code count} this command was constructed with is out of range."},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"        requireNonNull(model);"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"        ReadOnlyCommandHistory history \u003d model.getCommandHistory();"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"        if (history.size() \u003d\u003d 0) {"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"            return new CommandResult(MESSAGE_EMPTY_HISTORY);"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"        int count \u003d optCount.orElse(history.size());"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"        if (count \u003c\u003d 0 || count \u003e history.size()) {"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"            throw new CommandException(String.format(MESSAGE_INVALID_COUNT, 1, history.size()));"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"        StringBuilder msg \u003d new StringBuilder();"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"        msg.append(String.format(MESSAGE_HEADER_SUCCESS, count));"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d history.size() - 1; i \u003e\u003d history.size() - count; i--) {"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"            final int entryNum \u003d i + 1;"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"            final String entryText \u003d history.get(i).toString();"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"            msg.append(String.format(MESSAGE_ENTRY_FORMAT, entryNum, entryText));"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(msg.toString());"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":90}},{"path":"src/main/java/seedu/address/logic/commands/alias/AliasCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"//Solution below adapted from https://github.com/briyanii/main"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"package seedu.address.logic.commands.alias;"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":" * Sets a shortcut command for a longer command."},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":" */"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"public class AliasCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    public static final String COMMAND_WORD \u003d \"alias\";"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets a shortcut command for a longer command.\\n\""},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"            + \"Parameters: a/ALIAS cmd/COMMAND\\n\""},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"            + \"Example: \" + COMMAND_WORD + \" a/rl cmd/rlist\";"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Alias created: %1$s\";"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_RESERVED_KEYWORD \u003d"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"            \"%1$s is a reserved keyword and cannot be used as an alias\";"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_RECURSIVE \u003d"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"            \"Recursive alias is not allowed\";"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"    private final Alias alias;"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"     * Creates an AliasCommand object."},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"    public AliasCommand(Alias alias) {"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"        requireAllNonNull(alias);"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"        this.alias \u003d alias;"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"     * Excecutes an AliasCommand to create a new Alias"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"     * @param model {@code Model} which the command should operate on."},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"     * @return result of command execution"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"     * @throws CommandException if input is invalid"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"        requireAllNonNull(model);"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"        // if the command word is a reserved keyword"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"        String aliasName \u003d alias.getAliasName();"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"        if (model.getUserPrefs().isReservedKeyword(aliasName)) {"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"            throw new CommandException(String.format(MESSAGE_RESERVED_KEYWORD, aliasName));"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"        // if the command word is recursive keyword"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"        String commandWord \u003d alias.getCommand().stripLeading().split(\"\\\\s+\")[0];"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"        if (commandWord.equals(aliasName)"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"                || commandWord.equals(COMMAND_WORD)"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"                || model.getUserPrefs().isRecursiveKeyword(commandWord)) {"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"            throw new CommandException(MESSAGE_RECURSIVE);"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"        model.addAlias(alias);"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, alias.getAliasName()));"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"        return obj \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"                || (obj instanceof AliasCommand // instanceof handles nulls"},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"                \u0026\u0026 this.alias.equals(((AliasCommand) obj).alias));"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":72}},{"path":"src/main/java/seedu/address/logic/commands/issue/AddIssueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":""},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":""},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":" * Adds a issue to the address book."},{"lineNumber":18,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"public class AddIssueCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":""},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    public static final String COMMAND_WORD \u003d \"iadd\";"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":""},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an issue to SunRez. \""},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"            + PREFIX_ROOM_NUMBER + \"ROOM_NO \""},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \""},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"            + \"[\" + PREFIX_TIMESTAMP + \"TIMESTAMP] \""},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"            + \"[\" + PREFIX_STATUS + \"STATUS] \""},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]\\n\""},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"            + PREFIX_ROOM_NUMBER + \"10-100 \""},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"            + PREFIX_DESCRIPTION + \"Broken light \""},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"            + PREFIX_TIMESTAMP + \"2020/01/12 3:30pm \""},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"            + PREFIX_STATUS + \"pending \""},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"            + PREFIX_CATEGORY + \"furniture\";"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":""},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New issue added: %1$s\";"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":""},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"    private final Issue toAdd;"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":""},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"     * Creates an AddCommand to add the specified {@code Issue}"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    public AddIssueCommand(Issue issue) {"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"        requireNonNull(issue);"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"        toAdd \u003d issue;"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":""},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":""},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        model.addIssue(toAdd);"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":""},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"                || (other instanceof AddIssueCommand // instanceof handles nulls"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 toAdd.equals(((AddIssueCommand) other).toAdd));"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":""},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":64}},{"path":"src/main/java/seedu/address/logic/commands/issue/DeleteIssueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":""},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":""},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":""},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":" * Deletes a issue identified using it\u0027s displayed index from the address book."},{"lineNumber":17,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"public class DeleteIssueCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":""},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    public static final String COMMAND_WORD \u003d \"idel\";"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":""},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"            + \": Deletes the issue identified by the index number used in the displayed issue list.\\n\""},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":""},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_DELETE_ISSUE_SUCCESS \u003d \"Deleted Issue: %1$s\";"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":""},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":""},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    public DeleteIssueCommand(Index targetIndex) {"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":""},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        requireNonNull(model);"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"        List\u003cIssue\u003e lastShownList \u003d model.getFilteredIssueList();"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":""},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":""},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"        Issue issueToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"        model.deleteIssue(issueToDelete);"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_ISSUE_SUCCESS, issueToDelete));"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":""},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"                || (other instanceof DeleteIssueCommand // instanceof handles nulls"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 targetIndex.equals(((DeleteIssueCommand) other).targetIndex)); // state check"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":55}},{"path":"src/main/java/seedu/address/logic/commands/issue/EditIssueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ISSUES;"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":""},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":""},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Category;"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Description;"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.RoomNumber;"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Status;"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Timestamp;"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":""},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":" * Edits the details of an existing issue in the address book."},{"lineNumber":30,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"public class EditIssueCommand extends Command {"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":""},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"    public static final String COMMAND_WORD \u003d \"iedit\";"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":""},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the issue identified \""},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"            + \"by the index number used in the displayed issue list. \""},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"            + \"[\" + PREFIX_ROOM_NUMBER + \"ROOM_NO] \""},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"            + \"[\" + PREFIX_TIMESTAMP + \"TIMESTAMP] \""},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"            + \"[\" + PREFIX_STATUS + \"STATUS] \""},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]\\n\""},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"            + PREFIX_DESCRIPTION + \"Broken window \""},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"            + PREFIX_CATEGORY + \"Window\";"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":""},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_EDIT_ISSUE_SUCCESS \u003d \"Edited Issue: %1$s\";"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_DUPLICATE_ISSUE \u003d \"This issue already exists in the address book.\";"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":""},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"    private final Index index;"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"    private final EditIssueDescriptor editIssueDescriptor;"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":""},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"     * @param index               of the issue in the filtered issue list to edit"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"     * @param editIssueDescriptor details to edit the issue with"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"    public EditIssueCommand(Index index, EditIssueDescriptor editIssueDescriptor) {"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"        requireNonNull(index);"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"        requireNonNull(editIssueDescriptor);"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":""},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"        this.index \u003d index;"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"        this.editIssueDescriptor \u003d new EditIssueDescriptor(editIssueDescriptor);"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":""},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"        requireNonNull(model);"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"        List\u003cIssue\u003e lastShownList \u003d model.getFilteredIssueList();"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":""},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":""},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"        Issue issueToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"        Issue editedIssue \u003d createEditedIssue(issueToEdit, editIssueDescriptor);"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":""},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"        model.setIssue(issueToEdit, editedIssue);"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"        model.updateFilteredIssueList(PREDICATE_SHOW_ALL_ISSUES);"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_ISSUE_SUCCESS, editedIssue));"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":""},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"     * Creates and returns a {@code Issue} with the details of {@code issueToEdit}"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"     * edited with {@code editIssueDescriptor}."},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"    private static Issue createEditedIssue(Issue issueToEdit, EditIssueDescriptor editIssueDescriptor) {"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"        assert issueToEdit !\u003d null;"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":""},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"        RoomNumber updatedRoomNumber \u003d editIssueDescriptor.getRoomNumber().orElse(issueToEdit.getRoomNumber());"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"        Description updatedDescription \u003d editIssueDescriptor.getDescription()"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"                .orElse(issueToEdit.getDescription());"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"        Timestamp updatedTimestamp \u003d editIssueDescriptor.getTimestamp().orElse(issueToEdit.getTimestamp());"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"        Status updatedStatus \u003d editIssueDescriptor.getStatus().orElse(issueToEdit.getStatus());"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"        Category updatedCategory \u003d editIssueDescriptor.getCategory().orElse(issueToEdit.getCategory());"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":""},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"        return new Issue(updatedRoomNumber, updatedDescription, updatedTimestamp, updatedStatus, updatedCategory);"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":""},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"        // short circuit if same object"},{"lineNumber":104,"author":{"gitId":"stein414"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":105,"author":{"gitId":"stein414"},"content":"            return true;"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"stein414"},"content":""},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"        // instanceof handles nulls"},{"lineNumber":109,"author":{"gitId":"stein414"},"content":"        if (!(other instanceof EditIssueCommand)) {"},{"lineNumber":110,"author":{"gitId":"stein414"},"content":"            return false;"},{"lineNumber":111,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"stein414"},"content":""},{"lineNumber":113,"author":{"gitId":"stein414"},"content":"        // state check"},{"lineNumber":114,"author":{"gitId":"stein414"},"content":"        EditIssueCommand e \u003d (EditIssueCommand) other;"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":"        return index.equals(e.index)"},{"lineNumber":116,"author":{"gitId":"stein414"},"content":"                \u0026\u0026 editIssueDescriptor.equals(e.editIssueDescriptor);"},{"lineNumber":117,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"stein414"},"content":""},{"lineNumber":119,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"stein414"},"content":"     * Stores the details to edit the issue with. Each non-empty field value will replace the"},{"lineNumber":121,"author":{"gitId":"stein414"},"content":"     * corresponding field value of the issue."},{"lineNumber":122,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"stein414"},"content":"    public static class EditIssueDescriptor {"},{"lineNumber":124,"author":{"gitId":"stein414"},"content":"        private RoomNumber roomNumber;"},{"lineNumber":125,"author":{"gitId":"stein414"},"content":"        private Description description;"},{"lineNumber":126,"author":{"gitId":"stein414"},"content":"        private Timestamp timestamp;"},{"lineNumber":127,"author":{"gitId":"stein414"},"content":"        private Status status;"},{"lineNumber":128,"author":{"gitId":"stein414"},"content":"        private Category category;"},{"lineNumber":129,"author":{"gitId":"stein414"},"content":""},{"lineNumber":130,"author":{"gitId":"stein414"},"content":"        public EditIssueDescriptor() {"},{"lineNumber":131,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"stein414"},"content":""},{"lineNumber":133,"author":{"gitId":"stein414"},"content":"        /**"},{"lineNumber":134,"author":{"gitId":"stein414"},"content":"         * Copy constructor."},{"lineNumber":135,"author":{"gitId":"stein414"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":136,"author":{"gitId":"stein414"},"content":"         */"},{"lineNumber":137,"author":{"gitId":"stein414"},"content":"        public EditIssueDescriptor(EditIssueDescriptor toCopy) {"},{"lineNumber":138,"author":{"gitId":"stein414"},"content":"            setRoomNumber(toCopy.roomNumber);"},{"lineNumber":139,"author":{"gitId":"stein414"},"content":"            setDescription(toCopy.description);"},{"lineNumber":140,"author":{"gitId":"stein414"},"content":"            setTimestamp(toCopy.timestamp);"},{"lineNumber":141,"author":{"gitId":"stein414"},"content":"            setStatus(toCopy.status);"},{"lineNumber":142,"author":{"gitId":"stein414"},"content":"            setCategory(toCopy.category);"},{"lineNumber":143,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"stein414"},"content":""},{"lineNumber":145,"author":{"gitId":"stein414"},"content":"        /**"},{"lineNumber":146,"author":{"gitId":"stein414"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":147,"author":{"gitId":"stein414"},"content":"         */"},{"lineNumber":148,"author":{"gitId":"stein414"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":149,"author":{"gitId":"stein414"},"content":"            return CollectionUtil.isAnyNonNull(roomNumber, description, timestamp, status, category);"},{"lineNumber":150,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"stein414"},"content":""},{"lineNumber":152,"author":{"gitId":"stein414"},"content":"        public void setRoomNumber(RoomNumber name) {"},{"lineNumber":153,"author":{"gitId":"stein414"},"content":"            this.roomNumber \u003d name;"},{"lineNumber":154,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"stein414"},"content":""},{"lineNumber":156,"author":{"gitId":"stein414"},"content":"        public Optional\u003cRoomNumber\u003e getRoomNumber() {"},{"lineNumber":157,"author":{"gitId":"stein414"},"content":"            return Optional.ofNullable(roomNumber);"},{"lineNumber":158,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"stein414"},"content":""},{"lineNumber":160,"author":{"gitId":"stein414"},"content":"        public void setDescription(Description phone) {"},{"lineNumber":161,"author":{"gitId":"stein414"},"content":"            this.description \u003d phone;"},{"lineNumber":162,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"stein414"},"content":""},{"lineNumber":164,"author":{"gitId":"stein414"},"content":"        public Optional\u003cDescription\u003e getDescription() {"},{"lineNumber":165,"author":{"gitId":"stein414"},"content":"            return Optional.ofNullable(description);"},{"lineNumber":166,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"stein414"},"content":""},{"lineNumber":168,"author":{"gitId":"stein414"},"content":"        public void setTimestamp(Timestamp email) {"},{"lineNumber":169,"author":{"gitId":"stein414"},"content":"            this.timestamp \u003d email;"},{"lineNumber":170,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"stein414"},"content":""},{"lineNumber":172,"author":{"gitId":"stein414"},"content":"        public Optional\u003cTimestamp\u003e getTimestamp() {"},{"lineNumber":173,"author":{"gitId":"stein414"},"content":"            return Optional.ofNullable(timestamp);"},{"lineNumber":174,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"stein414"},"content":""},{"lineNumber":176,"author":{"gitId":"stein414"},"content":"        public void setStatus(Status address) {"},{"lineNumber":177,"author":{"gitId":"stein414"},"content":"            this.status \u003d address;"},{"lineNumber":178,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"stein414"},"content":""},{"lineNumber":180,"author":{"gitId":"stein414"},"content":"        public Optional\u003cStatus\u003e getStatus() {"},{"lineNumber":181,"author":{"gitId":"stein414"},"content":"            return Optional.ofNullable(status);"},{"lineNumber":182,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"stein414"},"content":""},{"lineNumber":184,"author":{"gitId":"stein414"},"content":"        /**"},{"lineNumber":185,"author":{"gitId":"stein414"},"content":"         * Sets {@code category} to this object\u0027s {@code category}."},{"lineNumber":186,"author":{"gitId":"stein414"},"content":"         * A defensive copy of {@code category} is used internally."},{"lineNumber":187,"author":{"gitId":"stein414"},"content":"         */"},{"lineNumber":188,"author":{"gitId":"stein414"},"content":"        public void setCategory(Category category) {"},{"lineNumber":189,"author":{"gitId":"stein414"},"content":"            this.category \u003d category;"},{"lineNumber":190,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"stein414"},"content":""},{"lineNumber":192,"author":{"gitId":"stein414"},"content":"        /**"},{"lineNumber":193,"author":{"gitId":"stein414"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":194,"author":{"gitId":"stein414"},"content":"         * if modification is attempted."},{"lineNumber":195,"author":{"gitId":"stein414"},"content":"         * Returns {@code Optional#empty()} if {@code category} is null."},{"lineNumber":196,"author":{"gitId":"stein414"},"content":"         */"},{"lineNumber":197,"author":{"gitId":"stein414"},"content":"        public Optional\u003cCategory\u003e getCategory() {"},{"lineNumber":198,"author":{"gitId":"stein414"},"content":"            return Optional.ofNullable(category);"},{"lineNumber":199,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"stein414"},"content":""},{"lineNumber":201,"author":{"gitId":"stein414"},"content":"        @Override"},{"lineNumber":202,"author":{"gitId":"stein414"},"content":"        public boolean equals(Object other) {"},{"lineNumber":203,"author":{"gitId":"stein414"},"content":"            // short circuit if same object"},{"lineNumber":204,"author":{"gitId":"stein414"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":205,"author":{"gitId":"stein414"},"content":"                return true;"},{"lineNumber":206,"author":{"gitId":"stein414"},"content":"            }"},{"lineNumber":207,"author":{"gitId":"stein414"},"content":""},{"lineNumber":208,"author":{"gitId":"stein414"},"content":"            // instanceof handles nulls"},{"lineNumber":209,"author":{"gitId":"stein414"},"content":"            if (!(other instanceof EditIssueDescriptor)) {"},{"lineNumber":210,"author":{"gitId":"stein414"},"content":"                return false;"},{"lineNumber":211,"author":{"gitId":"stein414"},"content":"            }"},{"lineNumber":212,"author":{"gitId":"stein414"},"content":""},{"lineNumber":213,"author":{"gitId":"stein414"},"content":"            // state check"},{"lineNumber":214,"author":{"gitId":"stein414"},"content":"            EditIssueDescriptor e \u003d (EditIssueDescriptor) other;"},{"lineNumber":215,"author":{"gitId":"stein414"},"content":""},{"lineNumber":216,"author":{"gitId":"stein414"},"content":"            return getRoomNumber().equals(e.getRoomNumber())"},{"lineNumber":217,"author":{"gitId":"stein414"},"content":"                    \u0026\u0026 getDescription().equals(e.getDescription())"},{"lineNumber":218,"author":{"gitId":"stein414"},"content":"                    \u0026\u0026 getTimestamp().equals(e.getTimestamp())"},{"lineNumber":219,"author":{"gitId":"stein414"},"content":"                    \u0026\u0026 getStatus().equals(e.getStatus())"},{"lineNumber":220,"author":{"gitId":"stein414"},"content":"                    \u0026\u0026 getCategory().equals(e.getCategory());"},{"lineNumber":221,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":222,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":223}},{"path":"src/main/java/seedu/address/logic/commands/issue/FindIssueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":""},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.RoomNumberContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":""},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":" * Finds and lists all issues in address book whose name contains any of the argument keywords."},{"lineNumber":13,"author":{"gitId":"stein414"},"content":" * Keyword matching is case insensitive."},{"lineNumber":14,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"public class FindIssueCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":""},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    public static final String COMMAND_WORD \u003d \"ifind\";"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":""},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all issues whose room numbers contain any of \""},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"            + \"the specified keywords and displays them as a list with index numbers.\\n\""},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"            + \"Example: \" + COMMAND_WORD + \" 10-100 12-120\";"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":""},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    private final RoomNumberContainsKeywordsPredicate predicate;"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":""},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"    public FindIssueCommand(RoomNumberContainsKeywordsPredicate predicate) {"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":""},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        requireNonNull(model);"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"        model.updateFilteredIssueList(predicate);"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        return new CommandResult("},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"                String.format(Messages.MESSAGE_ISSUES_LISTED_OVERVIEW, model.getFilteredIssueList().size()));"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":""},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"                || (other instanceof FindIssueCommand // instanceof handles nulls"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 predicate.equals(((FindIssueCommand) other).predicate)); // state check"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":""},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":45}},{"path":"src/main/java/seedu/address/logic/commands/issue/ListIssueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ISSUES;"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":""},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":""},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":" * Lists all issues in the address book to the user."},{"lineNumber":12,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"public class ListIssueCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":""},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"    public static final String COMMAND_WORD \u003d \"ilist\";"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":""},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all issues\";"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":""},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"        requireNonNull(model);"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"        model.updateFilteredIssueList(PREDICATE_SHOW_ALL_ISSUES);"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":""},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":26}},{"path":"src/main/java/seedu/address/logic/commands/resident/AddResidentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":" * Adds a resident to the address book."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"public class AddResidentCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    public static final String COMMAND_WORD \u003d \"radd\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a resident to the address book.\\n\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"            + PREFIX_YEAR + \"YEAR \""},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"            + PREFIX_ROOM + \"ROOM\\n\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"            + PREFIX_YEAR + \"1 \""},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"            + PREFIX_ROOM + \"01-234\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New resident added: %1$s\";"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_DUPLICATE_RESIDENT \u003d \"This resident already exists in the address book\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"    private final Resident toAdd;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"     * Creates an AddResidentCommand to add the specified {@code Resident}"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"    public AddResidentCommand(Resident resident) {"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        requireNonNull(resident);"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        toAdd \u003d resident;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        if (model.hasResident(toAdd)) {"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_RESIDENT);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"        model.addResident(toAdd);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"                || (other instanceof AddResidentCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 toAdd.equals(((AddResidentCommand) other).toAdd));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":28,"-":40}},{"path":"src/main/java/seedu/address/logic/commands/resident/DeleteResidentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":" * Deletes a resident identified using it\u0027s displayed index from the address book."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"public class DeleteResidentCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"    public static final String COMMAND_WORD \u003d \"rdel\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"            + \": Deletes the resident identified by the index number used in the displayed resident list.\\n\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_DELETE_RESIDENT_SUCCESS \u003d \"Deleted Resident: %1$s\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"    public DeleteResidentCommand(Index targetIndex) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"        List\u003cResident\u003e lastShownList \u003d model.getFilteredResidentList();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        Resident residentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        model.deleteResident(residentToDelete);"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_RESIDENT_SUCCESS, residentToDelete));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"                || (other instanceof DeleteResidentCommand // instanceof handles nulls"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteResidentCommand) other).targetIndex)); // state check"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":17,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/resident/EditResidentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RESIDENTS;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":" * Edits the details of an existing resident in the address book."},{"lineNumber":30,"author":{"gitId":"-"},"content":" */"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"public class EditResidentCommand extends Command {"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"    public static final String COMMAND_WORD \u003d \"redit\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the resident identified \""},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"            + \"by the index number used in the displayed resident list. \""},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"            + \"[\" + PREFIX_YEAR + \"YEAR] \""},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"            + \"[\" + PREFIX_ROOM + \"ROOM]\\n\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"            + PREFIX_EMAIL + \"e0123456@u.nus.edu \""},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"            + PREFIX_ROOM + \"01-234\";"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_EDIT_RESIDENT_SUCCESS \u003d \"Edited Resident: %1$s\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_DUPLICATE_RESIDENT \u003d \"This resident already exists in the address book.\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"    private final EditResidentDescriptor editResidentDescriptor;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"     * @param index of the resident in the filtered resident list to edit"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"     * @param editResidentDescriptor details to edit the resident with"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"    public EditResidentCommand(Index index, EditResidentDescriptor editResidentDescriptor) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        requireNonNull(editResidentDescriptor);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"        this.editResidentDescriptor \u003d new EditResidentDescriptor(editResidentDescriptor);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"        List\u003cResident\u003e lastShownList \u003d model.getFilteredResidentList();"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"        Resident residentToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        Resident editedResident \u003d createEditedResident(residentToEdit, editResidentDescriptor);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"        if (!residentToEdit.isSameResident(editedResident) \u0026\u0026 model.hasResident(editedResident)) {"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_RESIDENT);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"        model.setResident(residentToEdit, editedResident);"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"        model.updateFilteredResidentList(PREDICATE_SHOW_ALL_RESIDENTS);"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_RESIDENT_SUCCESS, editedResident));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"     * Creates and returns a {@code Resident} with the details of {@code residentToEdit}"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"     * edited with {@code editResidentDescriptor}."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"    private static Resident createEditedResident(Resident residentToEdit,"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"            EditResidentDescriptor editResidentDescriptor) {"},{"lineNumber":96,"author":{"gitId":"colintkn"},"content":"        assert residentToEdit !\u003d null;"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"        Name updatedName \u003d editResidentDescriptor.getName().orElse(residentToEdit.getName());"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"        Phone updatedPhone \u003d editResidentDescriptor.getPhone().orElse(residentToEdit.getPhone());"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"        Email updatedEmail \u003d editResidentDescriptor.getEmail().orElse(residentToEdit.getEmail());"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"        Year updatedYear \u003d editResidentDescriptor.getYear().orElse(residentToEdit.getYear());"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"        Room updatedRoom \u003d editResidentDescriptor.getRoom().orElse(residentToEdit.getRoom());"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"        return new Resident(updatedName, updatedPhone, updatedEmail, updatedYear, updatedRoom);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":116,"author":{"gitId":"colintkn"},"content":"        if (!(other instanceof EditResidentCommand)) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":121,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand e \u003d (EditResidentCommand) other;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":123,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 editResidentDescriptor.equals(e.editResidentDescriptor);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"colintkn"},"content":"     * Stores the details to edit the resident with. Each non-empty field value will replace the"},{"lineNumber":128,"author":{"gitId":"colintkn"},"content":"     * corresponding field value of the resident."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"colintkn"},"content":"    public static class EditResidentDescriptor {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":134,"author":{"gitId":"colintkn"},"content":"        private Year year;"},{"lineNumber":135,"author":{"gitId":"colintkn"},"content":"        private Room room;"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"colintkn"},"content":"        public EditResidentDescriptor() {}"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":140,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":141,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":142,"author":{"gitId":"colintkn"},"content":"        public EditResidentDescriptor(EditResidentDescriptor toCopy) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":146,"author":{"gitId":"colintkn"},"content":"            setYear(toCopy.year);"},{"lineNumber":147,"author":{"gitId":"colintkn"},"content":"            setRoom(toCopy.room);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":151,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":152,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":154,"author":{"gitId":"colintkn"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, room);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"colintkn"},"content":"        public void setYear(Year year) {"},{"lineNumber":182,"author":{"gitId":"colintkn"},"content":"            this.year \u003d year;"},{"lineNumber":183,"author":{"gitId":"colintkn"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":185,"author":{"gitId":"colintkn"},"content":"        public Optional\u003cYear\u003e getYear() {"},{"lineNumber":186,"author":{"gitId":"colintkn"},"content":"            return Optional.ofNullable(year);"},{"lineNumber":187,"author":{"gitId":"colintkn"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":189,"author":{"gitId":"colintkn"},"content":"        public void setRoom(Room room) {"},{"lineNumber":190,"author":{"gitId":"colintkn"},"content":"            this.room \u003d room;"},{"lineNumber":191,"author":{"gitId":"colintkn"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":193,"author":{"gitId":"colintkn"},"content":"        public Optional\u003cRoom\u003e getRoom() {"},{"lineNumber":194,"author":{"gitId":"colintkn"},"content":"            return Optional.ofNullable(room);"},{"lineNumber":195,"author":{"gitId":"colintkn"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":205,"author":{"gitId":"colintkn"},"content":"            if (!(other instanceof EditResidentDescriptor)) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":210,"author":{"gitId":"colintkn"},"content":"            EditResidentDescriptor e \u003d (EditResidentDescriptor) other;"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":214,"author":{"gitId":"colintkn"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":215,"author":{"gitId":"colintkn"},"content":"                    \u0026\u0026 getYear().equals(e.getYear())"},{"lineNumber":216,"author":{"gitId":"colintkn"},"content":"                    \u0026\u0026 getRoom().equals(e.getRoom());"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":85,"-":134}},{"path":"src/main/java/seedu/address/logic/commands/resident/FindResidentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.NameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"public class FindResidentCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    public static final String COMMAND_WORD \u003d \"rfind\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    public FindResidentCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        model.updateFilteredResidentList(predicate);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"                String.format(Messages.MESSAGE_RESIDENTS_LISTED_OVERVIEW, model.getFilteredResidentList().size()));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"                || (other instanceof FindResidentCommand // instanceof handles nulls"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 predicate.equals(((FindResidentCommand) other).predicate)); // state check"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":11,"-":33}},{"path":"src/main/java/seedu/address/logic/commands/resident/ListResidentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RESIDENTS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"public class ListResidentCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"    public static final String COMMAND_WORD \u003d \"rlist\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"        model.updateFilteredResidentList(PREDICATE_SHOW_ALL_RESIDENTS);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":7,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/room/AddRoomCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_OCCUPANCY_STATUS;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TAG;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TYPE;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"public class AddRoomCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    public static final String COMMAND_WORD \u003d \"oadd\";"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a room to SunRez. \""},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"            + \"Parameters: \""},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"            + PREFIX_ROOM_NUMBER + \"NAME \""},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"            + PREFIX_ROOM_TYPE + \"TYPE \""},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"            + PREFIX_ROOM_OCCUPANCY_STATUS + \"OCCUPANCY STATUS \""},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"            + \"[\" + PREFIX_ROOM_TAG + \"TAG]...\\n\""},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"            + PREFIX_ROOM_NUMBER + \"12-123 \""},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"            + PREFIX_ROOM_TYPE + \"CORRIDOR_AC \""},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"            + PREFIX_ROOM_OCCUPANCY_STATUS + \"Y \""},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"            + PREFIX_ROOM_TAG + \"SHN\";"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New room added: %1$s\";"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_DUPLICATE_ROOM \u003d \"This room already exists in SunRez\";"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    private final Room toAdd;"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"     * Creates an AddRoomCommand to add the specified {@code Room}"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"    public AddRoomCommand(Room room) {"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"        requireNonNull(room);"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        this.toAdd \u003d room;"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"        requireNonNull(model);"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"        if (model.hasRoom(toAdd)) {"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ROOM);"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        model.addRoom(toAdd);"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd)).setRoomCommand();"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"                || (other instanceof AddRoomCommand // instanceof handles nulls"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 toAdd.equals(((AddRoomCommand) other).toAdd));"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":61}},{"path":"src/main/java/seedu/address/logic/commands/room/DeleteRoomCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":" * Deletes a room identified using it\u0027s displayed index from SunRez."},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"public class DeleteRoomCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    public static final String COMMAND_WORD \u003d \"odel\";"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"            + \": Deletes the room identified by the index number used in the displayed room list.\\n\""},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_DELETE_ROOM_SUCCESS \u003d \"Deleted room: %1$s\";"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    private final Index targetIndex;"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    public DeleteRoomCommand(Index targetIndex) {"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        requireNonNull(model);"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        List\u003cRoom\u003e lastShownList \u003d model.getFilteredRoomList();"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ROOM_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        Room roomToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        model.deleteRoom(roomToDelete);"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_ROOM_SUCCESS, roomToDelete)).setRoomCommand();"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":47}},{"path":"src/main/java/seedu/address/logic/commands/room/EditRoomCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_OCCUPANCY_STATUS;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TAG;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TYPE;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ROOMS;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.IsOccupied;"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomNumber;"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomType;"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":" * Edits the details of an existing room in SunRez."},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"public class EditRoomCommand extends Command {"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    public static final String COMMAND_WORD \u003d \"oedit\";"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the room identified \""},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"            + \"by the index number used in the displayed room list. \""},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"            + \"[\" + PREFIX_ROOM_NUMBER + \"NAME] \""},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"            + \"[\" + PREFIX_ROOM_TYPE + \"TYPE] \""},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"            + \"[\" + PREFIX_ROOM_OCCUPANCY_STATUS + \"OCCUPANCY STATUS] \""},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"            + \"[\" + PREFIX_ROOM_TAG + \"TAG]...\\n\""},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"            + PREFIX_ROOM_NUMBER + \"12-100 \""},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"            + PREFIX_ROOM_OCCUPANCY_STATUS + \"y\";"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_EDIT_ROOM_SUCCESS \u003d \"Edited Room: %1$s\";"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_DUPLICATE_ROOM \u003d \"This room already exists in the address book.\";"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"    private final Index index;"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"    private final EditRoomDescriptor editRoomDescriptor;"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"     * @param index              of the room in the filtered room list to edit"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"     * @param editRoomDescriptor details to edit the room with"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"    public EditRoomCommand(Index index, EditRoomDescriptor editRoomDescriptor) {"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"        requireNonNull(index);"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"        requireNonNull(editRoomDescriptor);"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"        this.index \u003d index;"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"        this.editRoomDescriptor \u003d new EditRoomDescriptor(editRoomDescriptor);"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"        requireNonNull(model);"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"        List\u003cRoom\u003e lastShownList \u003d model.getFilteredRoomList();"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"        Room roomToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"        Room editedRoom \u003d createEditedRoom(roomToEdit, editRoomDescriptor);"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"        if (!roomToEdit.isSameRoom(editedRoom) \u0026\u0026 model.hasRoom(editedRoom)) {"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ROOM);"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"        model.setRoom(roomToEdit, editedRoom);"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"        model.updateFilteredRoomList(PREDICATE_SHOW_ALL_ROOMS);"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_ROOM_SUCCESS, editedRoom)).setRoomCommand();"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"     * Creates and returns a {@code Room} with the details of {@code roomToEdit}"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"     * edited with {@code editRoomDescriptor}."},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"    private static Room createEditedRoom(Room roomToEdit, EditRoomDescriptor editRoomDescriptor) {"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"        assert roomToEdit !\u003d null;"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"        RoomNumber updatedRoomNumber \u003d editRoomDescriptor.getRoomNumber().orElse(roomToEdit.getRoomNumber());"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"        RoomType updatedRoomType \u003d editRoomDescriptor.getRoomType().orElse(roomToEdit.getRoomType());"},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"        IsOccupied updatedIsOccupied \u003d editRoomDescriptor.getIsOccupied().orElse(roomToEdit.isOccupied());"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"        Set\u003cTag\u003e updatedTags \u003d editRoomDescriptor.getTags().orElse(roomToEdit.getTags());"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"        return new Room(updatedRoomNumber, updatedRoomType, updatedIsOccupied, updatedTags);"},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":104,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":"        // short circuit if same object"},{"lineNumber":106,"author":{"gitId":"DrWala"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"            return true;"},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":110,"author":{"gitId":"DrWala"},"content":"        // instanceof handles nulls"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":"        if (!(other instanceof EditRoomCommand)) {"},{"lineNumber":112,"author":{"gitId":"DrWala"},"content":"            return false;"},{"lineNumber":113,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":115,"author":{"gitId":"DrWala"},"content":"        // state check"},{"lineNumber":116,"author":{"gitId":"DrWala"},"content":"        EditRoomCommand e \u003d (EditRoomCommand) other;"},{"lineNumber":117,"author":{"gitId":"DrWala"},"content":"        return index.equals(e.index)"},{"lineNumber":118,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 editRoomDescriptor.equals(e.editRoomDescriptor);"},{"lineNumber":119,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":121,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"DrWala"},"content":"     * Stores the details to edit the room with. Each non-empty field value will replace the"},{"lineNumber":123,"author":{"gitId":"DrWala"},"content":"     * corresponding field value of the room."},{"lineNumber":124,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"DrWala"},"content":"    public static class EditRoomDescriptor {"},{"lineNumber":126,"author":{"gitId":"DrWala"},"content":"        private RoomNumber roomNumber;"},{"lineNumber":127,"author":{"gitId":"DrWala"},"content":"        private RoomType roomType;"},{"lineNumber":128,"author":{"gitId":"DrWala"},"content":"        private IsOccupied isOccupied;"},{"lineNumber":129,"author":{"gitId":"DrWala"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":130,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":131,"author":{"gitId":"DrWala"},"content":"        public EditRoomDescriptor() {"},{"lineNumber":132,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":134,"author":{"gitId":"DrWala"},"content":"        /**"},{"lineNumber":135,"author":{"gitId":"DrWala"},"content":"         * Copy constructor."},{"lineNumber":136,"author":{"gitId":"DrWala"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":137,"author":{"gitId":"DrWala"},"content":"         */"},{"lineNumber":138,"author":{"gitId":"DrWala"},"content":"        public EditRoomDescriptor(EditRoomDescriptor toCopy) {"},{"lineNumber":139,"author":{"gitId":"DrWala"},"content":"            setRoomNumber(toCopy.roomNumber);"},{"lineNumber":140,"author":{"gitId":"DrWala"},"content":"            setRoomType(toCopy.roomType);"},{"lineNumber":141,"author":{"gitId":"DrWala"},"content":"            setIsOccupied(toCopy.isOccupied);"},{"lineNumber":142,"author":{"gitId":"DrWala"},"content":"            setTags(toCopy.tags);"},{"lineNumber":143,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":145,"author":{"gitId":"DrWala"},"content":"        /**"},{"lineNumber":146,"author":{"gitId":"DrWala"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":147,"author":{"gitId":"DrWala"},"content":"         */"},{"lineNumber":148,"author":{"gitId":"DrWala"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":149,"author":{"gitId":"DrWala"},"content":"            return CollectionUtil.isAnyNonNull(roomNumber, roomType, isOccupied, tags);"},{"lineNumber":150,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":152,"author":{"gitId":"DrWala"},"content":"        public void setRoomNumber(RoomNumber roomNumber) {"},{"lineNumber":153,"author":{"gitId":"DrWala"},"content":"            this.roomNumber \u003d roomNumber;"},{"lineNumber":154,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":156,"author":{"gitId":"DrWala"},"content":"        public Optional\u003cRoomNumber\u003e getRoomNumber() {"},{"lineNumber":157,"author":{"gitId":"DrWala"},"content":"            return Optional.ofNullable(roomNumber);"},{"lineNumber":158,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":160,"author":{"gitId":"DrWala"},"content":"        public void setRoomType(RoomType roomType) {"},{"lineNumber":161,"author":{"gitId":"DrWala"},"content":"            this.roomType \u003d roomType;"},{"lineNumber":162,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":164,"author":{"gitId":"DrWala"},"content":"        public Optional\u003cRoomType\u003e getRoomType() {"},{"lineNumber":165,"author":{"gitId":"DrWala"},"content":"            return Optional.ofNullable(roomType);"},{"lineNumber":166,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":168,"author":{"gitId":"DrWala"},"content":"        public void setIsOccupied(IsOccupied isOccupied) {"},{"lineNumber":169,"author":{"gitId":"DrWala"},"content":"            this.isOccupied \u003d isOccupied;"},{"lineNumber":170,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":172,"author":{"gitId":"DrWala"},"content":"        public Optional\u003cIsOccupied\u003e getIsOccupied() {"},{"lineNumber":173,"author":{"gitId":"DrWala"},"content":"            return Optional.ofNullable(isOccupied);"},{"lineNumber":174,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":176,"author":{"gitId":"DrWala"},"content":"        /**"},{"lineNumber":177,"author":{"gitId":"DrWala"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":178,"author":{"gitId":"DrWala"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":179,"author":{"gitId":"DrWala"},"content":"         */"},{"lineNumber":180,"author":{"gitId":"DrWala"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":181,"author":{"gitId":"DrWala"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":182,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":184,"author":{"gitId":"DrWala"},"content":"        /**"},{"lineNumber":185,"author":{"gitId":"DrWala"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":186,"author":{"gitId":"DrWala"},"content":"         * if modification is attempted."},{"lineNumber":187,"author":{"gitId":"DrWala"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":188,"author":{"gitId":"DrWala"},"content":"         */"},{"lineNumber":189,"author":{"gitId":"DrWala"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":190,"author":{"gitId":"DrWala"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":191,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":193,"author":{"gitId":"DrWala"},"content":"        @Override"},{"lineNumber":194,"author":{"gitId":"DrWala"},"content":"        public boolean equals(Object other) {"},{"lineNumber":195,"author":{"gitId":"DrWala"},"content":"            // short circuit if same object"},{"lineNumber":196,"author":{"gitId":"DrWala"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":197,"author":{"gitId":"DrWala"},"content":"                return true;"},{"lineNumber":198,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":199,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":200,"author":{"gitId":"DrWala"},"content":"            // instanceof handles nulls"},{"lineNumber":201,"author":{"gitId":"DrWala"},"content":"            if (!(other instanceof EditRoomDescriptor)) {"},{"lineNumber":202,"author":{"gitId":"DrWala"},"content":"                return false;"},{"lineNumber":203,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":204,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":205,"author":{"gitId":"DrWala"},"content":"            // state check"},{"lineNumber":206,"author":{"gitId":"DrWala"},"content":"            EditRoomDescriptor e \u003d (EditRoomDescriptor) other;"},{"lineNumber":207,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":208,"author":{"gitId":"DrWala"},"content":"            return getRoomNumber().equals(e.getRoomNumber())"},{"lineNumber":209,"author":{"gitId":"DrWala"},"content":"                    \u0026\u0026 getRoomType().equals(e.getRoomType())"},{"lineNumber":210,"author":{"gitId":"DrWala"},"content":"                    \u0026\u0026 getIsOccupied().equals(e.getIsOccupied())"},{"lineNumber":211,"author":{"gitId":"DrWala"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":212,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":214}},{"path":"src/main/java/seedu/address/logic/commands/room/FindRoomCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomNumberContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":" * Finds and lists all rooms in SunRez whose name contains any of the argument keywords."},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":" * Keyword matching is case insensitive."},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"public class FindRoomCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    public static final String COMMAND_WORD \u003d \"ofind\";"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all rooms whose names contain any of \""},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"            + \"Example: \" + COMMAND_WORD + \" 12-345 01-001\";"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    private final RoomNumberContainsKeywordsPredicate predicate;"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    public FindRoomCommand(RoomNumberContainsKeywordsPredicate predicate) {"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"        requireNonNull(model);"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        model.updateFilteredRoomList(predicate);"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        return new CommandResult("},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"                String.format(Messages.MESSAGE_ROOMS_LISTED_OVERVIEW, model.getFilteredRoomList().size()))"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"                .setRoomCommand();"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"                || (other instanceof FindRoomCommand // instanceof handles nulls"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 predicate.equals(((FindRoomCommand) other).predicate)); // state check"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":44}},{"path":"src/main/java/seedu/address/logic/commands/room/ListRoomCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ROOMS;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":" * Lists all rooms in SunRez to the user."},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"public class ListRoomCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    public static final String COMMAND_WORD \u003d \"olist\";"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all rooms\";"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"        requireNonNull(model);"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"        model.updateFilteredRoomList(PREDICATE_SHOW_ALL_ROOMS);"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"        return new CommandResult(MESSAGE_SUCCESS).setRoomCommand();"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":26}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.ViewHistoryCommand;"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.alias.AliasCommand;"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.AddIssueCommand;"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.DeleteIssueCommand;"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.EditIssueCommand;"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.FindIssueCommand;"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.ListIssueCommand;"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.DeleteResidentCommand;"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.FindResidentCommand;"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.ListResidentCommand;"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.AddRoomCommand;"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.DeleteRoomCommand;"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.EditRoomCommand;"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.FindRoomCommand;"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.ListRoomCommand;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.issue.AddIssueCommandParser;"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.issue.DeleteIssueCommandParser;"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.issue.EditIssueCommandParser;"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.issue.FindIssueCommandParser;"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.resident.AddResidentCommandParser;"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.resident.DeleteResidentCommandParser;"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.resident.EditResidentCommandParser;"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.resident.FindResidentCommandParser;"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.room.AddRoomCommandParser;"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.room.DeleteRoomCommandParser;"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.room.EditRoomCommandParser;"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.room.FindRoomCommandParser;"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":47,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":48,"author":{"gitId":"-"},"content":" */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"    public Command parseCommand(String userInput, ReadOnlyUserPrefs readOnlyUserPrefs) throws ParseException {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"        // \u003d\u003d\u003d\u003d\u003d\u003d Resident Commands \u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        case AddResidentCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"            return new AddResidentCommandParser().parse(arguments);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"        case ListResidentCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"            return new ListResidentCommand();"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"        case FindResidentCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"            return new FindResidentCommandParser().parse(arguments);"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":""},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"        case EditResidentCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"            return new EditResidentCommandParser().parse(arguments);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"        case DeleteResidentCommand.COMMAND_WORD:"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"            return new DeleteResidentCommandParser().parse(arguments);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"        // \u003d\u003d\u003d\u003d\u003d\u003d Room Commands \u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"        case AddRoomCommand.COMMAND_WORD:"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"            return new AddRoomCommandParser().parse(arguments);"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"        case FindRoomCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"            return new FindRoomCommandParser().parse(arguments);"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":""},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"        case ListRoomCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"            return new ListRoomCommand();"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":""},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"        case EditRoomCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":"            return new EditRoomCommandParser().parse(arguments);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"        case DeleteRoomCommand.COMMAND_WORD:"},{"lineNumber":104,"author":{"gitId":"DrWala"},"content":"            return new DeleteRoomCommandParser().parse(arguments);"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"stein414"},"content":"        // \u003d\u003d\u003d\u003d\u003d\u003d Issue Commands \u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"        case AddIssueCommand.COMMAND_WORD:"},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"            return new AddIssueCommandParser().parse(arguments);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"stein414"},"content":"        case ListIssueCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitId":"stein414"},"content":"            return new ListIssueCommand();"},{"lineNumber":112,"author":{"gitId":"stein414"},"content":""},{"lineNumber":113,"author":{"gitId":"stein414"},"content":"        case FindIssueCommand.COMMAND_WORD:"},{"lineNumber":114,"author":{"gitId":"stein414"},"content":"            return new FindIssueCommandParser().parse(arguments);"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":""},{"lineNumber":116,"author":{"gitId":"stein414"},"content":"        case EditIssueCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitId":"stein414"},"content":"            return new EditIssueCommandParser().parse(arguments);"},{"lineNumber":118,"author":{"gitId":"stein414"},"content":""},{"lineNumber":119,"author":{"gitId":"stein414"},"content":"        case DeleteIssueCommand.COMMAND_WORD:"},{"lineNumber":120,"author":{"gitId":"stein414"},"content":"            return new DeleteIssueCommandParser().parse(arguments);"},{"lineNumber":121,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":122,"author":{"gitId":"DrWala"},"content":"        // \u003d\u003d\u003d\u003d\u003d\u003d System Commands \u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":123,"author":{"gitId":"DrWala"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":124,"author":{"gitId":"DrWala"},"content":"            return new ClearCommand();"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"cnlinh"},"content":"        case AliasCommand.COMMAND_WORD:"},{"lineNumber":133,"author":{"gitId":"cnlinh"},"content":"            return new AliasCommandParser().parse(arguments);"},{"lineNumber":134,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":135,"author":{"gitId":"benedictkhoomw"},"content":"        case ViewHistoryCommand.COMMAND_WORD:"},{"lineNumber":136,"author":{"gitId":"benedictkhoomw"},"content":"            return new ViewHistoryCommandParser().parse(arguments);"},{"lineNumber":137,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":139,"author":{"gitId":"cnlinh"},"content":"            if (readOnlyUserPrefs.containsAlias(commandWord)) {"},{"lineNumber":140,"author":{"gitId":"cnlinh"},"content":"                Alias alias \u003d readOnlyUserPrefs.getAlias(commandWord);"},{"lineNumber":141,"author":{"gitId":"cnlinh"},"content":"                return parseCommand(alias.getCommand() + \" \" + arguments, readOnlyUserPrefs);"},{"lineNumber":142,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"cnlinh":11,"benedictkhoomw":4,"stein414":35,"colintkn":15,"-":60,"DrWala":21}},{"path":"src/main/java/seedu/address/logic/parser/AliasCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMAND;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.alias.AliasCommand;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"public class AliasCommandParser implements Parser\u003cAliasCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"     * Parses the given {@code String} of arguments in the context of the AliasCommand"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"     * and returns an AliasCommand object for execution."},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    public AliasCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"        requireAllNonNull(args);"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ALIAS, PREFIX_COMMAND);"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"        String aliasName \u003d argMultimap.getValue(PREFIX_ALIAS).orElse(\"\");"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"        String command \u003d argMultimap.getValue(PREFIX_COMMAND).orElse(\"\");"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"        if (aliasName.isEmpty() || command.isEmpty()) {"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AliasCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"        Alias alias \u003d ParserUtil.parseAlias(aliasName, command);"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"        return new AliasCommand(alias);"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":34}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":" * commands"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"    public static final Prefix PREFIX_YEAR \u003d new Prefix(\"y/\");"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"    public static final Prefix PREFIX_ROOM \u003d new Prefix(\"r/\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    public static final Prefix PREFIX_ROOM_NUMBER \u003d new Prefix(\"r/\");"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    public static final Prefix PREFIX_ROOM_TYPE \u003d new Prefix(\"t/\");"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    public static final Prefix PREFIX_ROOM_OCCUPANCY_STATUS \u003d new Prefix(\"o/\");"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    public static final Prefix PREFIX_ROOM_TAG \u003d new Prefix(\"g/\");"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    public static final Prefix PREFIX_TIMESTAMP \u003d new Prefix(\"t/\");"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"s/\");"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"    public static final Prefix PREFIX_ALIAS \u003d new Prefix(\"a/\");"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"    public static final Prefix PREFIX_COMMAND \u003d new Prefix(\"cmd/\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"cnlinh":2,"stein414":7,"colintkn":2,"-":13,"DrWala":4}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Category;"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Description;"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Status;"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Timestamp;"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.IsOccupied;"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomType;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"     * Parses a {@code String year} into an {@code Year}."},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"colintkn"},"content":"     * @throws ParseException if the given {@code year} is invalid."},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"    public static Year parseYear(String year) throws ParseException {"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"        requireNonNull(year);"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"        String trimmedYear \u003d year.trim();"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"        if (!Year.isValidYear(trimmedYear)) {"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"            throw new ParseException(Year.MESSAGE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"        return new Year(trimmedYear);"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"colintkn"},"content":"     * Parses a {@code String room} into an {@code Room}."},{"lineNumber":109,"author":{"gitId":"colintkn"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":110,"author":{"gitId":"colintkn"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"colintkn"},"content":"     * @throws ParseException if the given {@code room} is invalid."},{"lineNumber":112,"author":{"gitId":"colintkn"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"colintkn"},"content":"    public static Room parseRoom(String room) throws ParseException {"},{"lineNumber":114,"author":{"gitId":"colintkn"},"content":"        requireNonNull(room);"},{"lineNumber":115,"author":{"gitId":"colintkn"},"content":"        String trimmedRoom \u003d room.trim();"},{"lineNumber":116,"author":{"gitId":"colintkn"},"content":"        if (!Room.isValidRoom(trimmedRoom)) {"},{"lineNumber":117,"author":{"gitId":"colintkn"},"content":"            throw new ParseException(Room.MESSAGE_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitId":"colintkn"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"colintkn"},"content":"        return new Room(trimmedRoom);"},{"lineNumber":120,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":125,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":149,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"DrWala"},"content":"     * Parses a {@code String roomNumber} into a {@code RoomNumber}."},{"lineNumber":151,"author":{"gitId":"DrWala"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":152,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":153,"author":{"gitId":"DrWala"},"content":"     * @throws ParseException if the given {@code roomNumber} is invalid."},{"lineNumber":154,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"stein414"},"content":"    public static seedu.address.model.room.RoomNumber parseRoomNumber(String roomNumber) throws ParseException {"},{"lineNumber":156,"author":{"gitId":"DrWala"},"content":"        requireNonNull(roomNumber);"},{"lineNumber":157,"author":{"gitId":"DrWala"},"content":"        String trimmedRoomNumber \u003d roomNumber.trim();"},{"lineNumber":158,"author":{"gitId":"stein414"},"content":"        if (!seedu.address.model.room.RoomNumber.isValidRoomNumber(trimmedRoomNumber)) {"},{"lineNumber":159,"author":{"gitId":"stein414"},"content":"            throw new ParseException(seedu.address.model.room.RoomNumber.MESSAGE_CONSTRAINTS);"},{"lineNumber":160,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"stein414"},"content":"        return new seedu.address.model.room.RoomNumber(trimmedRoomNumber);"},{"lineNumber":162,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":164,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"DrWala"},"content":"     * Parses a {@code String roomType} into a {@code RoomType}."},{"lineNumber":166,"author":{"gitId":"DrWala"},"content":"     * Leading and trailing whitespaces will be trimmed, and text will be converted to uppercase."},{"lineNumber":167,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":168,"author":{"gitId":"DrWala"},"content":"     * @throws ParseException if the given {@code roomType} is invalid."},{"lineNumber":169,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"DrWala"},"content":"    public static RoomType parseRoomType(String roomType) throws ParseException {"},{"lineNumber":171,"author":{"gitId":"DrWala"},"content":"        requireNonNull(roomType);"},{"lineNumber":172,"author":{"gitId":"DrWala"},"content":"        String trimmedRoomType \u003d roomType.toUpperCase().trim();"},{"lineNumber":173,"author":{"gitId":"DrWala"},"content":"        if (!RoomType.isValidRoomType(trimmedRoomType)) {"},{"lineNumber":174,"author":{"gitId":"DrWala"},"content":"            throw new ParseException(RoomType.MESSAGE_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"DrWala"},"content":"        return new RoomType(trimmedRoomType);"},{"lineNumber":177,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":179,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":180,"author":{"gitId":"DrWala"},"content":"     * Parses a {@code String roomOccupancyStatus} into a {@code IsOccupied}."},{"lineNumber":181,"author":{"gitId":"DrWala"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":182,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":183,"author":{"gitId":"DrWala"},"content":"     * @throws ParseException if the given {@code roomOccupancyStatus} is invalid."},{"lineNumber":184,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":185,"author":{"gitId":"DrWala"},"content":"    public static IsOccupied parseRoomOccupancyStatus(String roomOccupancyStatus) throws ParseException {"},{"lineNumber":186,"author":{"gitId":"DrWala"},"content":"        requireNonNull(roomOccupancyStatus);"},{"lineNumber":187,"author":{"gitId":"DrWala"},"content":"        String trimmedRoomOccupancyStatus \u003d roomOccupancyStatus.trim();"},{"lineNumber":188,"author":{"gitId":"DrWala"},"content":"        if (!IsOccupied.isValidOccupancyStatus(trimmedRoomOccupancyStatus)) {"},{"lineNumber":189,"author":{"gitId":"DrWala"},"content":"            throw new ParseException(IsOccupied.MESSAGE_CONSTRAINTS);"},{"lineNumber":190,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"DrWala"},"content":"        return new IsOccupied(trimmedRoomOccupancyStatus);"},{"lineNumber":192,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":194,"author":{"gitId":"cnlinh"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dIssue Parsing Method\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":195,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":196,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":197,"author":{"gitId":"stein414"},"content":"     * Parses a {@code String roomNumber} into a {@code RoomNumber}."},{"lineNumber":198,"author":{"gitId":"stein414"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":199,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":200,"author":{"gitId":"stein414"},"content":"     * @throws ParseException if the given {@code roomNumber} is invalid."},{"lineNumber":201,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":202,"author":{"gitId":"stein414"},"content":"    public static seedu.address.model.issue.RoomNumber parseIssueRoomNumber(String roomNumber) throws ParseException {"},{"lineNumber":203,"author":{"gitId":"stein414"},"content":"        requireNonNull(roomNumber);"},{"lineNumber":204,"author":{"gitId":"stein414"},"content":"        String trimmedRoomNumber \u003d roomNumber.trim();"},{"lineNumber":205,"author":{"gitId":"stein414"},"content":"        if (!seedu.address.model.issue.RoomNumber.isValidRoomNumber(trimmedRoomNumber)) {"},{"lineNumber":206,"author":{"gitId":"stein414"},"content":"            throw new ParseException(seedu.address.model.issue.RoomNumber.MESSAGE_CONSTRAINTS);"},{"lineNumber":207,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":208,"author":{"gitId":"stein414"},"content":"        return new seedu.address.model.issue.RoomNumber(trimmedRoomNumber);"},{"lineNumber":209,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"stein414"},"content":""},{"lineNumber":211,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":212,"author":{"gitId":"stein414"},"content":"     * Parses a {@code String description} into a {@code Description}."},{"lineNumber":213,"author":{"gitId":"stein414"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":214,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":215,"author":{"gitId":"stein414"},"content":"     * @throws ParseException if the given {@code description} is invalid."},{"lineNumber":216,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":217,"author":{"gitId":"stein414"},"content":"    public static Description parseDescription(String description) throws ParseException {"},{"lineNumber":218,"author":{"gitId":"stein414"},"content":"        requireNonNull(description);"},{"lineNumber":219,"author":{"gitId":"stein414"},"content":"        String trimmedDescription \u003d description.trim();"},{"lineNumber":220,"author":{"gitId":"stein414"},"content":"        if (!Description.isValidDescription(trimmedDescription)) {"},{"lineNumber":221,"author":{"gitId":"stein414"},"content":"            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"},{"lineNumber":222,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":223,"author":{"gitId":"stein414"},"content":"        return new Description(trimmedDescription);"},{"lineNumber":224,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"stein414"},"content":""},{"lineNumber":226,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":227,"author":{"gitId":"stein414"},"content":"     * Parses a {@code String timestamp} into a {@code Timestamp}."},{"lineNumber":228,"author":{"gitId":"stein414"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":229,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":230,"author":{"gitId":"stein414"},"content":"     * @throws ParseException if the given {@code timestamp} is invalid."},{"lineNumber":231,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":232,"author":{"gitId":"stein414"},"content":"    public static Timestamp parseTimestamp(String timestamp) throws ParseException {"},{"lineNumber":233,"author":{"gitId":"stein414"},"content":"        requireNonNull(timestamp);"},{"lineNumber":234,"author":{"gitId":"stein414"},"content":"        String trimmedTimestamp \u003d timestamp.trim();"},{"lineNumber":235,"author":{"gitId":"stein414"},"content":"        if (!Timestamp.isValidTimestamp(trimmedTimestamp)) {"},{"lineNumber":236,"author":{"gitId":"stein414"},"content":"            throw new ParseException(Timestamp.MESSAGE_CONSTRAINTS);"},{"lineNumber":237,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"stein414"},"content":"        return new Timestamp(trimmedTimestamp);"},{"lineNumber":239,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"stein414"},"content":""},{"lineNumber":241,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":242,"author":{"gitId":"stein414"},"content":"     * Parses a {@code String status} into a {@code Status}."},{"lineNumber":243,"author":{"gitId":"stein414"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":244,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":245,"author":{"gitId":"stein414"},"content":"     * @throws ParseException if the given {@code status} is invalid."},{"lineNumber":246,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":247,"author":{"gitId":"stein414"},"content":"    public static Status parseStatus(String status) throws ParseException {"},{"lineNumber":248,"author":{"gitId":"stein414"},"content":"        requireNonNull(status);"},{"lineNumber":249,"author":{"gitId":"stein414"},"content":"        String trimmedStatus \u003d status.trim();"},{"lineNumber":250,"author":{"gitId":"stein414"},"content":"        if (!Status.isValidStatus(trimmedStatus)) {"},{"lineNumber":251,"author":{"gitId":"stein414"},"content":"            throw new ParseException(Status.MESSAGE_CONSTRAINTS);"},{"lineNumber":252,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":253,"author":{"gitId":"stein414"},"content":"        return new Status(trimmedStatus);"},{"lineNumber":254,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":255,"author":{"gitId":"stein414"},"content":""},{"lineNumber":256,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":257,"author":{"gitId":"stein414"},"content":"     * Parses a {@code String category} into a {@code Category}."},{"lineNumber":258,"author":{"gitId":"stein414"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":259,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":260,"author":{"gitId":"stein414"},"content":"     * @throws ParseException if the given {@code category} is invalid."},{"lineNumber":261,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":262,"author":{"gitId":"stein414"},"content":"    public static Category parseCategory(String category) throws ParseException {"},{"lineNumber":263,"author":{"gitId":"stein414"},"content":"        if (category \u003d\u003d null) {"},{"lineNumber":264,"author":{"gitId":"stein414"},"content":"            return null;"},{"lineNumber":265,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":266,"author":{"gitId":"stein414"},"content":""},{"lineNumber":267,"author":{"gitId":"stein414"},"content":"        String trimmedCategory \u003d category.trim();"},{"lineNumber":268,"author":{"gitId":"stein414"},"content":"        if (!Category.isValidCategory(trimmedCategory)) {"},{"lineNumber":269,"author":{"gitId":"stein414"},"content":"            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"},{"lineNumber":270,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":271,"author":{"gitId":"stein414"},"content":"        return new Category(trimmedCategory);"},{"lineNumber":272,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":273,"author":{"gitId":"stein414"},"content":""},{"lineNumber":274,"author":{"gitId":"cnlinh"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dAlias Parsing Method\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":275,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":276,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":277,"author":{"gitId":"cnlinh"},"content":"     * Parses a {@code String aliasName} and {@code String command} into a {@code Alias}."},{"lineNumber":278,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName name of the alias"},{"lineNumber":279,"author":{"gitId":"cnlinh"},"content":"     * @param command content of the command"},{"lineNumber":280,"author":{"gitId":"cnlinh"},"content":"     * @throws ParseException if the inputs are invalid"},{"lineNumber":281,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":282,"author":{"gitId":"cnlinh"},"content":"    public static Alias parseAlias(String aliasName, String command) throws ParseException {"},{"lineNumber":283,"author":{"gitId":"cnlinh"},"content":"        if (!Alias.isValidName(aliasName)) {"},{"lineNumber":284,"author":{"gitId":"cnlinh"},"content":"            throw new ParseException(Alias.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":285,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":286,"author":{"gitId":"cnlinh"},"content":"        return new Alias(aliasName, command);"},{"lineNumber":287,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":288,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"cnlinh":18,"stein414":86,"colintkn":35,"-":105,"DrWala":44}},{"path":"src/main/java/seedu/address/logic/parser/ViewHistoryCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.ViewHistoryCommand;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":" * Parses input arguments and creates a new {@code ViewHistoryCommand} object."},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"public class ViewHistoryCommandParser implements Parser\u003cViewHistoryCommand\u003e {"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    private static boolean isInvalidCount(int count) {"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"        return count \u003c\u003d 0;"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code ViewHistoryCommand}"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"     * and returns a {@code ViewHistoryCommand} object for execution."},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"     * @param args The arguments to be parsed."},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The parsed {@code ViewHistoryCommand}."},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws ParseException If the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    public ViewHistoryCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        if (args \u003d\u003d null || args.isEmpty()) {"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"            return new ViewHistoryCommand();"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"            int count \u003d Integer.parseInt(args.trim());"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"            if (isInvalidCount(count)) {"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"                throw new ParseException("},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewHistoryCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"            return new ViewHistoryCommand(count);"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"            throw new ParseException("},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewHistoryCommand.MESSAGE_USAGE), nfe);"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":45}},{"path":"src/main/java/seedu/address/logic/parser/issue/AddIssueCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.parser.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":""},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":""},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.AddIssueCommand;"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Category;"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Description;"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.IssueStatus;"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.RoomNumber;"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Status;"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Timestamp;"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":""},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":" * Parses input arguments and creates a new AddIssueCommand object"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"public class AddIssueCommandParser implements Parser\u003cAddIssueCommand\u003e {"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":""},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"     * Parses the given {@code String} of arguments in the context of the AddIssueCommand"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"     * and returns an AddIssueCommand object for execution."},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"    public AddIssueCommand parse(String args) throws ParseException {"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ROOM_NUMBER, PREFIX_DESCRIPTION,"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"                PREFIX_TIMESTAMP, PREFIX_STATUS, PREFIX_CATEGORY);"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":""},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_ROOM_NUMBER, PREFIX_DESCRIPTION)"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIssueCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":""},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"        RoomNumber roomNumber \u003d ParserUtil.parseIssueRoomNumber(argMultimap.getValue(PREFIX_ROOM_NUMBER).get());"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"        Timestamp timestamp \u003d ParserUtil"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"                .parseTimestamp(argMultimap.getValue(PREFIX_TIMESTAMP).orElse(new Timestamp().toString()));"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"        Status status \u003d ParserUtil"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"                .parseStatus(argMultimap.getValue(PREFIX_STATUS).orElse(IssueStatus.Pending.toString()));"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        Category category \u003d ParserUtil"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"                .parseCategory(argMultimap.getValue(PREFIX_CATEGORY).orElse(Category.NO_CATEGORY_NAME));"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":""},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"        Issue issue \u003d new Issue(roomNumber, description, timestamp, status, category);"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":""},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"        return new AddIssueCommand(issue);"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":""},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":""},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":69}},{"path":"src/main/java/seedu/address/logic/parser/issue/DeleteIssueCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.parser.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":""},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.DeleteIssueCommand;"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":""},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":" * Parses input arguments and creates a new DeleteIssueCommand object"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"public class DeleteIssueCommandParser implements Parser\u003cDeleteIssueCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":""},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteIssueCommand"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"     * and returns a DeleteIssueCommand object for execution."},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    public DeleteIssueCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"            return new DeleteIssueCommand(index);"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"        } catch (ParseException pe) {"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteIssueCommand.MESSAGE_USAGE), pe);"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":""},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":32}},{"path":"src/main/java/seedu/address/logic/parser/issue/EditIssueCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.parser.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":""},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.EditIssueCommand;"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.EditIssueCommand.EditIssueDescriptor;"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":""},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":" * Parses input arguments and creates a new EditIssueCommand object"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"public class EditIssueCommandParser implements Parser\u003cEditIssueCommand\u003e {"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":""},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"     * Parses the given {@code String} of arguments in the context of the EditIssueCommand"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"     * and returns an EditIssueCommand object for execution."},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    public EditIssueCommand parse(String args) throws ParseException {"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        requireNonNull(args);"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ROOM_NUMBER, PREFIX_DESCRIPTION,"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"                PREFIX_TIMESTAMP,"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"                PREFIX_STATUS, PREFIX_CATEGORY);"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":""},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        Index index;"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":""},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"        } catch (ParseException pe) {"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditIssueCommand.MESSAGE_USAGE), pe);"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":""},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"        EditIssueDescriptor editIssueDescriptor \u003d new EditIssueDescriptor();"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"        if (argMultimap.getValue(PREFIX_ROOM_NUMBER).isPresent()) {"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"            editIssueDescriptor"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"                    .setRoomNumber(ParserUtil.parseIssueRoomNumber(argMultimap.getValue(PREFIX_ROOM_NUMBER).get()));"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"            editIssueDescriptor"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"                    .setDescription(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"        if (argMultimap.getValue(PREFIX_TIMESTAMP).isPresent()) {"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"            editIssueDescriptor.setTimestamp(ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_TIMESTAMP).get()));"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"            editIssueDescriptor.setStatus(ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get()));"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"            editIssueDescriptor.setCategory(ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":""},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"        if (!editIssueDescriptor.isAnyFieldEdited()) {"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"            throw new ParseException(EditIssueCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":""},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"        return new EditIssueCommand(index, editIssueDescriptor);"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":""},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":71}},{"path":"src/main/java/seedu/address/logic/parser/issue/FindIssueCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.parser.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":""},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":""},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.FindIssueCommand;"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.RoomNumberContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":""},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":" * Parses input arguments and creates a new FindIssueCommand object"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"public class FindIssueCommandParser implements Parser\u003cFindIssueCommand\u003e {"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":""},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"     * Parses the given {@code String} of arguments in the context of the FindIssueCommand"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"     * and returns a FindIssueCommand object for execution."},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public FindIssueCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindIssueCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":""},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":""},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        return new FindIssueCommand(new RoomNumberContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":""},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":35}},{"path":"src/main/java/seedu/address/logic/parser/resident/AddResidentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.parser.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":" * Parses input arguments and creates a new AddResidentCommand object"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"public class AddResidentCommandParser implements Parser\u003cAddResidentCommand\u003e {"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"     * Parses the given {@code String} of arguments in the context of the AddResidentCommand"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"     * and returns an AddResidentCommand object for execution."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"    public AddResidentCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_YEAR, PREFIX_ROOM);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_YEAR)"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddResidentCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        Year year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"        Room room \u003d ParserUtil.parseRoom(argMultimap.getValue(PREFIX_ROOM).orElse(Room.UNALLOCATED_REGEX));"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"        Resident resident \u003d new Resident(name, phone, email, year, room);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        return new AddResidentCommand(resident);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":28,"-":37}},{"path":"src/main/java/seedu/address/logic/parser/resident/DeleteResidentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.parser.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.DeleteResidentCommand;"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":" * Parses input arguments and creates a new DeleteResidentCommand object"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"public class DeleteResidentCommandParser implements Parser\u003cDeleteResidentCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteResidentCommand"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"     * and returns a DeleteResidentCommand object for execution."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    public DeleteResidentCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"            return new DeleteResidentCommand(index);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteResidentCommand.MESSAGE_USAGE), pe);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":11,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/resident/EditResidentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.parser.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand.EditResidentDescriptor;"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":" * Parses input arguments and creates a new EditResidentCommand object"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"public class EditResidentCommandParser implements Parser\u003cEditResidentCommand\u003e {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"     * Parses the given {@code String} of arguments in the context of the EditResidentCommand"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"     * and returns an EditResidentCommand object for execution."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"    public EditResidentCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_YEAR, PREFIX_ROOM);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"                EditResidentCommand.MESSAGE_USAGE), pe);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor editResidentDescriptor \u003d new EditResidentDescriptor();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"            editResidentDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"            editResidentDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"            editResidentDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        if (argMultimap.getValue(PREFIX_YEAR).isPresent()) {"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"            editResidentDescriptor.setYear(ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get()));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        if (argMultimap.getValue(PREFIX_ROOM).isPresent()) {"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"            editResidentDescriptor.setRoom(ParserUtil.parseRoom(argMultimap.getValue(PREFIX_ROOM).get()));"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        if (!editResidentDescriptor.isAnyFieldEdited()) {"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"            throw new ParseException(EditResidentCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"        return new EditResidentCommand(index, editResidentDescriptor);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":30,"-":36}},{"path":"src/main/java/seedu/address/logic/parser/resident/FindResidentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.parser.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.FindResidentCommand;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.NameContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":" * Parses input arguments and creates a new FindResidentCommand object"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"public class FindResidentCommandParser implements Parser\u003cFindResidentCommand\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"     * Parses the given {@code String} of arguments in the context of the FindResidentCommand"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"     * and returns a FindResidentCommand object for execution."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    public FindResidentCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindResidentCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        return new FindResidentCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":11,"-":23}},{"path":"src/main/java/seedu/address/logic/parser/room/AddRoomCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.parser.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_OCCUPANCY_STATUS;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TAG;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TYPE;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.AddRoomCommand;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.IsOccupied;"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomNumber;"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomType;"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":" * Parses input arguments and creates a new AddRoomCommand object"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"public class AddRoomCommandParser implements Parser\u003cAddRoomCommand\u003e {"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"     * Parses the given {@code String} of arguments in the context of the AddRoomCommand"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"     * and returns an AddRoomCommand object for execution."},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    public AddRoomCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_ROOM_NUMBER, PREFIX_ROOM_TYPE, PREFIX_ROOM_OCCUPANCY_STATUS,"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"                        PREFIX_ROOM_TAG);"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_ROOM_NUMBER, PREFIX_ROOM_TYPE, PREFIX_ROOM_OCCUPANCY_STATUS)"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRoomCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"        RoomNumber roomNumber \u003d ParserUtil.parseRoomNumber(argMultimap.getValue(PREFIX_ROOM_NUMBER).get());"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        RoomType roomType \u003d ParserUtil.parseRoomType(argMultimap.getValue(PREFIX_ROOM_TYPE).get());"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        IsOccupied roomOccupancyStatus \u003d"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"                ParserUtil.parseRoomOccupancyStatus(argMultimap.getValue(PREFIX_ROOM_OCCUPANCY_STATUS).get());"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_ROOM_TAG));"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        Room room \u003d new Room(roomNumber, roomType, roomOccupancyStatus, tagList);"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"        return new AddRoomCommand(room);"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":65}},{"path":"src/main/java/seedu/address/logic/parser/room/DeleteRoomCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.parser.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.DeleteRoomCommand;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":" * Parses input arguments and creates a new DeleteRoomCommand object"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"public class DeleteRoomCommandParser implements Parser\u003cDeleteRoomCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteRoomCommand"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"     * and returns a DeleteRoomCommand object for execution."},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    public DeleteRoomCommand parse(String userInput) throws ParseException {"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"            Index index \u003d ParserUtil.parseIndex(userInput);"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"            return new DeleteRoomCommand(index);"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"        } catch (ParseException pe) {"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRoomCommand.MESSAGE_USAGE), pe);"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":31}},{"path":"src/main/java/seedu/address/logic/parser/room/EditRoomCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.parser.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_OCCUPANCY_STATUS;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TAG;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TYPE;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import java.util.Collection;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.EditRoomCommand;"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.EditRoomCommand.EditRoomDescriptor;"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":" * Parses input arguments and creates a new EditRoomCommand object"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"public class EditRoomCommandParser implements Parser\u003cEditRoomCommand\u003e {"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"     * Parses the given {@code String} of arguments in the context of the EditRoomCommand"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"     * and returns an EditRoomCommand object for execution."},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    public EditRoomCommand parse(String userInput) throws ParseException {"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        requireNonNull(userInput);"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"                ArgumentTokenizer.tokenize(userInput, PREFIX_ROOM_NUMBER, PREFIX_ROOM_TYPE,"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"                        PREFIX_ROOM_OCCUPANCY_STATUS, PREFIX_ROOM_TAG);"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        Index index;"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        } catch (ParseException pe) {"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditRoomCommand.MESSAGE_USAGE), pe);"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"        EditRoomDescriptor editRoomDescriptor \u003d new EditRoomDescriptor();"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        if (argMultimap.getValue(PREFIX_ROOM_NUMBER).isPresent()) {"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"            editRoomDescriptor"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"                    .setRoomNumber(ParserUtil.parseRoomNumber(argMultimap.getValue(PREFIX_ROOM_NUMBER).get()));"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"        if (argMultimap.getValue(PREFIX_ROOM_TYPE).isPresent()) {"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"            editRoomDescriptor"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"                    .setRoomType(ParserUtil.parseRoomType(argMultimap.getValue(PREFIX_ROOM_TYPE).get()));"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"        if (argMultimap.getValue(PREFIX_ROOM_OCCUPANCY_STATUS).isPresent()) {"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"            editRoomDescriptor.setIsOccupied(ParserUtil.parseRoomOccupancyStatus(argMultimap"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"                            .getValue(PREFIX_ROOM_OCCUPANCY_STATUS).get()));"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_ROOM_TAG)).ifPresent(editRoomDescriptor::setTags);"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"        if (!editRoomDescriptor.isAnyFieldEdited()) {"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"            throw new ParseException(EditRoomCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"        return new EditRoomCommand(index, editRoomDescriptor);"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"        assert tags !\u003d null;"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"            return Optional.empty();"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":87}},{"path":"src/main/java/seedu/address/logic/parser/room/FindRoomCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.parser.room;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.FindRoomCommand;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomNumberContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"public class FindRoomCommandParser implements Parser\u003cFindRoomCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"     * Parses the given {@code String} of arguments in the context of the FindRoomCommand"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"     * and returns a FindRoomCommand object for execution."},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    public FindRoomCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindRoomCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"        return new FindRoomCommand(new RoomNumberContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":20,"DrWala":11}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.IssueList;"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.UniqueResidentList;"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.UniqueRoomList;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":" * Duplicates are not allowed (by .isSameResident comparison)"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    private final UniqueResidentList residents;"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    private final UniqueRoomList rooms;"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    private final IssueList issues;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * among constructors."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        residents \u003d new UniqueResidentList();"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        rooms \u003d new UniqueRoomList();"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        issues \u003d new IssueList();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"    public AddressBook() {"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"     * Creates an AddressBook using the Residents in the {@code toBeCopied}"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"     * Replaces the contents of the resident list with {@code residents}."},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"     * {@code residents} must not contain duplicate residents."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"    public void setResidents(List\u003cResident\u003e residents) {"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        this.residents.setResidents(residents);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"    public void setRooms(List\u003cRoom\u003e rooms) {"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"        this.rooms.setRooms(rooms);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"     * Replaces the contents of the issue list with {@code issues}."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"    public void setIssues(List\u003cIssue\u003e issues) {"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"        this.issues.setIssues(issues);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"    //// resident-level operations"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"     * Returns true if a resident with the same identity as {@code resident} exists in the address book."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"    public boolean hasResident(Resident resident) {"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"        requireNonNull(resident);"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"        return residents.contains(resident);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"     * Adds a resident to the address book."},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"     * The resident must not already exist in the address book."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"    public void addResident(Resident p) {"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"        residents.add(p);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"     * Replaces the given resident {@code target} in the list with {@code editedResident}."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"     * The resident identity of {@code editedResident} must not be the same"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"     * as another existing resident in the address book."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"    public void setResident(Resident target, Resident editedResident) {"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"        requireNonNull(editedResident);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"        residents.setResident(target, editedResident);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"    public void removeResident(Resident key) {"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"        residents.remove(key);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"    //// room-level operations"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":"     * Returns true if a room with the same identity as {@code room} exists SunRez."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"DrWala"},"content":"    public boolean hasRoom(Room room) {"},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":"        requireNonNull(room);"},{"lineNumber":115,"author":{"gitId":"DrWala"},"content":"        return rooms.contains(room);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"DrWala"},"content":"     * Adds a room to SunRez."},{"lineNumber":120,"author":{"gitId":"DrWala"},"content":"     * The room must not already exist in SunRez."},{"lineNumber":121,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"DrWala"},"content":"    public void addRoom(Room room) {"},{"lineNumber":123,"author":{"gitId":"DrWala"},"content":"        rooms.add(room);"},{"lineNumber":124,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":126,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"DrWala"},"content":"     * Replaces the given room {@code target} in the list with {@code editedRoom}."},{"lineNumber":128,"author":{"gitId":"DrWala"},"content":"     * {@code target} must exist in SunRez."},{"lineNumber":129,"author":{"gitId":"DrWala"},"content":"     * The room identity of {@code editedRoom} must not be the same as another existing room in SunRez."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"DrWala"},"content":"    public void setRoom(Room target, Room editedRoom) {"},{"lineNumber":132,"author":{"gitId":"DrWala"},"content":"        requireNonNull(editedRoom);"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"DrWala"},"content":"        rooms.setRoom(target, editedRoom);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":139,"author":{"gitId":"DrWala"},"content":"     * {@code Room} must exist in SunRez."},{"lineNumber":140,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"DrWala"},"content":"    public void removeRoom(Room key) {"},{"lineNumber":142,"author":{"gitId":"DrWala"},"content":"        rooms.remove(key);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"DrWala"},"content":"    //// meta methods"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"DrWala"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"DrWala"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":151,"author":{"gitId":"DrWala"},"content":"        requireNonNull(newData);"},{"lineNumber":152,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":153,"author":{"gitId":"DrWala"},"content":"        setResidents(newData.getResidentList());"},{"lineNumber":154,"author":{"gitId":"DrWala"},"content":"        setRooms(newData.getRoomList());"},{"lineNumber":155,"author":{"gitId":"stein414"},"content":"        setIssues(newData.getIssueList());"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"stein414"},"content":"    //// issue-level operations"},{"lineNumber":159,"author":{"gitId":"stein414"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"stein414"},"content":"     * Adds a issue to the address book."},{"lineNumber":162,"author":{"gitId":"stein414"},"content":"     * The issue must not already exist in the address book."},{"lineNumber":163,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"stein414"},"content":"    public void addIssue(Issue issue) {"},{"lineNumber":165,"author":{"gitId":"stein414"},"content":"        issues.add(issue);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"stein414"},"content":"     * Replaces the given issue {@code target} in the list with"},{"lineNumber":170,"author":{"gitId":"stein414"},"content":"     * {@code editedIssue}."},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":172,"author":{"gitId":"stein414"},"content":"     * The issue identity of {@code editedIssue} must not be the same as another"},{"lineNumber":173,"author":{"gitId":"stein414"},"content":"     * existing issue in the address book."},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"stein414"},"content":"    public void setIssue(Issue target, Issue editedIssue) {"},{"lineNumber":176,"author":{"gitId":"stein414"},"content":"        requireNonNull(editedIssue);"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"stein414"},"content":"        issues.setIssue(target, editedIssue);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":183,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":184,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitId":"stein414"},"content":"    public void removeIssue(Issue key) {"},{"lineNumber":186,"author":{"gitId":"stein414"},"content":"        issues.remove(key);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":193,"author":{"gitId":"stein414"},"content":"        return residents.asUnmodifiableObservableList().size() + \" residents\\n\""},{"lineNumber":194,"author":{"gitId":"stein414"},"content":"                + rooms.asUnmodifiableObservableList().size() + \" rooms\\n\""},{"lineNumber":195,"author":{"gitId":"stein414"},"content":"                + issues.asUnmodifiableObservableList().size() + \" issues\";"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":200,"author":{"gitId":"colintkn"},"content":"    public ObservableList\u003cResident\u003e getResidentList() {"},{"lineNumber":201,"author":{"gitId":"colintkn"},"content":"        return residents.asUnmodifiableObservableList();"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":205,"author":{"gitId":"DrWala"},"content":"    public ObservableList\u003cRoom\u003e getRoomList() {"},{"lineNumber":206,"author":{"gitId":"DrWala"},"content":"        return rooms.asUnmodifiableObservableList();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":210,"author":{"gitId":"stein414"},"content":"    public ObservableList\u003cIssue\u003e getIssueList() {"},{"lineNumber":211,"author":{"gitId":"stein414"},"content":"        return issues.asUnmodifiableObservableList();"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":218,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 residents.equals(((AddressBook) other).residents)"},{"lineNumber":219,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 rooms.equals(((AddressBook) other).rooms)"},{"lineNumber":220,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 issues.equals(((AddressBook) other).issues));"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":225,"author":{"gitId":"colintkn"},"content":"        return residents.hashCode();"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"stein414":35,"colintkn":30,"-":122,"DrWala":40}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.AliasMapping;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"    Predicate\u003cResident\u003e PREDICATE_SHOW_ALL_RESIDENTS \u003d unused -\u003e true;"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    Predicate\u003cRoom\u003e PREDICATE_SHOW_ALL_ROOMS \u003d unused -\u003e true;"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    Predicate\u003cIssue\u003e PREDICATE_SHOW_ALL_ISSUES \u003d unused -\u003e true;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"     * Returns the AddressBook"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"     * Returns true if a resident with the same identity as {@code resident} exists in the address book."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"    boolean hasResident(Resident resident);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"     * Deletes the given resident."},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"     * The resident must exist in the address book."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"    void deleteResident(Resident target);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"     * Adds the given resident."},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"     * {@code resident} must not already exist in the address book."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"    void addResident(Resident resident);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"     * Replaces the given resident {@code target} with {@code editedResident}."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"     * The resident identity of {@code editedResident} must not be the same"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"     * as another existing resident in the address book."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"    void setResident(Resident target, Resident editedResident);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"     * Returns an unmodifiable view of the filtered resident list"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"    ObservableList\u003cResident\u003e getFilteredResidentList();"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"     * Updates the filter of the filtered resident list to filter by the given {@code predicate}."},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"    void updateFilteredResidentList(Predicate\u003cResident\u003e predicate);"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":"     * Returns true if a room with the same room number as {@code room} exists in SunRez."},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"DrWala"},"content":"    boolean hasRoom(Room room);"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":106,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"     * Deletes the given room."},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"     * The room must exist in SunRez."},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"DrWala"},"content":"    void deleteRoom(Room target);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"DrWala"},"content":"     * Adds the given room."},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":"     * {@code room} must not already exist in SunRez."},{"lineNumber":115,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"DrWala"},"content":"    void addRoom(Room room);"},{"lineNumber":117,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":118,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"DrWala"},"content":"     * Replaces the given room {@code target} with {@code editedRoom}."},{"lineNumber":120,"author":{"gitId":"DrWala"},"content":"     * {@code target} must exist in SunRez."},{"lineNumber":121,"author":{"gitId":"DrWala"},"content":"     * The Room identity of {@code editedRoom} must not be the same as another existing room in SunRez."},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"DrWala"},"content":"    void setRoom(Room target, Room editedRoom);"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"DrWala"},"content":"     * Returns an unmodifiable view of the filtered room list"},{"lineNumber":127,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"DrWala"},"content":"    ObservableList\u003cRoom\u003e getFilteredRoomList();"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"DrWala"},"content":"     * Updates the filter of the filtered rooms list to filter by the given {@code predicate}."},{"lineNumber":132,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"DrWala"},"content":"    void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate);"},{"lineNumber":136,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":137,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns an unmodifiable view of the command history."},{"lineNumber":139,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":140,"author":{"gitId":"benedictkhoomw"},"content":"     * @return An unmodifiable view of the command history."},{"lineNumber":141,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"benedictkhoomw"},"content":"    ReadOnlyCommandHistory getCommandHistory();"},{"lineNumber":143,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":144,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"benedictkhoomw"},"content":"     * Appends a command history entry to the command history list."},{"lineNumber":146,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":147,"author":{"gitId":"benedictkhoomw"},"content":"     * @param commandText The command text entry to append."},{"lineNumber":148,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"benedictkhoomw"},"content":"    void appendCommandHistoryEntry(String commandText);"},{"lineNumber":150,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":151,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"stein414"},"content":"     * Deletes the given issue."},{"lineNumber":153,"author":{"gitId":"stein414"},"content":"     * The issue must exist in SunRez."},{"lineNumber":154,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"stein414"},"content":"    void deleteIssue(Issue target);"},{"lineNumber":156,"author":{"gitId":"stein414"},"content":""},{"lineNumber":157,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"stein414"},"content":"     * Adds the given issue."},{"lineNumber":159,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"stein414"},"content":"    void addIssue(Issue issue);"},{"lineNumber":161,"author":{"gitId":"stein414"},"content":""},{"lineNumber":162,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"stein414"},"content":"     * Replaces the given Issue {@code target} with {@code editedIssue}."},{"lineNumber":164,"author":{"gitId":"stein414"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":165,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"stein414"},"content":"    void setIssue(Issue target, Issue editedIssue);"},{"lineNumber":167,"author":{"gitId":"stein414"},"content":""},{"lineNumber":168,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"cnlinh"},"content":"     * Returns an unmodifiable view of the filtered issue list."},{"lineNumber":170,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"stein414"},"content":"    ObservableList\u003cIssue\u003e getFilteredIssueList();"},{"lineNumber":172,"author":{"gitId":"stein414"},"content":""},{"lineNumber":173,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":174,"author":{"gitId":"cnlinh"},"content":"     * Updates the filter of the filtered issue list to filter by the given."},{"lineNumber":175,"author":{"gitId":"stein414"},"content":"     * {@code predicate}."},{"lineNumber":176,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":177,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":178,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"stein414"},"content":"    void updateFilteredIssueList(Predicate\u003cIssue\u003e predicate);"},{"lineNumber":180,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":181,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"cnlinh"},"content":"     * Returns the current user\u0027s alias mapping."},{"lineNumber":183,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"cnlinh"},"content":"    AliasMapping getAliasMapping();"},{"lineNumber":185,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":186,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"cnlinh"},"content":"     * Set the user\u0027s alias mapping."},{"lineNumber":188,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":189,"author":{"gitId":"cnlinh"},"content":"    void setAliasMapping(AliasMapping aliasMapping);"},{"lineNumber":190,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":191,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"cnlinh"},"content":"     * Add an user-defined alias to the current mapping."},{"lineNumber":193,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":194,"author":{"gitId":"cnlinh"},"content":"    void addAlias(Alias alias);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"cnlinh":19,"benedictkhoomw":16,"stein414":33,"colintkn":17,"-":77,"DrWala":33}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.AliasMapping;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistory;"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistoryEntry;"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    private final CommandHistory commandHistory;"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"    private final FilteredList\u003cResident\u003e filteredResidents;"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    private final FilteredList\u003cRoom\u003e filteredRooms;"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    private final FilteredList\u003cIssue\u003e filteredIssues;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"     * Initializes a ModelManager with the given addressBook, userPrefs and commandHistory."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs,"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"            ReadOnlyCommandHistory commandHistory) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        requireAllNonNull(addressBook, userPrefs, commandHistory);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \", user prefs \" + userPrefs"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"                + \" and command history \" + commandHistory);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        filteredResidents \u003d new FilteredList\u003c\u003e(this.addressBook.getResidentList());"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"        filteredRooms \u003d new FilteredList\u003c\u003e(this.addressBook.getRoomList());"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"        filteredIssues \u003d new FilteredList\u003c\u003e(this.addressBook.getIssueList());"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"        this.commandHistory \u003d new CommandHistory(commandHistory);"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"        this(addressBook, userPrefs, new CommandHistory());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"colintkn"},"content":"    public boolean hasResident(Resident resident) {"},{"lineNumber":115,"author":{"gitId":"colintkn"},"content":"        requireNonNull(resident);"},{"lineNumber":116,"author":{"gitId":"colintkn"},"content":"        return addressBook.hasResident(resident);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"colintkn"},"content":"    public void deleteResident(Resident target) {"},{"lineNumber":121,"author":{"gitId":"colintkn"},"content":"        addressBook.removeResident(target);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitId":"colintkn"},"content":"    public void addResident(Resident resident) {"},{"lineNumber":126,"author":{"gitId":"colintkn"},"content":"        addressBook.addResident(resident);"},{"lineNumber":127,"author":{"gitId":"colintkn"},"content":"        updateFilteredResidentList(PREDICATE_SHOW_ALL_RESIDENTS);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":131,"author":{"gitId":"colintkn"},"content":"    public void setResident(Resident target, Resident editedResident) {"},{"lineNumber":132,"author":{"gitId":"colintkn"},"content":"        requireAllNonNull(target, editedResident);"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"colintkn"},"content":"        addressBook.setResident(target, editedResident);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"colintkn"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Resident List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"colintkn"},"content":"     * Returns an unmodifiable view of the list of {@code Resident} backed by the internal list of"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":144,"author":{"gitId":"colintkn"},"content":"    public ObservableList\u003cResident\u003e getFilteredResidentList() {"},{"lineNumber":145,"author":{"gitId":"colintkn"},"content":"        return filteredResidents;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":149,"author":{"gitId":"colintkn"},"content":"    public void updateFilteredResidentList(Predicate\u003cResident\u003e predicate) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":151,"author":{"gitId":"colintkn"},"content":"        filteredResidents.setPredicate(predicate);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"DrWala"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Room \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":155,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":156,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":157,"author":{"gitId":"DrWala"},"content":"    public boolean hasRoom(Room room) {"},{"lineNumber":158,"author":{"gitId":"DrWala"},"content":"        requireNonNull(room);"},{"lineNumber":159,"author":{"gitId":"DrWala"},"content":"        return addressBook.hasRoom(room);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":163,"author":{"gitId":"DrWala"},"content":"    public void addRoom(Room room) {"},{"lineNumber":164,"author":{"gitId":"DrWala"},"content":"        addressBook.addRoom(room);"},{"lineNumber":165,"author":{"gitId":"DrWala"},"content":"        updateFilteredRoomList(PREDICATE_SHOW_ALL_ROOMS);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":169,"author":{"gitId":"DrWala"},"content":"    public void deleteRoom(Room target) {"},{"lineNumber":170,"author":{"gitId":"DrWala"},"content":"        addressBook.removeRoom(target);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":174,"author":{"gitId":"DrWala"},"content":"    public void setRoom(Room target, Room editedRoom) {"},{"lineNumber":175,"author":{"gitId":"DrWala"},"content":"        requireAllNonNull(target, editedRoom);"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"DrWala"},"content":"        addressBook.setRoom(target, editedRoom);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"DrWala"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Room List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"DrWala"},"content":"     * Returns an unmodifiable view of the list of {@code Room} backed by the internal list of"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":187,"author":{"gitId":"DrWala"},"content":"    public ObservableList\u003cRoom\u003e getFilteredRoomList() {"},{"lineNumber":188,"author":{"gitId":"DrWala"},"content":"        return filteredRooms;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":192,"author":{"gitId":"DrWala"},"content":"    public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":194,"author":{"gitId":"DrWala"},"content":"        filteredRooms.setPredicate(predicate);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"benedictkhoomw"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Command History \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":198,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":199,"author":{"gitId":"benedictkhoomw"},"content":"    public ReadOnlyCommandHistory getCommandHistory() {"},{"lineNumber":200,"author":{"gitId":"benedictkhoomw"},"content":"        return commandHistory;"},{"lineNumber":201,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":203,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":204,"author":{"gitId":"benedictkhoomw"},"content":"    public void appendCommandHistoryEntry(String commandText) {"},{"lineNumber":205,"author":{"gitId":"benedictkhoomw"},"content":"        commandHistory.appendEntry(new CommandHistoryEntry(commandText));"},{"lineNumber":206,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":208,"author":{"gitId":"benedictkhoomw"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Issues \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":209,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":210,"author":{"gitId":"stein414"},"content":"    public void deleteIssue(Issue target) {"},{"lineNumber":211,"author":{"gitId":"stein414"},"content":"        addressBook.removeIssue(target);"},{"lineNumber":212,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"stein414"},"content":""},{"lineNumber":214,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":215,"author":{"gitId":"stein414"},"content":"    public void addIssue(Issue issue) {"},{"lineNumber":216,"author":{"gitId":"stein414"},"content":"        addressBook.addIssue(issue);"},{"lineNumber":217,"author":{"gitId":"stein414"},"content":"        updateFilteredIssueList(PREDICATE_SHOW_ALL_ISSUES);"},{"lineNumber":218,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"stein414"},"content":""},{"lineNumber":220,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":221,"author":{"gitId":"stein414"},"content":"    public void setIssue(Issue target, Issue editedIssue) {"},{"lineNumber":222,"author":{"gitId":"stein414"},"content":"        requireAllNonNull(target, editedIssue);"},{"lineNumber":223,"author":{"gitId":"stein414"},"content":""},{"lineNumber":224,"author":{"gitId":"stein414"},"content":"        addressBook.setIssue(target, editedIssue);"},{"lineNumber":225,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"stein414"},"content":""},{"lineNumber":227,"author":{"gitId":"stein414"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Issue List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":228,"author":{"gitId":"stein414"},"content":""},{"lineNumber":229,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":230,"author":{"gitId":"stein414"},"content":"     * Returns an unmodifiable view of the list of {@code Issue} backed by the internal list of"},{"lineNumber":231,"author":{"gitId":"stein414"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":232,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":233,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":234,"author":{"gitId":"stein414"},"content":"    public ObservableList\u003cIssue\u003e getFilteredIssueList() {"},{"lineNumber":235,"author":{"gitId":"stein414"},"content":"        return filteredIssues;"},{"lineNumber":236,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"stein414"},"content":""},{"lineNumber":238,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":239,"author":{"gitId":"stein414"},"content":"    public void updateFilteredIssueList(Predicate\u003cIssue\u003e predicate) {"},{"lineNumber":240,"author":{"gitId":"stein414"},"content":"        requireNonNull(predicate);"},{"lineNumber":241,"author":{"gitId":"stein414"},"content":"        filteredIssues.setPredicate(predicate);"},{"lineNumber":242,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":260,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":261,"author":{"gitId":"benedictkhoomw"},"content":"                \u0026\u0026 commandHistory.equals(other.commandHistory)"},{"lineNumber":262,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 filteredResidents.equals(other.filteredResidents)"},{"lineNumber":263,"author":{"gitId":"stein414"},"content":"                \u0026\u0026 filteredRooms.equals(other.filteredRooms)"},{"lineNumber":264,"author":{"gitId":"stein414"},"content":"                \u0026\u0026 filteredIssues.equals(other.filteredIssues);"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"cnlinh"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Alias \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":268,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":269,"author":{"gitId":"cnlinh"},"content":"    public AliasMapping getAliasMapping() {"},{"lineNumber":270,"author":{"gitId":"cnlinh"},"content":"        return userPrefs.getAliasMapping();"},{"lineNumber":271,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":273,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":274,"author":{"gitId":"cnlinh"},"content":"    public void setAliasMapping(AliasMapping aliasMapping) {"},{"lineNumber":275,"author":{"gitId":"cnlinh"},"content":"        requireNonNull(aliasMapping);"},{"lineNumber":276,"author":{"gitId":"cnlinh"},"content":"        userPrefs.setAliasMapping(aliasMapping);"},{"lineNumber":277,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":278,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":279,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":280,"author":{"gitId":"cnlinh"},"content":"    public void addAlias(Alias alias) {"},{"lineNumber":281,"author":{"gitId":"cnlinh"},"content":"        userPrefs.addAlias(alias);"},{"lineNumber":282,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":283,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"cnlinh":18,"benedictkhoomw":32,"stein414":38,"colintkn":20,"-":151,"DrWala":24}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    ObservableList\u003cResident\u003e getResidentList();"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"     * Returns an unmodifiable view of the rooms list."},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"     * This list will not contain any duplicate rooms."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    ObservableList\u003cRoom\u003e getRoomList();"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"     * Returns an unmodifiable view of the issues list."},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"    ObservableList\u003cIssue\u003e getIssueList();"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"stein414":8,"colintkn":2,"-":17,"DrWala":3}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.AliasMapping;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Alias \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"     * Returns the current alias mapping."},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"    AliasMapping getAliasMapping();"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"     * Returns an Alias based on name."},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"    Alias getAlias(String aliasName);"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"     * Checks if the current mapping contains an alias based on name."},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"    boolean containsAlias(String aliasName);"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"     * Checks if the alias name is a reserved keyword."},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"    boolean isReservedKeyword(String aliasName);"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"     * Checks if the command word is recursive."},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"    boolean isRecursiveKeyword(String commandWord);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"cnlinh":28,"-":16}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.AliasMapping;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    private AliasMapping aliasMapping \u003d new AliasMapping();"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public UserPrefs() {}"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"        setAliasMapping(newUserPrefs.getAliasMapping());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"     * Returns the current alias mapping."},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"    public AliasMapping getAliasMapping() {"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":"        return aliasMapping;"},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"     * Sets the current mapping to the specified mapping."},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"    public void setAliasMapping(AliasMapping aliasMappings) {"},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":"        requireNonNull(aliasMappings);"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":"        this.aliasMapping \u003d aliasMappings;"},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":78,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"cnlinh"},"content":"     * Adds an user-defined alias to the current mapping."},{"lineNumber":80,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"cnlinh"},"content":"    public void addAlias(Alias alias) {"},{"lineNumber":82,"author":{"gitId":"cnlinh"},"content":"        requireNonNull(alias);"},{"lineNumber":83,"author":{"gitId":"cnlinh"},"content":"        aliasMapping.addAlias(alias);"},{"lineNumber":84,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":86,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"cnlinh"},"content":"     * Returns an Alias object based on alias name."},{"lineNumber":88,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"cnlinh"},"content":"    public Alias getAlias(String aliasName) {"},{"lineNumber":90,"author":{"gitId":"cnlinh"},"content":"        requireNonNull(aliasName);"},{"lineNumber":91,"author":{"gitId":"cnlinh"},"content":"        return aliasMapping.getAlias(aliasName);"},{"lineNumber":92,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":94,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"cnlinh"},"content":"     * Checks if the current mapping contains an Alias based on alias name."},{"lineNumber":96,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"cnlinh"},"content":"    public boolean containsAlias(String aliasName) {"},{"lineNumber":99,"author":{"gitId":"cnlinh"},"content":"        return aliasMapping.containsAlias(aliasName);"},{"lineNumber":100,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":102,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"cnlinh"},"content":"     * Check if the alias name is a reserved keyword."},{"lineNumber":104,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"cnlinh"},"content":"    public boolean isReservedKeyword(String aliasName) {"},{"lineNumber":106,"author":{"gitId":"cnlinh"},"content":"        requireNonNull(aliasName);"},{"lineNumber":107,"author":{"gitId":"cnlinh"},"content":"        return aliasMapping.isReservedKeyword(aliasName);"},{"lineNumber":108,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":110,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"cnlinh"},"content":"     * Check if the command word is a recursive keyword."},{"lineNumber":112,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"cnlinh"},"content":"    public boolean isRecursiveKeyword(String commandWord) {"},{"lineNumber":114,"author":{"gitId":"cnlinh"},"content":"        requireNonNull(commandWord);"},{"lineNumber":115,"author":{"gitId":"cnlinh"},"content":"        return aliasMapping.isRecursiveKeyword(commandWord);"},{"lineNumber":116,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)"},{"lineNumber":130,"author":{"gitId":"cnlinh"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"},{"lineNumber":131,"author":{"gitId":"cnlinh"},"content":"                \u0026\u0026 aliasMapping.equals(o.aliasMapping);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":136,"author":{"gitId":"cnlinh"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, aliasMapping);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"cnlinh":62,"-":84}},{"path":"src/main/java/seedu/address/model/commandhistory/CommandHistory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.model.commandhistory;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":" * Represents the command history of the application."},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"public class CommandHistory implements ReadOnlyCommandHistory {"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    private final List\u003cCommandHistoryEntry\u003e entries;"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a {@code CommandHistory} that is a copy of {@code other}."},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"     * @param other The {@code CommandHistory} to copy."},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandHistory(ReadOnlyCommandHistory other) {"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"        entries \u003d new ArrayList\u003c\u003e(other.size());"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c other.size(); i++) {"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"            entries.add(other.get(i));"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a {@code CommandHistory} with an initial list of entries."},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     * @param entries The initial list of entries."},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandHistory(List\u003cCommandHistoryEntry\u003e entries) {"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        this.entries \u003d new ArrayList\u003c\u003e(entries);"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a {@code CommandHistory} with an empty initial list of entries."},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandHistory() {"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"        this(new ArrayList\u003c\u003e());"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"     * Appends the {@code CommandHistoryEntry} to the end of the command history."},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"     * @param entry The entry to append."},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"    public void appendEntry(CommandHistoryEntry entry) {"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"        entries.add(entry);"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"     * Two {@code CommandHistory} objects are equal when all entries are equal and in the same order."},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"     * @param other Other object to compare with."},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"     * @return True if equal. False otherwise."},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"            return true;"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"        if (!(other instanceof CommandHistory)) {"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"            return false;"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory that \u003d (CommandHistory) other;"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"        return entries.equals(that.entries);"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the command history entry at the given {@code index}."},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"     * @param index The index of the entry to return."},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The command history entry at the given {@code index}."},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandHistoryEntry get(int index) {"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"        return entries.get(index);"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"    public int hashCode() {"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"        return Objects.hash(entries);"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the number of entries in this {@code CommandHistory}."},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The number of entries in this {@code CommandHistory}."},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"    public int size() {"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"        return entries.size();"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":94}},{"path":"src/main/java/seedu/address/model/commandhistory/CommandHistoryEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.model.commandhistory;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":" * Represents a command\u0027s text previously entered."},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":" * Guarantees: immutable."},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"public class CommandHistoryEntry {"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    public final String value;"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a {@code CommandHistoryEntry}"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"     * @param text The command\u0027s text. Must be non-null."},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandHistoryEntry(String text) {"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"        requireNonNull(text);"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"        this.value \u003d text;"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"                || (other instanceof CommandHistoryEntry // instanceof handles nulls"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"                \u0026\u0026 value.equals(((CommandHistoryEntry) other).value)); // state check"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    public int hashCode() {"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        return value.hashCode();"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        return value;"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":39}},{"path":"src/main/java/seedu/address/model/commandhistory/ReadOnlyCommandHistory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.model.commandhistory;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":" * Unmodifiable view of a command history."},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"public interface ReadOnlyCommandHistory {"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the number of entries in the command history."},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The number of entries in the command history."},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    int size();"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the {@code CommandHistoryEntry} at the given index."},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"     * @param index The index of the entry to return."},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The {@code CommandHistoryEntry} at the given index."},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    CommandHistoryEntry get(int index);"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":21}},{"path":"src/main/java/seedu/address/model/issue/Category.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":""},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":" * Represents an issue\u0027s category in SunRez. Guarantees: immutable; is valid as"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":" * declared in {@link #isValidCategory(String)}"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"public class Category {"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":""},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Categories should only contain alphanumeric \""},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"            + \"characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"    public static final String NO_CATEGORY_NAME \u003d \"No category\";"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"    public static final Category NO_CATEGORY \u003d new Category(NO_CATEGORY_NAME);"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":""},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    /*"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"     * The first character of the category must not be a whitespace, otherwise \" \""},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"     * (a blank string) becomes a valid input."},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":""},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public final String value;"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":""},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"     * Constructs a {@code Category}."},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"     * @param category A valid category."},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    public Category(String category) {"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"        requireNonNull(category);"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        checkArgument(isValidCategory(category), MESSAGE_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"        this.value \u003d category;"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":""},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"     * Returns true if a given string is a valid category."},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"    public static boolean isValidCategory(String test) {"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":""},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"        return value;"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":""},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"                || (other instanceof Category // instanceof handles nulls"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 value.equals(((Category) other).value)); // state check"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":""},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"        return value.hashCode();"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":""},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":60}},{"path":"src/main/java/seedu/address/model/issue/Description.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":""},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":" * Represents an issue\u0027s description in SunRez. Guarantees: immutable; is valid"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":" * as declared in {@link #isValidDescription(String)}"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"public class Description {"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":""},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions should only contain alphanumeric \""},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"            + \"characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":""},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"     * The first character of the description must not be a whitespace, otherwise"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"     * \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":""},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":""},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"     * Constructs a {@code Description}."},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"     * @param description A valid description."},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"    public Description(String description) {"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        requireNonNull(description);"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"        this.value \u003d description;"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":""},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"     * Returns true if a given string is a valid description."},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"    public static boolean isValidDescription(String test) {"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":""},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"        return value;"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":""},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"                || (other instanceof Description // instanceof handles nulls"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 value.equals(((Description) other).value)); // state check"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":""},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":""},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":58}},{"path":"src/main/java/seedu/address/model/issue/Issue.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":""},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import java.util.UUID;"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":""},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":" * Represents a Issue in the address book. Guarantees: details are present and"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":" * not null, field values are validated, immutable."},{"lineNumber":11,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"public class Issue implements Comparable\u003cIssue\u003e {"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":""},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"    // Identity fields"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"    private final String id;"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":""},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    // Data fields"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"    private final RoomNumber roomNumber;"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"    private final Description description;"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    private final Timestamp timestamp;"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    private final Status status;"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    private final Category category;"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":""},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"     * Every field must be present and not null."},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"    public Issue(RoomNumber roomNumber, Description description, Timestamp timestamp, Status status,"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"            Category category) {"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        requireAllNonNull(roomNumber, description, timestamp, status, category);"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"        this.id \u003d UUID.randomUUID().toString();"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"        this.roomNumber \u003d roomNumber;"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        this.description \u003d description;"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"        this.timestamp \u003d timestamp;"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        this.status \u003d status;"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"        this.category \u003d category;"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":""},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"    public String getId() {"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"        return this.id;"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":""},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    public RoomNumber getRoomNumber() {"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"        return this.roomNumber;"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":""},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"    public Description getDescription() {"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"        return this.description;"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":""},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"    public Timestamp getTimestamp() {"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"        return this.timestamp;"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":""},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"    public Status getStatus() {"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"        return this.status;"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":""},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"     * Returns an immutable category set, which throws"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"     * {@code UnsupportedOperationException} if modification is attempted."},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"    public Category getCategory() {"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"        return this.category;"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":""},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"     * Returns true if both issues have the same name. This defines a weaker notion"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"     * of equality between two issues."},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"    public boolean isSameIssue(Issue otherIssue) {"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"        if (otherIssue \u003d\u003d this) {"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"            return true;"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":""},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"        return otherIssue !\u003d null \u0026\u0026 otherIssue.getId().equals(getId());"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":""},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"     * Returns true if both issues have the same identity and data fields. This"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"     * defines a stronger notion of equality between two issues."},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"            return true;"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":""},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"        if (!(other instanceof Issue)) {"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"            return false;"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":""},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"        Issue otherIssue \u003d (Issue) other;"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"        return otherIssue.getId().equals(getId()) \u0026\u0026 otherIssue.getRoomNumber().equals(getRoomNumber())"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"                \u0026\u0026 otherIssue.getDescription().equals(getDescription())"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"                \u0026\u0026 otherIssue.getTimestamp().equals(getTimestamp()) \u0026\u0026 otherIssue.getStatus().equals(getStatus())"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"                \u0026\u0026 otherIssue.getCategory().equals(getCategory());"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":""},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"    public int hashCode() {"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"        return Objects.hash(roomNumber, description, timestamp, status, category);"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"stein414"},"content":""},{"lineNumber":105,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":"    public String toString() {"},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"        builder.append(getRoomNumber())"},{"lineNumber":109,"author":{"gitId":"stein414"},"content":"                .append(\"; Description: \").append(getDescription())"},{"lineNumber":110,"author":{"gitId":"stein414"},"content":"                .append(\"; Timestamp: \").append(getTimestamp())"},{"lineNumber":111,"author":{"gitId":"stein414"},"content":"                .append(\"; Status: \").append(getStatus())"},{"lineNumber":112,"author":{"gitId":"stein414"},"content":"                .append(\"; Category: \").append(getCategory());"},{"lineNumber":113,"author":{"gitId":"stein414"},"content":""},{"lineNumber":114,"author":{"gitId":"stein414"},"content":"        return builder.toString();"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"stein414"},"content":""},{"lineNumber":117,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":118,"author":{"gitId":"stein414"},"content":"    public int compareTo(Issue other) {"},{"lineNumber":119,"author":{"gitId":"stein414"},"content":"        return timestamp.compareTo(other.timestamp);"},{"lineNumber":120,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"stein414"},"content":""},{"lineNumber":122,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":122}},{"path":"src/main/java/seedu/address/model/issue/IssueList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":""},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":""},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.exceptions.IssueNotFoundException;"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":""},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":" * A list of issues that does not allow nulls."},{"lineNumber":15,"author":{"gitId":"stein414"},"content":" *"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":" * Supports a minimal set of list operations."},{"lineNumber":17,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"public class IssueList implements Iterable\u003cIssue\u003e {"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":""},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    private final ObservableList\u003cIssue\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    private final ObservableList\u003cIssue\u003e internalUnmodifiableList \u003d FXCollections"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"            .unmodifiableObservableList(internalList);"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":""},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"     * Returns true if the list contains an equivalent issue as the given argument."},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"    public boolean contains(Issue toCheck) {"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"        requireNonNull(toCheck);"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        return internalList.stream().anyMatch(toCheck::isSameIssue);"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":""},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"     * Adds a issue to the list."},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"     * The issue must not already exist in the list."},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"    public void add(Issue toAdd) {"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        requireNonNull(toAdd);"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"        internalList.add(toAdd);"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"        FXCollections.sort(internalList);"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":""},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"     * Replaces the issue {@code target} in the list with {@code editedIssue}."},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"     * {@code target} must exist in the list."},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"     * The issue identity of {@code editedIssue} must not be the same as another"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"     * existing issue in the list."},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"    public void setIssue(Issue target, Issue editedIssue) {"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"        requireAllNonNull(target, editedIssue);"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":""},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"            throw new IssueNotFoundException();"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":""},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"        internalList.set(index, editedIssue);"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"        FXCollections.sort(internalList);"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":""},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"     * Removes the equivalent issue from the list."},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"     * The issue must exist in the list."},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"    public void remove(Issue toRemove) {"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"        requireNonNull(toRemove);"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"            throw new IssueNotFoundException();"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":""},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"    public void setIssues(IssueList replacement) {"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"        requireNonNull(replacement);"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"        FXCollections.sort(internalList);"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":""},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"     * Replaces the contents of this list with {@code issues}."},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"     * {@code issues} must not contain duplicate issues."},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"    public void setIssues(List\u003cIssue\u003e issues) {"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"        requireAllNonNull(issues);"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":""},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"        internalList.setAll(issues);"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"        FXCollections.sort(internalList);"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":""},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"    public ObservableList\u003cIssue\u003e asUnmodifiableObservableList() {"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"        return internalUnmodifiableList;"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":""},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"    public Iterator\u003cIssue\u003e iterator() {"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"        return internalList.iterator();"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":""},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"                || (other instanceof IssueList // instanceof handles nulls"},{"lineNumber":104,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 internalList.equals(((IssueList) other).internalList));"},{"lineNumber":105,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":""},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"    public int hashCode() {"},{"lineNumber":109,"author":{"gitId":"stein414"},"content":"        return internalList.hashCode();"},{"lineNumber":110,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"stein414"},"content":""},{"lineNumber":112,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":112}},{"path":"src/main/java/seedu/address/model/issue/IssueStatus.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"public enum IssueStatus {"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"    Pending, Closed,"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":5}},{"path":"src/main/java/seedu/address/model/issue/RoomNumber.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":""},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":" * Represents an issue\u0027s room number in SunRez. Guarantees: immutable; is valid"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":" * as declared in {@link #isValidRoomNumber(String)}"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"public class RoomNumber {"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":""},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Room numbers be of the format ##-###[-a] \""},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"            + \"where # is a number and \u0027a\u0027 is an alphabet.\";"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":""},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"    // The room number follows the format ##-###[-a]"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    public static final String VALIDATION_REGEX \u003d \"[0-9]{2}-[0-9]{3}(-[A-F])*\";"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":""},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"    public final String value;"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":""},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"     * Constructs a {@code RoomNumber}."},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"     * @param roomNumber A valid room number."},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    public RoomNumber(String roomNumber) {"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"        requireNonNull(roomNumber);"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"        checkArgument(isValidRoomNumber(roomNumber), MESSAGE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"        this.value \u003d roomNumber;"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":""},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"     * Returns true if a given string is a valid room number."},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    public static boolean isValidRoomNumber(String test) {"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":""},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"        return value;"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":""},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"                || (other instanceof RoomNumber // instanceof handles nulls"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 value.equals(((RoomNumber) other).value)); // state check"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":""},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"        return value.hashCode();"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":""},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":55}},{"path":"src/main/java/seedu/address/model/issue/RoomNumberContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":""},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":""},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":" * Tests that a {@code Issue}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"public class RoomNumberContainsKeywordsPredicate implements Predicate\u003cIssue\u003e {"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":""},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":""},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"    public RoomNumberContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":""},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    public boolean test(Issue issue) {"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsIgnoreCase(issue.getRoomNumber().value, keyword));"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":""},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"                || (other instanceof RoomNumberContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 keywords.equals(((RoomNumberContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":""},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":32}},{"path":"src/main/java/seedu/address/model/issue/Status.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":""},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.exceptions.InvalidIssueStatusException;"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":""},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":" * Represents an issue\u0027s status in SunRez. Guarantees: immutable; is valid as"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":" * declared in {@link #isValidStatus(String)}"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"public class Status {"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":""},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Statuses should be 1 of 2 words: \""},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"            + \"\u0027Pending\u0027 or \u0027Closed\u0027. It is case-insensitive and shorthand is \u0027p\u0027 and \u0027c\u0027 respectively.\";"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":""},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    /*"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"     * The first character of the status must not be a whitespace, otherwise \" \" (a"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"     * blank string) becomes a valid input."},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    public static final String VALIDATION_REGEX \u003d \"(?i)pending|p|closed|c\";"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":""},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public final IssueStatus value;"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":""},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"     * Constructs a {@code Status}."},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"     * @param status A valid status."},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    public Status(String status) {"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"        requireNonNull(status);"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        checkArgument(isValidStatus(status), MESSAGE_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"        this.value \u003d parse(status);"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":""},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"     * Returns true if a given string is a valid status."},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"    public static boolean isValidStatus(String test) {"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":""},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"     * Retuns the IssueStatus enum of the given status"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"     * @param status"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"     * @return IssueStatus enum of status"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"    private static IssueStatus parse(String status) {"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"        String lowercaseStatus \u003d status.toLowerCase();"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"        switch (lowercaseStatus) {"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"        case \"pending\":"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        case \"p\":"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"            return IssueStatus.Pending;"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"        case \"closed\":"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"        case \"c\":"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"            return IssueStatus.Closed;"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"        default:"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"            throw new InvalidIssueStatusException(String.format(\"%s is not a valid issue status\", status));"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":""},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"        return value.toString();"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":""},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"                || (other instanceof Status // instanceof handles nulls"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 value.equals(((Status) other).value)); // state check"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":""},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"    public int hashCode() {"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"        return value.hashCode();"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":""},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":80}},{"path":"src/main/java/seedu/address/model/issue/Timestamp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":""},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":""},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":" * Represents an issue\u0027s timestamp in SunRez. Guarantees: immutable; is valid as"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":" * declared in {@link #isValidTimestamp(String)}"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"public class Timestamp implements Comparable\u003cTimestamp\u003e {"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":""},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    public static final String TIMESTAMP_PATTERN \u003d \"yyyy/M/d h:mma\";"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":""},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(TIMESTAMP_PATTERN);"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":""},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Timestamps should be in the format \""},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"            + TIMESTAMP_PATTERN + \", and it should not be blank\";"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":""},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public final LocalDateTime value;"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":""},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"     * Constructs a {@code Timestamp}."},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"    public Timestamp() {"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        value \u003d LocalDateTime.now();"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":""},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"     * Constructs a {@code Timestamp}."},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"     * @param timestamp A valid timestamp."},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"    public Timestamp(String timestamp) {"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"        requireNonNull(timestamp);"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"        timestamp \u003d timestamp.toUpperCase();"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"        checkArgument(isValidTimestamp(timestamp), MESSAGE_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"        this.value \u003d LocalDateTime.parse(timestamp, FORMATTER);"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":""},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"     * Returns true if a given string is a valid timestamp."},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"    public static boolean isValidTimestamp(String test) {"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"            LocalDateTime.parse(test.toUpperCase(), FORMATTER);"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"            return true;"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"            return false;"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":""},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"    public String toString() {"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"        return value.format(FORMATTER);"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":""},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"                || (other instanceof Timestamp // instanceof handles nulls"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 value.equals(((Timestamp) other).value)); // state check"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":""},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"    public int hashCode() {"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"        return value.hashCode();"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":""},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"    public int compareTo(Timestamp o) {"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"        return value.compareTo(o.value);"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":""},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":78}},{"path":"src/main/java/seedu/address/model/issue/exceptions/InvalidIssueStatusException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue.exceptions;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"public class InvalidIssueStatusException extends RuntimeException {"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":""},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"    public InvalidIssueStatusException(String message) {"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"        super(message);"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":""},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":9}},{"path":"src/main/java/seedu/address/model/issue/exceptions/IssueNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue.exceptions;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":" * Signals that the operation is unable to find the specified issue."},{"lineNumber":5,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"public class IssueNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"stein414":6}},{"path":"src/main/java/seedu/address/model/resident/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":" * Represents a Resident\u0027s email in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\"; // any"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param email A valid email address."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Email(String email) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        value \u003d email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":3,"-":64}},{"path":"src/main/java/seedu/address/model/resident/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":" * Represents a Resident\u0027s name in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":2,"-":57}},{"path":"src/main/java/seedu/address/model/resident/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":" * Tests that a {@code Resident}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cResident\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"    public boolean test(Resident resident) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(resident.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":5,"-":26}},{"path":"src/main/java/seedu/address/model/resident/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":" * Represents a Resident\u0027s phone number in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":2,"-":51}},{"path":"src/main/java/seedu/address/model/resident/Resident.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":" * Represents a Resident in the address book."},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"public class Resident {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    private final Year year;"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"    private final Room room;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"    public Resident(Name name, Phone phone, Email email, Year year, Room room) {"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"        requireAllNonNull(name, phone, email, year, room);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"        this.year \u003d year;"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"        this.room \u003d room;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"    public Year getYear() {"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        return year;"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"    public Room getRoom() {"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        return room;"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"     * Returns true if both residents have the same name."},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"     * This defines a weaker notion of equality between two residents."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"    public boolean isSameResident(Resident otherResident) {"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        if (otherResident \u003d\u003d this) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"        return otherResident !\u003d null"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 otherResident.getName().equals(getName());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"     * Returns true if both residents have the same identity and data fields."},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"     * This defines a stronger notion of equality between two residents."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        if (!(other instanceof Resident)) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        Resident otherResident \u003d (Resident) other;"},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":"        return otherResident.getName().equals(getName())"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 otherResident.getPhone().equals(getPhone())"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 otherResident.getEmail().equals(getEmail())"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 otherResident.getYear().equals(getYear())"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 otherResident.getRoom().equals(getRoom());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"        return Objects.hash(name, phone, email, year, room);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"                .append(getEmail())"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"                .append(\"; Year: \")"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"                .append(getYear())"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"                .append(\"; Room: \")"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"                .append(getRoom());"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":38,"-":71}},{"path":"src/main/java/seedu/address/model/resident/Room.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":" * Represents a Resident\u0027s room assigned."},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRoom(String)}"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":" */"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"public class Room {"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"            \"Room should be of the format floor-unit \""},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"            + \"1. The floor should contain 2 numeric characters\\n\""},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"            + \"2. This is followed by a \u0027-\u0027 and then a unit. \""},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"            + \"The unit must: \""},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"            + \"contain 3 numeric characters\\n\";"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"    public static final String UNALLOCATED_REGEX \u003d \"Room unallocated\";"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"    public static final String FLOOR_REGEX \u003d \"\\\\d{2}\";"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    public static final String UNIT_REGEX \u003d \"\\\\d{3}\";"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    public static final String VALIDATION_REGEX \u003d FLOOR_REGEX + \"-\" + UNIT_REGEX;"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    public final String value;"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"     * Constructs a {@code Room}."},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"     * @param room A valid room number."},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"    public Room(String room) {"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        requireNonNull(room);"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        checkArgument(isValidRoom(room), MESSAGE_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        value \u003d room;"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"     * Returns true if a given string is a valid room number."},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"    public static boolean isValidRoom(String test) {"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"        return test.matches(VALIDATION_REGEX) || test.equals(UNALLOCATED_REGEX);"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        return value;"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"                || (other instanceof seedu.address.model.resident.Room // instanceof handles nulls"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 value.equals(((seedu.address.model.resident.Room) other).value)); // state check"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"        return value.hashCode();"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"}"}],"authorContributionMap":{"colintkn":61}},{"path":"src/main/java/seedu/address/model/resident/UniqueResidentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.exceptions.DuplicateResidentException;"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.exceptions.ResidentNotFoundException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":" * A list of residents that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":" * A resident is considered unique by comparing using {@code Resident#isSameResident(Resident)}."},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":" * As such, adding and updating of resident uses Resident#isSameResident(Resident) for equality so as to"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":" * ensure that the resident being added or updated is unique in terms of identity in the UniqueResidentList."},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":" * However, the removal of a resident uses Resident#equals(Object) so"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":" * as to ensure that the resident with exactly the same fields will be removed."},{"lineNumber":21,"author":{"gitId":"-"},"content":" *"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":23,"author":{"gitId":"-"},"content":" *"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":" * @see Resident#isSameResident(Resident)"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"public class UniqueResidentList implements Iterable\u003cResident\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    private final ObservableList\u003cResident\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"    private final ObservableList\u003cResident\u003e internalUnmodifiableList \u003d"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"     * Returns true if the list contains an equivalent resident as the given argument."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    public boolean contains(Resident toCheck) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        return internalList.stream().anyMatch(toCheck::isSameResident);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"     * Adds a resident to the list."},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"     * The resident must not already exist in the list."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"    public void add(Resident toAdd) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"            throw new DuplicateResidentException();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"     * Replaces the resident {@code target} in the list with {@code editedResident}."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list."},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"     * The resident identity of {@code editedResident} must not be the same as another existing resident in the list."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"    public void setResident(Resident target, Resident editedResident) {"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"        requireAllNonNull(target, editedResident);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"            throw new ResidentNotFoundException();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"        if (!target.isSameResident(editedResident) \u0026\u0026 contains(editedResident)) {"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"            throw new DuplicateResidentException();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"        internalList.set(index, editedResident);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"     * Removes the equivalent resident from the list."},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"     * The resident must exist in the list."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"    public void remove(Resident toRemove) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"            throw new ResidentNotFoundException();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"    public void setResidents(UniqueResidentList replacement) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"     * Replaces the contents of this list with {@code residents}."},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"     * {@code residents} must not contain duplicate residents."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"    public void setResidents(List\u003cResident\u003e residents) {"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"        requireAllNonNull(residents);"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"        if (!residentsAreUnique(residents)) {"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"            throw new DuplicateResidentException();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"        internalList.setAll(residents);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"    public ObservableList\u003cResident\u003e asUnmodifiableObservableList() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"colintkn"},"content":"    public Iterator\u003cResident\u003e iterator() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return internalList.iterator();"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":116,"author":{"gitId":"colintkn"},"content":"                || (other instanceof UniqueResidentList // instanceof handles nulls"},{"lineNumber":117,"author":{"gitId":"colintkn"},"content":"                        \u0026\u0026 internalList.equals(((UniqueResidentList) other).internalList));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"colintkn"},"content":"     * Returns true if {@code residents} contains only unique residents."},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"colintkn"},"content":"    private boolean residentsAreUnique(List\u003cResident\u003e residents) {"},{"lineNumber":129,"author":{"gitId":"colintkn"},"content":"        for (int i \u003d 0; i \u003c residents.size() - 1; i++) {"},{"lineNumber":130,"author":{"gitId":"colintkn"},"content":"            for (int j \u003d i + 1; j \u003c residents.size(); j++) {"},{"lineNumber":131,"author":{"gitId":"colintkn"},"content":"                if (residents.get(i).isSameResident(residents.get(j))) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                    return false;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":49,"-":89}},{"path":"src/main/java/seedu/address/model/resident/Year.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":" * Represents a Resident\u0027s seniority in the school."},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidYear(String)}"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":" */"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"public class Year {"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"            \"Year should be a single digit numeric character from 1 to 5 inclusive\\n\";"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"    public static final String VALIDATION_REGEX \u003d \"[1-5]{1}\";"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"    public final String value;"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"     * Constructs a {@code Year}."},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"     * @param year A valid year."},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    public Year(String year) {"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"        requireNonNull(year);"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"        checkArgument(isValidYear(year), MESSAGE_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"        value \u003d year;"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"     * Returns true if a given string is a valid year."},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"    public static boolean isValidYear(String test) {"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        return value;"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"                || (other instanceof seedu.address.model.resident.Year // instanceof handles nulls"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 value.equals(((seedu.address.model.resident.Year) other).value)); // state check"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"    public int hashCode() {"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        return value.hashCode();"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"}"}],"authorContributionMap":{"colintkn":52}},{"path":"src/main/java/seedu/address/model/resident/exceptions/DuplicateResidentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":" * Signals that the operation will result in duplicate Residents (Residents are considered duplicates if they have the"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":" * same identity)."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"public class DuplicateResidentException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"    public DuplicateResidentException() {"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"        super(\"Operation would result in duplicate residents\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":6,"-":5}},{"path":"src/main/java/seedu/address/model/resident/exceptions/ResidentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":" * Signals that the operation is unable to find the specified resident."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"public class ResidentNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"colintkn":3,"-":3}},{"path":"src/main/java/seedu/address/model/room/IsOccupied.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"public class IsOccupied {"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"            \"Room occupancy status can only be y or n in lowercase alphabets\";"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"    public static final String VALIDATION_REGEX \u003d \"y|n\";"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"    public final boolean isOccupied;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"     * Constructs a {@code IsOccupied}."},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"     * @param occupancyStatus A valid occupancy status."},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    public IsOccupied(String occupancyStatus) {"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"        occupancyStatus \u003d occupancyStatus.toLowerCase();"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"        requireNonNull(occupancyStatus);"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"        checkArgument(isValidOccupancyStatus(occupancyStatus), MESSAGE_CONSTRAINTS);"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"        this.isOccupied \u003d occupancyStatus.equals(\"y\") ? true : false;"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    public static boolean isValidOccupancyStatus(String test) {"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        test \u003d test.toLowerCase();"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        return isOccupied ? \"Y\" : \"N\";"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"                || (other instanceof IsOccupied // instanceof handles nulls"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 isOccupied \u003d\u003d ((IsOccupied) other).isOccupied); // state check"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":46}},{"path":"src/main/java/seedu/address/model/room/Room.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":" * Represents a Room in the hostel management system."},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"public class Room {"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    // Room number, type, occupancy status, tags"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    private final RoomNumber roomNumber;"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    private final RoomType roomType;"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    private final IsOccupied isOccupied;"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"     * Every field must be present and not null."},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    public Room(RoomNumber roomNumber, RoomType roomType, IsOccupied isOccupied, Set\u003cTag\u003e tags) {"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"        requireAllNonNull(roomNumber, roomType, isOccupied, tags);"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        this.roomNumber \u003d roomNumber;"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"        this.roomType \u003d roomType;"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        this.isOccupied \u003d isOccupied;"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        this.tags.addAll(tags);"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    public RoomNumber getRoomNumber() {"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        return roomNumber;"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"    public RoomType getRoomType() {"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        return roomType;"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"    public IsOccupied isOccupied() {"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"        return isOccupied;"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"     * Returns true if both rooms have the same number."},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"     * This defines a weaker notion of equality between two rooms."},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"    public boolean isSameRoom(Room otherRoom) {"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"        if (otherRoom \u003d\u003d this) {"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"            return true;"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"        return otherRoom !\u003d null"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 otherRoom.getRoomNumber().equals(getRoomNumber());"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"     * Returns true if both rooms have the same identity and data fields."},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"     * This defines a stronger notion of equality between two rooms."},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"            return true;"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"        if (!(other instanceof Room)) {"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"            return false;"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"        Room otherRoom \u003d (Room) other;"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"        return otherRoom.getRoomNumber().equals(getRoomNumber())"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 otherRoom.getRoomType().equals(getRoomType())"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 otherRoom.isOccupied().equals(isOccupied())"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 otherRoom.getTags().equals(getTags());"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"    public int hashCode() {"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"        return Objects.hash(roomNumber, roomType, isOccupied, tags);"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"    public String toString() {"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"        builder.append(getRoomNumber())"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"                .append(\"; Type: \")"},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"                .append(getRoomType())"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"                .append(\"; Occupancy Status: \")"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"                .append(isOccupied());"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":104,"author":{"gitId":"DrWala"},"content":"            tags.forEach(builder::append);"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"DrWala"},"content":"        return builder.toString();"},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":109}},{"path":"src/main/java/seedu/address/model/room/RoomNumber.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":" * Represents a Room\u0027s number in the address book."},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRoomNumber(String)}"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"public class RoomNumber {"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"            \"Room numbers should only contain positive integers and dashes, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{2}-\\\\d{3}\";"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    public final String roomNumber;"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"     * Constructs a {@code RoomNumber}."},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"     * @param roomNumber A valid room number."},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    public RoomNumber(String roomNumber) {"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"        requireNonNull(roomNumber);"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"        checkArgument(isValidRoomNumber(roomNumber), MESSAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"        this.roomNumber \u003d roomNumber;"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"    public static boolean isValidRoomNumber(String test) {"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"        return roomNumber;"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"                || (other instanceof RoomNumber // instanceof handles nulls"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 roomNumber.equals(((RoomNumber) other).roomNumber)); // state check"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        return roomNumber.hashCode();"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":53}},{"path":"src/main/java/seedu/address/model/room/RoomNumberContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":" * Tests that a {@code Room}\u0027s {@code RoomNumber} matches any of the keywords given."},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"public class RoomNumberContainsKeywordsPredicate implements Predicate\u003cRoom\u003e {"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"    public RoomNumberContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    public boolean test(Room room) {"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"        return keywords.stream()"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"                .anyMatch(keyword -\u003e room.getRoomNumber().roomNumber.contains(keyword));"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"                || (other instanceof RoomNumberContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 keywords.equals(((RoomNumberContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":27}},{"path":"src/main/java/seedu/address/model/room/RoomType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.util.EnumUtil;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":" * Represents a RoomType in the hostel management system."},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"public class RoomType {"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"            \"The valid options for Room Type are: \" + String.join(\", \", EnumUtil.getNames(RoomTypeOptions.class));"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    public final RoomTypeOptions value;"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"     * Constructs a {@code RoomNumber}."},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"     * @param value A valid room type."},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    public RoomType(String value) {"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"        value \u003d value.toUpperCase();"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"        requireNonNull(value);"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"        checkArgument(isValidRoomType(value), MESSAGE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"        this.value \u003d RoomTypeOptions.valueOf(value);"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    public static boolean isValidRoomType(String test) {"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"            RoomTypeOptions.valueOf(test);"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"            return true;"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        } catch (IllegalArgumentException ex) {"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"            // Unable to parse"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"            return false;"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"        return value.toString();"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"                || (other instanceof RoomType // instanceof handles nulls"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 value.equals(((RoomType) other).value)); // state check"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"    public int hashCode() {"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"        return value.hashCode();"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":61}},{"path":"src/main/java/seedu/address/model/room/RoomTypeOptions.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"public enum RoomTypeOptions {"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"    CORRIDOR_AC,"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"    CORRIDOR_NON_AC,"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"    SUITE_AC,"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"    SUITE_NON_AC"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":8}},{"path":"src/main/java/seedu/address/model/room/UniqueRoomList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.exceptions.DuplicateRoomException;"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.exceptions.RoomNotFoundException;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":" * A list of rooms that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":" * A room is considered unique by comparing using {@code Room#isSameRoom(Room)}. As such, adding and updating of"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":" * rooms uses Room#isSameRoom(Room) for equality so as to ensure that the room being added or updated is"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":" * unique in terms of identity in the UniqueRoomList. However, the removal of a person uses Room#equals(Object) so"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":" * as to ensure that the person with exactly the same fields will be removed."},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":" * \u003cp\u003e"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":" *"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":" * @see Room#isSameRoom(Room)"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"public class UniqueRoomList implements Iterable\u003cRoom\u003e {"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    private final ObservableList\u003cRoom\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    private final ObservableList\u003cRoom\u003e internalUnmodifiableList \u003d"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"     * Returns true if the list contains an equivalent room as the given argument."},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    public boolean contains(Room toCheck) {"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        return internalList.stream().anyMatch(toCheck::isSameRoom);"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"     * Adds a room to the list."},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"     * The room must not already exist in the list."},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"    public void add(Room toAdd) {"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        requireNonNull(toAdd);"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"        if (contains(toAdd)) {"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"            throw new DuplicateRoomException();"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        internalList.add(toAdd);"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"     * Replaces the room {@code target} in the list with {@code editedRoom}."},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"     * {@code target} must exist in the list."},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"     * The Room identity of {@code editedRoom} must not be the same as another existing room in the list."},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"    public void setRoom(Room target, Room editedRoom) {"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"        requireAllNonNull(target, editedRoom);"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"            throw new RoomNotFoundException();"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"        if (!target.isSameRoom(editedRoom) \u0026\u0026 contains(editedRoom)) {"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"            throw new DuplicateRoomException();"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"        internalList.set(index, editedRoom);"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"     * Removes the equivalent room from the list."},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"     * The room must exist in the list."},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"    public void remove(Room toRemove) {"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"            throw new RoomNotFoundException();"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"    public void setRooms(UniqueRoomList replacement) {"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"        requireNonNull(replacement);"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"     * Replaces the contents of this list with {@code rooms}."},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"     * {@code rooms} must not contain duplicate rooms."},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"    public void setRooms(List\u003cRoom\u003e rooms) {"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"        requireAllNonNull(rooms);"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"        if (!roomsAreUnique(rooms)) {"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"            throw new DuplicateRoomException();"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"        internalList.setAll(rooms);"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"    public ObservableList\u003cRoom\u003e asUnmodifiableObservableList() {"},{"lineNumber":104,"author":{"gitId":"DrWala"},"content":"        return internalUnmodifiableList;"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"    public Iterator\u003cRoom\u003e iterator() {"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":"        return internalList.iterator();"},{"lineNumber":110,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":112,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":115,"author":{"gitId":"DrWala"},"content":"                || (other instanceof UniqueRoomList // instanceof handles nulls"},{"lineNumber":116,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 internalList.equals(((UniqueRoomList) other).internalList));"},{"lineNumber":117,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":119,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"DrWala"},"content":"    public int hashCode() {"},{"lineNumber":121,"author":{"gitId":"DrWala"},"content":"        return internalList.hashCode();"},{"lineNumber":122,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":124,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"DrWala"},"content":"     * Returns true if {@code rooms} contains only unique rooms."},{"lineNumber":126,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"DrWala"},"content":"    private boolean roomsAreUnique(List\u003cRoom\u003e rooms) {"},{"lineNumber":128,"author":{"gitId":"DrWala"},"content":"        for (int i \u003d 0; i \u003c rooms.size() - 1; i++) {"},{"lineNumber":129,"author":{"gitId":"DrWala"},"content":"            for (int j \u003d i + 1; j \u003c rooms.size(); j++) {"},{"lineNumber":130,"author":{"gitId":"DrWala"},"content":"                if (rooms.get(i).isSameRoom(rooms.get(j))) {"},{"lineNumber":131,"author":{"gitId":"DrWala"},"content":"                    return false;"},{"lineNumber":132,"author":{"gitId":"DrWala"},"content":"                }"},{"lineNumber":133,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"DrWala"},"content":"        return true;"},{"lineNumber":136,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":137}},{"path":"src/main/java/seedu/address/model/room/exceptions/DuplicateRoomException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room.exceptions;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":" * Signals that the operation will result in duplicate Rooms (Rooms are considered duplicates if they have the same"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":" * identity)."},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"public class DuplicateRoomException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"    public DuplicateRoomException() {"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"        super(\"Operation would result in duplicate rooms.\");"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":11}},{"path":"src/main/java/seedu/address/model/room/exceptions/RoomNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room.exceptions;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":" * Signals that the operation is unable to find the specified room."},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"public class RoomNotFoundException extends RuntimeException {"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":7}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    public static Resident[] getSampleResidents() {"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"        return new Resident[] {"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"            new Resident(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"                new Year(\"1\"),"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"                new Room(\"01-234\")),"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"            new Resident(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"                new Year(\"2\"),"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"                new Room(\"03-325\")),"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"            new Resident(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"                new Year(\"3\"),"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"                new Room(\"08-514\")),"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"            new Resident(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"                new Year(\"4\"),"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"                new Room(\"09-513\")),"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"            new Resident(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"                new Year(\"4\"),"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"                new Room(\"05-672\")),"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"            new Resident(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"                new Year(\"5\"),"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"                new Room(\"08-912\"))"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        for (Resident sampleResident : getSampleResidents()) {"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"            sampleAb.addResident(sampleResident);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":28,"-":32}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedIssue.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":""},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Category;"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Description;"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.RoomNumber;"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Status;"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Timestamp;"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":""},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":" * Jackson-friendly version of {@link Issue}."},{"lineNumber":16,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"class JsonAdaptedIssue {"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":""},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Issue\u0027s %s field is missing!\";"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":""},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    private final String roomNumber;"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    private final String description;"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    private final String timestamp;"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    private final String status;"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    private final String category;"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":""},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"     * Constructs a {@code JsonAdaptedIssue} with the given issue details."},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    @JsonCreator"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    public JsonAdaptedIssue(@JsonProperty(\"roomNumber\") String roomNumber,"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"            @JsonProperty(\"description\") String description,"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"            @JsonProperty(\"timestamp\") String timestamp,"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"            @JsonProperty(\"status\") String status,"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"            @JsonProperty(\"category\") String category) {"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"        this.roomNumber \u003d roomNumber;"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        this.description \u003d description;"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"        this.timestamp \u003d timestamp;"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"        this.status \u003d status;"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"        this.category \u003d category;"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":""},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"     * Converts a given {@code Issue} into this class for Jackson use."},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"    public JsonAdaptedIssue(Issue source) {"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"        roomNumber \u003d source.getRoomNumber().value;"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"        description \u003d source.getDescription().value;"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"        timestamp \u003d source.getTimestamp().toString();"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"        status \u003d source.getStatus().value.toString();"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"        category \u003d source.getCategory().value;"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":""},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"     * Converts this Jackson-friendly adapted issue object into the model\u0027s {@code Issue} object."},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted issue."},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"    public Issue toModelType() throws IllegalValueException {"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"        if (roomNumber \u003d\u003d null) {"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException("},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, RoomNumber.class.getSimpleName()));"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"        if (!RoomNumber.isValidRoomNumber(roomNumber)) {"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException(RoomNumber.MESSAGE_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"        final RoomNumber modelRoomNumber \u003d new RoomNumber(roomNumber);"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":""},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"        if (description \u003d\u003d null) {"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException("},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"        if (!Description.isValidDescription(description)) {"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"        final Description modelDescription \u003d new Description(description);"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":""},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"        if (timestamp \u003d\u003d null) {"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException("},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Timestamp.class.getSimpleName()));"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"        if (!Timestamp.isValidTimestamp(timestamp)) {"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException(Timestamp.MESSAGE_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"        final Timestamp modelTimestamp \u003d new Timestamp(timestamp);"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":""},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"        if (status \u003d\u003d null) {"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"        if (!Status.isValidStatus(status)) {"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException(Status.MESSAGE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"        final Status modelStatus \u003d new Status(status);"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":""},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"        if (category \u003d\u003d null) {"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException("},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Category.class.getSimpleName()));"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"        if (!Category.isValidCategory(category)) {"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"        final Category modelCategory \u003d new Category(category);"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":""},{"lineNumber":104,"author":{"gitId":"stein414"},"content":"        return new Issue(modelRoomNumber, modelDescription, modelTimestamp, modelStatus, modelCategory);"},{"lineNumber":105,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":""},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":107}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedResident.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":" * Jackson-friendly version of {@link Resident}."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"class JsonAdaptedResident {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Resident\u0027s %s field is missing!\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    private final String year;"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"    private final String room;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"     * Constructs a {@code JsonAdaptedResident} with the given resident details."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"    public JsonAdaptedResident(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"year\") String year,"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"            @JsonProperty(\"room\") String room) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        this.year \u003d year;"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"        this.room \u003d room;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"     * Converts a given {@code Resident} into this class for Jackson use."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"    public JsonAdaptedResident(Resident source) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        year \u003d source.getYear().value;"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        room \u003d source.getRoom().value;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"     * Converts this Jackson-friendly adapted resident object into the model\u0027s {@code Resident} object."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted resident."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"    public Resident toModelType() throws IllegalValueException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"        if (year \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Year.class.getSimpleName()));"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"        if (!Year.isValidYear(year)) {"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"            throw new IllegalValueException(Year.MESSAGE_CONSTRAINTS);"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"        final Year modelYear \u003d new Year(year);"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"        if (!Room.isValidRoom(room)) {"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"            throw new IllegalValueException(Room.MESSAGE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"        final Room modelRoom \u003d new Room(room);"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"        return new Resident(modelName, modelPhone, modelEmail, modelYear, modelRoom);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":38,"-":60}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"public class JsonAdaptedTag {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":46,"DrWala":1}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"import seedu.address.storage.room.JsonAdaptedRoom;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")"},{"lineNumber":23,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_DUPLICATE_RESIDENT \u003d \"Residents list contains duplicate resident(s).\";"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_DUPLICATE_ROOM \u003d \"Rooms list contains duplicate room(s).\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    private final List\u003cJsonAdaptedResident\u003e residents \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    private final List\u003cJsonAdaptedRoom\u003e rooms \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    private final List\u003cJsonAdaptedIssue\u003e issues \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given residents."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"residents\") List\u003cJsonAdaptedResident\u003e residents,"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"            @JsonProperty(\"rooms\") List\u003cJsonAdaptedRoom\u003e rooms,"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"            @JsonProperty(\"issues\") List\u003cJsonAdaptedIssue\u003e issues) {"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        this.residents.addAll(residents);"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        this.rooms.addAll(rooms);"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"        this.issues.addAll(issues);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"        residents.addAll(source.getResidentList().stream().map(JsonAdaptedResident::new).collect(Collectors.toList()));"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        rooms.addAll(source.getRoomList().stream().map(JsonAdaptedRoom::new).collect(Collectors.toList()));"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"        issues.addAll(source.getIssueList().stream().map(JsonAdaptedIssue::new).collect(Collectors.toList()));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":""},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        for (JsonAdaptedResident jsonAdaptedResident : residents) {"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"            Resident resident \u003d jsonAdaptedResident.toModelType();"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"            if (addressBook.hasResident(resident)) {"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_RESIDENT);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"            addressBook.addResident(resident);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":""},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"        for (JsonAdaptedRoom jsonAdaptedRoom : rooms) {"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"            Room room \u003d jsonAdaptedRoom.toModelType();"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"            if (addressBook.hasRoom(room)) {"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_ROOM);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"            addressBook.addRoom(room);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":""},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"        for (JsonAdaptedIssue jsonAdaptedIssue : issues) {"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"            Issue issue \u003d jsonAdaptedIssue.toModelType();"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"            addressBook.addIssue(issue);"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"stein414":14,"colintkn":11,"-":50,"DrWala":12}},{"path":"src/main/java/seedu/address/storage/room/JsonAdaptedRoom.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.storage.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.IsOccupied;"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomNumber;"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomType;"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"import seedu.address.storage.JsonAdaptedTag;"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":" * Jackson-friendly version of {@link Room}."},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"public class JsonAdaptedRoom {"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Room\u0027s %s field is missing!\";"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    private final String roomNumber;"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    private final String roomType;"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    private final String isOccupied;"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"     * Constructs a {@code JsonAdaptedRoom} with the given room details."},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    @JsonCreator"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    public JsonAdaptedRoom(@JsonProperty(\"roomNumber\") String roomNumber, @JsonProperty(\"roomType\") String roomType,"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"                           @JsonProperty(\"isOccupied\") String isOccupied,"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        this.roomNumber \u003d roomNumber;"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        this.roomType \u003d roomType;"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        this.isOccupied \u003d isOccupied;"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"     * Converts a given {@code Room} into this class for Jackson use."},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"    public JsonAdaptedRoom(Room source) {"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        this.roomNumber \u003d source.getRoomNumber().roomNumber;"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        this.roomType \u003d source.getRoomType().value.toString();"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        this.isOccupied \u003d source.isOccupied().toString();"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"     * Converts this Jackson-friendly adapted room object into the model\u0027s {@code Room} object."},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted room."},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"    public Room toModelType() throws IllegalValueException {"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"        final List\u003cTag\u003e roomTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"            roomTags.add(tag.toModelType());"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"        if (roomNumber \u003d\u003d null) {"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"            throw new IllegalValueException(String"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"                    .format(MISSING_FIELD_MESSAGE_FORMAT, RoomNumber.class.getSimpleName()));"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"        if (!RoomNumber.isValidRoomNumber(roomNumber)) {"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"            throw new IllegalValueException(RoomNumber.MESSAGE_CONSTRAINTS);"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"        final RoomNumber modelRoomNumber \u003d new RoomNumber(roomNumber);"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"        if (roomType \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"            throw new IllegalValueException(String"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"                    .format(MISSING_FIELD_MESSAGE_FORMAT, RoomType.class.getSimpleName()));"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"        if (!RoomType.isValidRoomType(roomType)) {"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"            throw new IllegalValueException(RoomType.MESSAGE_CONSTRAINTS);"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"        final RoomType modelRoomType \u003d new RoomType(roomType);"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"        if (isOccupied \u003d\u003d null) {"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"            throw new IllegalValueException(String"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"                    .format(MISSING_FIELD_MESSAGE_FORMAT, IsOccupied.class.getSimpleName()));"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"        if (!IsOccupied.isValidOccupancyStatus(isOccupied)) {"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"            throw new IllegalValueException(IsOccupied.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"        final IsOccupied modelRoomOccupancyStatus \u003d new IsOccupied(isOccupied);"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"        final Set\u003cTag\u003e modelRoomTags \u003d new HashSet\u003c\u003e(roomTags);"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"        return new Room(modelRoomNumber, modelRoomType, modelRoomOccupancyStatus, modelRoomTags);"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":100}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.function.Supplier;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.commons.util.MathUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    private final Supplier\u003cReadOnlyCommandHistory\u003e commandHistorySupplier;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"    private int commandHistoryIndex;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor} and command history supplier."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandBox(CommandExecutor commandExecutor, Supplier\u003cReadOnlyCommandHistory\u003e commandHistorySupplier) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        this.commandHistorySupplier \u003d commandHistorySupplier;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":39,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"            commandHistoryIndex \u003d commandHistorySupplier.get().size();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"     * Handles keyboard input when {@code CommandBox} is focused."},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    private void handleOnKeyPressed(KeyEvent event) {"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"        switch (event.getCode()) {"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"        case UP:"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"            event.consume();"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"            selectPreviousCommand();"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"            break;"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"        case DOWN:"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"            event.consume();"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"            selectNextCommand();"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"            break;"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"        default:"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"            break;"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"     * Selects the next command in history, if any, then displays it."},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"    private void selectNextCommand() {"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"        final ReadOnlyCommandHistory history \u003d commandHistorySupplier.get();"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"        final int size \u003d history.size();"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"        commandHistoryIndex \u003d MathUtil.clamp(commandHistoryIndex + 1, 0, size);"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"        showCommand(history, size, commandHistoryIndex);"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"     * Selects the previous command in history, if any, then displays it."},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":"    private void selectPreviousCommand() {"},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"        final ReadOnlyCommandHistory history \u003d commandHistorySupplier.get();"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"        final int size \u003d history.size();"},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"        commandHistoryIndex \u003d MathUtil.clamp(commandHistoryIndex - 1, 0, size);"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":101,"author":{"gitId":"benedictkhoomw"},"content":"        showCommand(history, size, commandHistoryIndex);"},{"lineNumber":102,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":104,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"benedictkhoomw"},"content":"     * Displays the historical command at the given index, if any."},{"lineNumber":106,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"benedictkhoomw"},"content":"    private void showCommand(ReadOnlyCommandHistory history, int size, int index) {"},{"lineNumber":108,"author":{"gitId":"benedictkhoomw"},"content":"        String cmd \u003d index \u003c 0 || index \u003e\u003d size"},{"lineNumber":109,"author":{"gitId":"benedictkhoomw"},"content":"                ? \"\""},{"lineNumber":110,"author":{"gitId":"benedictkhoomw"},"content":"                : history.get(index).value;"},{"lineNumber":111,"author":{"gitId":"benedictkhoomw"},"content":"        commandTextField.setText(cmd);"},{"lineNumber":112,"author":{"gitId":"benedictkhoomw"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":113,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands."},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @FunctionalInterface"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result."},{"lineNumber":142,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":143,"author":{"gitId":"-"},"content":"         * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":144,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":65,"-":83}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103-t14-1.github.io/tp/UserGuide.html\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"cnlinh":1,"-":101}},{"path":"src/main/java/seedu/address/ui/IssueCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":""},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":" * An UI component that displays information of a {@code Issue}."},{"lineNumber":11,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"public class IssueCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":""},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"    private static final String FXML \u003d \"IssueListCard.fxml\";"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":""},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":""},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    public final Issue issue;"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":""},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"    private HBox cardPane;"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"    private Label id;"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    private Label roomNumber;"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"    private Label description;"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"    private Label timestamp;"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"    private Label status;"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"    private Label category;"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":""},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"     * Creates a {@code IssueCode} with the given {@code Issue} and index to display."},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    public IssueCard(Issue issue, int displayedIndex) {"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"        super(FXML);"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"        this.issue \u003d issue;"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"        roomNumber.setText(issue.getRoomNumber().value);"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"        description.setText(issue.getDescription().value);"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"        timestamp.setText(issue.getTimestamp().toString());"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"        status.setText(issue.getStatus().value.toString());"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"        category.setText(issue.getCategory().value);"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":""},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"        // short circuit if same object"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"            return true;"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":""},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"        // instanceof handles nulls"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"        if (!(other instanceof IssueCard)) {"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"            return false;"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":""},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"        // state check"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"        IssueCard card \u003d (IssueCard) other;"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"                \u0026\u0026 issue.equals(card.issue);"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":72}},{"path":"src/main/java/seedu/address/ui/IssueListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":""},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":""},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":" * Panel containing the list of issues."},{"lineNumber":15,"author":{"gitId":"stein414"},"content":" */"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"public class IssueListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    private static final String FXML \u003d \"IssueListPanel.fxml\";"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(IssueListPanel.class);"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":""},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    private ListView\u003cIssue\u003e issueListView;"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":""},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"     * Creates a {@code IssueListPanel} with the given {@code ObservableList}."},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"    public IssueListPanel(ObservableList\u003cIssue\u003e issueList) {"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"        issueListView.setItems(issueList);"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        issueListView.setCellFactory(listView -\u003e new IssueListViewCell());"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":""},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Issue} using a {@code IssueCard}."},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"    class IssueListViewCell extends ListCell\u003cIssue\u003e {"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"        @Override"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        protected void updateItem(Issue issue, boolean empty) {"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"            super.updateItem(issue, empty);"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":""},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"            if (empty || issue \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"                setGraphic(null);"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"                setText(null);"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"                setGraphic(new IssueCard(issue, getIndex() + 1).getRoot());"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":""},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"}"}],"authorContributionMap":{"stein414":49}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"    private ResidentListPanel residentListPanel;"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    private RoomListPanel roomListPanel;"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"    private IssueListPanel issueListPanel;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"    private StackPane residentListPanelPlaceholder;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"    private StackPane roomListPanelPlaceholder;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"    private StackPane issueListPanelPlaceholder;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":99,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":105,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":109,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":122,"author":{"gitId":"colintkn"},"content":"        residentListPanel \u003d new ResidentListPanel(logic.getFilteredResidentList());"},{"lineNumber":123,"author":{"gitId":"colintkn"},"content":"        residentListPanelPlaceholder.getChildren().add(residentListPanel.getRoot());"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"DrWala"},"content":"        roomListPanel \u003d new RoomListPanel(logic.getFilteredRoomList());"},{"lineNumber":126,"author":{"gitId":"DrWala"},"content":"        roomListPanelPlaceholder.getChildren().add(roomListPanel.getRoot());"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"stein414"},"content":"        issueListPanel \u003d new IssueListPanel(logic.getFilteredIssueList());"},{"lineNumber":129,"author":{"gitId":"stein414"},"content":"        issueListPanelPlaceholder.getChildren().add(issueListPanel.getRoot());"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"benedictkhoomw"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic::getCommandHistory);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":171,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"colintkn"},"content":"    public ResidentListPanel getResidentListPanel() {"},{"lineNumber":182,"author":{"gitId":"colintkn"},"content":"        return residentListPanel;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":187,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":1,"stein414":5,"colintkn":6,"-":193,"DrWala":6}},{"path":"src/main/java/seedu/address/ui/ResidentCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":" * An UI component that displays information of a {@code Resident}."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"public class ResidentCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"    private static final String FXML \u003d \"ResidentListCard.fxml\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    public final Resident resident;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"    private Label year;"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"    private Label room;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"     * Creates a {@code ResidentCode} with the given {@code Resident} and index to display."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"    public ResidentCard(Resident resident, int displayedIndex) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        this.resident \u003d resident;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        name.setText(resident.getName().fullName);"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        phone.setText(resident.getPhone().value);"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"        email.setText(resident.getEmail().value);"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"        year.setText(\"Year \" + resident.getYear().value);"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"        room.setText(resident.getRoom().value);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        if (!(other instanceof ResidentCard)) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"        ResidentCard card \u003d (ResidentCard) other;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 resident.equals(card.resident);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":19,"-":53}},{"path":"src/main/java/seedu/address/ui/ResidentListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":" * Panel containing the list of residents."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"public class ResidentListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    private static final String FXML \u003d \"ResidentListPanel.fxml\";"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ResidentListPanel.class);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    private ListView\u003cResident\u003e residentListView;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"     * Creates a {@code ResidentListPanel} with the given {@code ObservableList}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    public ResidentListPanel(ObservableList\u003cResident\u003e residentList) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"        residentListView.setItems(residentList);"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"        residentListView.setCellFactory(listView -\u003e new ResidentListViewCell());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Resident} using a {@code ResidentCard}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    class ResidentListViewCell extends ListCell\u003cResident\u003e {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        protected void updateItem(Resident resident, boolean empty) {"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"            super.updateItem(resident, empty);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"            if (empty || resident \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"                setGraphic(new ResidentCard(resident, getIndex() + 1).getRoot());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":16,"-":33}},{"path":"src/main/java/seedu/address/ui/RoomCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":" * An UI component that displays information of a {@code Room}."},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"public class RoomCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    private static final String FXML \u003d \"RoomListCard.fxml\";"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    public final Room room;"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    @javafx.fxml.FXML"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    private HBox cardPane;"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    private Label id;"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    private Label roomNumber;"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    private Label roomType;"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    private Label isOccupied;"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    private Label email;"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    private FlowPane tags;"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"     * Creates a {@code RoomCard} with the given {@code Room} and index to display."},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"    public RoomCard(Room room, int displayedIndex) {"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"        super(FXML);"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        this.room \u003d room;"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        roomNumber.setText(room.getRoomNumber().roomNumber);"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        roomType.setText(room.getRoomType().value.toString());"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"        isOccupied.setText(room.isOccupied().toString());"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        room.getTags().stream()"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        // short circuit if same object"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"            return true;"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"        // instanceof handles nulls"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"        if (!(other instanceof RoomCard)) {"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"            return false;"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"        // state check"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"        RoomCard card \u003d (RoomCard) other;"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 room.equals(card.room);"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":68}},{"path":"src/main/java/seedu/address/ui/RoomListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"public class RoomListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"    private static final String FXML \u003d \"RoomListPanel.fxml\";"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(RoomListPanel.class);"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    @javafx.fxml.FXML"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    private ListView\u003cRoom\u003e roomListView;"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"     * Creates a {@code RoomListPanel} with the given {@code ObservableList}."},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    public RoomListPanel(ObservableList\u003cRoom\u003e roomList) {"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"        super(FXML);"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"        roomListView.setItems(roomList);"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"        roomListView.setCellFactory(listView -\u003e new RoomListViewCell());"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Room} using a {@code RoomCard}."},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    class RoomListViewCell extends ListCell\u003cRoom\u003e {"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        @Override"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        protected void updateItem(Room room, boolean empty) {"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"            super.updateItem(room, empty);"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"            if (empty || room \u003d\u003d null) {"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"                setGraphic(null);"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"                setText(null);"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"            } else {"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"                setGraphic(new RoomCard(room, getIndex() + 1).getRoot());"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":44}},{"path":"src/main/resources/view/CommandBox.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleOnKeyPressed\" promptText\u003d\"Enter command here...\"/\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"benedictkhoomw":1,"-":8}},{"path":"src/main/resources/view/IssueListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":""},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":""},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"        \u003cLabel fx:id\u003d\"roomNumber\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        \u003cLabel fx:id\u003d\"timestamp\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"      \u003c/HBox\u003e"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"      \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"      \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    \u003c/VBox\u003e"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"stein414":36}},{"path":"src/main/resources/view/IssueListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"  \u003cListView fx:id\u003d\"issueListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"stein414":1,"-":7}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"         title\u003d\"SunRez\" minWidth\u003d\"450\" minHeight\u003d\"1000\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        \u003cVBox fx:id\u003d\"residentList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"          \u003cStackPane fx:id\u003d\"residentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"        \u003cVBox fx:id\u003d\"roomList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"          \u003cpadding\u003e"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"          \u003c/padding\u003e"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"          \u003cStackPane fx:id\u003d\"roomListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"        \u003cVBox fx:id\u003d\"issueList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"          \u003cpadding\u003e"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"          \u003c/padding\u003e"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"          \u003cStackPane fx:id\u003d\"issueListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"benedictkhoomw":1,"stein414":5,"colintkn":2,"-":61,"DrWala":5}},{"path":"src/main/resources/view/ResidentListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"      \u003cLabel fx:id\u003d\"year\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$year\" /\u003e"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"      \u003cLabel fx:id\u003d\"room\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$room\" /\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"colintkn":2,"-":35}},{"path":"src/main/resources/view/ResidentListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"  \u003cListView fx:id\u003d\"residentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"colintkn":1,"-":7}},{"path":"src/main/resources/view/RoomListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"        \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"        \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"            \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"            \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"                    \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"                    \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"                \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"                \u003cLabel fx:id\u003d\"roomNumber\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"            \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"            \u003cLabel fx:id\u003d\"roomType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"            \u003cLabel fx:id\u003d\"isOccupied\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        \u003c/VBox\u003e"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    \u003c/GridPane\u003e"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"DrWala":35}},{"path":"src/main/resources/view/RoomListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"    \u003cListView fx:id\u003d\"roomListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"DrWala":8}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidAndValidResidentAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"  \"residents\": [ {"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"    \"name\": \"Valid Resident\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"    \"year\": \"1\","},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"    \"room\": \"01-234\""},{"lineNumber":8,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"    \"name\": \"Resident With Invalid Phone Field\","},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\","},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"    \"year\": \"1\","},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"    \"room\": \"02-234\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":9,"-":6}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidResidentAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"  \"residents\": [ {"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"    \"name\": \"Resident with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"    \"year\": \"1\","},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"    \"room\": \"Room unallocated\""},{"lineNumber":8,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":5,"-":4}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicateResidentAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"  \"residents\": ["},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"    {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"      \"name\": \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"      \"phone\": \"94351253\","},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"      \"email\": \"alice@example.com\","},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"      \"year\": \"1\","},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"      \"room\": \"01-234\""},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"    },"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"    {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      \"name\": \"Alice Pauline\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"      \"phone\": \"94351253\","},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"      \"email\": \"pauline@example.com\","},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"      \"year\": \"1\","},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"      \"room\": \"01-234\""},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"  ],"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"  \"rooms\": [],"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"  \"issues\": []"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"stein414":8,"colintkn":6,"-":6}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidResidentAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"  \"residents\": ["},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"    {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"      \"name\": \"Hans Muster\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"      \"phone\": \"9482424\","},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"      \"email\": \"invalid@email!3e\","},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"      \"year\": \"1\","},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"      \"room\": \"01-234\""},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"  ],"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"  \"rooms\": [],"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"  \"issues\": []"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"stein414":6,"colintkn":3,"-":4}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalResidentsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"  \"_comment\": \"AddressBook save file which contains the same Resident values as in TypicalResidents#getTypicalAddressBook()\","},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"  \"residents\": ["},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"    {"},{"lineNumber":5,"author":{"gitId":"-"},"content":"      \"name\": \"Alice Pauline\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"phone\": \"94351253\","},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"      \"email\": \"alice@example.com\","},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"      \"year\": \"1\","},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"      \"room\": \"01-234\""},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"    },"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"    {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      \"name\": \"Benson Meier\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"      \"phone\": \"98765432\","},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"      \"email\": \"johnd@example.com\","},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"      \"year\": \"2\","},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"      \"room\": \"02-234\""},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    },"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"    {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \"name\": \"Carl Kurz\","},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \"phone\": \"95352563\","},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"      \"email\": \"heinz@example.com\","},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"      \"year\": \"3\","},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"      \"room\": \"Room unallocated\""},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    },"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \"name\": \"Daniel Meier\","},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \"phone\": \"87652533\","},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"      \"email\": \"cornelia@example.com\","},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"      \"year\": \"4\","},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"      \"room\": \"03-234\""},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    },"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"    {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \"name\": \"Elle Meyer\","},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \"phone\": \"9482224\","},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"      \"email\": \"werner@example.com\","},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"      \"year\": \"5\","},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"      \"room\": \"04-234\""},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"    },"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"    {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      \"name\": \"Fiona Kunz\","},{"lineNumber":41,"author":{"gitId":"-"},"content":"      \"phone\": \"9482427\","},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"      \"email\": \"lydia@example.com\","},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"      \"year\": \"1\","},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"      \"room\": \"05-234\""},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"    },"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"    {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      \"name\": \"George Best\","},{"lineNumber":48,"author":{"gitId":"-"},"content":"      \"phone\": \"9482442\","},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"      \"email\": \"anna@example.com\","},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"      \"year\": \"3\","},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"      \"room\": \"06-234\""},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"  ],"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"  \"rooms\": [],"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"  \"issues\": []"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"stein414":18,"colintkn":22,"-":16}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.YEAR_DESC_AMY;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.AMY;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.ListResidentCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.ResidentBuilder;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"        String deleteCommand \u003d \"rdel 9\";"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"        String listCommand \u003d ListResidentCommand.COMMAND_WORD;"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(listCommand, ListResidentCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"        String addCommand \u003d AddResidentCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_AMY"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"                + ROOM_DESC_AMY;"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"        Resident expectedResident \u003d new ResidentBuilder(AMY).build();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"        expectedModel.appendCommandHistoryEntry(addCommand);"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"        expectedModel.addResident(expectedResident);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"    public void getFilteredResidentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":96,"author":{"gitId":"colintkn"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredResidentList().remove(0));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":1,"colintkn":19,"-":145}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.ResidentBuilder;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":" * Contains integration tests (interaction with the Model) for {@code AddResidentCommand}."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"    public void execute_newResident_success() {"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        Resident validResident \u003d new ResidentBuilder().build();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        expectedModel.addResident(validResident);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(new AddResidentCommand(validResident), model,"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"                String.format(AddResidentCommand.MESSAGE_SUCCESS, validResident), expectedModel);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    public void execute_duplicateResident_throwsCommandException() {"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        Resident residentInList \u003d model.getAddressBook().getResidentList().get(0);"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(new AddResidentCommand(residentInList), model,"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"            AddResidentCommand.MESSAGE_DUPLICATE_RESIDENT);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":14,"-":33}},{"path":"src/test/java/seedu/address/logic/commands/AddResidentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.ResidentBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"public class AddResidentCommandTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    public void constructor_nullResident_throwsNullPointerException() {"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddResidentCommand(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"    public void execute_residentAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"        ModelStubAcceptingResidentAdded modelStub \u003d new ModelStubAcceptingResidentAdded();"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        Resident validResident \u003d new ResidentBuilder().build();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        CommandResult commandResult \u003d new AddResidentCommand(validResident).execute(modelStub);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"        assertEquals(String.format(AddResidentCommand.MESSAGE_SUCCESS, validResident),"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"            commandResult.getFeedbackToUser());"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        assertEquals(Arrays.asList(validResident), modelStub.residentsAdded);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    public void execute_duplicateResident_throwsCommandException() {"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        Resident validResident \u003d new ResidentBuilder().build();"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        AddResidentCommand addCommand \u003d new AddResidentCommand(validResident);"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        ModelStub modelStub \u003d new ModelStubWithResident(validResident);"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        assertThrows(CommandException.class, AddResidentCommand.MESSAGE_DUPLICATE_RESIDENT, () -\u003e"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"                addCommand.execute(modelStub));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"        Resident alice \u003d new ResidentBuilder().withName(\"Alice\").build();"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        Resident bob \u003d new ResidentBuilder().withName(\"Bob\").build();"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        AddResidentCommand addAliceCommand \u003d new AddResidentCommand(alice);"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        AddResidentCommand addBobCommand \u003d new AddResidentCommand(bob);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"        AddResidentCommand addAliceCommandCopy \u003d new AddResidentCommand(alice);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"        // different resident -\u003e returns false"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"     * A Model stub that contains a single resident."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"    private class ModelStubWithResident extends ModelStub {"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        private final Resident resident;"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"        ModelStubWithResident(Resident resident) {"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"            requireNonNull(resident);"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"            this.resident \u003d resident;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"        public boolean hasResident(Resident resident) {"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"            requireNonNull(resident);"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"            return this.resident.isSameResident(resident);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"     * A Model stub that always accept the resident being added."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"colintkn"},"content":"    private class ModelStubAcceptingResidentAdded extends ModelStub {"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"        final ArrayList\u003cResident\u003e residentsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"        public boolean hasResident(Resident resident) {"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"            requireNonNull(resident);"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"            return residentsAdded.stream().anyMatch(resident::isSameResident);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"        public void addResident(Resident resident) {"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"            requireNonNull(resident);"},{"lineNumber":108,"author":{"gitId":"colintkn"},"content":"            residentsAdded.add(resident);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":43,"-":74}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":1,"-":31}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.EditResidentDescriptorBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"    public static final String VALID_YEAR_AMY \u003d \"1\";"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"    public static final String VALID_YEAR_BOB \u003d \"2\";"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    public static final String VALID_ROOM_AMY \u003d \"09-234\";"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"    public static final String VALID_ROOM_BOB \u003d \"10-234\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"    public static final String YEAR_DESC_AMY \u003d \" \" + PREFIX_YEAR + VALID_YEAR_AMY;"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"    public static final String YEAR_DESC_BOB \u003d \" \" + PREFIX_YEAR + VALID_YEAR_BOB;"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"    public static final String ROOM_DESC_AMY \u003d \" \" + PREFIX_ROOM + VALID_ROOM_AMY;"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"    public static final String ROOM_DESC_BOB \u003d \" \" + PREFIX_ROOM + VALID_ROOM_BOB;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"    public static final String INVALID_YEAR_DESC \u003d \" \" + PREFIX_YEAR + \"6\"; // \u00276\u0027 is out of range"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"    public static final String INVALID_ROOM_DESC \u003d \" \" + PREFIX_ROOM + \"1234\"; // missing \u0027#\u0027 and \u0027-\u0027 symbol"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"    public static final EditResidentCommand.EditResidentDescriptor DESC_AMY;"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"    public static final EditResidentCommand.EditResidentDescriptor DESC_BOB;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"        DESC_AMY \u003d new EditResidentDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"                .withYear(VALID_YEAR_AMY)"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"                .withRoom(VALID_ROOM_AMY)"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"                .build();"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"        DESC_BOB \u003d new EditResidentDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withRoom(VALID_ROOM_BOB)"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"                .build();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"     * - the address book, filtered resident list and selected resident in {@code actualModel} remain unchanged"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":111,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":112,"author":{"gitId":"colintkn"},"content":"        List\u003cResident\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredResidentList());"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":116,"author":{"gitId":"colintkn"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredResidentList());"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"colintkn"},"content":"     * Updates {@code model}\u0027s filtered list to show only the resident at the given {@code targetIndex} in the"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"colintkn"},"content":"    public static void showResidentAtIndex(Model model, Index targetIndex) {"},{"lineNumber":123,"author":{"gitId":"colintkn"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredResidentList().size());"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"colintkn"},"content":"        Resident resident \u003d model.getFilteredResidentList().get(targetIndex.getZeroBased());"},{"lineNumber":126,"author":{"gitId":"colintkn"},"content":"        final String[] splitName \u003d resident.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":127,"author":{"gitId":"colintkn"},"content":"        model.updateFilteredResidentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"colintkn"},"content":"        assertEquals(1, model.getFilteredResidentList().size());"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":37,"-":95}},{"path":"src/test/java/seedu/address/logic/commands/DeleteResidentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showResidentAtIndex;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RESIDENT;"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RESIDENT;"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.DeleteResidentCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":" * {@code DeleteResidentCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"public class DeleteResidentCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        Resident residentToDelete \u003d model.getFilteredResidentList().get(INDEX_FIRST_RESIDENT.getZeroBased());"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        DeleteResidentCommand deleteResidentCommand \u003d new DeleteResidentCommand(INDEX_FIRST_RESIDENT);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(DeleteResidentCommand.MESSAGE_DELETE_RESIDENT_SUCCESS, residentToDelete);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"        expectedModel.deleteResident(residentToDelete);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(deleteResidentCommand, model, expectedMessage, expectedModel);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredResidentList().size() + 1);"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        DeleteResidentCommand deleteResidentCommand \u003d new DeleteResidentCommand(outOfBoundIndex);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(deleteResidentCommand, model, Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        showResidentAtIndex(model, INDEX_FIRST_RESIDENT);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        Resident residentToDelete \u003d model.getFilteredResidentList().get(INDEX_FIRST_RESIDENT.getZeroBased());"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"        DeleteResidentCommand deleteResidentCommand \u003d new DeleteResidentCommand(INDEX_FIRST_RESIDENT);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(DeleteResidentCommand.MESSAGE_DELETE_RESIDENT_SUCCESS, residentToDelete);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"        expectedModel.deleteResident(residentToDelete);"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"        showNoResident(expectedModel);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(deleteResidentCommand, model, expectedMessage, expectedModel);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"        showResidentAtIndex(model, INDEX_FIRST_RESIDENT);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_RESIDENT;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getResidentList().size());"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        DeleteResidentCommand deleteResidentCommand \u003d new DeleteResidentCommand(outOfBoundIndex);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(deleteResidentCommand, model, Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"        DeleteResidentCommand deleteFirstCommand \u003d new DeleteResidentCommand(INDEX_FIRST_RESIDENT);"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"        DeleteResidentCommand deleteSecondCommand \u003d new DeleteResidentCommand(INDEX_SECOND_RESIDENT);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"        DeleteResidentCommand deleteFirstCommandCopy \u003d new DeleteResidentCommand(INDEX_FIRST_RESIDENT);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"        // different resident -\u003e returns false"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"    private void showNoResident(Model model) {"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"        model.updateFilteredResidentList(p -\u003e false);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"colintkn"},"content":"        assertTrue(model.getFilteredResidentList().isEmpty());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":35,"-":75}},{"path":"src/test/java/seedu/address/logic/commands/EditResidentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showResidentAtIndex;"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RESIDENT;"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RESIDENT;"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand.EditResidentDescriptor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.EditResidentDescriptorBuilder;"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.ResidentBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditResidentCommand."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"public class EditResidentCommandTest {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        Resident editedResident \u003d new ResidentBuilder().build();"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder(editedResident).build();"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(INDEX_FIRST_RESIDENT, descriptor);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(EditResidentCommand.MESSAGE_EDIT_RESIDENT_SUCCESS, editedResident);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        expectedModel.setResident(model.getFilteredResidentList().get(0), editedResident);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(editResidentCommand, model, expectedMessage, expectedModel);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        Index indexLastResident \u003d Index.fromOneBased(model.getFilteredResidentList().size());"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        Resident lastResident \u003d model.getFilteredResidentList().get(indexLastResident.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"        ResidentBuilder residentInList \u003d new ResidentBuilder(lastResident);"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        Resident editedResident \u003d residentInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"                .build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand.EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder()"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"                .withName(VALID_NAME_BOB)"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"                .withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(indexLastResident, descriptor);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(EditResidentCommand.MESSAGE_EDIT_RESIDENT_SUCCESS, editedResident);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"        expectedModel.setResident(lastResident, editedResident);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(editResidentCommand, model, expectedMessage, expectedModel);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(INDEX_FIRST_RESIDENT,"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"            new EditResidentCommand.EditResidentDescriptor());"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"        Resident editedResident \u003d model.getFilteredResidentList().get(INDEX_FIRST_RESIDENT.getZeroBased());"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(EditResidentCommand.MESSAGE_EDIT_RESIDENT_SUCCESS, editedResident);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(editResidentCommand, model, expectedMessage, expectedModel);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"        showResidentAtIndex(model, INDEX_FIRST_RESIDENT);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"        Resident residentInFilteredList \u003d model.getFilteredResidentList().get(INDEX_FIRST_RESIDENT.getZeroBased());"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"        Resident editedResident \u003d new ResidentBuilder(residentInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(INDEX_FIRST_RESIDENT,"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"                new EditResidentDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(EditResidentCommand.MESSAGE_EDIT_RESIDENT_SUCCESS, editedResident);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"        expectedModel.setResident(model.getFilteredResidentList().get(0), editedResident);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(editResidentCommand, model, expectedMessage, expectedModel);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"    public void execute_duplicateResidentUnfilteredList_failure() {"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"        Resident firstResident \u003d model.getFilteredResidentList().get(INDEX_FIRST_RESIDENT.getZeroBased());"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder(firstResident).build();"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(INDEX_SECOND_RESIDENT, descriptor);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(editResidentCommand, model, EditResidentCommand.MESSAGE_DUPLICATE_RESIDENT);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"colintkn"},"content":"    public void execute_duplicateResidentFilteredList_failure() {"},{"lineNumber":114,"author":{"gitId":"colintkn"},"content":"        showResidentAtIndex(model, INDEX_FIRST_RESIDENT);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"colintkn"},"content":"        // edit resident in filtered list into a duplicate in address book"},{"lineNumber":117,"author":{"gitId":"colintkn"},"content":"        Resident residentInList \u003d model.getAddressBook().getResidentList().get(INDEX_SECOND_RESIDENT.getZeroBased());"},{"lineNumber":118,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(INDEX_FIRST_RESIDENT,"},{"lineNumber":119,"author":{"gitId":"colintkn"},"content":"                new EditResidentDescriptorBuilder(residentInList).build());"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(editResidentCommand, model, EditResidentCommand.MESSAGE_DUPLICATE_RESIDENT);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"colintkn"},"content":"    public void execute_invalidResidentIndexUnfilteredList_failure() {"},{"lineNumber":126,"author":{"gitId":"colintkn"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredResidentList().size() + 1);"},{"lineNumber":127,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand.EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder()"},{"lineNumber":128,"author":{"gitId":"colintkn"},"content":"                .withName(VALID_NAME_BOB).build();"},{"lineNumber":129,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(outOfBoundIndex, descriptor);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(editResidentCommand, model, Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"colintkn"},"content":"    public void execute_invalidResidentIndexFilteredList_failure() {"},{"lineNumber":140,"author":{"gitId":"colintkn"},"content":"        showResidentAtIndex(model, INDEX_FIRST_RESIDENT);"},{"lineNumber":141,"author":{"gitId":"colintkn"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_RESIDENT;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":143,"author":{"gitId":"colintkn"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getResidentList().size());"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(outOfBoundIndex,"},{"lineNumber":146,"author":{"gitId":"colintkn"},"content":"                new EditResidentDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(editResidentCommand, model, Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":153,"author":{"gitId":"colintkn"},"content":"        final EditResidentCommand standardCommand \u003d new EditResidentCommand(INDEX_FIRST_RESIDENT, DESC_AMY);"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":156,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand.EditResidentDescriptor copyDescriptor \u003d new EditResidentDescriptor(DESC_AMY);"},{"lineNumber":157,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand commandWithSameValues \u003d new EditResidentCommand(INDEX_FIRST_RESIDENT, copyDescriptor);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":170,"author":{"gitId":"colintkn"},"content":"        assertFalse(standardCommand.equals(new EditResidentCommand(INDEX_SECOND_RESIDENT, DESC_AMY)));"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":173,"author":{"gitId":"colintkn"},"content":"        assertFalse(standardCommand.equals(new EditResidentCommand(INDEX_FIRST_RESIDENT, DESC_BOB)));"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":72,"-":104}},{"path":"src/test/java/seedu/address/logic/commands/EditResidentDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.EditResidentDescriptorBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"public class EditResidentDescriptorTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand.EditResidentDescriptor descriptorWithSameValues \u003d new EditResidentCommand"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"                .EditResidentDescriptor(DESC_AMY);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand.EditResidentDescriptor editedAmy \u003d new EditResidentDescriptorBuilder(DESC_AMY)"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"                .withName(VALID_NAME_BOB).build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        editedAmy \u003d new EditResidentDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        editedAmy \u003d new EditResidentDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":9,"-":41}},{"path":"src/test/java/seedu/address/logic/commands/FindResidentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_RESIDENTS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.CARL;"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.ELLE;"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.FIONA;"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.FindResidentCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.NameContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":" * Contains integration tests (interaction with the Model) for {@code FindResidentCommand}."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"public class FindResidentCommandTest {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand findFirstCommand \u003d new FindResidentCommand(firstPredicate);"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand findSecondCommand \u003d new FindResidentCommand(secondPredicate);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand findFirstCommandCopy \u003d new FindResidentCommand(firstPredicate);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        // different resident -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"    public void execute_zeroKeywords_noResidentFound() {"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RESIDENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand command \u003d new FindResidentCommand(predicate);"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        expectedModel.updateFilteredResidentList(predicate);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredResidentList());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"    public void execute_multipleKeywords_multipleResidentsFound() {"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RESIDENTS_LISTED_OVERVIEW, 3);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand command \u003d new FindResidentCommand(predicate);"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"        expectedModel.updateFilteredResidentList(predicate);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredResidentList());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":23,"-":61}},{"path":"src/test/java/seedu/address/logic/commands/ListResidentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showResidentAtIndex;"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RESIDENT;"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.ListResidentCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListResidentCommand."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"public class ListResidentCommandTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(new ListResidentCommand(), model, ListResidentCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        showResidentAtIndex(model, INDEX_FIRST_RESIDENT);"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(new ListResidentCommand(), model, ListResidentCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":9,"-":31}},{"path":"src/test/java/seedu/address/logic/commands/ModelStub.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.AliasMapping;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":" * A default model stub that have all of the methods failing."},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"public class ModelStub implements Model {"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"    public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"    public boolean hasResident(Resident resident) {"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"    public void deleteResident(Resident target) {"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"    public void addResident(Resident resident) {"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"    public void setResident(Resident target, Resident editedResident) {"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"    public ObservableList\u003cResident\u003e getFilteredResidentList() {"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"    public void updateFilteredResidentList(Predicate\u003cResident\u003e predicate) {"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"    public boolean hasRoom(Room room) {"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"    public void deleteRoom(Room target) {"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"    public void addRoom(Room room) {"},{"lineNumber":104,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"    public void setRoom(Room target, Room editedRoom) {"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":112,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"DrWala"},"content":"    public ObservableList\u003cRoom\u003e getFilteredRoomList() {"},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":115,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":117,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":118,"author":{"gitId":"DrWala"},"content":"    public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {"},{"lineNumber":119,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":122,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":123,"author":{"gitId":"benedictkhoomw"},"content":"    public ReadOnlyCommandHistory getCommandHistory() {"},{"lineNumber":124,"author":{"gitId":"benedictkhoomw"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":127,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":128,"author":{"gitId":"stein414"},"content":"    public void deleteIssue(Issue target) {"},{"lineNumber":129,"author":{"gitId":"stein414"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"stein414"},"content":""},{"lineNumber":132,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":133,"author":{"gitId":"benedictkhoomw"},"content":"    public void appendCommandHistoryEntry(String commandText) {"},{"lineNumber":134,"author":{"gitId":"benedictkhoomw"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":137,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":138,"author":{"gitId":"stein414"},"content":"    public void addIssue(Issue issue) {"},{"lineNumber":139,"author":{"gitId":"stein414"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"stein414"},"content":""},{"lineNumber":142,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":143,"author":{"gitId":"stein414"},"content":"    public void setIssue(Issue target, Issue editedIssue) {"},{"lineNumber":144,"author":{"gitId":"stein414"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"stein414"},"content":""},{"lineNumber":147,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":148,"author":{"gitId":"stein414"},"content":"    public ObservableList\u003cIssue\u003e getFilteredIssueList() {"},{"lineNumber":149,"author":{"gitId":"stein414"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"stein414"},"content":""},{"lineNumber":152,"author":{"gitId":"stein414"},"content":"    @Override"},{"lineNumber":153,"author":{"gitId":"stein414"},"content":"    public void updateFilteredIssueList(Predicate\u003cIssue\u003e predicate) {"},{"lineNumber":154,"author":{"gitId":"stein414"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitId":"stein414"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":157,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":158,"author":{"gitId":"cnlinh"},"content":"    public void addAlias(Alias alias) {"},{"lineNumber":159,"author":{"gitId":"cnlinh"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":162,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":163,"author":{"gitId":"cnlinh"},"content":"    public AliasMapping getAliasMapping() {"},{"lineNumber":164,"author":{"gitId":"cnlinh"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":167,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":168,"author":{"gitId":"cnlinh"},"content":"    public void setAliasMapping(AliasMapping aliasMapping) {"},{"lineNumber":169,"author":{"gitId":"cnlinh"},"content":"        throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":170,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"cnlinh":17,"benedictkhoomw":12,"stein414":25,"DrWala":117}},{"path":"src/test/java/seedu/address/logic/commands/ViewHistoryCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.logic.commands.ViewHistoryCommand.MESSAGE_ENTRY_FORMAT;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.logic.commands.ViewHistoryCommand.MESSAGE_HEADER_SUCCESS;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.testutil.TypicalCommandHistoryEntries.getTypicalCommandHistory;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.testutil.TypicalResidents.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistory;"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":" * {@code ViewHistoryCommand}."},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"public class ViewHistoryCommandTest {"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    private final Model typicalModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"            getTypicalCommandHistory());"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"    public void equals() {"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        final int lastFiveEntries \u003d 5;"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        ViewHistoryCommand viewAllCommand \u003d new ViewHistoryCommand();"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        ViewHistoryCommand viewFiveCommand \u003d new ViewHistoryCommand(lastFiveEntries);"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        // same object -\u003e returns true"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(viewAllCommand.equals(viewAllCommand));"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(viewFiveCommand.equals(viewFiveCommand));"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"        // same values -\u003e returns true"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(viewAllCommand.equals(new ViewHistoryCommand()));"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(viewFiveCommand.equals(new ViewHistoryCommand(lastFiveEntries)));"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"        // different types -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        assertFalse(viewFiveCommand.equals(lastFiveEntries));"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"        // null -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"        assertFalse(viewAllCommand.equals(null));"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        // different commands -\u003e returns false"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"        assertFalse(viewAllCommand.equals(viewFiveCommand));"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"    public void execute_countOutOfRange_throwsCommandException() {"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"        final int tooBigCount \u003d typicalModel.getCommandHistory().size() + 1;"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        ViewHistoryCommand historyCommand \u003d new ViewHistoryCommand(tooBigCount);"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"        String expectedMessage \u003d String.format(ViewHistoryCommand.MESSAGE_INVALID_COUNT,"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"                1, typicalModel.getCommandHistory().size());"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"        assertCommandFailure(historyCommand, typicalModel, expectedMessage);"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    public void execute_viewAllWithEmptyHistory_success() {"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"        Model modelEmptyHistory \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new CommandHistory());"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"        ViewHistoryCommand historyCommand \u003d new ViewHistoryCommand();"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"        String expectedMessage \u003d ViewHistoryCommand.MESSAGE_EMPTY_HISTORY;"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"        // No change to model here; it is LogicManager\u0027s responsibility to track command history"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"        // Tests for that are in LogicManager integration tests."},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"        ModelManager expectedModel \u003d new ModelManager(modelEmptyHistory.getAddressBook(),"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"                modelEmptyHistory.getUserPrefs(), modelEmptyHistory.getCommandHistory());"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"        assertCommandSuccess(historyCommand, modelEmptyHistory, expectedMessage, expectedModel);"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"    public void execute_viewAllWithHistory_success() {"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"        ViewHistoryCommand historyCommand \u003d new ViewHistoryCommand();"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"        ReadOnlyCommandHistory history \u003d typicalModel.getCommandHistory();"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"        String expectedMessage \u003d buildCommandHistoryReversed(history, history.size());"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"        // No change to model here; it is LogicManager\u0027s responsibility to track command history"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"        // Tests for that are in LogicManager integration tests."},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"        ModelManager expectedModel \u003d new ModelManager(typicalModel.getAddressBook(),"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"                typicalModel.getUserPrefs(), typicalModel.getCommandHistory());"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"        assertCommandSuccess(historyCommand, typicalModel, expectedMessage, expectedModel);"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":"    public void execute_viewValidCountWithHistory_success() {"},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":"        ReadOnlyCommandHistory history \u003d typicalModel.getCommandHistory();"},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"        final int count \u003d history.size() - 1; // valid count less than the size"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"        ViewHistoryCommand historyCommand \u003d new ViewHistoryCommand(count);"},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"        String expectedMessage \u003d buildCommandHistoryReversed(history, count);"},{"lineNumber":101,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":102,"author":{"gitId":"benedictkhoomw"},"content":"        // No change to model here; it is LogicManager\u0027s responsibility to track command history"},{"lineNumber":103,"author":{"gitId":"benedictkhoomw"},"content":"        // Tests for that are in LogicManager integration tests."},{"lineNumber":104,"author":{"gitId":"benedictkhoomw"},"content":"        ModelManager expectedModel \u003d new ModelManager(typicalModel.getAddressBook(),"},{"lineNumber":105,"author":{"gitId":"benedictkhoomw"},"content":"                typicalModel.getUserPrefs(), typicalModel.getCommandHistory());"},{"lineNumber":106,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":107,"author":{"gitId":"benedictkhoomw"},"content":"        assertCommandSuccess(historyCommand, typicalModel, expectedMessage, expectedModel);"},{"lineNumber":108,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":110,"author":{"gitId":"benedictkhoomw"},"content":"    private String buildCommandHistoryReversed(ReadOnlyCommandHistory history, int count) {"},{"lineNumber":111,"author":{"gitId":"benedictkhoomw"},"content":"        StringBuilder msg \u003d new StringBuilder(String.format(MESSAGE_HEADER_SUCCESS, count));"},{"lineNumber":112,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d history.size() - 1; i \u003e\u003d history.size() - count; i--) {"},{"lineNumber":113,"author":{"gitId":"benedictkhoomw"},"content":"            final int entryNum \u003d i + 1;"},{"lineNumber":114,"author":{"gitId":"benedictkhoomw"},"content":"            final String entryText \u003d history.get(i).toString();"},{"lineNumber":115,"author":{"gitId":"benedictkhoomw"},"content":"            msg.append(String.format(MESSAGE_ENTRY_FORMAT, entryNum, entryText));"},{"lineNumber":116,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"benedictkhoomw"},"content":"        return msg.toString();"},{"lineNumber":118,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":119}},{"path":"src/test/java/seedu/address/logic/commands/room/AddRoomCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.ModelStub;"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"import seedu.address.testutil.room.RoomBuilder;"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"public class AddRoomCommandTest {"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    public void constructor_nullRoom_throwsNullPointerException() {"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddRoomCommand(null));"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    public void execute_nullModel_throwsNullPointerException() throws Exception {"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        Room validRoom \u003d new RoomBuilder().build();"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddRoomCommand(validRoom).execute(null));"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    public void execute_roomAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        ModelStubAcceptingRoomAdded modelStub \u003d new ModelStubAcceptingRoomAdded();"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        Room validRoom \u003d new RoomBuilder().build();"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        CommandResult commandResult \u003d new AddRoomCommand(validRoom).execute(modelStub);"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        assertEquals(String.format(AddRoomCommand.MESSAGE_SUCCESS, validRoom), commandResult.getFeedbackToUser());"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        assertEquals(Arrays.asList(validRoom), modelStub.roomsAdded);"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"    public void execute_duplicateRooom_throwsCommandException() {"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        // First we create a room and add that to the command. The command will eventually try to execute"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        // by adding this room to the model"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"        Room validRoom \u003d new RoomBuilder().build();"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        AddRoomCommand addRoomCommand \u003d new AddRoomCommand(validRoom);"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        // We create a model containing the same room the command is going to try to add to the model"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"        ModelStub modelStub \u003d new ModelStubWithRoom(validRoom);"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"        // We see that (hopefully) the command raises an exception because the model already contains this room"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"        assertThrows(CommandException.class,"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"                AddRoomCommand.MESSAGE_DUPLICATE_ROOM, () -\u003e addRoomCommand.execute(modelStub));"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"    public void equals() {"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"        Room room1 \u003d new RoomBuilder().withRoomNumber(\"01-011\").build();"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"        Room room2 \u003d new RoomBuilder().withRoomNumber(\"02-022\").build();"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"        AddRoomCommand addRoom1Command \u003d new AddRoomCommand(room1);"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"        AddRoomCommand addRoom2Command \u003d new AddRoomCommand(room2);"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"        // same object -\u003e returns true"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"        assertTrue(addRoom1Command.equals(addRoom1Command));"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"        // same values -\u003e returns true"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"        AddRoomCommand addRoom1CommandCopy \u003d new AddRoomCommand(room1);"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"        assertTrue(addRoom1Command.equals(addRoom1CommandCopy));"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"        // different types -\u003e returns false"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"        assertFalse(addRoom1Command.equals(1));"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"        // null -\u003e returns false"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"        assertFalse(addRoom1Command.equals(null));"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"        // different room -\u003e return false"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"        assertFalse(addRoom1Command.equals(addRoom2Command));"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"     * A Model stub that contains a single room."},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"    private class ModelStubWithRoom extends ModelStub {"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"        private final Room room;"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"        ModelStubWithRoom(Room room) {"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"            requireNonNull(room);"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"            this.room \u003d room;"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"        @Override"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"        public boolean hasRoom(Room room) {"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"            requireNonNull(room);"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"            return this.room.isSameRoom(room);"},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":104,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":"     * A Model stub that always accepts the room being added."},{"lineNumber":106,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"    private class ModelStubAcceptingRoomAdded extends ModelStub {"},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"        final ArrayList\u003cRoom\u003e roomsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":110,"author":{"gitId":"DrWala"},"content":"        @Override"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":"        public boolean hasRoom(Room room) {"},{"lineNumber":112,"author":{"gitId":"DrWala"},"content":"            requireNonNull(room);"},{"lineNumber":113,"author":{"gitId":"DrWala"},"content":"            return roomsAdded.stream().anyMatch(room::isSameRoom);"},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":116,"author":{"gitId":"DrWala"},"content":"        @Override"},{"lineNumber":117,"author":{"gitId":"DrWala"},"content":"        public void addRoom(Room room) {"},{"lineNumber":118,"author":{"gitId":"DrWala"},"content":"            requireNonNull(room);"},{"lineNumber":119,"author":{"gitId":"DrWala"},"content":"            roomsAdded.add(room);"},{"lineNumber":120,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":122,"author":{"gitId":"DrWala"},"content":"        @Override"},{"lineNumber":123,"author":{"gitId":"DrWala"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":124,"author":{"gitId":"DrWala"},"content":"            return new AddressBook();"},{"lineNumber":125,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":127}},{"path":"src/test/java/seedu/address/logic/commands/room/EditRoomCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"public class EditRoomCommandTest {"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":4}},{"path":"src/test/java/seedu/address/logic/commands/room/EditRoomDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.room.RoomCommandTestUtil.VALID_ROOM_DESCRIPTOR_ONE;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.room.RoomCommandTestUtil.VALID_ROOM_DESCRIPTOR_TWO;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.room.RoomCommandTestUtil.VALID_ROOM_TAGS;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.EditRoomCommand.EditRoomDescriptor;"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.testutil.room.EditRoomDescriptorBuilder;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"public class EditRoomDescriptorTest {"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    public void equals() {"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"        // Same values -\u003e return true"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"        EditRoomDescriptor descriptorWithSameValues \u003d new EditRoomDescriptor(VALID_ROOM_DESCRIPTOR_ONE);"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"        assertTrue(VALID_ROOM_DESCRIPTOR_ONE.equals(descriptorWithSameValues));"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"        // Same object -\u003e return true"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"        assertTrue(VALID_ROOM_DESCRIPTOR_ONE.equals(VALID_ROOM_DESCRIPTOR_ONE));"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"        // null -\u003e return false"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"        assertFalse(VALID_ROOM_DESCRIPTOR_ONE.equals(null));"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"        // different types -\u003e return false"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"        assertFalse(VALID_ROOM_DESCRIPTOR_ONE.equals(5));"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        // different values -\u003e return false"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"        assertFalse(VALID_ROOM_DESCRIPTOR_ONE.equals(VALID_ROOM_DESCRIPTOR_TWO));"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        // tests for each of the different fields"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"        EditRoomDescriptor editedOne;"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        // different room number -\u003e return false"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        editedOne \u003d new EditRoomDescriptorBuilder(VALID_ROOM_DESCRIPTOR_ONE)"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"                .withRoomNumber(\"08-121\")"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"                .build();"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        assertFalse(VALID_ROOM_DESCRIPTOR_ONE.equals(editedOne));"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        // different room type -\u003e return false"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        editedOne \u003d new EditRoomDescriptorBuilder(VALID_ROOM_DESCRIPTOR_ONE)"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"                .withRoomType(\"suite_non_ac\")"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"                .build();"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        assertFalse(VALID_ROOM_DESCRIPTOR_ONE.equals(editedOne));"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        // different occupancy -\u003e return false"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        editedOne \u003d new EditRoomDescriptorBuilder(VALID_ROOM_DESCRIPTOR_ONE)"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"                .withOccupancyStatus(\"n\")"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"                .build();"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        assertFalse(VALID_ROOM_DESCRIPTOR_ONE.equals(editedOne));"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"        // different tags -\u003e return false"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"        editedOne \u003d new EditRoomDescriptorBuilder(VALID_ROOM_DESCRIPTOR_ONE)"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"                .withTags(VALID_ROOM_TAGS)"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"                .build();"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"        assertFalse(VALID_ROOM_DESCRIPTOR_ONE.equals(editedOne));"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":62}},{"path":"src/test/java/seedu/address/logic/commands/room/RoomCommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import java.util.Random;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import seedu.address.testutil.room.EditRoomDescriptorBuilder;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"public class RoomCommandTestUtil {"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"    public static final String VALID_ROOM_NUMBER_ONE \u003d \"15-312\";"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"    public static final String VALID_ROOM_NUMBER_TWO \u003d \"12-322\";"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"    public static final String VALID_ROOM_NUMBER_THREE \u003d \"09-121\";"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    public static final List\u003cString\u003e VALID_ROOM_TYPES \u003d new ArrayList\u003c\u003e("},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"            Arrays.asList(\"corridor_non_ac\", \"corridor_ac\", \"suite_non_ac\", \"suite_ac\"));"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    public static final List\u003cString\u003e VALID_ROOM_OCCUPANCIES \u003d new ArrayList\u003c\u003e(Arrays.asList(\"y\", \"n\"));"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    public static final String[] VALID_ROOM_TAGS \u003d new String[]{\"tag1\", \"tag2\"};"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    public static final List\u003cString\u003e INVALID_VALID_ROOM_NUMBERS \u003d new ArrayList\u003c\u003e(Arrays.asList("},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"            \"a15-312\", // non number characters not allowed in room number"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"            \"123-123\", \"12-12\", \"1-1\", \"123-12\", \"12 123\" // room number format is dd-ddd"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    ));"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    public static final List\u003cString\u003e INVALID_ROOM_TYPES \u003d new ArrayList\u003c\u003e("},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"            Arrays.asList(\"corridor_no_ac\", \"not aircon\", \"suite non ac\", \"123123\", \"something else altogether\"));"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    public static final List\u003cString\u003e INVALID_ROOM_OCCUPANCIES \u003d new ArrayList\u003c\u003e("},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"            Arrays.asList(\"yes\", \"no\", \"true\", \"false\", \"something else altogether\"));"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    public static final EditRoomCommand.EditRoomDescriptor VALID_ROOM_DESCRIPTOR_ONE;"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    public static final EditRoomCommand.EditRoomDescriptor VALID_ROOM_DESCRIPTOR_TWO;"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    public static final EditRoomCommand.EditRoomDescriptor VALID_ROOM_DESCRIPTOR_RANDOM;"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"    static {"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        Random random \u003d new Random();"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"        // 15-312, corridor non ac, not occupied"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"        VALID_ROOM_DESCRIPTOR_ONE \u003d new EditRoomDescriptorBuilder().withRoomNumber(VALID_ROOM_NUMBER_ONE)"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"                .withRoomType(VALID_ROOM_TYPES.get(0))"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"                .withOccupancyStatus(VALID_ROOM_OCCUPANCIES.get(0))"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"                .build();"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        // 12-322, corridor ac, occupied"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        VALID_ROOM_DESCRIPTOR_TWO \u003d new EditRoomDescriptorBuilder().withRoomNumber(VALID_ROOM_NUMBER_TWO)"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"                .withRoomType(VALID_ROOM_TYPES.get(1))"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"                .withOccupancyStatus(VALID_ROOM_OCCUPANCIES.get(1))"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"                .build();"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        // Random build based on valid parameters"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"        VALID_ROOM_DESCRIPTOR_RANDOM \u003d new EditRoomDescriptorBuilder().withRoomNumber(VALID_ROOM_NUMBER_THREE)"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"                // Pick a random valid room type, there are only 4"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"                .withRoomType(VALID_ROOM_TYPES.get(random.nextInt(VALID_ROOM_TYPES.size())))"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"                // Pick a random valid occupancy of yes or no"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"                .withOccupancyStatus(VALID_ROOM_OCCUPANCIES.get(random.nextInt(VALID_ROOM_OCCUPANCIES.size())))"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"                .build();"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":54}},{"path":"src/test/java/seedu/address/logic/parser/AddResidentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROOM_DESC;"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_YEAR_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_AMY;"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_BOB;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_BOB;"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAR_BOB;"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.YEAR_DESC_AMY;"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.YEAR_DESC_BOB;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.BOB;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.resident.AddResidentCommandParser;"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.ResidentBuilder;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"public class AddResidentCommandParserTest {"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"    private AddResidentCommandParser parser \u003d new AddResidentCommandParser();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        Resident expectedResident \u003d new ResidentBuilder(BOB).build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"                + ROOM_DESC_BOB,"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"            new AddResidentCommand(expectedResident));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"                + ROOM_DESC_BOB,"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"            new AddResidentCommand(expectedResident));"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"                + ROOM_DESC_BOB,"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"            new AddResidentCommand(expectedResident));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"                + ROOM_DESC_BOB,"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"            new AddResidentCommand(expectedResident));"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"        // multiple years - last year accepted"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_AMY"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"                + ROOM_DESC_BOB,"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"            new AddResidentCommand(expectedResident));"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":"        // multiple rooms - last room accepted"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"                + ROOM_DESC_AMY"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"                + ROOM_DESC_BOB,"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"            new AddResidentCommand(expectedResident));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddResidentCommand.MESSAGE_USAGE);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"                + ROOM_DESC_BOB,"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"                + ROOM_DESC_BOB,"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"                + ROOM_DESC_BOB,"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"colintkn"},"content":"        // missing year prefix"},{"lineNumber":111,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"},{"lineNumber":112,"author":{"gitId":"colintkn"},"content":"                + VALID_YEAR_BOB + ROOM_DESC_BOB,"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":116,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"},{"lineNumber":117,"author":{"gitId":"colintkn"},"content":"                + VALID_YEAR_BOB"},{"lineNumber":118,"author":{"gitId":"colintkn"},"content":"                + VALID_ROOM_BOB,"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":125,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":126,"author":{"gitId":"colintkn"},"content":"            + YEAR_DESC_BOB"},{"lineNumber":127,"author":{"gitId":"colintkn"},"content":"            + ROOM_DESC_BOB,"},{"lineNumber":128,"author":{"gitId":"colintkn"},"content":"            Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":131,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"},{"lineNumber":132,"author":{"gitId":"colintkn"},"content":"            + YEAR_DESC_BOB"},{"lineNumber":133,"author":{"gitId":"colintkn"},"content":"            + ROOM_DESC_BOB,"},{"lineNumber":134,"author":{"gitId":"colintkn"},"content":"            Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":137,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"},{"lineNumber":138,"author":{"gitId":"colintkn"},"content":"            + YEAR_DESC_BOB"},{"lineNumber":139,"author":{"gitId":"colintkn"},"content":"            + ROOM_DESC_BOB,"},{"lineNumber":140,"author":{"gitId":"colintkn"},"content":"            Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"colintkn"},"content":"        // invalid year"},{"lineNumber":143,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":144,"author":{"gitId":"colintkn"},"content":"            + INVALID_YEAR_DESC"},{"lineNumber":145,"author":{"gitId":"colintkn"},"content":"            + ROOM_DESC_BOB,"},{"lineNumber":146,"author":{"gitId":"colintkn"},"content":"            Year.MESSAGE_CONSTRAINTS);"},{"lineNumber":147,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":148,"author":{"gitId":"colintkn"},"content":"        // invalid room"},{"lineNumber":149,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":150,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB"},{"lineNumber":151,"author":{"gitId":"colintkn"},"content":"                + INVALID_ROOM_DESC,"},{"lineNumber":152,"author":{"gitId":"colintkn"},"content":"                Room.MESSAGE_CONSTRAINTS);"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":155,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + INVALID_EMAIL_DESC"},{"lineNumber":156,"author":{"gitId":"colintkn"},"content":"            + YEAR_DESC_BOB"},{"lineNumber":157,"author":{"gitId":"colintkn"},"content":"            + ROOM_DESC_BOB,"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":162,"author":{"gitId":"colintkn"},"content":"            + YEAR_DESC_BOB"},{"lineNumber":163,"author":{"gitId":"colintkn"},"content":"            + ROOM_DESC_BOB,"},{"lineNumber":164,"author":{"gitId":"colintkn"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddResidentCommand.MESSAGE_USAGE));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":90,"-":76}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RESIDENT;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.AliasMapping;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.ViewHistoryCommand;"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.DeleteResidentCommand;"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand.EditResidentDescriptor;"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.FindResidentCommand;"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.ListResidentCommand;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.NameContainsKeywordsPredicate;"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.EditResidentDescriptorBuilder;"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.ResidentBuilder;"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.ResidentUtil;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"    private final AddressBookParser parser;"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"    private final ReadOnlyUserPrefs readOnlyUserPrefs;"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"    public AddressBookParserTest() {"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"        parser \u003d new AddressBookParser();"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"        userPrefs.setAliasMapping(new AliasMapping());"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"        readOnlyUserPrefs \u003d userPrefs;"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"        Resident resident \u003d new ResidentBuilder().build();"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"        AddResidentCommand command \u003d (AddResidentCommand) parser.parseCommand(ResidentUtil.getAddCommand(resident),"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"                readOnlyUserPrefs);"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        assertEquals(new AddResidentCommand(resident), command);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, readOnlyUserPrefs)"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"                instanceof ClearCommand);"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\", readOnlyUserPrefs)"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"                instanceof ClearCommand);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"        DeleteResidentCommand command \u003d (DeleteResidentCommand) parser.parseCommand("},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"                DeleteResidentCommand.COMMAND_WORD + \" \""},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"                        + INDEX_FIRST_RESIDENT.getOneBased(), readOnlyUserPrefs);"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"        assertEquals(new DeleteResidentCommand(INDEX_FIRST_RESIDENT), command);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"        Resident resident \u003d new ResidentBuilder().build();"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder(resident).build();"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand command \u003d (EditResidentCommand) parser.parseCommand(EditResidentCommand.COMMAND_WORD + \" \""},{"lineNumber":79,"author":{"gitId":"cnlinh"},"content":"                + INDEX_FIRST_RESIDENT.getOneBased() + \" \""},{"lineNumber":80,"author":{"gitId":"cnlinh"},"content":"                + ResidentUtil.getEditResidentDescriptorDetails(descriptor), readOnlyUserPrefs);"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"        assertEquals(new EditResidentCommand(INDEX_FIRST_RESIDENT, descriptor), command);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":86,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, readOnlyUserPrefs)"},{"lineNumber":87,"author":{"gitId":"cnlinh"},"content":"                instanceof ExitCommand);"},{"lineNumber":88,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", readOnlyUserPrefs)"},{"lineNumber":89,"author":{"gitId":"cnlinh"},"content":"                instanceof ExitCommand);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand command \u003d (FindResidentCommand) parser.parseCommand("},{"lineNumber":96,"author":{"gitId":"cnlinh"},"content":"                FindResidentCommand.COMMAND_WORD + \" \""},{"lineNumber":97,"author":{"gitId":"cnlinh"},"content":"                        + keywords.stream().collect(Collectors.joining(\" \")), readOnlyUserPrefs);"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"        assertEquals(new FindResidentCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":103,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, readOnlyUserPrefs)"},{"lineNumber":104,"author":{"gitId":"cnlinh"},"content":"                instanceof HelpCommand);"},{"lineNumber":105,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", readOnlyUserPrefs)"},{"lineNumber":106,"author":{"gitId":"cnlinh"},"content":"                instanceof HelpCommand);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":111,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(ListResidentCommand.COMMAND_WORD, readOnlyUserPrefs)"},{"lineNumber":112,"author":{"gitId":"cnlinh"},"content":"                instanceof ListResidentCommand);"},{"lineNumber":113,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(ListResidentCommand.COMMAND_WORD + \" 3\", readOnlyUserPrefs)"},{"lineNumber":114,"author":{"gitId":"cnlinh"},"content":"                instanceof ListResidentCommand);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"benedictkhoomw"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":119,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(ViewHistoryCommand.COMMAND_WORD, readOnlyUserPrefs)"},{"lineNumber":120,"author":{"gitId":"cnlinh"},"content":"                instanceof ViewHistoryCommand);"},{"lineNumber":121,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(ViewHistoryCommand.COMMAND_WORD + \" 3\", readOnlyUserPrefs)"},{"lineNumber":122,"author":{"gitId":"cnlinh"},"content":"                instanceof ViewHistoryCommand);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":128,"author":{"gitId":"cnlinh"},"content":"            -\u003e parser.parseCommand(\"\", readOnlyUserPrefs));"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":133,"author":{"gitId":"cnlinh"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"},{"lineNumber":134,"author":{"gitId":"cnlinh"},"content":"            -\u003e parser.parseCommand(\"unknownCommand\", readOnlyUserPrefs));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"cnlinh":45,"benedictkhoomw":3,"colintkn":22,"-":66}},{"path":"src/test/java/seedu/address/logic/parser/DeleteResidentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RESIDENT;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.DeleteResidentCommand;"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.resident.DeleteResidentCommandParser;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":" * outside of the DeleteResidentCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":" * same path through the DeleteResidentCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"public class DeleteResidentCommandParserTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    private DeleteResidentCommandParser parser \u003d new DeleteResidentCommandParser();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"        assertParseSuccess(parser, \"1\", new DeleteResidentCommand(INDEX_FIRST_RESIDENT));"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"            DeleteResidentCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":10,"-":24}},{"path":"src/test/java/seedu/address/logic/parser/EditResidentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RESIDENT;"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RESIDENT;"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_RESIDENT;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand.EditResidentDescriptor;"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.resident.EditResidentCommandParser;"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.EditResidentDescriptorBuilder;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"public class EditResidentCommandParserTest {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditResidentCommand.MESSAGE_USAGE);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    private EditResidentCommandParser parser \u003d new EditResidentCommandParser();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, \"1\", EditResidentCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"        Index targetIndex \u003d INDEX_SECOND_RESIDENT;"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY + NAME_DESC_AMY;"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand expectedCommand \u003d new EditResidentCommand(targetIndex, descriptor);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"        Index targetIndex \u003d INDEX_FIRST_RESIDENT;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand expectedCommand \u003d new EditResidentCommand(targetIndex, descriptor);"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":112,"author":{"gitId":"colintkn"},"content":"        Index targetIndex \u003d INDEX_THIRD_RESIDENT;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":114,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":115,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand expectedCommand \u003d new EditResidentCommand(targetIndex, descriptor);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":120,"author":{"gitId":"colintkn"},"content":"        descriptor \u003d new EditResidentDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":121,"author":{"gitId":"colintkn"},"content":"        expectedCommand \u003d new EditResidentCommand(targetIndex, descriptor);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":126,"author":{"gitId":"colintkn"},"content":"        descriptor \u003d new EditResidentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":127,"author":{"gitId":"colintkn"},"content":"        expectedCommand \u003d new EditResidentCommand(targetIndex, descriptor);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":133,"author":{"gitId":"colintkn"},"content":"        Index targetIndex \u003d INDEX_FIRST_RESIDENT;"},{"lineNumber":134,"author":{"gitId":"colintkn"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":135,"author":{"gitId":"colintkn"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":136,"author":{"gitId":"colintkn"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB;"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":139,"author":{"gitId":"colintkn"},"content":"                .withEmail(VALID_EMAIL_BOB)"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":141,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand expectedCommand \u003d new EditResidentCommand(targetIndex, descriptor);"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":149,"author":{"gitId":"colintkn"},"content":"        Index targetIndex \u003d INDEX_FIRST_RESIDENT;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":151,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":152,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand expectedCommand \u003d new EditResidentCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":156,"author":{"gitId":"colintkn"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":158,"author":{"gitId":"colintkn"},"content":"        descriptor \u003d new EditResidentDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":159,"author":{"gitId":"colintkn"},"content":"        expectedCommand \u003d new EditResidentCommand(targetIndex, descriptor);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":43,"-":119}},{"path":"src/test/java/seedu/address/logic/parser/FindResidentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.FindResidentCommand;"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.resident.FindResidentCommandParser;"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.NameContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"public class FindResidentCommandParserTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    private FindResidentCommandParser parser \u003d new FindResidentCommandParser();"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"            FindResidentCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand expectedFindResidentCommand \u003d"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"                new FindResidentCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindResidentCommand);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindResidentCommand);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":11,"-":25}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RESIDENT;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        assertEquals(INDEX_FIRST_RESIDENT, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        assertEquals(INDEX_FIRST_RESIDENT, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":6,"-":108}},{"path":"src/test/java/seedu/address/logic/parser/ViewHistoryCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.ViewHistoryCommand;"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"public class ViewHistoryCommandParserTest {"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String VALID_ARG_FIVE \u003d \"5\";"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String VALID_ARG_TWENTY_TWO \u003d \"22\";"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String NO_ARG \u003d \"\";"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String INVALID_ARG_A \u003d \"A\";"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String INVALID_ARG_NEGATIVE \u003d \"-4\";"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String INVALID_ARG_ZERO \u003d \"0\";"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    private final ViewHistoryCommandParser parser \u003d new ViewHistoryCommandParser();"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"        // invalid count: non-integer"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        assertParseFailure(parser, INVALID_ARG_A,"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewHistoryCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        // invalid count: zero"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"        assertParseFailure(parser, INVALID_ARG_ZERO,"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewHistoryCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        // invalid count: negative"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        assertParseFailure(parser, INVALID_ARG_NEGATIVE,"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewHistoryCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        // non-empty preamble"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY,"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewHistoryCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"    public void parse_optionalCountMissing_success() {"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"        assertParseSuccess(parser, NO_ARG, new ViewHistoryCommand());"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"    public void parse_withValidCount_success() {"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"        // valid count 1"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_ARG_FIVE,"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"                new ViewHistoryCommand(Integer.parseInt(VALID_ARG_FIVE)));"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"        // valid count 2"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_ARG_TWENTY_TWO,"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"                new ViewHistoryCommand(Integer.parseInt(VALID_ARG_TWENTY_TWO)));"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":56}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.ALICE;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.exceptions.DuplicateResidentException;"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.ResidentBuilder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        assertEquals(Collections.emptyList(), addressBook.getResidentList());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"    public void resetData_withDuplicateResident_throwsDuplicateResidentException() {"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        // Two residents with the same identity fields"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"        Resident editedAlice \u003d new ResidentBuilder(ALICE)"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"        List\u003cResident\u003e newResidents \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        List\u003cRoom\u003e newRooms \u003d new ArrayList\u003c\u003e();"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"        List\u003cIssue\u003e newIssues \u003d new ArrayList\u003c\u003e();"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newResidents, newRooms, newIssues);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        assertThrows(DuplicateResidentException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"    public void hasResident_nullResident_throwsNullPointerException() {"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasResident(null));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"    public void hasResident_residentNotInAddressBook_returnsFalse() {"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"        assertFalse(addressBook.hasResident(ALICE));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"    public void hasResident_residentInAddressBook_returnsTrue() {"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"        addressBook.addResident(ALICE);"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"        assertTrue(addressBook.hasResident(ALICE));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"    public void hasResident_residentWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"        addressBook.addResident(ALICE);"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        Resident editedAlice \u003d new ResidentBuilder(ALICE)"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"        assertTrue(addressBook.hasResident(editedAlice));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"    public void getResidentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getResidentList().remove(0));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"     * A stub ReadOnlyAddressBook whose residents list can violate interface constraints."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"        private final ObservableList\u003cResident\u003e residents \u003d FXCollections.observableArrayList();"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"        private final ObservableList\u003cRoom\u003e rooms \u003d FXCollections.observableArrayList();"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"        private final ObservableList\u003cIssue\u003e issues \u003d FXCollections.observableArrayList();"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"        AddressBookStub(Collection\u003cResident\u003e residents, Collection\u003cRoom\u003e rooms, Collection\u003cIssue\u003e issues) {"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"            this.residents.setAll(residents);"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"            this.rooms.setAll(rooms);"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"            this.issues.setAll(issues);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"        public ObservableList\u003cResident\u003e getResidentList() {"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"            return residents;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"        @Override"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":"        public ObservableList\u003cRoom\u003e getRoomList() {"},{"lineNumber":110,"author":{"gitId":"DrWala"},"content":"            return rooms;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitId":"stein414"},"content":"        public ObservableList\u003cIssue\u003e getIssueList() {"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":"            return issues;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"stein414":11,"colintkn":29,"-":73,"DrWala":6}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RESIDENTS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.ALICE;"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.BENSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"    public void hasResident_nullResident_throwsNullPointerException() {"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasResident(null));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"    public void hasResident_residentNotInAddressBook_returnsFalse() {"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"        assertFalse(modelManager.hasResident(ALICE));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"    public void hasResident_residentInAddressBook_returnsTrue() {"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"        modelManager.addResident(ALICE);"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"        assertTrue(modelManager.hasResident(ALICE));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"    public void getFilteredResidentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredResidentList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withResident(ALICE).withResident(BENSON).build();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":121,"author":{"gitId":"colintkn"},"content":"        modelManager.updateFilteredResidentList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":125,"author":{"gitId":"colintkn"},"content":"        modelManager.updateFilteredResidentList(PREDICATE_SHOW_ALL_RESIDENTS);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":16,"-":116}},{"path":"src/test/java/seedu/address/model/commandhistory/CommandHistoryEntryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.model.commandhistory;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"public class CommandHistoryEntryTest {"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String NON_EMPTY_STRING_1 \u003d \"asd\";"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String NON_EMPTY_STRING_2 \u003d \"history 5\";"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    public void constructor_nonNull_doesNotThrow() {"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"        assertDoesNotThrow(() -\u003e new CommandHistoryEntry(EMPTY_STRING));"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"        assertDoesNotThrow(() -\u003e new CommandHistoryEntry(NON_EMPTY_STRING_1));"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(NullPointerException.class, () -\u003e new CommandHistoryEntry(null));"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    public void constructor_usesStringParameter() {"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(EMPTY_STRING, new CommandHistoryEntry(EMPTY_STRING).value);"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(NON_EMPTY_STRING_1, new CommandHistoryEntry(NON_EMPTY_STRING_1).value);"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(NON_EMPTY_STRING_2, new CommandHistoryEntry(NON_EMPTY_STRING_2).value);"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    public void equals_isEvaluatedByStringEquality() {"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(new CommandHistoryEntry(NON_EMPTY_STRING_1), new CommandHistoryEntry(NON_EMPTY_STRING_1));"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(new CommandHistoryEntry(NON_EMPTY_STRING_2), new CommandHistoryEntry(NON_EMPTY_STRING_2));"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        assertNotEquals(new CommandHistoryEntry(NON_EMPTY_STRING_1), new CommandHistoryEntry(NON_EMPTY_STRING_2));"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":40}},{"path":"src/test/java/seedu/address/model/commandhistory/CommandHistoryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.model.commandhistory;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.testutil.TypicalCommandHistoryEntries;"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"public class CommandHistoryTest {"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    public void appendEntry_insertsAtEndOfHistory() {"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory commandHistory \u003d TypicalCommandHistoryEntries.getTypicalCommandHistory();"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"        final int originalSize \u003d commandHistory.size();"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"        final int numToTest \u003d 10;"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d originalSize; i \u003c originalSize + numToTest; i++) {"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"            CommandHistoryEntry randomEntry \u003d TypicalCommandHistoryEntries.getRandomEntry();"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"            commandHistory.appendEntry(randomEntry);"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"            assertEquals(randomEntry, commandHistory.get(i));"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    public void appendEntry_insertsCorrectEntry() {"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory commandHistory;"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistoryEntry entry;"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        commandHistory \u003d new CommandHistory();"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        entry \u003d TypicalCommandHistoryEntries.HELP;"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        commandHistory.appendEntry(entry);"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(entry, commandHistory.get(0));"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        commandHistory \u003d new CommandHistory();"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"        entry \u003d TypicalCommandHistoryEntries.HISTORY_ALL;"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        commandHistory.appendEntry(entry);"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(entry, commandHistory.get(0));"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"    public void constructor_takingListOfEntries_isMakingACopyOfTheList() {"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"        List\u003cCommandHistoryEntry\u003e typicalEntries1 \u003d TypicalCommandHistoryEntries.getTypicalEntries();"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory commandHistory \u003d new CommandHistory(typicalEntries1);"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        // modify the list"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"        typicalEntries1.clear();"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        // check that the entries in CommandHistory have not changed"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"        List\u003cCommandHistoryEntry\u003e typicalEntries2 \u003d TypicalCommandHistoryEntries.getTypicalEntries();"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(typicalEntries2.size(), commandHistory.size());"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c commandHistory.size(); i++) {"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"            CommandHistoryEntry entry \u003d commandHistory.get(i);"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"            CommandHistoryEntry correspondingEntry \u003d typicalEntries2.get(i);"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"            assertEquals(entry, correspondingEntry);"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    public void constructor_takingReadOnlyHistory_isMakingACopy() {"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory typicalHistory \u003d TypicalCommandHistoryEntries.getTypicalCommandHistory();"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory copy \u003d new CommandHistory(typicalHistory);"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(typicalHistory.size(), copy.size());"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c copy.size(); i++) {"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"            CommandHistoryEntry entry \u003d copy.get(i);"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"            CommandHistoryEntry correspondingEntry \u003d typicalHistory.get(i);"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"            assertEquals(entry, correspondingEntry);"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"    public void equals() {"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory typicalHistory \u003d TypicalCommandHistoryEntries.getTypicalCommandHistory();"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory copy \u003d new CommandHistory();"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c typicalHistory.size(); i++) {"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"            copy.appendEntry(typicalHistory.get(i));"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory oneMissingEntry \u003d new CommandHistory();"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c typicalHistory.size() - 1; i++) {"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"            oneMissingEntry.appendEntry(typicalHistory.get(i));"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory oneExtraEntry \u003d new CommandHistory();"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c typicalHistory.size() - 1; i++) {"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"            oneExtraEntry.appendEntry(typicalHistory.get(i));"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":"        oneExtraEntry.appendEntry(TypicalCommandHistoryEntries.getRandomEntry());"},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory differentEntriesButSameSize \u003d new CommandHistory();"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c typicalHistory.size() - 1; i++) {"},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"            differentEntriesButSameSize.appendEntry(TypicalCommandHistoryEntries.getRandomEntry());"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":102,"author":{"gitId":"benedictkhoomw"},"content":"        // same object -\u003e return true"},{"lineNumber":103,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(typicalHistory.equals(typicalHistory));"},{"lineNumber":104,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":105,"author":{"gitId":"benedictkhoomw"},"content":"        // same entries -\u003e return true"},{"lineNumber":106,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(typicalHistory.equals(copy));"},{"lineNumber":107,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":108,"author":{"gitId":"benedictkhoomw"},"content":"        // one missing entry -\u003e return false"},{"lineNumber":109,"author":{"gitId":"benedictkhoomw"},"content":"        assertFalse(typicalHistory.equals(oneMissingEntry));"},{"lineNumber":110,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":111,"author":{"gitId":"benedictkhoomw"},"content":"        // one extra entry -\u003e return false"},{"lineNumber":112,"author":{"gitId":"benedictkhoomw"},"content":"        assertFalse(typicalHistory.equals(oneExtraEntry));"},{"lineNumber":113,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":114,"author":{"gitId":"benedictkhoomw"},"content":"        // different entries -\u003e return false"},{"lineNumber":115,"author":{"gitId":"benedictkhoomw"},"content":"        assertFalse(typicalHistory.equals(differentEntriesButSameSize));"},{"lineNumber":116,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":118,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"benedictkhoomw"},"content":"    public void get_withInvalidIndex_throwsIndexOutOfBoundsException() {"},{"lineNumber":120,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory empty \u003d new CommandHistory();"},{"lineNumber":121,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e empty.get(-1));"},{"lineNumber":122,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e empty.get(-1235));"},{"lineNumber":123,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e empty.get(0));"},{"lineNumber":124,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e empty.get(1));"},{"lineNumber":125,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":126,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory typical \u003d TypicalCommandHistoryEntries.getTypicalCommandHistory();"},{"lineNumber":127,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e typical.get(typical.size()));"},{"lineNumber":128,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e typical.get(-1));"},{"lineNumber":129,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":131,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"benedictkhoomw"},"content":"    public void get_withValidIndex_returnsCorrectEntry() {"},{"lineNumber":133,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory commandHistory \u003d TypicalCommandHistoryEntries.getTypicalCommandHistory();"},{"lineNumber":134,"author":{"gitId":"benedictkhoomw"},"content":"        List\u003cCommandHistoryEntry\u003e typicalEntries \u003d TypicalCommandHistoryEntries.getTypicalEntries();"},{"lineNumber":135,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":136,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c typicalEntries.size(); i++) {"},{"lineNumber":137,"author":{"gitId":"benedictkhoomw"},"content":"            CommandHistoryEntry entry \u003d commandHistory.get(i);"},{"lineNumber":138,"author":{"gitId":"benedictkhoomw"},"content":"            CommandHistoryEntry correspondingEntry \u003d typicalEntries.get(i);"},{"lineNumber":139,"author":{"gitId":"benedictkhoomw"},"content":"            assertEquals(entry, correspondingEntry);"},{"lineNumber":140,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":143,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"benedictkhoomw"},"content":"    public void size_ofNewCommandHistory_isZero() {"},{"lineNumber":145,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory commandHistory \u003d new CommandHistory();"},{"lineNumber":146,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(0, commandHistory.size());"},{"lineNumber":147,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":148}},{"path":"src/test/java/seedu/address/model/resident/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // valid email"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":1,"-":60}},{"path":"src/test/java/seedu/address/model/resident/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.ResidentBuilder;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        // different resident -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        assertTrue(predicate.test(new ResidentBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        assertTrue(predicate.test(new ResidentBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        assertTrue(predicate.test(new ResidentBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        assertTrue(predicate.test(new ResidentBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"        assertFalse(predicate.test(new ResidentBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"        assertFalse(predicate.test(new ResidentBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"        assertFalse(predicate.test(new ResidentBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"                .withEmail(\"alice@email.com\").build()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":11,"-":64}},{"path":"src/test/java/seedu/address/model/resident/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":1,"-":39}},{"path":"src/test/java/seedu/address/model/resident/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":1,"-":39}},{"path":"src/test/java/seedu/address/model/resident/ResidentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.ALICE;"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.ResidentBuilder;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"public class ResidentTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    /*"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"        Resident resident \u003d new ResidentBuilder().build();"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e resident.getPhone().remove());"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"    */"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    public void isSameResident() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"        assertTrue(ALICE.isSameResident(ALICE));"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        assertFalse(ALICE.isSameResident(null));"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        Resident editedAlice \u003d new ResidentBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"                .build();"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"        assertTrue(ALICE.isSameResident(editedAlice));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        editedAlice \u003d new ResidentBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        assertFalse(ALICE.isSameResident(editedAlice));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        Resident editedBob \u003d new ResidentBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        assertFalse(BOB.isSameResident(editedBob));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        editedBob \u003d new ResidentBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        assertFalse(BOB.isSameResident(editedBob));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        Resident aliceCopy \u003d new ResidentBuilder(ALICE).build();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"        // different resident -\u003e returns false"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"        Resident editedAlice \u003d new ResidentBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        editedAlice \u003d new ResidentBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        editedAlice \u003d new ResidentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":26,"-":56}},{"path":"src/test/java/seedu/address/model/resident/RoomTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"public class RoomTest {"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Room(null));"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    public void constructor_invalidRoom_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"        String invalidRoom \u003d \"03-1234\";"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Room(invalidRoom));"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"    public void isValidRoom() {"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"        // null room"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e Room.isValidRoom(null));"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"        // invalid rooms"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"-\")); // no numbers"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"03144\")); // room does not have hyphen"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"floor-unit\")); // non-numeric"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"fl00r-un1t\")); // alphabets with number"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"0-123\")); // floor is fewer than 2 digits"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"000-123\")); // floor is more than 2 digits"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"00-12\")); // unit is few than 3 digits"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"00-1234\")); // unit is more than 3 digits"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        // valid rooms"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        assertTrue(Room.isValidRoom(\"01-234\"));"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"}"}],"authorContributionMap":{"colintkn":42}},{"path":"src/test/java/seedu/address/model/resident/UniqueResidentListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.ALICE;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.exceptions.DuplicateResidentException;"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.exceptions.ResidentNotFoundException;"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.ResidentBuilder;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"public class UniqueResidentListTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    private final UniqueResidentList uniqueResidentList \u003d new UniqueResidentList();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"    public void contains_nullResident_throwsNullPointerException() {"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidentList.contains(null));"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"    public void contains_residentNotInList_returnsFalse() {"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        assertFalse(uniqueResidentList.contains(ALICE));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    public void contains_residentInList_returnsTrue() {"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        assertTrue(uniqueResidentList.contains(ALICE));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    public void contains_residentWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        Resident editedAlice \u003d new ResidentBuilder(ALICE).build();"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        assertTrue(uniqueResidentList.contains(editedAlice));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"    public void add_nullResident_throwsNullPointerException() {"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidentList.add(null));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"    public void add_duplicateResident_throwsDuplicateResidentException() {"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        assertThrows(DuplicateResidentException.class, () -\u003e uniqueResidentList.add(ALICE));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"    public void setResident_nullTargetResident_throwsNullPointerException() {"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidentList.setResident(null, ALICE));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"    public void setResident_nullEditedResident_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidentList.setResident(ALICE, null));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"    public void setResident_targetResidentNotInList_throwsResidentNotFoundException() {"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"        assertThrows(ResidentNotFoundException.class, () -\u003e uniqueResidentList.setResident(ALICE, ALICE));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"    public void setResident_editedResidentIsSameResident_success() {"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.setResident(ALICE, ALICE);"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"        UniqueResidentList expectedUniqueResidentList \u003d new UniqueResidentList();"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"        expectedUniqueResidentList.add(ALICE);"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        assertEquals(expectedUniqueResidentList, uniqueResidentList);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"    public void setResident_editedResidentHasSameIdentity_success() {"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"        Resident editedAlice \u003d new ResidentBuilder(ALICE)"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.setResident(ALICE, editedAlice);"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"        UniqueResidentList expectedUniqueResidentList \u003d new UniqueResidentList();"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"        expectedUniqueResidentList.add(editedAlice);"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"        assertEquals(expectedUniqueResidentList, uniqueResidentList);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"    public void setResident_editedResidentHasDifferentIdentity_success() {"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);"},{"lineNumber":96,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.setResident(ALICE, BOB);"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"        UniqueResidentList expectedUniqueResidentList \u003d new UniqueResidentList();"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"        expectedUniqueResidentList.add(BOB);"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"        assertEquals(expectedUniqueResidentList, uniqueResidentList);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"    public void setResident_editedResidentHasNonUniqueIdentity_throwsDuplicateResidentException() {"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(BOB);"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"        assertThrows(DuplicateResidentException.class, () -\u003e uniqueResidentList.setResident(ALICE, BOB));"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"colintkn"},"content":"    public void remove_nullResident_throwsNullPointerException() {"},{"lineNumber":111,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidentList.remove(null));"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitId":"colintkn"},"content":"    public void remove_residentDoesNotExist_throwsResidentNotFoundException() {"},{"lineNumber":116,"author":{"gitId":"colintkn"},"content":"        assertThrows(ResidentNotFoundException.class, () -\u003e uniqueResidentList.remove(ALICE));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"colintkn"},"content":"    public void remove_existingResident_removesResident() {"},{"lineNumber":121,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);"},{"lineNumber":122,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.remove(ALICE);"},{"lineNumber":123,"author":{"gitId":"colintkn"},"content":"        UniqueResidentList expectedUniqueResidentList \u003d new UniqueResidentList();"},{"lineNumber":124,"author":{"gitId":"colintkn"},"content":"        assertEquals(expectedUniqueResidentList, uniqueResidentList);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitId":"colintkn"},"content":"    public void setResidents_nullUniqueResidentList_throwsNullPointerException() {"},{"lineNumber":129,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidentList.setResidents((UniqueResidentList) null));"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"colintkn"},"content":"    public void setResidents_uniqueResidentList_replacesOwnListWithProvidedUniqueResidentList() {"},{"lineNumber":134,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);"},{"lineNumber":135,"author":{"gitId":"colintkn"},"content":"        UniqueResidentList expectedUniqueResidentList \u003d new UniqueResidentList();"},{"lineNumber":136,"author":{"gitId":"colintkn"},"content":"        expectedUniqueResidentList.add(BOB);"},{"lineNumber":137,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.setResidents(expectedUniqueResidentList);"},{"lineNumber":138,"author":{"gitId":"colintkn"},"content":"        assertEquals(expectedUniqueResidentList, uniqueResidentList);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitId":"colintkn"},"content":"    public void setResidents_nullList_throwsNullPointerException() {"},{"lineNumber":143,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidentList.setResidents((List\u003cResident\u003e) null));"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitId":"colintkn"},"content":"    public void setResidents_list_replacesOwnListWithProvidedList() {"},{"lineNumber":148,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);"},{"lineNumber":149,"author":{"gitId":"colintkn"},"content":"        List\u003cResident\u003e residentList \u003d Collections.singletonList(BOB);"},{"lineNumber":150,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.setResidents(residentList);"},{"lineNumber":151,"author":{"gitId":"colintkn"},"content":"        UniqueResidentList expectedUniqueResidentList \u003d new UniqueResidentList();"},{"lineNumber":152,"author":{"gitId":"colintkn"},"content":"        expectedUniqueResidentList.add(BOB);"},{"lineNumber":153,"author":{"gitId":"colintkn"},"content":"        assertEquals(expectedUniqueResidentList, uniqueResidentList);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"colintkn"},"content":"    public void setResidents_listWithDuplicateResidents_throwsDuplicateResidentException() {"},{"lineNumber":158,"author":{"gitId":"colintkn"},"content":"        List\u003cResident\u003e listWithDuplicateResidents \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":159,"author":{"gitId":"colintkn"},"content":"        assertThrows(DuplicateResidentException.class, () -\u003e uniqueResidentList"},{"lineNumber":160,"author":{"gitId":"colintkn"},"content":"                .setResidents(listWithDuplicateResidents));"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":166,"author":{"gitId":"colintkn"},"content":"            -\u003e uniqueResidentList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":84,"-":84}},{"path":"src/test/java/seedu/address/model/resident/YearTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"public class YearTest {"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Year(null));"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    public void constructor_invalidYear_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"        String invalidYear \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Year(invalidYear));"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"    public void isValidYear() {"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"        // null year"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e Year.isValidYear(null));"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"        // invalid years"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"        assertFalse(Year.isValidYear(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"        assertFalse(Year.isValidYear(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"        assertFalse(Year.isValidYear(\"6\")); // number out of range"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        assertFalse(Year.isValidYear(\"year\")); // non-numeric"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        assertFalse(Year.isValidYear(\"Year3\")); // alphabets with number"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        assertFalse(Year.isValidYear(\" 3 \")); // alphabets with number"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"        // valid years"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        assertTrue(Year.isValidYear(\"4\"));"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"}"}],"authorContributionMap":{"colintkn":39}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedResidentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.storage.JsonAdaptedResident.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"public class JsonAdaptedResidentTest {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    private static final String INVALID_YEAR \u003d \"6\";"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    private static final String INVALID_ROOM \u003d \"03145\";"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    private static final String VALID_YEAR \u003d BENSON.getYear().toString();"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"    private static final String VALID_ROOM \u003d BENSON.getRoom().toString();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"    public void toModelType_validResidentDetails_returnsResident() throws Exception {"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d new JsonAdaptedResident(BENSON);"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        assertEquals(BENSON, resident.toModelType());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"                new JsonAdaptedResident(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_YEAR, VALID_ROOM);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d new JsonAdaptedResident(null, VALID_PHONE,"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"                VALID_EMAIL, VALID_YEAR, VALID_ROOM);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"                new JsonAdaptedResident(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_YEAR, VALID_ROOM);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d new JsonAdaptedResident(VALID_NAME, null,"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"                VALID_EMAIL, VALID_YEAR, VALID_ROOM);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"                new JsonAdaptedResident(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_YEAR, VALID_ROOM);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d new JsonAdaptedResident(VALID_NAME, VALID_PHONE,"},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":"                null, VALID_YEAR, VALID_ROOM);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"    public void toModelType_invalidYear_throwsIllegalValueException() {"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"                new JsonAdaptedResident(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"                        INVALID_YEAR, VALID_ROOM);"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d Year.MESSAGE_CONSTRAINTS;"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"    public void toModelType_nullYear_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d new JsonAdaptedResident(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"                null, VALID_ROOM);"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Year.class.getSimpleName());"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"    public void toModelType_invalidRoom_throwsIllegalValueException() {"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"                new JsonAdaptedResident(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_YEAR, INVALID_ROOM);"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d Room.MESSAGE_CONSTRAINTS;"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);"},{"lineNumber":108,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":59,"-":50}},{"path":"src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.ALICE;"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.HOON;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.IDA;"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"    public void readAddressBook_invalidResidentAddressBook_throwDataConversionException() {"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidResidentAddressBook.json\"));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"    public void readAddressBook_invalidAndValidResidentAddressBook_throwDataConversionException() {"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidResidentAddressBook.json\"));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Save in new file and read back"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        original.addResident(HOON);"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"        original.removeResident(ALICE);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"        original.addResident(IDA);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":11,"-":99}},{"path":"src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.TypicalResidents;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"    private static final Path TYPICAL_RESIDENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalResidentsAddressBook.json\");"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"    private static final Path INVALID_RESIDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidResidentAddressBook.json\");"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    private static final Path DUPLICATE_RESIDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateResidentAddressBook.json\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    public void toModelType_typicalResidentsFile_success() throws Exception {"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_RESIDENTS_FILE,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"        AddressBook typicalResidentsAddressBook \u003d TypicalResidents.getTypicalAddressBook();"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"        assertEquals(addressBookFromFile, typicalResidentsAddressBook);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"    public void toModelType_invalidResidentFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_RESIDENT_FILE,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"    public void toModelType_duplicateResidents_throwsIllegalValueException() throws Exception {"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_RESIDENT_FILE,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_RESIDENT,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":13,"-":34}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalResidents.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class."},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":1,"-":67}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withResident(\"John\", \"Doe\").build();}"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"     * Adds a new {@code Resident} to the {@code AddressBook} that we are building."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    public AddressBookBuilder withResident(Resident resident) {"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"        addressBook.addResident(resident);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook build() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":5,"-":29}},{"path":"src/test/java/seedu/address/testutil/EditResidentDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand.EditResidentDescriptor;"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":" * A utility class to help with building EditResidentDescriptor objects."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"public class EditResidentDescriptorBuilder {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    private EditResidentDescriptor descriptor;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"    public EditResidentDescriptorBuilder() {"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"        descriptor \u003d new EditResidentCommand.EditResidentDescriptor();"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"    public EditResidentDescriptorBuilder(EditResidentCommand.EditResidentDescriptor descriptor) {"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"        this.descriptor \u003d new EditResidentCommand.EditResidentDescriptor(descriptor);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"     * Returns an {@code EditResidentDescriptor} with fields containing {@code resident}\u0027s details"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"    public EditResidentDescriptorBuilder(Resident resident) {"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        descriptor \u003d new EditResidentCommand.EditResidentDescriptor();"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        descriptor.setName(resident.getName());"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        descriptor.setPhone(resident.getPhone());"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        descriptor.setEmail(resident.getEmail());"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"        descriptor.setYear(resident.getYear());"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"        descriptor.setRoom(resident.getRoom());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Name} of the {@code EditResidentDescriptor} that we are building."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"    public EditResidentDescriptorBuilder withName(String name) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Phone} of the {@code EditResidentDescriptor} that we are building."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"    public EditResidentDescriptorBuilder withPhone(String phone) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Email} of the {@code EditResidentDescriptor} that we are building."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"    public EditResidentDescriptorBuilder withEmail(String email) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Year} of the {@code EditResidentDescriptor} that we are building."},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"    public EditResidentDescriptorBuilder withYear(String year) {"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"        descriptor.setYear(new Year(year));"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"        return this;"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Room} of the {@code EditResidentDescriptor} that we are building."},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"    public EditResidentDescriptorBuilder withRoom(String room) {"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        descriptor.setRoom(new Room(room));"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"        return this;"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":"    public EditResidentCommand.EditResidentDescriptor build() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":47,"-":36}},{"path":"src/test/java/seedu/address/testutil/ResidentBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":" * A utility class to help with building Resident objects."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"public class ResidentBuilder {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"    public static final String DEFAULT_YEAR \u003d \"1\";"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"    public static final String DEFAULT_ROOM \u003d \"01-234\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    private Year year;"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"    private Room room;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"     * Creates a {@code ResidentBuilder} with the default details."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"    public ResidentBuilder() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        year \u003d new Year(DEFAULT_YEAR);"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"        room \u003d new Room(DEFAULT_ROOM);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"     * Initializes the ResidentBuilder with the data of {@code residentToCopy}."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    public ResidentBuilder(Resident residentToCopy) {"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        name \u003d residentToCopy.getName();"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        phone \u003d residentToCopy.getPhone();"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        email \u003d residentToCopy.getEmail();"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        year \u003d residentToCopy.getYear();"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        room \u003d residentToCopy.getRoom();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Name} of the {@code Resident} that we are building."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"    public ResidentBuilder withName(String name) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Phone} of the {@code Resident} that we are building."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"    public ResidentBuilder withPhone(String phone) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Email} of the {@code Resident} that we are building."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"    public ResidentBuilder withEmail(String email) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Year} of the {@code Resident} that we are building."},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"    public ResidentBuilder withYear(String year) {"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"        this.year \u003d new Year(year);"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"        return this;"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Room} of the {@code Resident} that we are building."},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"    public ResidentBuilder withRoom(String room) {"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"        this.room \u003d new Room(room);"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"        return this;"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"    public Resident build() {"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"        return new Resident(name, phone, email, year, room);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":47,"-":46}},{"path":"src/test/java/seedu/address/testutil/ResidentUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":" * A utility class for Resident."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"public class ResidentUtil {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"     * Returns an add command string for adding the {@code resident}."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    public static String getAddCommand(Resident resident) {"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"        return AddResidentCommand.COMMAND_WORD + \" \" + getResidentDetails(resident);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"     * Returns the part of command string for the given {@code resident}\u0027s details."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    public static String getResidentDetails(Resident resident) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"        sb.append(PREFIX_NAME + resident.getName().fullName + \" \");"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        sb.append(PREFIX_PHONE + resident.getPhone().value + \" \");"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        sb.append(PREFIX_EMAIL + resident.getEmail().value + \" \");"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        sb.append(PREFIX_YEAR + resident.getYear().value + \" \");"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        sb.append(PREFIX_ROOM + resident.getRoom().value + \" \");"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"     * Returns the part of command string for the given {@code EditResidentDescriptor}\u0027s details."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    public static String getEditResidentDescriptorDetails(EditResidentCommand.EditResidentDescriptor descriptor) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        descriptor.getYear().ifPresent(year -\u003e sb.append(PREFIX_YEAR).append(year.value).append(\" \"));"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        descriptor.getRoom().ifPresent(room -\u003e sb.append(PREFIX_ROOM).append(room.value).append(\" \"));"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":22,"-":29}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"     * Returns the middle index of the resident in the {@code model}\u0027s resident list."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        return Index.fromOneBased(model.getFilteredResidentList().size() / 2);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"     * Returns the last index of the resident in the {@code model}\u0027s resident list."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        return Index.fromOneBased(model.getFilteredResidentList().size());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"     * Returns the resident in the {@code model}\u0027s resident list at {@code index}."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"    public static Resident getResident(Model model, Index index) {"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        return model.getFilteredResidentList().get(index.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":8,"-":47}},{"path":"src/test/java/seedu/address/testutil/TypicalCommandHistoryEntries.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Random;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistory;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistoryEntry;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":" * A utility class containing a list of {@code CommandHistoryEntry} objects to be used in tests."},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"public class TypicalCommandHistoryEntries {"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    public static final int DEFAULT_MAX_RANDOM_ENTRY_LENGTH \u003d 25;"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    public static final CommandHistoryEntry HELP \u003d new CommandHistoryEntry(\"help\");"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    public static final CommandHistoryEntry HISTORY_ALL \u003d new CommandHistoryEntry(\"history\");"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    public static final CommandHistoryEntry HISTORY_FIVE \u003d new CommandHistoryEntry(\"history 5\");"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"     * Prevent instantiation."},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    private TypicalCommandHistoryEntries() {"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     * Generates and returns a {@code CommandHistoryEntry} containing a random alphanumeric string of"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     * length between 1 and {@code DEFAULT_MAX_RANDOM_ENTRY_LENGTH}, inclusive."},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The generated {@code CommandHistoryEntry}."},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"    public static CommandHistoryEntry getRandomEntry() {"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        return getRandomEntry(DEFAULT_MAX_RANDOM_ENTRY_LENGTH);"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"     * Generates and returns a {@code CommandHistoryEntry} containing a random alphanumeric string of"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"     * length between 1 and {@code maxStringLength}, inclusive."},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"     * @param maxStringLength The inclusive upper bound on string length."},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The generated {@code CommandHistoryEntry}."},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"    public static CommandHistoryEntry getRandomEntry(int maxStringLength) {"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"        // Solution below adapted from https://www.baeldung.com/java-random-string"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"        final int leftLimit \u003d 48; // numeral \u00270\u0027"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"        final int rightLimit \u003d 122; // letter \u0027z\u0027"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"        final Random random \u003d new Random();"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        final int targetStringLength \u003d random.nextInt(maxStringLength + 1);"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"        final String generatedString \u003d random.ints(leftLimit, rightLimit + 1)"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"                .filter(i -\u003e (i \u003c\u003d 57 || i \u003e\u003d 65) \u0026\u0026 (i \u003c\u003d 90 || i \u003e\u003d 97))"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"                .limit(targetStringLength)"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"                .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"                .toString();"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandHistoryEntry(generatedString);"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a {@code CommandHistory} with some typical command history entries."},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A {@code CommandHistory} with some typical command history entries."},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"    public static CommandHistory getTypicalCommandHistory() {"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory ch \u003d new CommandHistory();"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"        for (CommandHistoryEntry entry : getTypicalEntries()) {"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"            ch.appendEntry(entry);"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"        return ch;"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a list of some typical command history entries."},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A list of some typical command history entries."},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"    public static List\u003cCommandHistoryEntry\u003e getTypicalEntries() {"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(HELP, HISTORY_ALL, HELP, HISTORY_FIVE, HISTORY_FIVE));"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":83}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"    public static final Index INDEX_FIRST_RESIDENT \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"    public static final Index INDEX_SECOND_RESIDENT \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"    public static final Index INDEX_THIRD_RESIDENT \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":3,"-":9}},{"path":"src/test/java/seedu/address/testutil/TypicalResidents.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_AMY;"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_BOB;"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAR_AMY;"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAR_BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":" * A utility class containing a list of {@code Resident} objects to be used in tests."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"public class TypicalResidents {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"    public static final Resident ALICE \u003d new ResidentBuilder().withName(\"Alice Pauline\")"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"            .withEmail(\"alice@example.com\")"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"            .withYear(\"1\")"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"            .withRoom(\"01-234\")"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"            .build();"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"    public static final Resident BENSON \u003d new ResidentBuilder().withName(\"Benson Meier\")"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"            .withYear(\"2\")"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"            .withRoom(\"02-234\")"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"            .build();"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    public static final Resident CARL \u003d new ResidentBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"            .withEmail(\"heinz@example.com\").withYear(\"3\").withRoom(Room.UNALLOCATED_REGEX).build();"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"    public static final Resident DANIEL \u003d new ResidentBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"            .withEmail(\"cornelia@example.com\")"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"            .withYear(\"4\")"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"            .withRoom(\"03-234\")"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"            .build();"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"    public static final Resident ELLE \u003d new ResidentBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"            .withEmail(\"werner@example.com\")"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"            .withYear(\"5\")"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"            .withRoom(\"04-234\")"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"            .build();"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"    public static final Resident FIONA \u003d new ResidentBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"            .withEmail(\"lydia@example.com\")"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"            .withYear(\"1\")"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"            .withRoom(\"05-234\")"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"            .build();"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"    public static final Resident GEORGE \u003d new ResidentBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"            .withEmail(\"anna@example.com\")"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"            .withYear(\"3\")"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"            .withRoom(\"06-234\")"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"            .build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"    public static final Resident HOON \u003d new ResidentBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"            .withEmail(\"stefan@example.com\").withYear(\"1\").withRoom(\"07-234\").build();"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"    public static final Resident IDA \u003d new ResidentBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"            .withEmail(\"hans@example.com\").withYear(\"2\").withRoom(\"08-234\").build();"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"    // Manually added - Resident\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"    public static final Resident AMY \u003d new ResidentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"            .withEmail(VALID_EMAIL_AMY).withYear(VALID_YEAR_AMY).withRoom(VALID_ROOM_AMY).build();"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"    public static final Resident BOB \u003d new ResidentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"            .withEmail(VALID_EMAIL_BOB)"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"            .withYear(VALID_YEAR_BOB)"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"            .withRoom(VALID_ROOM_BOB)"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"    private TypicalResidents() {} // prevents instantiation"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"     * Returns an {@code AddressBook} with all the typical residents."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"        for (Resident resident : getTypicalResidents()) {"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"            ab.addResident(resident);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"    public static List\u003cResident\u003e getTypicalResidents() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"colintkn":55,"-":39}},{"path":"src/test/java/seedu/address/testutil/room/EditRoomDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.testutil.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.EditRoomCommand.EditRoomDescriptor;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.IsOccupied;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomNumber;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomType;"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":" * A utility class to help with building EditRoomDescriptor objects."},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"public class EditRoomDescriptorBuilder {"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    private EditRoomDescriptor descriptor;"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    public EditRoomDescriptorBuilder() {"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"        this.descriptor \u003d new EditRoomDescriptor();"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    public EditRoomDescriptorBuilder(EditRoomDescriptor descriptor) {"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"        this.descriptor \u003d new EditRoomDescriptor(descriptor);"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"     * Returns an {@code EditRoomDescriptorBuilder} with fields containing {@code room}\u0027s details"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    public EditRoomDescriptorBuilder(Room room) {"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        descriptor \u003d new EditRoomDescriptor();"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        descriptor.setRoomNumber(room.getRoomNumber());"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"        descriptor.setRoomType(room.getRoomType());"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"        descriptor.setIsOccupied(room.isOccupied());"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        descriptor.setTags(room.getTags());"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"     * Sets the {@code RoomNumber} of the {@code EditRoomDescriptorBuilder} that we are building."},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    public EditRoomDescriptorBuilder withRoomNumber(String roomNumber) {"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        descriptor.setRoomNumber(new RoomNumber(roomNumber));"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        return this;"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"     * Sets the {@code RoomType} of the {@code EditRoomDescriptorBuilder} that we are building."},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"    public EditRoomDescriptorBuilder withRoomType(String roomType) {"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        descriptor.setRoomType(new RoomType(roomType));"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        return this;"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"     * Sets the {@code IsOccupied} of the {@code EditRoomDescriptorBuilder} that we are building."},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"    public EditRoomDescriptorBuilder withOccupancyStatus(String isOccupied) {"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"        descriptor.setIsOccupied(new IsOccupied(isOccupied));"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"        return this;"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditRoomDescriptorBuilder}"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"     * that we are building."},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"    public EditRoomDescriptorBuilder withTags(String... tags) {"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"        return this;"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"     * Builds the EditRoomDescriptor based on the provided parameters"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"     * @return EditRoomDescriptor with properties issued through the various"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"     * methods of the {@code EditRoomDescriptorBuiler} class"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"    public EditRoomDescriptor build() {"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"        return descriptor;"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":82}},{"path":"src/test/java/seedu/address/testutil/room/RoomBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.testutil.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.IsOccupied;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomNumber;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomType;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":" * A utility class to help with building Room objects."},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"public class RoomBuilder {"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    public static final String DEFAULT_ROOM_NUMBER \u003d \"01-001\";"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    public static final String DEFAULT_ROOM_TYPE \u003d \"CORRIDOR_NON_AC\";"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    public static final String DEFAULT_OCCUPANCY_STATUS \u003d \"y\";"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    private RoomNumber roomNumber;"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    private RoomType type;"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    private IsOccupied isOccupied;"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"     * Creates a {@code RoomBuilder} with the default details."},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    public RoomBuilder() {"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        this.roomNumber \u003d new RoomNumber(DEFAULT_ROOM_NUMBER);"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"        this.type \u003d new RoomType(DEFAULT_ROOM_TYPE);"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        this.isOccupied \u003d new IsOccupied(DEFAULT_OCCUPANCY_STATUS);"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        this.tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"     * Initializes the RoomBuilder with the data of {@code roomToCopy}."},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    public RoomBuilder(Room roomToCopy) {"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        this.roomNumber \u003d roomToCopy.getRoomNumber();"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        this.type \u003d roomToCopy.getRoomType();"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        this.isOccupied \u003d roomToCopy.isOccupied();"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        this.tags \u003d new HashSet\u003c\u003e(roomToCopy.getTags());"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"     * Sets the {@code RoomNumber} of the {@code Room} that we are building."},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"    public RoomBuilder withRoomNumber(String roomNumber) {"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"        this.roomNumber \u003d new RoomNumber(roomNumber);"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        return this;"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"     * Sets the {@code RoomType} of the {@code Room} that we are building."},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"    public RoomBuilder withRoomType(String roomType) {"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"        this.type \u003d new RoomType(roomType);"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"        return this;"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"     * Sets the {@code IsOccupied} of the {@code Room} that we are building."},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"    public RoomBuilder withOccupancyStatus(String isOccupied) {"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"        this.isOccupied \u003d new IsOccupied(isOccupied);"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"        return this;"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Room} that we are building."},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"    public RoomBuilder withTags(String... tags) {"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"        return this;"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"     * Builds the room based on the provided parameters"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"     * @return Room with properties issued through the various methods of the {@code RoomBuilder} class"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"    public Room build() {"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"        return new Room(roomNumber, type, isOccupied, tags);"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":87}},{"path":"src/test/java/seedu/address/testutil/room/RoomUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.testutil.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_OCCUPANCY_STATUS;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TAG;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TYPE;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.AddRoomCommand;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.EditRoomCommand;"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":" * A utility class for Room."},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"public class RoomUtil {"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"     * Returns an add command string for adding the {@code room}."},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    public static String getAddCommand(Room room) {"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"        return AddRoomCommand.COMMAND_WORD + \" \" + getRoomDetails(room);"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"     * Returns the part of command string for the given {@code room}\u0027s details."},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    public static String getRoomDetails(Room room) {"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        sb.append(PREFIX_ROOM_NUMBER + room.getRoomNumber().roomNumber + \" \");"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"        sb.append(PREFIX_ROOM_TYPE + room.getRoomType().value.toString() + \" \");"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"        sb.append(PREFIX_ROOM_OCCUPANCY_STATUS + room.isOccupied().toString() + \" \");"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        room.getTags().stream().forEach("},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"            s -\u003e sb.append(PREFIX_ROOM_TAG + s.tagName + \" \")"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        );"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"        return sb.toString();"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"     * Returns the part of command string for the given {@code EditRoomDescriptor}\u0027s details."},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"    public static String getEditRoomDescriptorDetails(EditRoomCommand.EditRoomDescriptor descriptor) {"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"        descriptor.getRoomNumber()"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"                .ifPresent(roomNumber -\u003e sb.append(PREFIX_ROOM_NUMBER + roomNumber.roomNumber + \" \"));"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        descriptor.getRoomType()"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"                .ifPresent(roomType -\u003e sb.append(PREFIX_PHONE).append(roomType.value.toString()).append(\" \"));"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        descriptor.getIsOccupied()"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"                .ifPresent(isOccupied -\u003e sb.append(PREFIX_EMAIL).append(isOccupied.toString()).append(\" \"));"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"                sb.append(PREFIX_ROOM_TAG);"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"            } else {"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_ROOM_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"        return sb.toString();"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":63}},{"path":"src/test/java/seedu/address/testutil/room/TypicalRooms.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.testutil.room;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"public class TypicalRooms {"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"    public static final Room ROOM_CORRIDOR_NON_AC_OCCUPIED \u003d new RoomBuilder()"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"09-100\")"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"corridor_non_ac\")"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"y\")"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"            .build();"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    public static final Room ROOM_CORRIDOR_NON_AC_NOT_OCCUPIED \u003d new RoomBuilder()"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"09-110\")"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"corridor_non_ac\")"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"n\")"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"            .build();"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    public static final Room ROOM_CORRIDOR_AC_OCCUPIED \u003d new RoomBuilder()"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"10-100\")"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"corridor_ac\")"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"y\")"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"            .build();"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    public static final Room ROOM_CORRIDOR_AC_NOT_OCCUPIED \u003d new RoomBuilder()"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"10-110\")"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"corridor_ac\")"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"n\")"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"            .build();"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    public static final Room ROOM_SUITE_NON_AC_OCCUPIED \u003d new RoomBuilder()"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"11-100\")"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"suite_non_ac\")"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"y\")"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"            .build();"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    public static final Room ROOM_SUITE_NON_AC_NOT_OCCUPIED \u003d new RoomBuilder()"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"11-110\")"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"suite_non_ac\")"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"n\")"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"            .build();"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"    public static final Room ROOM_SUITE_AC_OCCUPIED \u003d new RoomBuilder()"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"12-100\")"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"suite_ac\")"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"y\")"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"            .build();"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"    public static final Room ROOM_SUITE_AC_NOT_OCCUPIED \u003d new RoomBuilder()"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"12-110\")"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"suite_ac\")"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"n\")"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"            .build();"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"    public static final Room MANUAL_ROOM \u003d new RoomBuilder()"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"12-110\")"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"suite_ac\")"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"n\")"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"            .build();"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"    private TypicalRooms() {"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"    public static List\u003cRoom\u003e getTypicalRooms() {"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ROOM_CORRIDOR_AC_NOT_OCCUPIED,"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"                ROOM_CORRIDOR_AC_OCCUPIED,"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"                ROOM_CORRIDOR_NON_AC_NOT_OCCUPIED,"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"                ROOM_CORRIDOR_NON_AC_OCCUPIED,"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"                ROOM_SUITE_AC_NOT_OCCUPIED,"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"                ROOM_SUITE_AC_OCCUPIED,"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"                ROOM_SUITE_NON_AC_NOT_OCCUPIED,"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"                ROOM_SUITE_NON_AC_NOT_OCCUPIED));"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":71}}]
