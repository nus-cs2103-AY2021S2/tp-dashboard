[{"path":".vscode/launch.json","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"{","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"    // Use IntelliSense to learn about possible attributes.","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"    // Hover to view descriptions of existing attributes.","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"    // For more information, visit: https://go.microsoft.com/fwlink/?linkid\u003d830387","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"    \"version\": \"0.2.0\",","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"    \"configurations\": [","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"        {","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"            \"type\": \"java\",","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"            \"name\": \"Launch Current File\",","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"            \"request\": \"launch\",","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"            \"mainClass\": \"${file}\"","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"        },","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"        {","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"            \"type\": \"java\",","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"            \"name\": \"Launch Main\",","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"            \"request\": \"launch\",","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"            \"mainClass\": \"seedu.address.Main\",","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"            \"projectName\": \"tp\",","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"            \"vmArgs\": \"-enableassertions\"","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    ]","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"stein414":22}},{"path":".vscode/settings.json","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"{","lastModifiedDate":"2021-02-23"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"    \"files.eol\": \"\\n\",","lastModifiedDate":"2021-02-23"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"    \"files.insertFinalNewline\": true,","lastModifiedDate":"2021-02-23"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"    \"files.trimTrailingWhitespace\": true,","lastModifiedDate":"2021-02-23"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"    \"java.checkstyle.version\": \"8.29\",","lastModifiedDate":"2021-02-23"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"    \"java.checkstyle.configuration\": \"${workspaceFolder}/config/checkstyle/checkstyle.xml\",","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"    \"java.checkstyle.properties\": {","lastModifiedDate":"2021-02-23"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"        \"config_loc\": \"${workspaceFolder}/config/checkstyle\"","lastModifiedDate":"2021-02-23"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"    },","lastModifiedDate":"2021-02-23"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"    \"java.codeGeneration.hashCodeEquals.useInstanceof\": true,","lastModifiedDate":"2021-02-23"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"    \"java.completion.importOrder\": [","lastModifiedDate":"2021-02-23"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"        \"java\",","lastModifiedDate":"2021-02-23"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"        \"javax\",","lastModifiedDate":"2021-02-23"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"        \"com\",","lastModifiedDate":"2021-02-23"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"        \"org\"","lastModifiedDate":"2021-02-23"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    ],","lastModifiedDate":"2021-02-23"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    \"java.configuration.updateBuildConfiguration\": \"automatic\",","lastModifiedDate":"2021-02-23"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"    \"java.format.settings.url\": \"https://gist.githubusercontent.com/stein212/1eb6ed21d06c4a79d54a5a2cb074539b/raw/a2ff1d152a1bafd1b5000988724aa4400738abde/eclipse-formatter.xml\",","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-02-23"}],"authorContributionMap":{"stein414":19}},{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103-T14-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103-T14-1/tp/actions)","lastModifiedDate":"2021-02-25"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103-T14-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103-T14-1/tp)","lastModifiedDate":"2021-02-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"**SunRez** is a desktop app designed for college residential staff to efficiently manage student housing services. It is optimized for use via a Command Line Interface (CLI).","lastModifiedDate":"2021-02-25"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"**SunRez** has the following features:","lastModifiedDate":"2021-02-25"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of maintenance issues","lastModifiedDate":"2021-02-25"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of student records","lastModifiedDate":"2021-02-25"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of room records","lastModifiedDate":"2021-02-25"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"If this is your first time using/contributing to **SunRez**, check out our guides in the [Site Map](#site-map) section below.","lastModifiedDate":"2021-02-25"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"## Site Map","lastModifiedDate":"2021-02-25"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"* [User Guide](docs/UserGuide.md)","lastModifiedDate":"2021-02-25"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"* [Developer Guide](docs/DeveloperGuide.md)","lastModifiedDate":"2021-02-25"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"* [About Us](docs/AboutUs.md)","lastModifiedDate":"2021-02-25"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"* [Github](https://github.com/AY2021S2-CS2103-T14-1/tp)","lastModifiedDate":"2021-02-25"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"## Acknowledgements","lastModifiedDate":"2021-02-25"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"* This project is based on the [AddressBook-Level3 project](https://se-education.org/addressbook-level3/),","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"  and inspired by the [AddressBook-Level4 project](https://se-education.org/addressbook-level4/);","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"  both were created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2021-02-25"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"* Logo designed using [FreeLogoDesign](https://www.freelogodesign.org/).","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"## License: [MIT](LICENSE)","lastModifiedDate":"2021-02-25"}],"authorContributionMap":{"benedictkhoomw":27,"-":3}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"run {","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"    String jUnitVersion \u003d \u00275.6.0\u0027","lastModifiedDate":"2021-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"    archiveName \u003d \u0027sunrez.jar\u0027","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"benedictkhoomw":5,"stein414":1,"-":70}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"You can reach us at the email `e0205114[at]comp.nus.edu.sg`","lastModifiedDate":"2021-02-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"### Azeem Vasanwala","lastModifiedDate":"2021-02-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"\u003cimg src\u003d\"images/drwala.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"[[github](https://github.com/DrWala)]","lastModifiedDate":"2021-02-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"[[portfolio](team/azeem.md)]","lastModifiedDate":"2021-02-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"* Role: Developer","lastModifiedDate":"2021-02-25"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"* Responsibilities: Testing, Rooms feature","lastModifiedDate":"2021-02-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"### Benedict Khoo","lastModifiedDate":"2021-02-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"\u003cimg src\u003d\"images/benedictkhoomw.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"[[github](https://github.com/benedictkhoomw)]","lastModifiedDate":"2021-02-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"[[portfolio](team/benedict.md)]","lastModifiedDate":"2021-02-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"* Role: Developer","lastModifiedDate":"2021-02-25"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"* Responsibilities: Documentation, Undo/Redo Feature, Command History Feature","lastModifiedDate":"2021-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"### Colin Tan","lastModifiedDate":"2021-02-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"\u003cimg src\u003d\"images/colintkn.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"[[github](https://github.com/colintkn)]","lastModifiedDate":"2021-02-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"[[portfolio](team/colin.md)]","lastModifiedDate":"2021-02-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"* Role: Developer","lastModifiedDate":"2021-02-25"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"* Responsibilities: Integration, Resident Feature","lastModifiedDate":"2021-02-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"### Ian Soo","lastModifiedDate":"2021-02-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"\u003cimg src\u003d\"images/stein414.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"[[github](https://github.com/stein414)]","lastModifiedDate":"2021-02-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"[[portfolio](team/ian.md)]","lastModifiedDate":"2021-02-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"* Role: Developer, VS Code Expert","lastModifiedDate":"2021-02-25"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"* Responsibilities: Code Quality, Issue Feature","lastModifiedDate":"2021-02-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"### Linh","lastModifiedDate":"2021-02-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"\u003cimg src\u003d\"images/cnlinh.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"[[github](https://github.com/cnlinh)]","lastModifiedDate":"2021-02-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"[[portfolio](team/linh.md)]","lastModifiedDate":"2021-02-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"* Role: Team Lead","lastModifiedDate":"2021-02-25"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"* Responsibilities: UI","lastModifiedDate":"2021-02-25"}],"authorContributionMap":{"cnlinh":4,"benedictkhoomw":3,"stein414":3,"colintkn":3,"-":44,"DrWala":3}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2020-06-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class.","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component.","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`.","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person).","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`.","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user.","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences.","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components.","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back.","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back.","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":135,"author":{"gitId":"colintkn"},"content":"### Resident Features","lastModifiedDate":"2021-04-05"},{"lineNumber":136,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":137,"author":{"gitId":"colintkn"},"content":"The Resident family of features consist of the following features: Add Resident, Edit Resident, List Resident, Find Resident and Delete Resident.","lastModifiedDate":"2021-04-05"},{"lineNumber":138,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":139,"author":{"gitId":"colintkn"},"content":"#### The Resident Class","lastModifiedDate":"2021-04-05"},{"lineNumber":140,"author":{"gitId":"colintkn"},"content":"The Resident class consists of 5 fields, each of which contain their own methods to verify their respective input. ","lastModifiedDate":"2021-04-05"},{"lineNumber":141,"author":{"gitId":"colintkn"},"content":"This allows for a low degree of coupling, and individual fields can change their input verification rules without affecting the other classes. ","lastModifiedDate":"2021-04-05"},{"lineNumber":142,"author":{"gitId":"colintkn"},"content":"Similarly, the Resident class can expand to contain more fields without affecting existing fields too.","lastModifiedDate":"2021-04-06"},{"lineNumber":143,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":144,"author":{"gitId":"colintkn"},"content":"Examples of verification functions in each of the fields include `Resident#isValidName()` etc.","lastModifiedDate":"2021-04-05"},{"lineNumber":145,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":146,"author":{"gitId":"colintkn"},"content":"![The Resident Class](images/resident/ResidentClass.png)","lastModifiedDate":"2021-04-05"},{"lineNumber":147,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":148,"author":{"gitId":"colintkn"},"content":"The `Resident` objects are stored in a `UniqueResidentList` which is held by `AddressBook`.","lastModifiedDate":"2021-04-05"},{"lineNumber":149,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":150,"author":{"gitId":"colintkn"},"content":"#### Add Resident","lastModifiedDate":"2021-04-06"},{"lineNumber":151,"author":{"gitId":"colintkn"},"content":"This section will detail the implementation of the Add Resident feature via the `radd` command,","lastModifiedDate":"2021-04-06"},{"lineNumber":152,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":153,"author":{"gitId":"colintkn"},"content":"##### Overview of Insertion Process","lastModifiedDate":"2021-04-06"},{"lineNumber":154,"author":{"gitId":"colintkn"},"content":"The AddResidentCommand is triggered through the use of `radd` followed by valid parameters such as name, phone, etc. ","lastModifiedDate":"2021-04-06"},{"lineNumber":155,"author":{"gitId":"colintkn"},"content":"The entire command string must then be parsed to extract the parameters that were inserted, and if they are all valid, a Resident object is constructed and added to the model and saved to the backing store. Upon successful insertion, a feedback message is displayed to the user.","lastModifiedDate":"2021-04-06"},{"lineNumber":156,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":157,"author":{"gitId":"colintkn"},"content":"This process is summarised in the diagram below","lastModifiedDate":"2021-04-06"},{"lineNumber":158,"author":{"gitId":"colintkn"},"content":"![Adding a Resident](images/resident/AddResidentCommandActivityDiagram.png)","lastModifiedDate":"2021-04-06"},{"lineNumber":159,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":160,"author":{"gitId":"colintkn"},"content":"##### Detailed execution pathway","lastModifiedDate":"2021-04-06"},{"lineNumber":161,"author":{"gitId":"colintkn"},"content":"The diagram below details how the user\u0027s command to add a resident propagates through the system to eventually add a resident.","lastModifiedDate":"2021-04-06"},{"lineNumber":162,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":163,"author":{"gitId":"colintkn"},"content":"![Adding a Resident](images/resident/AddResidentCommandSeqDiagram.png)","lastModifiedDate":"2021-04-06"},{"lineNumber":164,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":165,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":166,"author":{"gitId":"DrWala"},"content":"### Room Features","lastModifiedDate":"2021-03-24"},{"lineNumber":167,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":168,"author":{"gitId":"DrWala"},"content":"The Room family of features consist of the following features: Add Room, Edit Room, List Rooms, Find Room and Delete Room. ","lastModifiedDate":"2021-03-24"},{"lineNumber":169,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":170,"author":{"gitId":"DrWala"},"content":"#### The Room Class","lastModifiedDate":"2021-03-24"},{"lineNumber":171,"author":{"gitId":"DrWala"},"content":"The Room class consists of 4 fields, each of which contain their own methods to verify their respective input. This allows for a low degree of coupling, and individual fields can change their input verification rules without affecting the other classes. Similarly, the Room class can expand to contain more fields without affecting existing fields too.","lastModifiedDate":"2021-03-24"},{"lineNumber":172,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":173,"author":{"gitId":"DrWala"},"content":"Examples of verification functions in each of the fields include `RoomNumber#isValidRoomNumber()`, `RoomType#isValidRoomType()`, etc.","lastModifiedDate":"2021-03-24"},{"lineNumber":174,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":175,"author":{"gitId":"DrWala"},"content":"![The Room Class](images/room/RoomClass.png)","lastModifiedDate":"2021-03-24"},{"lineNumber":176,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":177,"author":{"gitId":"DrWala"},"content":"The `Room` objects are stored in a `UniqueRoomList` which is held by `AddressBook`.","lastModifiedDate":"2021-03-24"},{"lineNumber":178,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":179,"author":{"gitId":"DrWala"},"content":"##### Alternatives considered","lastModifiedDate":"2021-03-24"},{"lineNumber":180,"author":{"gitId":"DrWala"},"content":"* **Alternative 1 (current choice):** Abstract fields of Room out as separate classes","lastModifiedDate":"2021-03-24"},{"lineNumber":181,"author":{"gitId":"DrWala"},"content":"    * Pros:","lastModifiedDate":"2021-03-24"},{"lineNumber":182,"author":{"gitId":"DrWala"},"content":"        * Each field can take care of its own validation","lastModifiedDate":"2021-03-24"},{"lineNumber":183,"author":{"gitId":"DrWala"},"content":"        * Updating a field does not update the Room class itself","lastModifiedDate":"2021-03-24"},{"lineNumber":184,"author":{"gitId":"DrWala"},"content":"    * Cons:","lastModifiedDate":"2021-03-24"},{"lineNumber":185,"author":{"gitId":"DrWala"},"content":"        * More classes to manage and individually track","lastModifiedDate":"2021-03-24"},{"lineNumber":186,"author":{"gitId":"DrWala"},"content":"        * Might be unintuitive to initially understand","lastModifiedDate":"2021-03-24"},{"lineNumber":187,"author":{"gitId":"DrWala"},"content":"* **Alternative 2:** Leave fields of Room as member variables of the Room class","lastModifiedDate":"2021-03-24"},{"lineNumber":188,"author":{"gitId":"DrWala"},"content":"    * Pros:","lastModifiedDate":"2021-03-24"},{"lineNumber":189,"author":{"gitId":"DrWala"},"content":"        * Everything is self-contained within the Room class, single source of \"truth\"","lastModifiedDate":"2021-03-24"},{"lineNumber":190,"author":{"gitId":"DrWala"},"content":"    * Cons","lastModifiedDate":"2021-03-24"},{"lineNumber":191,"author":{"gitId":"DrWala"},"content":"        * Field verification becomes a responsibility of the Room class which is not desirable (Violation of SRP)","lastModifiedDate":"2021-03-24"},{"lineNumber":192,"author":{"gitId":"DrWala"},"content":"        * Changes to individual fields would impact the Room class which may unintentionally break other things","lastModifiedDate":"2021-03-24"},{"lineNumber":193,"author":{"gitId":"DrWala"},"content":"        * Less object oriented approach which goes against the principles of how this project was set up","lastModifiedDate":"2021-03-24"},{"lineNumber":194,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":195,"author":{"gitId":"DrWala"},"content":"#### Add Room","lastModifiedDate":"2021-03-24"},{"lineNumber":196,"author":{"gitId":"DrWala"},"content":"This section will detail the implementation of the Add Room feature via the `oadd` command,","lastModifiedDate":"2021-03-24"},{"lineNumber":197,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":198,"author":{"gitId":"DrWala"},"content":"##### Overview of Insertion Process ","lastModifiedDate":"2021-03-24"},{"lineNumber":199,"author":{"gitId":"DrWala"},"content":"The AddRoomCommand is triggered through the use of `oadd` followed by valid parameters such as room number, type, etc. The entire command string must then be parsed to extract the parameters that were inserted, and if they are all valid, a Room object is constructed and added to the model and saved to the backing store. Upon successful insertion, a feedback message is displayed to the user. ","lastModifiedDate":"2021-03-24"},{"lineNumber":200,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":201,"author":{"gitId":"DrWala"},"content":"This process is summarised in the diagram below","lastModifiedDate":"2021-03-24"},{"lineNumber":202,"author":{"gitId":"DrWala"},"content":"![Adding a Room](images/room/AddRoomCommandActivityDiagram.png)","lastModifiedDate":"2021-03-24"},{"lineNumber":203,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":204,"author":{"gitId":"DrWala"},"content":"##### AddRoomCommand","lastModifiedDate":"2021-03-24"},{"lineNumber":205,"author":{"gitId":"DrWala"},"content":"The `AddRoomCommand` inherits from the `Command` object and overrides the `execute()` method. It checks if the model already has the room being inserted, and if it does not, it will insert the room.","lastModifiedDate":"2021-03-24"},{"lineNumber":206,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":207,"author":{"gitId":"DrWala"},"content":"The inheritance from `Command` allows `Logic` to deal with and manipulate polymorphic `Command` objects without dealing with the specific implemetations of each `Command` object.","lastModifiedDate":"2021-03-24"},{"lineNumber":208,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":209,"author":{"gitId":"DrWala"},"content":"##### Detailed execution pathway","lastModifiedDate":"2021-03-24"},{"lineNumber":210,"author":{"gitId":"DrWala"},"content":"The diagram below details how the user\u0027s command to add a room propagates through the system to eventually add a room. ","lastModifiedDate":"2021-03-24"},{"lineNumber":211,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":212,"author":{"gitId":"DrWala"},"content":"![Adding a Room](images/room/AddRoomCommandSeqDiagram.png)","lastModifiedDate":"2021-03-24"},{"lineNumber":213,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":214,"author":{"gitId":"colintkn"},"content":"### Resident-Room allocation feature","lastModifiedDate":"2021-04-05"},{"lineNumber":215,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":216,"author":{"gitId":"colintkn"},"content":"The allocation feature is facilitated by `ResidentRoom` which is a pair value of","lastModifiedDate":"2021-04-05"},{"lineNumber":217,"author":{"gitId":"colintkn"},"content":"valid `[Resident, Room]` that represents an existing resident allocated to a room.","lastModifiedDate":"2021-04-05"},{"lineNumber":218,"author":{"gitId":"colintkn"},"content":"It should be able to support the following operations:","lastModifiedDate":"2021-04-05"},{"lineNumber":219,"author":{"gitId":"colintkn"},"content":"* `ResidentRoom#getName()` - Returns the resident allocated for a given ResidentRoom.","lastModifiedDate":"2021-04-05"},{"lineNumber":220,"author":{"gitId":"colintkn"},"content":"* `ResidentRoom#getRoomNumber()` - Returns the room assignment for a given ResidentRoom.","lastModifiedDate":"2021-04-05"},{"lineNumber":221,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":222,"author":{"gitId":"colintkn"},"content":"A `ResidentRoomList` is a supplementary class that tracks all the `ResidentRoom` assignments. It should support","lastModifiedDate":"2021-04-05"},{"lineNumber":223,"author":{"gitId":"colintkn"},"content":"the following operations.","lastModifiedDate":"2021-04-05"},{"lineNumber":224,"author":{"gitId":"colintkn"},"content":"* `ResidentRoomList#add()` - Adds a `ResidentRoom` new allocation.","lastModifiedDate":"2021-04-05"},{"lineNumber":225,"author":{"gitId":"colintkn"},"content":"* `ResidentRoomList#remove()` - Removes an existing `ResidentRoom` allocation.","lastModifiedDate":"2021-04-05"},{"lineNumber":226,"author":{"gitId":"colintkn"},"content":"* `ResidentRoomList#contains()` - Checks if an allocation exists given the resident and room.","lastModifiedDate":"2021-04-05"},{"lineNumber":227,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":228,"author":{"gitId":"colintkn"},"content":"There are two Resident-Room user allocation and deallocation commands, `alloc` and `dealloc` respectively.","lastModifiedDate":"2021-04-05"},{"lineNumber":229,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":230,"author":{"gitId":"colintkn"},"content":"The `alloc` command will do the following:","lastModifiedDate":"2021-04-05"},{"lineNumber":231,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":232,"author":{"gitId":"colintkn"},"content":"Example: `alloc ri/1 oi/2`","lastModifiedDate":"2021-04-05"},{"lineNumber":233,"author":{"gitId":"colintkn"},"content":"* Check that the 1st resident exists.","lastModifiedDate":"2021-04-05"},{"lineNumber":234,"author":{"gitId":"colintkn"},"content":"* Check that the 2nd room exists exists.","lastModifiedDate":"2021-04-05"},{"lineNumber":235,"author":{"gitId":"colintkn"},"content":"* Check that the 1st resident has not already been allocated to the 2nd room.","lastModifiedDate":"2021-04-05"},{"lineNumber":236,"author":{"gitId":"colintkn"},"content":"* Check that no other room is allocated to the 2nd resident.","lastModifiedDate":"2021-04-05"},{"lineNumber":237,"author":{"gitId":"colintkn"},"content":"* Check that room the 2nd room is not occupied by any resident.","lastModifiedDate":"2021-04-05"},{"lineNumber":238,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":239,"author":{"gitId":"colintkn"},"content":"  **If all the above is true,**","lastModifiedDate":"2021-04-05"},{"lineNumber":240,"author":{"gitId":"colintkn"},"content":"* Set the `ROOM` of the resident to be the room number of the room.","lastModifiedDate":"2021-04-05"},{"lineNumber":241,"author":{"gitId":"colintkn"},"content":"* Set the `OCCUPATION_STATUS` of the room to `Y`.","lastModifiedDate":"2021-04-05"},{"lineNumber":242,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":243,"author":{"gitId":"colintkn"},"content":"  ![Activity Diagram of Allocation](images/residentroom/ResidentRoomAllocationActivityDiagram.png)","lastModifiedDate":"2021-04-06"},{"lineNumber":244,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":245,"author":{"gitId":"colintkn"},"content":"The `dealloc` command will do the following:","lastModifiedDate":"2021-04-05"},{"lineNumber":246,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":247,"author":{"gitId":"colintkn"},"content":"Example: `dealloc 1`","lastModifiedDate":"2021-04-05"},{"lineNumber":248,"author":{"gitId":"colintkn"},"content":"* Check that the first resident exists.","lastModifiedDate":"2021-04-05"},{"lineNumber":249,"author":{"gitId":"colintkn"},"content":"* Check that the first resident has been allocated to a room.","lastModifiedDate":"2021-04-05"},{"lineNumber":250,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":251,"author":{"gitId":"colintkn"},"content":"  **If all the above is true,**","lastModifiedDate":"2021-04-05"},{"lineNumber":252,"author":{"gitId":"colintkn"},"content":"* Set the `ROOM` of  the resident to be `Room unallocated`.","lastModifiedDate":"2021-04-05"},{"lineNumber":253,"author":{"gitId":"colintkn"},"content":"* Set the `OCCUPATION_STATUS` of the room to `N`.","lastModifiedDate":"2021-04-05"},{"lineNumber":254,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":255,"author":{"gitId":"colintkn"},"content":"#### Alternatives considered","lastModifiedDate":"2021-04-07"},{"lineNumber":256,"author":{"gitId":"colintkn"},"content":"* **Alternative 1 (current choice):** Resident-Room solely keeps track of resident and room allocation","lastModifiedDate":"2021-04-05"},{"lineNumber":257,"author":{"gitId":"colintkn"},"content":"  performed through `alloc` and `dealloc` commands. Any allocated resident and occupied rooms","lastModifiedDate":"2021-04-05"},{"lineNumber":258,"author":{"gitId":"colintkn"},"content":"  cannot be edited.","lastModifiedDate":"2021-04-05"},{"lineNumber":259,"author":{"gitId":"colintkn"},"content":"    * Pros:","lastModifiedDate":"2021-04-05"},{"lineNumber":260,"author":{"gitId":"colintkn"},"content":"        * Simpler to implement.","lastModifiedDate":"2021-04-05"},{"lineNumber":261,"author":{"gitId":"colintkn"},"content":"        * Better testability for synchronicity between fields.","lastModifiedDate":"2021-04-05"},{"lineNumber":262,"author":{"gitId":"colintkn"},"content":"    * Cons:","lastModifiedDate":"2021-04-05"},{"lineNumber":263,"author":{"gitId":"colintkn"},"content":"        * Less user control.","lastModifiedDate":"2021-04-05"},{"lineNumber":264,"author":{"gitId":"colintkn"},"content":"* **Alternative 2:** Resident-Room allocation is modelled as a Parent-Child where the parent is the","lastModifiedDate":"2021-04-05"},{"lineNumber":265,"author":{"gitId":"colintkn"},"content":"  `Room` and the child is the `Resident`.","lastModifiedDate":"2021-04-05"},{"lineNumber":266,"author":{"gitId":"colintkn"},"content":"    * Pros:","lastModifiedDate":"2021-04-05"},{"lineNumber":267,"author":{"gitId":"colintkn"},"content":"        * Simpler to implement.","lastModifiedDate":"2021-04-05"},{"lineNumber":268,"author":{"gitId":"colintkn"},"content":"    * Cons:","lastModifiedDate":"2021-04-05"},{"lineNumber":269,"author":{"gitId":"colintkn"},"content":"        * Lack of 2-way updates. Room number of the `Resident` cannot be updated and viewed.","lastModifiedDate":"2021-04-05"},{"lineNumber":270,"author":{"gitId":"colintkn"},"content":"          The problem is reversed if the parent-child roles are swapped where the occupancy","lastModifiedDate":"2021-04-05"},{"lineNumber":271,"author":{"gitId":"colintkn"},"content":"          of `Room` cannot be updated and viewed.","lastModifiedDate":"2021-04-05"},{"lineNumber":272,"author":{"gitId":"colintkn"},"content":"* **Alternative 3:** Resident-Room interface as a lookup. `Room` and `Resident` would look up the","lastModifiedDate":"2021-04-05"},{"lineNumber":273,"author":{"gitId":"colintkn"},"content":"  `residentRoom` class every time to get its `OCCUPANCY STATUS` and `ROOM NUMBER`.","lastModifiedDate":"2021-04-05"},{"lineNumber":274,"author":{"gitId":"colintkn"},"content":"    * Pros:","lastModifiedDate":"2021-04-05"},{"lineNumber":275,"author":{"gitId":"colintkn"},"content":"        * User has more control and flexibility.","lastModifiedDate":"2021-04-05"},{"lineNumber":276,"author":{"gitId":"colintkn"},"content":"    * Cons:","lastModifiedDate":"2021-04-05"},{"lineNumber":277,"author":{"gitId":"colintkn"},"content":"        * Creates cascading effect with a lot of dependencies between regular commands","lastModifiedDate":"2021-04-05"},{"lineNumber":278,"author":{"gitId":"colintkn"},"content":"          such as `redit`, `rdel`, `oedit`, `odel`.","lastModifiedDate":"2021-04-05"},{"lineNumber":279,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":280,"author":{"gitId":"stein414"},"content":"### Issue Features","lastModifiedDate":"2021-03-24"},{"lineNumber":281,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":282,"author":{"gitId":"stein414"},"content":"The Issue family of features consist of the following features: Add Issue, Edit Issue, List Issue, Find Issue, Delete Issue and Close Issue.","lastModifiedDate":"2021-03-24"},{"lineNumber":283,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":284,"author":{"gitId":"stein414"},"content":"#### The Issue Class","lastModifiedDate":"2021-03-24"},{"lineNumber":285,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":286,"author":{"gitId":"stein414"},"content":"The Issue class consists of 5 fields, each of which contain their own methods to verify their respective input. This allows for a low degree of coupling, and individual fields can change their input verification rules without affecting the other classes. Similarly, the Issue class can expand to contain more fields without affecting existing fields too.","lastModifiedDate":"2021-03-24"},{"lineNumber":287,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":288,"author":{"gitId":"stein414"},"content":"Examples of verification functions in each of the fields include `Category#isValidCategory()`, `Status#isValidStatus()`, etc.","lastModifiedDate":"2021-03-24"},{"lineNumber":289,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":290,"author":{"gitId":"stein414"},"content":"![The Issue Class](images/Issue/IssueClass.png)","lastModifiedDate":"2021-03-24"},{"lineNumber":291,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":292,"author":{"gitId":"stein414"},"content":"The `Issue` objects are stored in an `IssueList` which is held by `AddressBook`.","lastModifiedDate":"2021-03-25"},{"lineNumber":293,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":294,"author":{"gitId":"stein414"},"content":"#### Add Issue","lastModifiedDate":"2021-03-24"},{"lineNumber":295,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":296,"author":{"gitId":"stein414"},"content":"This section will detail the implementation of the Add Issue feature via the `iadd` command.","lastModifiedDate":"2021-03-24"},{"lineNumber":297,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":298,"author":{"gitId":"stein414"},"content":"##### Overview of Insertion Process","lastModifiedDate":"2021-03-24"},{"lineNumber":299,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":300,"author":{"gitId":"stein414"},"content":"The AddIssueCommand is triggered through the use of `iadd` followed by valid parameters such as room number, description, etc. The entire command string must then be parsed to extract the parameters that were inserted, and if they are all valid, an Issue object is constructed and added to the model and saved to the backing store. Upon successful insertion, a feedback message is displayed to the user.","lastModifiedDate":"2021-03-24"},{"lineNumber":301,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":302,"author":{"gitId":"stein414"},"content":"This process is summarised in the diagram below","lastModifiedDate":"2021-03-24"},{"lineNumber":303,"author":{"gitId":"stein414"},"content":"![Adding an Issue](images/issue/AddIssueCommandActivityDiagram.png)","lastModifiedDate":"2021-03-25"},{"lineNumber":304,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":305,"author":{"gitId":"stein414"},"content":"##### AddIssueCommand","lastModifiedDate":"2021-03-24"},{"lineNumber":306,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":307,"author":{"gitId":"stein414"},"content":"The `AddIssueCommand` inherits from the `Command` object and overrides the `execute()` method.","lastModifiedDate":"2021-03-24"},{"lineNumber":308,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":309,"author":{"gitId":"stein414"},"content":"The inheritance from `Command` allows `Logic` to deal with and manipulate polymorphic `Command` objects without dealing with the specific implemetations of each `Command` object.","lastModifiedDate":"2021-03-24"},{"lineNumber":310,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":311,"author":{"gitId":"stein414"},"content":"##### Detailed execution pathway","lastModifiedDate":"2021-03-25"},{"lineNumber":312,"author":{"gitId":"stein414"},"content":"The diagram below details how the user\u0027s command to add an issue propagates through the system to eventually add an issue.","lastModifiedDate":"2021-03-25"},{"lineNumber":313,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":314,"author":{"gitId":"stein414"},"content":"![Adding an Issue](images/issue/AddIssueCommandSeqDiagram.png)","lastModifiedDate":"2021-03-25"},{"lineNumber":315,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":316,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":317,"author":{"gitId":"colintkn"},"content":"### Alias feature","lastModifiedDate":"2021-04-05"},{"lineNumber":318,"author":{"gitId":"colintkn"},"content":"The `Alias` feature allows users to define a shortcut for a longer command that is often used. The longer command can then be executed by entering the alias instead of the full or partial command.","lastModifiedDate":"2021-04-05"},{"lineNumber":319,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":320,"author":{"gitId":"colintkn"},"content":"#### Implementation","lastModifiedDate":"2021-04-05"},{"lineNumber":321,"author":{"gitId":"colintkn"},"content":"User-defined `Alias` is stored in `AliasMapping` within `UserPrefs`. `AliasMapping` internally uses `HashMap\u003cString, Alias\u003e` to store the mapping between the name of an `Alias` object and itself. With `AliasMapping` included in `UserPrefs`, `UserPrefs` supports the following methods:","lastModifiedDate":"2021-04-05"},{"lineNumber":322,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":323,"author":{"gitId":"colintkn"},"content":"* `UserPrefs#getAliasMapping()` — Returns the current `AliasMapping`.","lastModifiedDate":"2021-04-05"},{"lineNumber":324,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":325,"author":{"gitId":"colintkn"},"content":"* `UserPrefs#setAliasMapping(AliasMapping aliasMappings)` — Sets the current mapping to the specified mapping.","lastModifiedDate":"2021-04-05"},{"lineNumber":326,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":327,"author":{"gitId":"colintkn"},"content":"* `UserPrefs#addAlias(Alias alias)` — Adds a user-defined `Alias` to the current mapping.","lastModifiedDate":"2021-04-05"},{"lineNumber":328,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":329,"author":{"gitId":"colintkn"},"content":"* `UserPrefs#getAlias(String aliasName)` — Returns an `Alias` based on alias name.","lastModifiedDate":"2021-04-05"},{"lineNumber":330,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":331,"author":{"gitId":"colintkn"},"content":"* `UserPrefs#containsAlias(String aliasName)` — Checks if the current mapping contains an `Alias` based on alias name.","lastModifiedDate":"2021-04-05"},{"lineNumber":332,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":333,"author":{"gitId":"colintkn"},"content":"* `UserPrefs#isReservedKeyword(String aliasName)` — Checks if the alias name is a reserved keyword. This prevents users from using existing commands as alias name.","lastModifiedDate":"2021-04-05"},{"lineNumber":334,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":335,"author":{"gitId":"colintkn"},"content":"* `UserPrefs#isRecursiveKeyword(String commandWord)` — Checks if the command word is a recursive keyword. This prevents users from chaining aliases.","lastModifiedDate":"2021-04-05"},{"lineNumber":336,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":337,"author":{"gitId":"colintkn"},"content":"#### Alias creation","lastModifiedDate":"2021-04-05"},{"lineNumber":338,"author":{"gitId":"colintkn"},"content":"User can create a new `Alias` via the `AliasCommand`. The sequence diagram below describes how an `Alias` is created.","lastModifiedDate":"2021-04-05"},{"lineNumber":339,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":340,"author":{"gitId":"colintkn"},"content":"![AliasCreationSequenceDiagram](images/alias/AliasCreationSequenceDiagram.png)","lastModifiedDate":"2021-04-05"},{"lineNumber":341,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":342,"author":{"gitId":"colintkn"},"content":"#### Alias execution","lastModifiedDate":"2021-04-05"},{"lineNumber":343,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":344,"author":{"gitId":"colintkn"},"content":"When a user executes a new command, `AddressBookParser` will follow these steps:","lastModifiedDate":"2021-04-05"},{"lineNumber":345,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":346,"author":{"gitId":"colintkn"},"content":"1. If the input begins with an existing command word, parse it as one of those pre-defined command.","lastModifiedDate":"2021-04-05"},{"lineNumber":347,"author":{"gitId":"colintkn"},"content":"    1. If all parameters are valid, return the corresponding `Command` object.","lastModifiedDate":"2021-04-05"},{"lineNumber":348,"author":{"gitId":"colintkn"},"content":"    1. Else show error to the user.","lastModifiedDate":"2021-04-05"},{"lineNumber":349,"author":{"gitId":"colintkn"},"content":"1. Else if the input begins with a mapped `Alias`, replace the alias with the mapped `Command`.","lastModifiedDate":"2021-04-05"},{"lineNumber":350,"author":{"gitId":"colintkn"},"content":"    1. Parse the mapped `Command` as per normal.","lastModifiedDate":"2021-04-05"},{"lineNumber":351,"author":{"gitId":"colintkn"},"content":"1. Else show error to the user.","lastModifiedDate":"2021-04-05"},{"lineNumber":352,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":353,"author":{"gitId":"colintkn"},"content":"The following diagram illustrates the flow:","lastModifiedDate":"2021-04-05"},{"lineNumber":354,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":355,"author":{"gitId":"colintkn"},"content":"![AliasExecutionActivityDiagram](images/alias/AliasExecutionActivityDiagram.png)","lastModifiedDate":"2021-04-05"},{"lineNumber":356,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":357,"author":{"gitId":"colintkn"},"content":"### Command History Feature","lastModifiedDate":"2021-04-06"},{"lineNumber":358,"author":{"gitId":"colintkn"},"content":"The command history feature has a few sub-features:","lastModifiedDate":"2021-04-06"},{"lineNumber":359,"author":{"gitId":"colintkn"},"content":"1. View history command: the user can list the command history.","lastModifiedDate":"2021-04-06"},{"lineNumber":360,"author":{"gitId":"colintkn"},"content":"1. Navigate history: the user can navigate their command history like in a terminal program.","lastModifiedDate":"2021-04-06"},{"lineNumber":361,"author":{"gitId":"colintkn"},"content":"1. Save/load history: command history persists across SunRez runs.","lastModifiedDate":"2021-04-06"},{"lineNumber":362,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":363,"author":{"gitId":"colintkn"},"content":"This section starts with an overview of the command history model then looks at each sub-feature in turn.","lastModifiedDate":"2021-04-06"},{"lineNumber":364,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":365,"author":{"gitId":"benedictkhoomw"},"content":"#### Implementation","lastModifiedDate":"2021-03-24"},{"lineNumber":366,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":367,"author":{"gitId":"benedictkhoomw"},"content":"##### Command History Overview","lastModifiedDate":"2021-03-24"},{"lineNumber":368,"author":{"gitId":"benedictkhoomw"},"content":"SunRez command history is represented by a `CommandHistory`, stored in the `ModelManager`. A `CommandHistory` is ","lastModifiedDate":"2021-03-24"},{"lineNumber":369,"author":{"gitId":"benedictkhoomw"},"content":"composed of zero or more `CommandHistoryEntry` objects, each representing a previously entered command. New entries","lastModifiedDate":"2021-03-24"},{"lineNumber":370,"author":{"gitId":"benedictkhoomw"},"content":"can be appended to `CommandHistory`. `CommandHistory` implements the `ReadOnlyCommandHistory` interface, ","lastModifiedDate":"2021-03-24"},{"lineNumber":371,"author":{"gitId":"benedictkhoomw"},"content":"which provides a non-editable view of the implementing `CommandHistory`; this readonly view is used by other components","lastModifiedDate":"2021-03-24"},{"lineNumber":372,"author":{"gitId":"benedictkhoomw"},"content":"that do not need to append to the command history. For example, the view history command reads it to display it - or a ","lastModifiedDate":"2021-03-24"},{"lineNumber":373,"author":{"gitId":"benedictkhoomw"},"content":"filtered portion of it - to the user.","lastModifiedDate":"2021-03-24"},{"lineNumber":374,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":375,"author":{"gitId":"benedictkhoomw"},"content":"The following class diagram shows an overview of the command history subsystem and its relation to other components.","lastModifiedDate":"2021-03-24"},{"lineNumber":376,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":377,"author":{"gitId":"benedictkhoomw"},"content":"![CommandHistoryModelClassDiagram](images/commandhistory/CmdHistModelClassDiagram.png)","lastModifiedDate":"2021-03-24"},{"lineNumber":378,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":379,"author":{"gitId":"benedictkhoomw"},"content":"##### How Command History is Updated","lastModifiedDate":"2021-03-24"},{"lineNumber":380,"author":{"gitId":"benedictkhoomw"},"content":"`Logic#execute()` triggers the update. Only _after_ a command parses and executes successfully will that command\u0027s text ","lastModifiedDate":"2021-03-24"},{"lineNumber":381,"author":{"gitId":"benedictkhoomw"},"content":"be appended to the command history via `Model#appendCommandHistoryEntry()`. If either parsing or execution fails,","lastModifiedDate":"2021-03-24"},{"lineNumber":382,"author":{"gitId":"benedictkhoomw"},"content":"then `CommandHistory` will be unchanged. The following sequence diagram shows this process pictorially using the ","lastModifiedDate":"2021-03-24"},{"lineNumber":383,"author":{"gitId":"benedictkhoomw"},"content":"example command `help`.","lastModifiedDate":"2021-03-24"},{"lineNumber":384,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":385,"author":{"gitId":"benedictkhoomw"},"content":"![CommandHistoryUpdateSequenceDiagram](images/commandhistory/CmdHistUpdateSequenceDiagram.png)","lastModifiedDate":"2021-03-24"},{"lineNumber":386,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":387,"author":{"gitId":"benedictkhoomw"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: ","lastModifiedDate":"2021-03-24"},{"lineNumber":388,"author":{"gitId":"benedictkhoomw"},"content":"**Note:** In the sequence diagram above, `parseAndExecute()` is not an actual method; rather it is a simplification","lastModifiedDate":"2021-03-24"},{"lineNumber":389,"author":{"gitId":"benedictkhoomw"},"content":"of a two-step process in the Logic component. The important thing to note is that `CommandHistory` is updated only","lastModifiedDate":"2021-03-24"},{"lineNumber":390,"author":{"gitId":"benedictkhoomw"},"content":"_after_ a command is parsed and executed successfully by the Logic component.","lastModifiedDate":"2021-03-24"},{"lineNumber":391,"author":{"gitId":"benedictkhoomw"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":392,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":393,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":394,"author":{"gitId":"benedictkhoomw"},"content":"##### View History","lastModifiedDate":"2021-03-24"},{"lineNumber":395,"author":{"gitId":"benedictkhoomw"},"content":"SunRez allows the user to list the full command history, or a portion of it, through the command `history [COUNT]` where","lastModifiedDate":"2021-03-24"},{"lineNumber":396,"author":{"gitId":"benedictkhoomw"},"content":"`[COUNT]` is an optional integer that the user can specify to limit the number of most-recent entries to be listed.","lastModifiedDate":"2021-03-24"},{"lineNumber":397,"author":{"gitId":"benedictkhoomw"},"content":"If `[COUNT]` is omitted, then the full command history is displayed.","lastModifiedDate":"2021-03-24"},{"lineNumber":398,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":399,"author":{"gitId":"benedictkhoomw"},"content":"Viewing command history is implemented through `ViewHistoryCommand` and supported by `ReadOnlyCommandHistory`. ","lastModifiedDate":"2021-03-24"},{"lineNumber":400,"author":{"gitId":"benedictkhoomw"},"content":"`ViewHistoryCommand#execute()` accesses command history through the view of a `ReadOnlyCommandHistory`, reads the ","lastModifiedDate":"2021-03-24"},{"lineNumber":401,"author":{"gitId":"benedictkhoomw"},"content":"entries it needs to display, formats the entries into a message, then finally returns the message wrapped in ","lastModifiedDate":"2021-03-24"},{"lineNumber":402,"author":{"gitId":"benedictkhoomw"},"content":"a `CommandResult`, to be displayed to the user. The following sequence diagram illustrates the main interactions","lastModifiedDate":"2021-03-24"},{"lineNumber":403,"author":{"gitId":"benedictkhoomw"},"content":"between `ViewHistoryCommand` and the Model component. It uses the example command of `history 5`. ","lastModifiedDate":"2021-03-24"},{"lineNumber":404,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":405,"author":{"gitId":"benedictkhoomw"},"content":"![ViewHistorySequenceDiagram](images/commandhistory/CmdHistViewHistorySequenceDiagram.png)","lastModifiedDate":"2021-03-24"},{"lineNumber":406,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":407,"author":{"gitId":"benedictkhoomw"},"content":"##### Navigate History","lastModifiedDate":"2021-03-24"},{"lineNumber":408,"author":{"gitId":"benedictkhoomw"},"content":"The user navigates their command history via the UP and DOWN arrow keys. The UP and DOWN arrow keys respectively ","lastModifiedDate":"2021-03-24"},{"lineNumber":409,"author":{"gitId":"benedictkhoomw"},"content":"select the previous and next commands in history, if any.","lastModifiedDate":"2021-03-24"},{"lineNumber":410,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":411,"author":{"gitId":"benedictkhoomw"},"content":"The UP and DOWN key press events are first handled by `CommandBox` in the UI component. `CommandBox` delegates the ","lastModifiedDate":"2021-03-24"},{"lineNumber":412,"author":{"gitId":"benedictkhoomw"},"content":"logic of navigation and keeping track of state (which command we are selecting) to a `CommandHistorySelector`.","lastModifiedDate":"2021-03-24"},{"lineNumber":413,"author":{"gitId":"benedictkhoomw"},"content":"The `CommandHistorySelector` is called via `#selectNext()` and `#selectPrevious()` which are expected","lastModifiedDate":"2021-03-24"},{"lineNumber":414,"author":{"gitId":"benedictkhoomw"},"content":"to respectively return the next and previous commands in history since they were last called. Upon receiving the ","lastModifiedDate":"2021-03-24"},{"lineNumber":415,"author":{"gitId":"benedictkhoomw"},"content":"relevant commands from `CommandHistorySelector`, `CommandBox` will populate its text box with that command\u0027s text.","lastModifiedDate":"2021-03-24"},{"lineNumber":416,"author":{"gitId":"benedictkhoomw"},"content":"The following sequence diagram shows the aforementioned relationships.","lastModifiedDate":"2021-03-24"},{"lineNumber":417,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":418,"author":{"gitId":"benedictkhoomw"},"content":"![AccessHistorySequenceDiagram](images/commandhistory/CmdHistAccessHistorySequenceDiagram.png)","lastModifiedDate":"2021-03-24"},{"lineNumber":419,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":420,"author":{"gitId":"benedictkhoomw"},"content":"`CommandHistorySelector#selectLast()` can also be called to reset the selection to the most recent command in history.","lastModifiedDate":"2021-03-24"},{"lineNumber":421,"author":{"gitId":"benedictkhoomw"},"content":"This is useful, for example, when a user has navigated to the middle of their command history then executes a new ","lastModifiedDate":"2021-03-24"},{"lineNumber":422,"author":{"gitId":"benedictkhoomw"},"content":"command. At this point, we want navigation to start from the most recent command again - not where the user was","lastModifiedDate":"2021-03-24"},{"lineNumber":423,"author":{"gitId":"benedictkhoomw"},"content":"before he/she executed a command.","lastModifiedDate":"2021-03-24"},{"lineNumber":424,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":425,"author":{"gitId":"benedictkhoomw"},"content":"Currently, SunRez uses a `SuppliedCommandHistorySelector` as its `CommandHistorySelector`. This implementation uses","lastModifiedDate":"2021-03-24"},{"lineNumber":426,"author":{"gitId":"benedictkhoomw"},"content":"a `Supplier\u003cReadOnlyCommandHistory\u003e` to view SunRez command history whenever it is called to select a new entry.","lastModifiedDate":"2021-03-24"},{"lineNumber":427,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":428,"author":{"gitId":"benedictkhoomw"},"content":"##### Save/Load History","lastModifiedDate":"2021-03-24"},{"lineNumber":429,"author":{"gitId":"benedictkhoomw"},"content":"SunRez automatically saves command history after each command execution, and loads command history (if any) upon app ","lastModifiedDate":"2021-03-24"},{"lineNumber":430,"author":{"gitId":"benedictkhoomw"},"content":"start-up. The command history is saved in a plain-text file at `[JAR_file_location]/data/commandhistory.txt`. ","lastModifiedDate":"2021-03-24"},{"lineNumber":431,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":432,"author":{"gitId":"benedictkhoomw"},"content":"Saving and loading is supported by `CommandHistoryStorage`, an interface that exposes read and write methods. SunRez","lastModifiedDate":"2021-03-24"},{"lineNumber":433,"author":{"gitId":"benedictkhoomw"},"content":"currently uses an implementation of this interface called `PlainTextCommandHistoryStorage`, which serializes each","lastModifiedDate":"2021-03-24"},{"lineNumber":434,"author":{"gitId":"benedictkhoomw"},"content":"command history entry as a single line of plain text in the command history file. The class structure is shown ","lastModifiedDate":"2021-03-24"},{"lineNumber":435,"author":{"gitId":"benedictkhoomw"},"content":"in the class diagram in the _Command History Overview_ subsection above.","lastModifiedDate":"2021-03-24"},{"lineNumber":436,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":437,"author":{"gitId":"benedictkhoomw"},"content":"Command history is saved immediately after it is updated. Since command history is only updated after a successful","lastModifiedDate":"2021-04-07"},{"lineNumber":438,"author":{"gitId":"benedictkhoomw"},"content":"command execution, this implies that only successful commands are saved. In order to save command history, ","lastModifiedDate":"2021-04-07"},{"lineNumber":439,"author":{"gitId":"benedictkhoomw"},"content":"`CommandHistoryStorage` creates a serialized string from a `ReadOnlyCommandHistory` view of the command history, then ","lastModifiedDate":"2021-04-07"},{"lineNumber":440,"author":{"gitId":"benedictkhoomw"},"content":"writes it to disk using `FileUtil#writeToFile()` as a helper. The following activity diagram shows a simplified flow ","lastModifiedDate":"2021-04-07"},{"lineNumber":441,"author":{"gitId":"benedictkhoomw"},"content":"of the storage process from command execution to writing the command history to file.","lastModifiedDate":"2021-04-07"},{"lineNumber":442,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":443,"author":{"gitId":"benedictkhoomw"},"content":"![CommandHistoryStorageActivityDiagram](images/commandhistory/CommandHistoryStorageActivityDiagram.png)","lastModifiedDate":"2021-04-07"},{"lineNumber":444,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":445,"author":{"gitId":"benedictkhoomw"},"content":"#### Design Considerations","lastModifiedDate":"2021-03-24"},{"lineNumber":446,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":447,"author":{"gitId":"benedictkhoomw"},"content":"##### Aspect: Should history include invalid commands?","lastModifiedDate":"2021-03-24"},{"lineNumber":448,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":449,"author":{"gitId":"benedictkhoomw"},"content":"* **Alternative 1 (current choice):** Only record valid commands (commands which parse and execute successfully).","lastModifiedDate":"2021-03-24"},{"lineNumber":450,"author":{"gitId":"benedictkhoomw"},"content":"    * Pros:","lastModifiedDate":"2021-03-24"},{"lineNumber":451,"author":{"gitId":"benedictkhoomw"},"content":"        * Less cluttered command history.","lastModifiedDate":"2021-03-24"},{"lineNumber":452,"author":{"gitId":"benedictkhoomw"},"content":"        * A User can still easily correct typos in a failed command because SunRez does not consume the input if it ","lastModifiedDate":"2021-03-24"},{"lineNumber":453,"author":{"gitId":"benedictkhoomw"},"content":"          fails to execute.","lastModifiedDate":"2021-03-24"},{"lineNumber":454,"author":{"gitId":"benedictkhoomw"},"content":"    * Cons: ","lastModifiedDate":"2021-03-24"},{"lineNumber":455,"author":{"gitId":"benedictkhoomw"},"content":"        * Behaves less like a regular shell program, so the user might be expecting different behavior.","lastModifiedDate":"2021-03-24"},{"lineNumber":456,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":457,"author":{"gitId":"benedictkhoomw"},"content":"* **Alternative 2:** Record all command text that the user tries to execute.","lastModifiedDate":"2021-03-24"},{"lineNumber":458,"author":{"gitId":"benedictkhoomw"},"content":"    * Pros:","lastModifiedDate":"2021-03-24"},{"lineNumber":459,"author":{"gitId":"benedictkhoomw"},"content":"        * Behaves more like a regular shell program.","lastModifiedDate":"2021-03-24"},{"lineNumber":460,"author":{"gitId":"benedictkhoomw"},"content":"    * Cons: ","lastModifiedDate":"2021-03-24"},{"lineNumber":461,"author":{"gitId":"benedictkhoomw"},"content":"        * More cluttered command history.","lastModifiedDate":"2021-03-24"},{"lineNumber":462,"author":{"gitId":"benedictkhoomw"},"content":"        * Arguably does not help the user correct typos in failed commands (see Alternative 1: Pros).","lastModifiedDate":"2021-03-24"},{"lineNumber":463,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":464,"author":{"gitId":"benedictkhoomw"},"content":"##### Aspect: Should command history selection logic be in `CommandBox`?","lastModifiedDate":"2021-03-24"},{"lineNumber":465,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":466,"author":{"gitId":"benedictkhoomw"},"content":"* **Alternative 1 (current choice):** No, abstract it out to an interface `CommandHistorySelector` with a backing ","lastModifiedDate":"2021-03-24"},{"lineNumber":467,"author":{"gitId":"benedictkhoomw"},"content":"  implementation.","lastModifiedDate":"2021-03-24"},{"lineNumber":468,"author":{"gitId":"benedictkhoomw"},"content":"    * Pros:","lastModifiedDate":"2021-03-24"},{"lineNumber":469,"author":{"gitId":"benedictkhoomw"},"content":"        * Follows SRP because `CommandBox` is part of the UI component, but history selection is logic. If selection","lastModifiedDate":"2021-03-24"},{"lineNumber":470,"author":{"gitId":"benedictkhoomw"},"content":"        logic is left in `CommandBox`, then it now has two reasons (UI and logic) to change.","lastModifiedDate":"2021-03-24"},{"lineNumber":471,"author":{"gitId":"benedictkhoomw"},"content":"        * Easier to unit test because logic is separated from UI.","lastModifiedDate":"2021-03-24"},{"lineNumber":472,"author":{"gitId":"benedictkhoomw"},"content":"    * Cons:","lastModifiedDate":"2021-03-24"},{"lineNumber":473,"author":{"gitId":"benedictkhoomw"},"content":"        * More complex to implement: one additional interface and class.","lastModifiedDate":"2021-03-24"},{"lineNumber":474,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":475,"author":{"gitId":"benedictkhoomw"},"content":"* **Alternative 2:** Yes, keep the selection logic in `CommandBox`.","lastModifiedDate":"2021-03-24"},{"lineNumber":476,"author":{"gitId":"benedictkhoomw"},"content":"    * Pros:","lastModifiedDate":"2021-03-24"},{"lineNumber":477,"author":{"gitId":"benedictkhoomw"},"content":"        * Simpler to implement: no additional classes or interfaces; and the selection logic is quite straightforward,","lastModifiedDate":"2021-03-24"},{"lineNumber":478,"author":{"gitId":"benedictkhoomw"},"content":"          so the bloat may be acceptable in the short term.","lastModifiedDate":"2021-03-24"},{"lineNumber":479,"author":{"gitId":"benedictkhoomw"},"content":"        * Arguably, selection only affects the `CommandBox` so the added complexity may not be worth it.","lastModifiedDate":"2021-03-24"},{"lineNumber":480,"author":{"gitId":"benedictkhoomw"},"content":"    * Cons:","lastModifiedDate":"2021-03-24"},{"lineNumber":481,"author":{"gitId":"benedictkhoomw"},"content":"        * Harder to unit test because selection logic is bundled with UI.","lastModifiedDate":"2021-03-24"},{"lineNumber":482,"author":{"gitId":"benedictkhoomw"},"content":"        * Pollutes a UI component with details of logic. If we wish to change the selection logic in future but not","lastModifiedDate":"2021-03-24"},{"lineNumber":483,"author":{"gitId":"benedictkhoomw"},"content":"          the UI, `CommandBox` will still need to change.","lastModifiedDate":"2021-03-24"},{"lineNumber":484,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":485,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":486,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":487,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":488,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":489,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":490,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":491,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":492,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":493,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":494,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":495,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":496,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":497,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":498,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":499,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":500,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":501,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":502,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":503,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":504,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":505,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":507,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":508,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":510,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":511,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":512,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":513,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":514,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":515,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":516,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":517,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":518,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":519,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":520,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":521,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":522,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":523,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":524,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":525,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":526,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":527,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":528,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":529,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":530,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":531,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":532,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":533,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":534,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":535,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":536,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":537,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":538,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":539,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":540,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":541,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":542,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":543,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":544,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":545,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":546,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":547,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":548,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":549,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":550,"author":{"gitId":"-"},"content":"#### Design consideration:","lastModifiedDate":"2020-05-23"},{"lineNumber":551,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":552,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes","lastModifiedDate":"2020-05-23"},{"lineNumber":553,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":554,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":555,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":556,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":557,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":558,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":559,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":560,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":561,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":562,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":563,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":564,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":565,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":566,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":567,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":568,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":569,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":570,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":571,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":572,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":573,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":574,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":575,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":576,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":577,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":578,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":579,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":580,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":581,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":582,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":583,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":584,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":585,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":586,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":587,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":588,"author":{"gitId":"stein414"},"content":"Nina works as a housing service management officer for a Residential College* (in NUS). She is the sole manager of the office. She:","lastModifiedDate":"2021-03-01"},{"lineNumber":589,"author":{"gitId":"stein414"},"content":"* has to manage a large number of residents and rooms (\u003e 600)","lastModifiedDate":"2021-03-01"},{"lineNumber":590,"author":{"gitId":"stein414"},"content":"* needs to efficiently assign rooms to residents","lastModifiedDate":"2021-03-01"},{"lineNumber":591,"author":{"gitId":"stein414"},"content":"* handles room allocation exercise every semester","lastModifiedDate":"2021-03-01"},{"lineNumber":592,"author":{"gitId":"stein414"},"content":"* needs to track room issues reported by students during the semester","lastModifiedDate":"2021-03-01"},{"lineNumber":593,"author":{"gitId":"stein414"},"content":"* needs to update the issue lifecycle (reported \u003d\u003e maintenance ongoing \u003d\u003e fixed/closed)","lastModifiedDate":"2021-03-01"},{"lineNumber":594,"author":{"gitId":"stein414"},"content":"* prefers typing over interacting via GUI","lastModifiedDate":"2021-03-01"},{"lineNumber":595,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":596,"author":{"gitId":"stein414"},"content":"**Value proposition**: manage residents, rooms, and allocations faster than a typical GUI app.","lastModifiedDate":"2021-03-01"},{"lineNumber":597,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":598,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":599,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":600,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":601,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":602,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":603,"author":{"gitId":"stein414"},"content":"| Priority | As a … | I want to … | So that I can…|","lastModifiedDate":"2021-03-01"},{"lineNumber":604,"author":{"gitId":"stein414"},"content":"| - | - | - | - |","lastModifiedDate":"2021-03-01"},{"lineNumber":605,"author":{"gitId":"stein414"},"content":"| `* * *` | new user | see usage instructions | refer to instructions if I forget how to use the app |","lastModifiedDate":"2021-03-01"},{"lineNumber":606,"author":{"gitId":"stein414"},"content":"| `* * *` | confused user | have a help command | learn how to use the application |","lastModifiedDate":"2021-03-01"},{"lineNumber":607,"author":{"gitId":"-"},"content":"| `* * *` | user | add a new person | |","lastModifiedDate":"2020-05-23"},{"lineNumber":608,"author":{"gitId":"stein414"},"content":"| `* * *` | user | add issues | |","lastModifiedDate":"2021-03-01"},{"lineNumber":609,"author":{"gitId":"stein414"},"content":"| `* * *` | user | see a list of pending tasks sorted by deadline | prioritise which to do |","lastModifiedDate":"2021-03-01"},{"lineNumber":610,"author":{"gitId":"stein414"},"content":"| `* * *` | user | search for tasks | |","lastModifiedDate":"2021-03-01"},{"lineNumber":611,"author":{"gitId":"stein414"},"content":"| `* * *` | user | close issues | focus on open issues |","lastModifiedDate":"2021-03-01"},{"lineNumber":612,"author":{"gitId":"stein414"},"content":"| `* * *` | user | update issues | |","lastModifiedDate":"2021-03-01"},{"lineNumber":613,"author":{"gitId":"stein414"},"content":"| `* * *` | user | remove issues | |","lastModifiedDate":"2021-03-01"},{"lineNumber":614,"author":{"gitId":"stein414"},"content":"| `* * *` | user | add residents | |","lastModifiedDate":"2021-03-01"},{"lineNumber":615,"author":{"gitId":"stein414"},"content":"| `* * *` | user | search for residents | |","lastModifiedDate":"2021-03-01"},{"lineNumber":616,"author":{"gitId":"stein414"},"content":"| `* * *` | user | update resident details | ensure their information is up to date |","lastModifiedDate":"2021-03-01"},{"lineNumber":617,"author":{"gitId":"stein414"},"content":"| `* * *` | user | remove residents | |","lastModifiedDate":"2021-03-01"},{"lineNumber":618,"author":{"gitId":"stein414"},"content":"| `* * *` | user | add new rooms | |","lastModifiedDate":"2021-03-01"},{"lineNumber":619,"author":{"gitId":"stein414"},"content":"| `* * *` | user | see a list of rooms with their statuses | know which rooms are available |","lastModifiedDate":"2021-03-01"},{"lineNumber":620,"author":{"gitId":"stein414"},"content":"| `* * *` | user | search for rooms | |","lastModifiedDate":"2021-03-01"},{"lineNumber":621,"author":{"gitId":"stein414"},"content":"| `* * *` | user | update room details | |","lastModifiedDate":"2021-03-01"},{"lineNumber":622,"author":{"gitId":"stein414"},"content":"| `* * *` | user | remove rooms | |","lastModifiedDate":"2021-03-01"},{"lineNumber":623,"author":{"gitId":"stein414"},"content":"| `* *` | user | see both available rooms and unassigned residents side by side | easily match residents to rooms |","lastModifiedDate":"2021-03-01"},{"lineNumber":624,"author":{"gitId":"stein414"},"content":"| `* *` | careless user | undo previous commands | easily fix any errors I might make |","lastModifiedDate":"2021-03-01"},{"lineNumber":625,"author":{"gitId":"stein414"},"content":"| `* *` | careless user | redo previous commands | easily fix an erroneous undo |","lastModifiedDate":"2021-03-01"},{"lineNumber":626,"author":{"gitId":"stein414"},"content":"| `* * *` | user | allocate a resident to a room | |","lastModifiedDate":"2021-03-01"},{"lineNumber":627,"author":{"gitId":"stein414"},"content":"| `* * *` | user | deallocate a resident from a room | |","lastModifiedDate":"2021-03-01"},{"lineNumber":628,"author":{"gitId":"benedictkhoomw"},"content":"| `* *` | power user | access my command history | efficiently repeat similar commands |","lastModifiedDate":"2021-03-09"},{"lineNumber":629,"author":{"gitId":"benedictkhoomw"},"content":"| `* *` | power user | access command history from previous sessions | easily reuse commands from previous sessions |","lastModifiedDate":"2021-03-24"},{"lineNumber":630,"author":{"gitId":"cnlinh"},"content":"| `* *` | power user | create aliases for longer commands | avoid typing the same command multiple times |","lastModifiedDate":"2021-03-16"},{"lineNumber":631,"author":{"gitId":"cnlinh"},"content":"| `* *` | power user | delete aliases that are no longer needed | avoid triggering the wrong command |","lastModifiedDate":"2021-03-31"},{"lineNumber":632,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":633,"author":{"gitId":"stein414"},"content":"## Use cases","lastModifiedDate":"2021-03-01"},{"lineNumber":634,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":635,"author":{"gitId":"stein414"},"content":"(For all use cases below, the **System** is the `SunRez` and the **Actor** is the `user`, unless specified otherwise. All Use Cases are prefixed with `UC` followed by a 3 digit code)","lastModifiedDate":"2021-03-01"},{"lineNumber":636,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":637,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":638,"author":{"gitId":"stein414"},"content":"### UC-001 Add a resident","lastModifiedDate":"2021-03-01"},{"lineNumber":639,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":640,"author":{"gitId":"stein414"},"content":"**MSS**","lastModifiedDate":"2021-03-01"},{"lineNumber":641,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":642,"author":{"gitId":"stein414"},"content":"1. User requests to add a specific resident to the list.","lastModifiedDate":"2021-03-01"},{"lineNumber":643,"author":{"gitId":"stein414"},"content":"2. SunRez adds the resident and saves the changes.","lastModifiedDate":"2021-03-01"},{"lineNumber":644,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":645,"author":{"gitId":"stein414"},"content":"Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":646,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":647,"author":{"gitId":"stein414"},"content":"**Extensions**","lastModifiedDate":"2021-03-01"},{"lineNumber":648,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":649,"author":{"gitId":"benedictkhoomw"},"content":"* 1a. The resident\u0027s details are incorrectly formatted (e.g. phone number/email/year format does not conform, OR room number is invalid).","lastModifiedDate":"2021-03-16"},{"lineNumber":650,"author":{"gitId":"stein414"},"content":"    * 1a1. SunRez displays an error stating which field is incorrectly formatted and requests the user to try again after fixing the stated error.","lastModifiedDate":"2021-03-01"},{"lineNumber":651,"author":{"gitId":"benedictkhoomw"},"content":"    ","lastModifiedDate":"2021-03-16"},{"lineNumber":652,"author":{"gitId":"stein414"},"content":"        Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":653,"author":{"gitId":"stein414"},"content":"* 1b. The resident\u0027s phone number or email are in use by an existing resident.","lastModifiedDate":"2021-03-01"},{"lineNumber":654,"author":{"gitId":"stein414"},"content":"    * 1b1. SunRez displays an error stating which field is already in use and requests the user to try again after fixing the stated error.","lastModifiedDate":"2021-03-01"},{"lineNumber":655,"author":{"gitId":"benedictkhoomw"},"content":"    ","lastModifiedDate":"2021-03-16"},{"lineNumber":656,"author":{"gitId":"stein414"},"content":"        Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":657,"author":{"gitId":"benedictkhoomw"},"content":"* 2a. SunRez encounters an error while saving the content.","lastModifiedDate":"2021-03-16"},{"lineNumber":658,"author":{"gitId":"stein414"},"content":"    * 2a1. SunRez shows an error message and requests the user to try their command again.","lastModifiedDate":"2021-03-01"},{"lineNumber":659,"author":{"gitId":"benedictkhoomw"},"content":"    ","lastModifiedDate":"2021-03-16"},{"lineNumber":660,"author":{"gitId":"stein414"},"content":"        Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":661,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":662,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":663,"author":{"gitId":"stein414"},"content":"### UC-002 List all residents","lastModifiedDate":"2021-03-01"},{"lineNumber":664,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":665,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":666,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":667,"author":{"gitId":"stein414"},"content":"1. User requests to list residents.","lastModifiedDate":"2021-03-01"},{"lineNumber":668,"author":{"gitId":"stein414"},"content":"2. SunRez shows a list of residents.","lastModifiedDate":"2021-03-01"},{"lineNumber":669,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":670,"author":{"gitId":"-"},"content":"Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":671,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":672,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":673,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":674,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":675,"author":{"gitId":"benedictkhoomw"},"content":"    ","lastModifiedDate":"2021-03-16"},{"lineNumber":676,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":677,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":678,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":679,"author":{"gitId":"stein414"},"content":"### UC-003 Find residents","lastModifiedDate":"2021-03-01"},{"lineNumber":680,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":681,"author":{"gitId":"stein414"},"content":"**MSS**","lastModifiedDate":"2021-03-01"},{"lineNumber":682,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":683,"author":{"gitId":"stein414"},"content":"1. User searches for a resident by keywords.","lastModifiedDate":"2021-03-01"},{"lineNumber":684,"author":{"gitId":"stein414"},"content":"2. SunRez shows a list of residents whose name contain any of the keywords.","lastModifiedDate":"2021-03-01"},{"lineNumber":685,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":686,"author":{"gitId":"stein414"},"content":"Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":687,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":688,"author":{"gitId":"stein414"},"content":"**Extensions**","lastModifiedDate":"2021-03-01"},{"lineNumber":689,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":690,"author":{"gitId":"stein414"},"content":"* 2a. There are no residents matching the keywords.","lastModifiedDate":"2021-03-01"},{"lineNumber":691,"author":{"gitId":"stein414"},"content":"    * 2a1. An empty list is displayed.","lastModifiedDate":"2021-03-01"},{"lineNumber":692,"author":{"gitId":"benedictkhoomw"},"content":"    ","lastModifiedDate":"2021-03-16"},{"lineNumber":693,"author":{"gitId":"stein414"},"content":"        Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":694,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":695,"author":{"gitId":"stein414"},"content":"### UC-004 Edit a resident record","lastModifiedDate":"2021-03-01"},{"lineNumber":696,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":697,"author":{"gitId":"stein414"},"content":"**MSS**","lastModifiedDate":"2021-03-01"},{"lineNumber":698,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":699,"author":{"gitId":"stein414"},"content":"1. User requests to list residents.","lastModifiedDate":"2021-03-01"},{"lineNumber":700,"author":{"gitId":"stein414"},"content":"2. SunRez shows a list of residents.","lastModifiedDate":"2021-03-01"},{"lineNumber":701,"author":{"gitId":"stein414"},"content":"3. User requests to edit a specific resident based on the index from the list displayed in step 2.","lastModifiedDate":"2021-03-01"},{"lineNumber":702,"author":{"gitId":"stein414"},"content":"4. SunRez edits the residents and saves the changes.","lastModifiedDate":"2021-03-01"},{"lineNumber":703,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":704,"author":{"gitId":"stein414"},"content":"Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":705,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":706,"author":{"gitId":"stein414"},"content":"**Extensions**","lastModifiedDate":"2021-03-01"},{"lineNumber":707,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":708,"author":{"gitId":"stein414"},"content":"* 2a. The list of residents is empty.","lastModifiedDate":"2021-03-01"},{"lineNumber":709,"author":{"gitId":"benedictkhoomw"},"content":"    ","lastModifiedDate":"2021-03-16"},{"lineNumber":710,"author":{"gitId":"stein414"},"content":"    Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":711,"author":{"gitId":"stein414"},"content":"* 3a. The resident\u0027s details are invalid (e.g phone number/email/dob format does not conform, OR room number is invalid).","lastModifiedDate":"2021-03-01"},{"lineNumber":712,"author":{"gitId":"stein414"},"content":"    * 3a1. SunRez shows an error message stating which field is incorrectly formatted and requests the user to try again.","lastModifiedDate":"2021-03-01"},{"lineNumber":713,"author":{"gitId":"benedictkhoomw"},"content":"    ","lastModifiedDate":"2021-03-16"},{"lineNumber":714,"author":{"gitId":"stein414"},"content":"        Use case resumes at step 2.","lastModifiedDate":"2021-03-01"},{"lineNumber":715,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":716,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":717,"author":{"gitId":"stein414"},"content":"### UC-005 Delete a resident","lastModifiedDate":"2021-03-01"},{"lineNumber":718,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":719,"author":{"gitId":"stein414"},"content":"**MSS**","lastModifiedDate":"2021-03-01"},{"lineNumber":720,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":721,"author":{"gitId":"stein414"},"content":"1. User requests to list residents.","lastModifiedDate":"2021-03-01"},{"lineNumber":722,"author":{"gitId":"stein414"},"content":"2. SunRez shows a list of residents.","lastModifiedDate":"2021-03-01"},{"lineNumber":723,"author":{"gitId":"stein414"},"content":"3. User requests to delete a specific resident based on the index from the list displayed in step 2.","lastModifiedDate":"2021-03-01"},{"lineNumber":724,"author":{"gitId":"stein414"},"content":"4. SunRez deletes the specified resident and saves the changes.","lastModifiedDate":"2021-03-01"},{"lineNumber":725,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":726,"author":{"gitId":"stein414"},"content":"Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":727,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":728,"author":{"gitId":"stein414"},"content":"**Extensions**","lastModifiedDate":"2021-03-01"},{"lineNumber":729,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":730,"author":{"gitId":"stein414"},"content":"* 2a. The list of residents is empty.","lastModifiedDate":"2021-03-01"},{"lineNumber":731,"author":{"gitId":"benedictkhoomw"},"content":"    ","lastModifiedDate":"2021-03-16"},{"lineNumber":732,"author":{"gitId":"stein414"},"content":"    Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":733,"author":{"gitId":"stein414"},"content":"* 3a. The specified resident does not exist.","lastModifiedDate":"2021-03-01"},{"lineNumber":734,"author":{"gitId":"benedictkhoomw"},"content":"    * 3a1. SunRez shows an error message.","lastModifiedDate":"2021-03-16"},{"lineNumber":735,"author":{"gitId":"benedictkhoomw"},"content":"    ","lastModifiedDate":"2021-03-16"},{"lineNumber":736,"author":{"gitId":"stein414"},"content":"        Use case resumes at step 2.","lastModifiedDate":"2021-03-01"},{"lineNumber":737,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":738,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":739,"author":{"gitId":"stein414"},"content":"### UC-006 Add a room","lastModifiedDate":"2021-03-01"},{"lineNumber":740,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":741,"author":{"gitId":"stein414"},"content":"**MSS**","lastModifiedDate":"2021-03-01"},{"lineNumber":742,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":743,"author":{"gitId":"stein414"},"content":"1. User requests to add a specific room to the list.","lastModifiedDate":"2021-03-01"},{"lineNumber":744,"author":{"gitId":"stein414"},"content":"2. SunRez adds the room and saves the changes.","lastModifiedDate":"2021-03-01"},{"lineNumber":745,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":746,"author":{"gitId":"stein414"},"content":"Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":747,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":748,"author":{"gitId":"stein414"},"content":"**Extensions**","lastModifiedDate":"2021-03-01"},{"lineNumber":749,"author":{"gitId":"stein414"},"content":"* 1a. The room\u0027s details are invalid (e.g room number format is not valid).","lastModifiedDate":"2021-03-01"},{"lineNumber":750,"author":{"gitId":"stein414"},"content":"    * 1a1. SunRez shows an error stating which field is incorrectly formatted and requests the user to try again after fixing the stated error.","lastModifiedDate":"2021-03-01"},{"lineNumber":751,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":752,"author":{"gitId":"stein414"},"content":"        Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":753,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":754,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":755,"author":{"gitId":"stein414"},"content":"### UC-007 List all rooms","lastModifiedDate":"2021-03-01"},{"lineNumber":756,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":757,"author":{"gitId":"stein414"},"content":"Similar to *UC-002 List all residents*, just replace residents with rooms.","lastModifiedDate":"2021-03-01"},{"lineNumber":758,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":759,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":760,"author":{"gitId":"stein414"},"content":"### UC-008 Find rooms","lastModifiedDate":"2021-03-01"},{"lineNumber":761,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":762,"author":{"gitId":"stein414"},"content":"Similar to *UC-003 Find residents*, just replace resident with room.","lastModifiedDate":"2021-03-01"},{"lineNumber":763,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":764,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":765,"author":{"gitId":"stein414"},"content":"### UC-009 Edit a room record","lastModifiedDate":"2021-03-01"},{"lineNumber":766,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":767,"author":{"gitId":"stein414"},"content":"**MSS**","lastModifiedDate":"2021-03-01"},{"lineNumber":768,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":769,"author":{"gitId":"stein414"},"content":"1. User requests to list rooms.","lastModifiedDate":"2021-03-01"},{"lineNumber":770,"author":{"gitId":"stein414"},"content":"2. SunRez shows a list of rooms.","lastModifiedDate":"2021-03-01"},{"lineNumber":771,"author":{"gitId":"stein414"},"content":"3. User requests to edit a specific room based on the index from the list displayed in step 2.","lastModifiedDate":"2021-03-01"},{"lineNumber":772,"author":{"gitId":"stein414"},"content":"4. SunRez edits the room and saves the changes.","lastModifiedDate":"2021-03-01"},{"lineNumber":773,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":774,"author":{"gitId":"stein414"},"content":"Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":775,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":776,"author":{"gitId":"stein414"},"content":"**Extensions**","lastModifiedDate":"2021-03-01"},{"lineNumber":777,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":778,"author":{"gitId":"stein414"},"content":"* 2a. The list of rooms is empty. ","lastModifiedDate":"2021-03-01"},{"lineNumber":779,"author":{"gitId":"benedictkhoomw"},"content":"    ","lastModifiedDate":"2021-03-16"},{"lineNumber":780,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":781,"author":{"gitId":"benedictkhoomw"},"content":"* 3a. The room\u0027s details are invalid (e.g. room number format is not valid).","lastModifiedDate":"2021-03-16"},{"lineNumber":782,"author":{"gitId":"stein414"},"content":"    * 3a1. SunRez shows an error message stating which field is incorrectly formatted and requests the user to try again.","lastModifiedDate":"2021-03-01"},{"lineNumber":783,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":784,"author":{"gitId":"stein414"},"content":"        Use case resumes at step 2.","lastModifiedDate":"2021-03-01"},{"lineNumber":785,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":786,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":787,"author":{"gitId":"stein414"},"content":"### UC-010 Delete a room","lastModifiedDate":"2021-03-01"},{"lineNumber":788,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":789,"author":{"gitId":"stein414"},"content":"Similar to *UC-005 Delete a resident*, just replace resident with room.","lastModifiedDate":"2021-03-01"},{"lineNumber":790,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":791,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":792,"author":{"gitId":"stein414"},"content":"### UC-011 Add an open issue","lastModifiedDate":"2021-03-01"},{"lineNumber":793,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":794,"author":{"gitId":"stein414"},"content":"**MSS**","lastModifiedDate":"2021-03-01"},{"lineNumber":795,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":796,"author":{"gitId":"stein414"},"content":"1. User requests to add a specific open issue to the list.","lastModifiedDate":"2021-03-01"},{"lineNumber":797,"author":{"gitId":"stein414"},"content":"2. SunRez adds the issue and saves the changes.","lastModifiedDate":"2021-03-01"},{"lineNumber":798,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":799,"author":{"gitId":"stein414"},"content":"Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":800,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":801,"author":{"gitId":"stein414"},"content":"**Extensions**","lastModifiedDate":"2021-03-01"},{"lineNumber":802,"author":{"gitId":"benedictkhoomw"},"content":"* 1a. The issue\u0027s details are invalid (e.g. invalid room number).","lastModifiedDate":"2021-03-16"},{"lineNumber":803,"author":{"gitId":"stein414"},"content":"    * 1a1. SunRez shows an error stating which field is incorrectly formatted and requests the user to try again after fixing the stated error. ","lastModifiedDate":"2021-03-01"},{"lineNumber":804,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":805,"author":{"gitId":"stein414"},"content":"        Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":806,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":807,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":808,"author":{"gitId":"stein414"},"content":"### UC-012 List all issues","lastModifiedDate":"2021-03-01"},{"lineNumber":809,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":810,"author":{"gitId":"stein414"},"content":"Similar to *UC-002 List all residents*, just replace residents with issues.","lastModifiedDate":"2021-03-01"},{"lineNumber":811,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":812,"author":{"gitId":"stein414"},"content":"### UC-013 Find issues","lastModifiedDate":"2021-03-01"},{"lineNumber":813,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":814,"author":{"gitId":"stein414"},"content":"Similar to *UC-003 Find residents*, just replace residents with issues.","lastModifiedDate":"2021-03-01"},{"lineNumber":815,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":816,"author":{"gitId":"stein414"},"content":"### UC-014 Edit an issue record","lastModifiedDate":"2021-03-01"},{"lineNumber":817,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":818,"author":{"gitId":"stein414"},"content":"**MSS**","lastModifiedDate":"2021-03-01"},{"lineNumber":819,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":820,"author":{"gitId":"stein414"},"content":"1. User requests to list issues.","lastModifiedDate":"2021-03-01"},{"lineNumber":821,"author":{"gitId":"stein414"},"content":"2. SunRez shows a list of issues.","lastModifiedDate":"2021-03-01"},{"lineNumber":822,"author":{"gitId":"stein414"},"content":"3. User requests to edit a specific issue based on the index from the list displayed in step 2.","lastModifiedDate":"2021-03-01"},{"lineNumber":823,"author":{"gitId":"stein414"},"content":"4. SunRez edits the issue and saves the changes.","lastModifiedDate":"2021-03-01"},{"lineNumber":824,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":825,"author":{"gitId":"stein414"},"content":"Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":826,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":827,"author":{"gitId":"stein414"},"content":"**Extensions**","lastModifiedDate":"2021-03-01"},{"lineNumber":828,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":829,"author":{"gitId":"stein414"},"content":"* 2a. The list of issue is empty.","lastModifiedDate":"2021-03-01"},{"lineNumber":830,"author":{"gitId":"benedictkhoomw"},"content":"    ","lastModifiedDate":"2021-03-16"},{"lineNumber":831,"author":{"gitId":"stein414"},"content":"    Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":832,"author":{"gitId":"stein414"},"content":"* 3a. The issue\u0027s details are invalid (e.g invalid room number).","lastModifiedDate":"2021-03-01"},{"lineNumber":833,"author":{"gitId":"stein414"},"content":"    * 3a1. SunRez shows an error message stating which field is incorrectly formatted and requests the user to try again.","lastModifiedDate":"2021-03-01"},{"lineNumber":834,"author":{"gitId":"benedictkhoomw"},"content":"    ","lastModifiedDate":"2021-03-16"},{"lineNumber":835,"author":{"gitId":"stein414"},"content":"        Use case resumes at step 2.","lastModifiedDate":"2021-03-01"},{"lineNumber":836,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":837,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":838,"author":{"gitId":"stein414"},"content":"### UC-015 Close an issue","lastModifiedDate":"2021-03-01"},{"lineNumber":839,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":840,"author":{"gitId":"stein414"},"content":"**MSS**","lastModifiedDate":"2021-03-01"},{"lineNumber":841,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":842,"author":{"gitId":"stein414"},"content":"1. User requests to list issues.","lastModifiedDate":"2021-03-01"},{"lineNumber":843,"author":{"gitId":"stein414"},"content":"2. SunRez shows a list of issues.","lastModifiedDate":"2021-03-01"},{"lineNumber":844,"author":{"gitId":"stein414"},"content":"3. User requests to mark a specific issue as closed based on the index from the list displayed in step 2.","lastModifiedDate":"2021-03-01"},{"lineNumber":845,"author":{"gitId":"stein414"},"content":"4. SunRez marks the issue as closed and saves the changes.","lastModifiedDate":"2021-03-01"},{"lineNumber":846,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":847,"author":{"gitId":"stein414"},"content":"Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":848,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":849,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2021-03-01"},{"lineNumber":850,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":851,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-03-01"},{"lineNumber":852,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":853,"author":{"gitId":"stein414"},"content":"    Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":854,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":855,"author":{"gitId":"stein414"},"content":"    * 3a1. SunRez shows an error message.","lastModifiedDate":"2021-03-01"},{"lineNumber":856,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":857,"author":{"gitId":"stein414"},"content":"        Use case resumes at step 2.","lastModifiedDate":"2021-03-01"},{"lineNumber":858,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":859,"author":{"gitId":"stein414"},"content":"### UC-016 Delete an issue","lastModifiedDate":"2021-03-01"},{"lineNumber":860,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":861,"author":{"gitId":"stein414"},"content":"Similar to *UC-005 Delete a resident*, just replace resident with issue.","lastModifiedDate":"2021-03-01"},{"lineNumber":862,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":863,"author":{"gitId":"stein414"},"content":"### UC-017 Undo Previous Command","lastModifiedDate":"2021-03-01"},{"lineNumber":864,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":865,"author":{"gitId":"stein414"},"content":"**MSS**","lastModifiedDate":"2021-03-01"},{"lineNumber":866,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":867,"author":{"gitId":"stein414"},"content":"1.  User requests to undo previous command.","lastModifiedDate":"2021-03-01"},{"lineNumber":868,"author":{"gitId":"stein414"},"content":"2.  Previous command is undone and SunRez\u0027s state is reverted to before that command.","lastModifiedDate":"2021-03-01"},{"lineNumber":869,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":870,"author":{"gitId":"stein414"},"content":"Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":871,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":872,"author":{"gitId":"stein414"},"content":"**Extensions**","lastModifiedDate":"2021-03-01"},{"lineNumber":873,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":874,"author":{"gitId":"stein414"},"content":"* 1a. There are no previous commands that change state.","lastModifiedDate":"2021-03-01"},{"lineNumber":875,"author":{"gitId":"stein414"},"content":"    * 1a1 SunRez shows an error message.","lastModifiedDate":"2021-03-01"},{"lineNumber":876,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":877,"author":{"gitId":"stein414"},"content":"        Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":878,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":879,"author":{"gitId":"stein414"},"content":"### UC-018 Redo Previous Command","lastModifiedDate":"2021-03-01"},{"lineNumber":880,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":881,"author":{"gitId":"stein414"},"content":"**MSS**","lastModifiedDate":"2021-03-01"},{"lineNumber":882,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":883,"author":{"gitId":"stein414"},"content":"1.  User requests to redo previously undone command.","lastModifiedDate":"2021-03-01"},{"lineNumber":884,"author":{"gitId":"stein414"},"content":"2.  Previous undone command is redone and SunRez\u0027s state is updated accordingly.","lastModifiedDate":"2021-03-01"},{"lineNumber":885,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":886,"author":{"gitId":"stein414"},"content":"Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":887,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":888,"author":{"gitId":"stein414"},"content":"**Extensions**","lastModifiedDate":"2021-03-01"},{"lineNumber":889,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":890,"author":{"gitId":"stein414"},"content":"* 1a. There are no previously undone commands.","lastModifiedDate":"2021-03-01"},{"lineNumber":891,"author":{"gitId":"stein414"},"content":"    * 1a1 SunRez shows an error message.","lastModifiedDate":"2021-03-01"},{"lineNumber":892,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":893,"author":{"gitId":"stein414"},"content":"        Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":894,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":895,"author":{"gitId":"stein414"},"content":"### UC-019 Allocate a Room","lastModifiedDate":"2021-03-01"},{"lineNumber":896,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":897,"author":{"gitId":"stein414"},"content":"**MSS**","lastModifiedDate":"2021-03-01"},{"lineNumber":898,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":899,"author":{"gitId":"stein414"},"content":"1. User requests to list unassigned residents and unallocated rooms.","lastModifiedDate":"2021-03-01"},{"lineNumber":900,"author":{"gitId":"stein414"},"content":"2. SunRez displays unassigned residents and unallocated rooms side-by-side.","lastModifiedDate":"2021-03-01"},{"lineNumber":901,"author":{"gitId":"stein414"},"content":"3. User requests to allocate a room to a resident.","lastModifiedDate":"2021-03-01"},{"lineNumber":902,"author":{"gitId":"stein414"},"content":"4. SunRez allocates the room and saves the changes.","lastModifiedDate":"2021-03-01"},{"lineNumber":903,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":904,"author":{"gitId":"stein414"},"content":"**Extensions**","lastModifiedDate":"2021-03-01"},{"lineNumber":905,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":906,"author":{"gitId":"stein414"},"content":"* 2a. There are no unassigned residents or unassigned.","lastModifiedDate":"2021-03-01"},{"lineNumber":907,"author":{"gitId":"benedictkhoomw"},"content":"    ","lastModifiedDate":"2021-03-16"},{"lineNumber":908,"author":{"gitId":"stein414"},"content":"    Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":909,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-03-01"},{"lineNumber":910,"author":{"gitId":"stein414"},"content":"    * 3a1. SunRez shows an error message.","lastModifiedDate":"2021-03-01"},{"lineNumber":911,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":912,"author":{"gitId":"-"},"content":"        Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":913,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":914,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":915,"author":{"gitId":"stein414"},"content":"### UC-020 Deallocate a Room","lastModifiedDate":"2021-03-01"},{"lineNumber":916,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":917,"author":{"gitId":"stein414"},"content":"**MSS**","lastModifiedDate":"2021-03-01"},{"lineNumber":918,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":919,"author":{"gitId":"stein414"},"content":"1. User requests to list room allocations.","lastModifiedDate":"2021-03-01"},{"lineNumber":920,"author":{"gitId":"stein414"},"content":"2. SunRez displays rooms, each with its corresponding allocated resident.","lastModifiedDate":"2021-03-01"},{"lineNumber":921,"author":{"gitId":"stein414"},"content":"3. User requests to deallocate a room based on the index from the list displayed in step 2.","lastModifiedDate":"2021-03-01"},{"lineNumber":922,"author":{"gitId":"stein414"},"content":"4. SunRez deallocates the room and saves the changes.","lastModifiedDate":"2021-03-01"},{"lineNumber":923,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":924,"author":{"gitId":"stein414"},"content":"**Extensions**","lastModifiedDate":"2021-03-01"},{"lineNumber":925,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":926,"author":{"gitId":"stein414"},"content":"* 2a. There are no unassigned residents or unassigned.","lastModifiedDate":"2021-03-01"},{"lineNumber":927,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":928,"author":{"gitId":"stein414"},"content":"    Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":929,"author":{"gitId":"stein414"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-03-01"},{"lineNumber":930,"author":{"gitId":"stein414"},"content":"    * 3a1. SunRez shows an error message.","lastModifiedDate":"2021-03-01"},{"lineNumber":931,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":932,"author":{"gitId":"stein414"},"content":"        Use case resumes at step 2.","lastModifiedDate":"2021-03-01"},{"lineNumber":933,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":934,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":935,"author":{"gitId":"benedictkhoomw"},"content":"### UC-021 Access Command History","lastModifiedDate":"2021-03-09"},{"lineNumber":936,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":937,"author":{"gitId":"benedictkhoomw"},"content":"**MSS**","lastModifiedDate":"2021-03-09"},{"lineNumber":938,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":939,"author":{"gitId":"benedictkhoomw"},"content":"1. User requests to view command history.","lastModifiedDate":"2021-03-09"},{"lineNumber":940,"author":{"gitId":"benedictkhoomw"},"content":"2. SunRez displays command history, in reverse order of entry.","lastModifiedDate":"2021-03-09"},{"lineNumber":941,"author":{"gitId":"benedictkhoomw"},"content":"3. User selects a previously entered command.","lastModifiedDate":"2021-03-09"},{"lineNumber":942,"author":{"gitId":"benedictkhoomw"},"content":"4. SunRez fills the command field with the selected command.","lastModifiedDate":"2021-03-09"},{"lineNumber":943,"author":{"gitId":"benedictkhoomw"},"content":"5. User modifies and/or executes the command.","lastModifiedDate":"2021-03-09"},{"lineNumber":944,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":945,"author":{"gitId":"benedictkhoomw"},"content":"Use case ends.","lastModifiedDate":"2021-03-09"},{"lineNumber":946,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":947,"author":{"gitId":"benedictkhoomw"},"content":"**Extensions**","lastModifiedDate":"2021-03-09"},{"lineNumber":948,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":949,"author":{"gitId":"benedictkhoomw"},"content":"* 1a. There is no command history.","lastModifiedDate":"2021-03-09"},{"lineNumber":950,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":951,"author":{"gitId":"benedictkhoomw"},"content":"    Use case ends.","lastModifiedDate":"2021-03-09"},{"lineNumber":952,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":953,"author":{"gitId":"cnlinh"},"content":"### UC-022 Add an alias","lastModifiedDate":"2021-03-16"},{"lineNumber":954,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":955,"author":{"gitId":"cnlinh"},"content":"**MSS**","lastModifiedDate":"2021-03-16"},{"lineNumber":956,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":957,"author":{"gitId":"cnlinh"},"content":"1. User requests to assign an alias name for a command.","lastModifiedDate":"2021-03-31"},{"lineNumber":958,"author":{"gitId":"cnlinh"},"content":"2. SunRez validates the alias name and command.","lastModifiedDate":"2021-03-16"},{"lineNumber":959,"author":{"gitId":"cnlinh"},"content":"3. SunRez saves the alias mapping to the user’s preferences.","lastModifiedDate":"2021-03-16"},{"lineNumber":960,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":961,"author":{"gitId":"cnlinh"},"content":"Use case ends.","lastModifiedDate":"2021-03-16"},{"lineNumber":962,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":963,"author":{"gitId":"cnlinh"},"content":"**Extensions**","lastModifiedDate":"2021-03-16"},{"lineNumber":964,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":965,"author":{"gitId":"cnlinh"},"content":"* 2a. Alias name is invalid.","lastModifiedDate":"2021-03-31"},{"lineNumber":966,"author":{"gitId":"cnlinh"},"content":"    * 2a1. SunRez shows an error message. ","lastModifiedDate":"2021-03-31"},{"lineNumber":967,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":968,"author":{"gitId":"cnlinh"},"content":"        Use case ends.","lastModifiedDate":"2021-03-16"},{"lineNumber":969,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":970,"author":{"gitId":"cnlinh"},"content":"* 3a. An alias with the same name exists.","lastModifiedDate":"2021-03-31"},{"lineNumber":971,"author":{"gitId":"cnlinh"},"content":"    * 3a1. SunRez overwrites the existing alias. ","lastModifiedDate":"2021-03-31"},{"lineNumber":972,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":973,"author":{"gitId":"cnlinh"},"content":"        Use case ends.","lastModifiedDate":"2021-03-31"},{"lineNumber":974,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":975,"author":{"gitId":"cnlinh"},"content":"### UC-023 Delete an alias","lastModifiedDate":"2021-03-31"},{"lineNumber":976,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":977,"author":{"gitId":"cnlinh"},"content":"**MSS**","lastModifiedDate":"2021-03-31"},{"lineNumber":978,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":979,"author":{"gitId":"cnlinh"},"content":"1. User requests to delete an alias.","lastModifiedDate":"2021-03-31"},{"lineNumber":980,"author":{"gitId":"cnlinh"},"content":"2. SunRez validates the alias name.","lastModifiedDate":"2021-03-31"},{"lineNumber":981,"author":{"gitId":"cnlinh"},"content":"3. SunRez removes the alias and updates the alias mapping in the user’s preferences.","lastModifiedDate":"2021-03-31"},{"lineNumber":982,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":983,"author":{"gitId":"cnlinh"},"content":"Use case ends.","lastModifiedDate":"2021-03-31"},{"lineNumber":984,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":985,"author":{"gitId":"cnlinh"},"content":"**Extensions**","lastModifiedDate":"2021-03-31"},{"lineNumber":986,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":987,"author":{"gitId":"cnlinh"},"content":"* 2a. Alias is not found in the current alias mapping.","lastModifiedDate":"2021-03-31"},{"lineNumber":988,"author":{"gitId":"cnlinh"},"content":"    * 2a1. SunRez shows an error message.","lastModifiedDate":"2021-03-31"},{"lineNumber":989,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":990,"author":{"gitId":"cnlinh"},"content":"      Use case ends.","lastModifiedDate":"2021-03-31"},{"lineNumber":991,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":992,"author":{"gitId":"stein414"},"content":"## Non-Functional Requirements","lastModifiedDate":"2021-03-01"},{"lineNumber":993,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":994,"author":{"gitId":"-"},"content":"1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":995,"author":{"gitId":"stein414"},"content":"2. Should be able to hold up to 1000 records (residents, rooms and issues) without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2021-03-01"},{"lineNumber":996,"author":{"gitId":"-"},"content":"3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":997,"author":{"gitId":"stein414"},"content":"4. A user should be able to learn the basic commands within half an hour of initial usage.","lastModifiedDate":"2021-03-01"},{"lineNumber":998,"author":{"gitId":"stein414"},"content":"5. Should work without the internet.","lastModifiedDate":"2021-03-01"},{"lineNumber":999,"author":{"gitId":"stein414"},"content":"6. Should be a highly portable to enable transfer between different computers with different OS.","lastModifiedDate":"2021-03-01"},{"lineNumber":1000,"author":{"gitId":"stein414"},"content":"7. Executable program should occupy less than 20MB on the computer.","lastModifiedDate":"2021-03-01"},{"lineNumber":1001,"author":{"gitId":"stein414"},"content":"8. Should not require an installer.","lastModifiedDate":"2021-03-01"},{"lineNumber":1002,"author":{"gitId":"stein414"},"content":"9. The data should not be stored in a Database Management System (DBMS).","lastModifiedDate":"2021-03-01"},{"lineNumber":1003,"author":{"gitId":"stein414"},"content":"10. Should not depend on any remote server.","lastModifiedDate":"2021-03-01"},{"lineNumber":1004,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1005,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":1006,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1007,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":1008,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1009,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":1010,"author":{"gitId":"stein414"},"content":"* **Residential College (RC)**: A university residence for students that offers a 2-year program at NUS","lastModifiedDate":"2021-03-01"},{"lineNumber":1011,"author":{"gitId":"stein414"},"content":"* **NUS**: The National University of Singapore","lastModifiedDate":"2021-03-01"},{"lineNumber":1012,"author":{"gitId":"stein414"},"content":"* **Resident**: A university student staying in the Residential College","lastModifiedDate":"2021-03-01"},{"lineNumber":1013,"author":{"gitId":"stein414"},"content":"* **Issue**: A maintenance problem that concerns the condition of a room","lastModifiedDate":"2021-03-01"},{"lineNumber":1014,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1015,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":1016,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1017,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":1018,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1019,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":1020,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1021,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":1022,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":1023,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1024,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":1025,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1026,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":1027,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1028,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":1029,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1030,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":1031,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1032,"author":{"gitId":"stein414"},"content":"   2. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2021-03-01"},{"lineNumber":1033,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1034,"author":{"gitId":"stein414"},"content":"2. Saving window preferences","lastModifiedDate":"2021-03-01"},{"lineNumber":1035,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1036,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":1037,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1038,"author":{"gitId":"stein414"},"content":"   2. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2021-03-01"},{"lineNumber":1039,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":1040,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1041,"author":{"gitId":"stein414"},"content":"3. _{ more test cases … }_","lastModifiedDate":"2021-03-01"},{"lineNumber":1042,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1043,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1044,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":1045,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1046,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":1047,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1048,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":1049,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1050,"author":{"gitId":"stein414"},"content":"2. _{ more test cases … }_","lastModifiedDate":"2021-03-01"}],"authorContributionMap":{"cnlinh":42,"benedictkhoomw":164,"stein414":331,"colintkn":145,"-":320,"DrWala":48}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2021-02-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2021-02-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"## Introduction","lastModifiedDate":"2021-02-26"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"**SunRez** is a desktop app designed for college residential staff to efficiently manage student housing services. It ","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"features a Graphical User Interface (GUI) but is optimized for use via a Command Line Interface (CLI).","lastModifiedDate":"2021-04-05"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-02-26"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"**SunRez** has the following features:","lastModifiedDate":"2021-02-26"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of maintenance issues","lastModifiedDate":"2021-02-26"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of student records","lastModifiedDate":"2021-02-26"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of room records","lastModifiedDate":"2021-02-26"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-02-26"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2021-04-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2021-04-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"2. Download the latest `sunrez.jar` from [here](https://github.com/AY2021S2-CS2103-T14-1/tp/releases).","lastModifiedDate":"2021-04-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your SunRez.","lastModifiedDate":"2021-04-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"4. Double-click the file to start the app. A GUI like the one pictured below should appear in a few seconds.","lastModifiedDate":"2021-04-08"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"   Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2021-04-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"5. Type a command in the command box and press Enter to execute it.","lastModifiedDate":"2021-04-08"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"   e.g. typing `help` and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"   Some example commands you can try:","lastModifiedDate":"2021-04-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    * `rlist`: Lists all residents.","lastModifiedDate":"2021-04-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"    * `radd n/Joseph Tan p/84666774 e/e0103994@u.nus.edu y/2`:","lastModifiedDate":"2021-04-08"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"      Adds a resident named `Joseph Tan` with phone number `84666774`, email `e0103994@u.nus.edu`, a 2nd year student.","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"    * `rdel 3`: Deletes the 3rd resident shown in the current resident list.","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"    * `exit`: Exits the app.","lastModifiedDate":"2021-04-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"6. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-04-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"## SunRez User Interface (UI)","lastModifiedDate":"2021-04-07"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"The following image shows the different parts of the SunRez application window:","lastModifiedDate":"2021-04-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"![Ui Layout](images/UiLayout.png)","lastModifiedDate":"2021-04-07"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"### Using the UI","lastModifiedDate":"2021-04-07"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"SunRez is optimized for fast typists, so most input to SunRez takes the form of commands. To execute a command, ","lastModifiedDate":"2021-04-07"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"simply type it into the **Command Box** then press `ENTER` on the keyboard. The result (or an error message) will be","lastModifiedDate":"2021-04-07"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"displayed in the **Result Box** following a command execution. Details about specific commands can be found in the ","lastModifiedDate":"2021-04-07"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"[features](#features) section.","lastModifiedDate":"2021-04-07"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"An error message may be shown for various reasons. Most commonly, one is shown if a command cannot be parsed (that is,","lastModifiedDate":"2021-04-07"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"if SunRez cannot understand the format of your command) or if a command has been given parameters which are out of","lastModifiedDate":"2021-04-07"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"the acceptable range. In the following sections, more information is given about acceptable ","lastModifiedDate":"2021-04-07"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"[command formats](#command-format), [command parameters](#command-parameters), and the ","lastModifiedDate":"2021-04-07"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"[command parsing process](#command-parsing). ","lastModifiedDate":"2021-04-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"### Command Format","lastModifiedDate":"2021-04-05"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"Commands in this user guide follow this format:","lastModifiedDate":"2021-04-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"  e.g. in `radd n/NAME ...`, `NAME` is a parameter which can be used as `radd n/John Doe ...`.","lastModifiedDate":"2021-04-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"  e.g. `d/DESCRIPTION [t/TIMESTAMP]` can be used as `d/Broken chair t/2020/3/23 11:59pm` or as `d/Broken chair`.","lastModifiedDate":"2021-04-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2021-04-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"* If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence ","lastModifiedDate":"2021-04-07"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"  of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"  e.g. if you specify `n/John Doe n/Jane Doe`, only `n/Jane Doe` will be taken.","lastModifiedDate":"2021-04-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `ilist`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-04-05"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"  ","lastModifiedDate":"2021-04-05"},{"lineNumber":90,"author":{"gitId":"cnlinh"},"content":"### Command Parsing","lastModifiedDate":"2021-04-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"#### Repeated parameters","lastModifiedDate":"2021-04-06"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"All commands in SunRez default to taking the latest occurrence of a duplicate parameter **except [tags](#tag)**. ","lastModifiedDate":"2021-04-05"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"For example, if you key in this command:","lastModifiedDate":"2021-04-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"`radd n/John Doe n/Timmy Tan p/91234567 e/e0123456@u.nus.edu y/3`","lastModifiedDate":"2021-04-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"The resident\u0027s name will take the **later** occurrence of name and create a resident named \"Timmy Tan\".","lastModifiedDate":"2021-04-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"On the other hand, **all** [tags](#tag) specified will be taken. ","lastModifiedDate":"2021-04-06"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":"For instance, `radd n/John Doe n/Timmy Tan p/91234567 e/e0123456@u.nus.edu y/3 g/tag_one g/tag_two g/tag_three` will ","lastModifiedDate":"2021-04-07"},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"create a resident with tags `tag_one`, `tag_two` and `tag_three`.","lastModifiedDate":"2021-04-07"},{"lineNumber":104,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":105,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":106,"author":{"gitId":"DrWala"},"content":"#### Interpreting parameter values","lastModifiedDate":"2021-04-06"},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"Commands in SunRez have a pre-set parameter list they accept. The value for the parameter will be all characters ","lastModifiedDate":"2021-04-05"},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"until the next occurrence of a parameter prefix for the command.","lastModifiedDate":"2021-04-05"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":"For example, if you key in this command:","lastModifiedDate":"2021-04-05"},{"lineNumber":110,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":"`radd n/John Doe p/91234567 e/e0123456@u.nus.edu y/3`","lastModifiedDate":"2021-04-05"},{"lineNumber":112,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":113,"author":{"gitId":"DrWala"},"content":"The resident\u0027s name will be all characters that follows `n/` until just before the start of `p/`, including the space. ","lastModifiedDate":"2021-04-07"},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":"Most commands, however, trim leading and trailing spaces.","lastModifiedDate":"2021-04-07"},{"lineNumber":115,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":116,"author":{"gitId":"DrWala"},"content":"Let us break this down further and assume `radd` only takes in 2 parameters for the purposes of explanation. ","lastModifiedDate":"2021-04-05"},{"lineNumber":117,"author":{"gitId":"DrWala"},"content":"We can break the command down as follows:","lastModifiedDate":"2021-04-05"},{"lineNumber":118,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":119,"author":{"gitId":"DrWala"},"content":"`radd n/[NAME_STRING] p/[PHONE_NUM_STRING]`","lastModifiedDate":"2021-04-05"},{"lineNumber":120,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":121,"author":{"gitId":"DrWala"},"content":"A user can enter a `NAME_STRING` that consists of anything, including text that contains prefix-like strings such as `s/`. ","lastModifiedDate":"2021-04-05"},{"lineNumber":122,"author":{"gitId":"DrWala"},"content":"For example, a user could enter `John s/o Tom`. ","lastModifiedDate":"2021-04-05"},{"lineNumber":123,"author":{"gitId":"DrWala"},"content":"However, as `s/` is not a valid prefix for the `radd` command, the command parser will treat `John s/o Tom` as the ","lastModifiedDate":"2021-04-07"},{"lineNumber":124,"author":{"gitId":"DrWala"},"content":"value for the name parameter. ","lastModifiedDate":"2021-04-07"},{"lineNumber":125,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":126,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":127,"author":{"gitId":"DrWala"},"content":"The validation for the `Name` parameter will process `John s/o Tom` and may reject it based on the stated validation rules.","lastModifiedDate":"2021-04-06"},{"lineNumber":128,"author":{"gitId":"DrWala"},"content":"However, a known limitation of this approach is that parameter values containing valid parameter prefixes will cause issues. ","lastModifiedDate":"2021-04-05"},{"lineNumber":129,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":130,"author":{"gitId":"DrWala"},"content":"Let us take a look at another example:","lastModifiedDate":"2021-04-05"},{"lineNumber":131,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":132,"author":{"gitId":"DrWala"},"content":"If `NAME_STRING` \u003d `John p/ Tom`, the command keyed in could look like `radd p/[VALID_PHONE_NUM] n/John p/ Tom` ","lastModifiedDate":"2021-04-07"},{"lineNumber":133,"author":{"gitId":"DrWala"},"content":"(Remember that prefix order does not matter.) ","lastModifiedDate":"2021-04-07"},{"lineNumber":134,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":135,"author":{"gitId":"DrWala"},"content":"This will create the presence of 2 phone number parameters. In such a case, the latter value will be taken. ","lastModifiedDate":"2021-04-07"},{"lineNumber":136,"author":{"gitId":"DrWala"},"content":"As `Tom` is not a valid phone number, it will be rejected.","lastModifiedDate":"2021-04-07"},{"lineNumber":137,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":138,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":139,"author":{"gitId":"benedictkhoomw"},"content":"### Command Parameters","lastModifiedDate":"2021-04-05"},{"lineNumber":140,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":141,"author":{"gitId":"benedictkhoomw"},"content":"Many SunRez commands use various parameters. Their formats, constraints and rationale are provided in this subsection.","lastModifiedDate":"2021-04-05"},{"lineNumber":142,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":143,"author":{"gitId":"cnlinh"},"content":"| Parameter | Prefix | Applicable to | Description |","lastModifiedDate":"2021-04-06"},{"lineNumber":144,"author":{"gitId":"cnlinh"},"content":"|---|---|---|---|","lastModifiedDate":"2021-04-06"},{"lineNumber":145,"author":{"gitId":"cnlinh"},"content":"| \u003ca id\u003d\"alias_name\"\u003e\u003c/a\u003e `ALIAS_NAME` | `a/` | `alias` `unalias` | The name of an alias.{::nomarkdown}\u003cul\u003e\u003cli\u003e Must be alphanumeric. \u003c/li\u003e\u003cli\u003e Must not be empty. \u003c/li\u003e\u003cli\u003e Must not be a reserved keyword i.e. names of other system commands. \u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-07"},{"lineNumber":146,"author":{"gitId":"cnlinh"},"content":"| \u003ca id\u003d\"category\"\u003e\u003c/a\u003e `CATEGORY` | `c/` | `iadd` `iedit`| DESCRIPTION OF PARAMETER{::nomarkdown} \u003cul\u003e\u003cli\u003e FORMAT AND RESTRICTIONS WITH JUSTIFICATION \u003c/li\u003e\u003cli\u003e (if applicable) For best usage, ... \u003c/li\u003e\u003cli\u003e (if applicable) Valid examples (if not clear from above) \u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-07"},{"lineNumber":147,"author":{"gitId":"cnlinh"},"content":"| \u003ca id\u003d\"command\"\u003e\u003c/a\u003e `COMMAND` | `cmd/`| `alias` | The command that an alias is short for.{::nomarkdown}  \u003cul\u003e\u003cli\u003e Must not be empty. \u003c/li\u003e\u003cli\u003e Must not be recursive i.e. contains another alias name. \u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-07"},{"lineNumber":148,"author":{"gitId":"benedictkhoomw"},"content":"| \u003ca id\u003d\"count\"\u003e\u003c/a\u003e `COUNT` | - | `history` | The number of command history entries wanted.{::nomarkdown} \u003cul\u003e\u003cli\u003e Must be a positive integer: 1, 2, 3, ... \u003c/li\u003e\u003cli\u003e Must be at most the total number of entries in command history. \u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-08"},{"lineNumber":149,"author":{"gitId":"cnlinh"},"content":"| \u003ca id\u003d\"description\"\u003e\u003c/a\u003e `DESCRIPTION` | `d/` | `iadd` `iedit` | DESCRIPTION OF PARAMETER{::nomarkdown} \u003cul\u003e\u003cli\u003e FORMAT AND RESTRICTIONS WITH JUSTIFICATION \u003c/li\u003e\u003cli\u003e (if applicable) For best usage, ... \u003c/li\u003e\u003cli\u003e (if applicable) Valid examples (if not clear from above) \u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-07"},{"lineNumber":150,"author":{"gitId":"cnlinh"},"content":"| \u003ca id\u003d\"email\"\u003e\u003c/a\u003e `EMAIL` | `e/` | `radd` `redit` | The email of a resident.{::nomarkdown} \u003cul\u003e\u003cli\u003e Format: local-part@domain. \u003c/li\u003e\u003cli\u003e Local-part should only contain alphanumeric characters, and these special characters, excluding the parenthesis (!#$%\u0026\u0027*+/\u003d?\u0026#96;{\u0026#124;}~^.-). \u003c/li\u003e\u003cli\u003e Must contain @. \u003c/li\u003e\u003cli\u003e Domain must be at least 2 characters long, start and end with alphanumeric characters, and consist of alphanumeric characters, a period or a hyphen for the characters in between, if any. \u003c/li\u003e\u003cli\u003e e.g. e0123456@u.nus.edu \u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-07"},{"lineNumber":151,"author":{"gitId":"cnlinh"},"content":"| \u003ca id\u003d\"index\"\u003e\u003c/a\u003e `INDEX` | - | `redit` `rdel` `oedit` `odel` `iedit` `iclo` `idel` `alloc` `dealloc`| The index number shown in the displayed list.{::nomarkdown} \u003cul\u003e\u003cli\u003e Must be a positive integer: 1, 2, 3, ... \u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-07"},{"lineNumber":152,"author":{"gitId":"cnlinh"},"content":"| \u003ca id\u003d\"keyword\"\u003e\u003c/a\u003e `KEYWORD` | - | `rfind` `ofind` `ifind` | A keyword used in the various find commands.{::nomarkdown} \u003cul\u003e\u003cli\u003e Format: Single word consisting of any character except spaces. \u003c/li\u003e\u003cli\u003e For best usage: Use English characters only. \u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-07"},{"lineNumber":153,"author":{"gitId":"cnlinh"},"content":"| \u003ca id\u003d\"name\"\u003e\u003c/a\u003e `NAME` | `n/` | `radd` `redit` | The identifier of a resident.{::nomarkdown} \u003cul\u003e\u003cli\u003e Accepts only alphabetic characters and spaces. \u003c/li\u003e\u003cli\u003e Must not be blank. \u003c/li\u003e\u003cli\u003e Must be unique. \u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-07"},{"lineNumber":154,"author":{"gitId":"cnlinh"},"content":"| \u003ca id\u003d\"phone_number\"\u003e\u003c/a\u003e `PHONE_NUMBER` | `p/` | `radd` `redit` | The phone number of a resident.{::nomarkdown} \u003cul\u003e\u003cli\u003e Must contain only numbers. \u003c/li\u003e\u003cli\u003e Must be at least 3 digits long. \u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-07"},{"lineNumber":155,"author":{"gitId":"cnlinh"},"content":"| \u003ca id\u003d\"room_number\"\u003e\u003c/a\u003e `ROOM_NUMBER` | `r/` | `oadd` `oedit` `iadd` `iedit` | Room number for a room.{::nomarkdown} \u003cul\u003e\u003cli\u003e Format: \u003ccode\u003eXY-ABC\u003c/code\u003e, where XY can be any pair of digits except 00, and ABC can be any 3 digits. \u003cul\u003e\u003cli\u003e Valid examples: 01-000, 11-100, 12-345. \u003c/li\u003e\u003cli\u003e Invalid examples: 00-000, 00-100. \u003c/li\u003e\u003c/ul\u003e \u003c/li\u003e\u003cli\u003e Room numbers are unique within SunRez. \u003c/li\u003e\u003cli\u003e We disallow floor numbers being 00. However, unit numbers can be 000. \u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-07"},{"lineNumber":156,"author":{"gitId":"cnlinh"},"content":"| \u003ca id\u003d\"room_type\"\u003e\u003c/a\u003e `ROOM_TYPE` | `t/` | `oadd` `oedit` | Room type of a room.{::nomarkdown} \u003cul\u003e\u003cli\u003e Must be one of the following strings: \u003ccode\u003ecorridor_ac\u003c/code\u003e, \u003ccode\u003ecorridor_non_ac\u003c/code\u003e, \u003ccode\u003esuite_ac\u003c/code\u003e, \u003ccode\u003esuite_non_ac\u003c/code\u003e. \u003c/li\u003e\u003cli\u003e Strings are not case-sensitive. \u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-07"},{"lineNumber":157,"author":{"gitId":"cnlinh"},"content":"| \u003ca id\u003d\"status\"\u003e\u003c/a\u003e `STATUS` | `s/` | `iadd` `iedit` | DESCRIPTION OF PARAMETER{::nomarkdown} \u003cul\u003e\u003cli\u003e FORMAT AND RESTRICTIONS WITH JUSTIFICATION \u003c/li\u003e\u003cli\u003e (if applicable) For best usage, ... \u003c/li\u003e\u003cli\u003e (if applicable) Valid examples (if not clear from above) \u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-07"},{"lineNumber":158,"author":{"gitId":"cnlinh"},"content":"| \u003ca id\u003d\"tag\"\u003e\u003c/a\u003e `TAG` | `g/` | `oadd` `oedit` `iadd` `iedit` | The tag associated with a room or issue.{::nomarkdown} \u003cul\u003e\u003cli\u003e Tags must be non-blank and alphanumeric (spaces are not allowed). \u003c/li\u003e\u003cli\u003e Tags are limited to 25 characters. \u003c/li\u003e\u003cli\u003e Tags are case-sensitive: e.g. \u003ccode\u003eSHN\u003c/code\u003e,\u003ccode\u003eshn\u003c/code\u003e and \u003ccode\u003eShn\u003c/code\u003e are each considered separate tags. \u003c/li\u003e\u003cli\u003e Insertion order of tags does not guarantee display order in any part of the user interface. \u003c/li\u003e\u003cli\u003e Duplicate tags will be accepted as input, but only one instance will be recorded. \u003c/li\u003e\u003cli\u003e For the best experience, we recommend keeping tags short and having fewer than 20 of them per entry. There is no theoretical limit to the number of tags an entry can have, but SunRez may slow down or run into unexpected problems for a huge number of tags. \u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-07"},{"lineNumber":159,"author":{"gitId":"cnlinh"},"content":"| \u003ca id\u003d\"timestamp\"\u003e\u003c/a\u003e `TIMESTAMP` | `t/` | `iadd` `iedit` | DESCRIPTION OF PARAMETER{::nomarkdown} \u003cul\u003e\u003cli\u003e FORMAT AND RESTRICTIONS WITH JUSTIFICATION \u003c/li\u003e\u003cli\u003e (if applicable) For best usage, ... \u003c/li\u003e\u003cli\u003e (if applicable) Valid examples (if not clear from above) \u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-07"},{"lineNumber":160,"author":{"gitId":"cnlinh"},"content":"| \u003ca id\u003d\"year\"\u003e\u003c/a\u003e `YEAR` | `y/` | `radd` `redit` | The year of study of a resident.{::nomarkdown} \u003cul\u003e\u003cli\u003e Must be a single digit numeric character from 1 to 5 inclusive. \u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-07"},{"lineNumber":161,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":162,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"benedictkhoomw"},"content":"This section contains the details on SunRez commands and features. ","lastModifiedDate":"2021-04-05"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"benedictkhoomw"},"content":"### Resident Management","lastModifiedDate":"2021-03-31"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"benedictkhoomw"},"content":"#### Add a resident : `radd`","lastModifiedDate":"2021-03-31"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"colintkn"},"content":"Adds a resident to the housing management system.","lastModifiedDate":"2021-02-20"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"colintkn"},"content":"Format: `radd n/NAME p/PHONE_NUMBER e/EMAIL y/YEAR`","lastModifiedDate":"2021-03-24"},{"lineNumber":175,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":176,"author":{"gitId":"colintkn"},"content":"Parameters:","lastModifiedDate":"2021-04-05"},{"lineNumber":177,"author":{"gitId":"colintkn"},"content":"* [NAME](#name) The name of the resident.","lastModifiedDate":"2021-04-05"},{"lineNumber":178,"author":{"gitId":"colintkn"},"content":"* [PHONE_NUMBER](#phone_number) The phone number of the resident.","lastModifiedDate":"2021-04-05"},{"lineNumber":179,"author":{"gitId":"colintkn"},"content":"* [EMAIL](#email) The email of the resident.","lastModifiedDate":"2021-04-05"},{"lineNumber":180,"author":{"gitId":"colintkn"},"content":"* [YEAR](#year) The year of the resident.","lastModifiedDate":"2021-04-05"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"DrWala"},"content":"* `radd n/John Doe p/91234567 e/e0123456@u.nus.edu y/3` ","lastModifiedDate":"2021-04-07"},{"lineNumber":184,"author":{"gitId":"DrWala"},"content":"  Adds a resident named `John Doe` with phone number `91234567`, email `e0123456@u.nus.edu`, and as a 3rd year student, ","lastModifiedDate":"2021-04-07"},{"lineNumber":185,"author":{"gitId":"DrWala"},"content":"  without any room allocated.","lastModifiedDate":"2021-04-07"},{"lineNumber":186,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"benedictkhoomw"},"content":"#### List all residents : `rlist`","lastModifiedDate":"2021-03-31"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"colintkn"},"content":"Shows a list of all residents in the system sorted by alphabetical order.","lastModifiedDate":"2021-02-20"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"colintkn"},"content":"Format: `rlist`","lastModifiedDate":"2021-02-20"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":195,"author":{"gitId":"benedictkhoomw"},"content":"#### Find residents : `rfind`","lastModifiedDate":"2021-03-31"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":197,"author":{"gitId":"colintkn"},"content":"Finds residents whose names contain any of the given keywords.","lastModifiedDate":"2021-02-20"},{"lineNumber":198,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":199,"author":{"gitId":"colintkn"},"content":"Format: `rfind KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2021-02-20"},{"lineNumber":200,"author":{"gitId":"benedictkhoomw"},"content":"* The search is case-insensitive. e.g. `hans` will match `Hans`.","lastModifiedDate":"2021-02-26"},{"lineNumber":201,"author":{"gitId":"benedictkhoomw"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`.","lastModifiedDate":"2021-02-26"},{"lineNumber":202,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"benedictkhoomw"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`.","lastModifiedDate":"2021-02-26"},{"lineNumber":204,"author":{"gitId":"benedictkhoomw"},"content":"* Residents matching at least one keyword will be returned (i.e. OR search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`.","lastModifiedDate":"2021-02-26"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"colintkn"},"content":"* `rfind john` returns `john` and `John Doe`.","lastModifiedDate":"2021-02-20"},{"lineNumber":208,"author":{"gitId":"colintkn"},"content":"* `rfind alex david` returns `Alex Yeoh`, and `David Li`.","lastModifiedDate":"2021-04-05"},{"lineNumber":209,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":210,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":211,"author":{"gitId":"benedictkhoomw"},"content":"#### Edit a resident record : `redit`","lastModifiedDate":"2021-03-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"benedictkhoomw"},"content":"Edits the existing resident record at a specified index.","lastModifiedDate":"2021-02-26"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"colintkn"},"content":"Format: `redit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [y/YEAR]`","lastModifiedDate":"2021-04-05"},{"lineNumber":216,"author":{"gitId":"colintkn"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2021-02-20"},{"lineNumber":217,"author":{"gitId":"colintkn"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2021-02-20"},{"lineNumber":218,"author":{"gitId":"colintkn"},"content":"* `redit` will be blocked if the resident has an active room allocation. Run `dealloc` before making further edits.","lastModifiedDate":"2021-03-24"},{"lineNumber":219,"author":{"gitId":"colintkn"},"content":"  See [Deallocate a resident](#deallocate-resident-from-room--dealloc).","lastModifiedDate":"2021-04-05"},{"lineNumber":220,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":221,"author":{"gitId":"colintkn"},"content":"Parameters:","lastModifiedDate":"2021-04-05"},{"lineNumber":222,"author":{"gitId":"colintkn"},"content":"* [INDEX](#index) The index of the displayed resident.","lastModifiedDate":"2021-04-05"},{"lineNumber":223,"author":{"gitId":"colintkn"},"content":"* [NAME](#name) The name of the resident.","lastModifiedDate":"2021-04-05"},{"lineNumber":224,"author":{"gitId":"colintkn"},"content":"* [PHONE_NUMBER](#phone_number) The phone number of the resident.","lastModifiedDate":"2021-04-05"},{"lineNumber":225,"author":{"gitId":"colintkn"},"content":"* [EMAIL](#email) The email of the resident.","lastModifiedDate":"2021-04-05"},{"lineNumber":226,"author":{"gitId":"colintkn"},"content":"* [YEAR](#year) The year of the resident.","lastModifiedDate":"2021-04-05"},{"lineNumber":227,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":228,"author":{"gitId":"colintkn"},"content":"Example:","lastModifiedDate":"2021-02-20"},{"lineNumber":229,"author":{"gitId":"DrWala"},"content":"* `redit 1 p/91234567 e/e0123456@u.nus.edu` Edits the phone number and email address of the 1st resident to ","lastModifiedDate":"2021-04-07"},{"lineNumber":230,"author":{"gitId":"DrWala"},"content":"  be `91234567` and `e0123456@u.nus.edu` respectively.","lastModifiedDate":"2021-04-07"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"benedictkhoomw"},"content":"#### Delete a resident : `rdel`","lastModifiedDate":"2021-03-31"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"benedictkhoomw"},"content":"Deletes the resident record at a specified index.","lastModifiedDate":"2021-02-26"},{"lineNumber":236,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":237,"author":{"gitId":"colintkn"},"content":"Format: `rdel INDEX`","lastModifiedDate":"2021-02-20"},{"lineNumber":238,"author":{"gitId":"colintkn"},"content":"*  A resident allocated to a room cannot be deleted until it is first deallocated. Run `dealloc` commmand before deletion.","lastModifiedDate":"2021-03-24"},{"lineNumber":239,"author":{"gitId":"colintkn"},"content":"   See [Deallocate a resident](#deallocate-resident-from-room--dealloc).","lastModifiedDate":"2021-04-05"},{"lineNumber":240,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":241,"author":{"gitId":"colintkn"},"content":"Parameters:","lastModifiedDate":"2021-04-05"},{"lineNumber":242,"author":{"gitId":"colintkn"},"content":"* [INDEX](#index) The index of the displayed resident.","lastModifiedDate":"2021-04-05"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"colintkn"},"content":"Example:","lastModifiedDate":"2021-02-20"},{"lineNumber":245,"author":{"gitId":"colintkn"},"content":"* `rdel 1` deletes the 1st resident in the resident list.","lastModifiedDate":"2021-02-20"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"benedictkhoomw"},"content":"### Room Management","lastModifiedDate":"2021-03-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"DrWala"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-secondary\"\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":250,"author":{"gitId":"DrWala"},"content":":thinking: Why do room commands start with `o`?\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":251,"author":{"gitId":"DrWala"},"content":":point_right: Room commands are prefixed with `o` as `r` is taken up by Resident commands. `o` is the second character in R**o**om. ","lastModifiedDate":"2021-04-05"},{"lineNumber":252,"author":{"gitId":"DrWala"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":253,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":254,"author":{"gitId":"DrWala"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":255,"author":{"gitId":"DrWala"},"content":"**:information_source: Rooms are always sorted in ascending order by room number in all views.**","lastModifiedDate":"2021-04-06"},{"lineNumber":256,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":258,"author":{"gitId":"benedictkhoomw"},"content":"#### Add a room : `oadd`","lastModifiedDate":"2021-03-31"},{"lineNumber":259,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":260,"author":{"gitId":"DrWala"},"content":"Adds a room to the housing management system.","lastModifiedDate":"2021-02-25"},{"lineNumber":261,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":262,"author":{"gitId":"benedictkhoomw"},"content":"Format: `oadd r/ROOM_NUMBER t/ROOM_TYPE [g/TAG]`","lastModifiedDate":"2021-04-05"},{"lineNumber":263,"author":{"gitId":"DrWala"},"content":"* Room is initialised with default occupancy status of \"No\".","lastModifiedDate":"2021-03-31"},{"lineNumber":264,"author":{"gitId":"DrWala"},"content":"* The occupancy status cannot be defaulted to \"Yes\" during room addition.","lastModifiedDate":"2021-04-05"},{"lineNumber":265,"author":{"gitId":"DrWala"},"content":"* Room occupancy status can only be changed through the `alloc` or `dealloc` command when a resident is allocated or deallocated. ","lastModifiedDate":"2021-04-07"},{"lineNumber":266,"author":{"gitId":"DrWala"},"content":"  See [allocate a resident](#allocate-resident-to-room-alloc) or [deallocate a resident](#deallocate-resident-from-room-dealloc) for more info. ","lastModifiedDate":"2021-04-07"},{"lineNumber":267,"author":{"gitId":"DrWala"},"content":"  ","lastModifiedDate":"2021-04-05"},{"lineNumber":268,"author":{"gitId":"DrWala"},"content":"Parameters:","lastModifiedDate":"2021-04-05"},{"lineNumber":269,"author":{"gitId":"DrWala"},"content":"* [ROOM_NUMBER](#room_number) The room number of the room to add.","lastModifiedDate":"2021-04-05"},{"lineNumber":270,"author":{"gitId":"DrWala"},"content":"* [ROOM_TYPE](#room_type) The type of the room being added.","lastModifiedDate":"2021-04-05"},{"lineNumber":271,"author":{"gitId":"DrWala"},"content":"* [TAG](#tag) Optional tags that may be specified to assist in management of the room.","lastModifiedDate":"2021-04-05"},{"lineNumber":272,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":273,"author":{"gitId":"DrWala"},"content":"Example:","lastModifiedDate":"2021-02-25"},{"lineNumber":274,"author":{"gitId":"DrWala"},"content":"* `oadd r/10-112 t/corridor_ac g/SHN` Adds a room numbered `10-112` of type `corridor_ac` with the tag `SHN`.","lastModifiedDate":"2021-03-31"},{"lineNumber":275,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":276,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":277,"author":{"gitId":"benedictkhoomw"},"content":"#### List all rooms : `olist`","lastModifiedDate":"2021-03-31"},{"lineNumber":278,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":279,"author":{"gitId":"DrWala"},"content":"Shows a list of all rooms in the system sorted by room number.","lastModifiedDate":"2021-02-25"},{"lineNumber":280,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":281,"author":{"gitId":"DrWala"},"content":"Format: `olist`","lastModifiedDate":"2021-02-25"},{"lineNumber":282,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":283,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":284,"author":{"gitId":"benedictkhoomw"},"content":"#### Find rooms : `ofind`","lastModifiedDate":"2021-03-31"},{"lineNumber":285,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":286,"author":{"gitId":"DrWala"},"content":"Finds all rooms by room number or tag that contain any of the given keywords.","lastModifiedDate":"2021-03-30"},{"lineNumber":287,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":288,"author":{"gitId":"DrWala"},"content":"Format: `ofind KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2021-02-25"},{"lineNumber":289,"author":{"gitId":"benedictkhoomw"},"content":"* The search matches any part of the room number. e.g. `10` will match `10-111` and `14-101`.","lastModifiedDate":"2021-02-26"},{"lineNumber":290,"author":{"gitId":"DrWala"},"content":"* The search for tags matches any part of the tag and is NOT case-sensitive. e.g `mell`, `smell`, `smelly` or `room` ","lastModifiedDate":"2021-04-07"},{"lineNumber":291,"author":{"gitId":"DrWala"},"content":"  all work to match `smellyroom`. `s` will match both `smellyroom` and `SHN`.","lastModifiedDate":"2021-04-07"},{"lineNumber":292,"author":{"gitId":"DrWala"},"content":"* The order of the keywords does not matter. e.g. `11- 10-` will match `10-100`, `10-101`, `11-100`, and `11-101`.","lastModifiedDate":"2021-02-25"},{"lineNumber":293,"author":{"gitId":"DrWala"},"content":"* Only the room number and tags are searched.","lastModifiedDate":"2021-03-30"},{"lineNumber":294,"author":{"gitId":"benedictkhoomw"},"content":"* Rooms matching at least one keyword will be returned (i.e. OR search). e.g. `10 20` will return `10-100`, `11-120`.","lastModifiedDate":"2021-02-26"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"DrWala"},"content":"Parameters:","lastModifiedDate":"2021-04-05"},{"lineNumber":297,"author":{"gitId":"DrWala"},"content":"* [KEYWORD](#keyword) The keyword to search for in the room list.","lastModifiedDate":"2021-04-06"},{"lineNumber":298,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":299,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"DrWala"},"content":"* `ofind 10-` returns `10-100`, `10-101`, and `10-102`.","lastModifiedDate":"2021-02-25"},{"lineNumber":301,"author":{"gitId":"DrWala"},"content":"* `ofind 10- 15-` returns `10-100`, `10-101`, `15-100`, and`15-101`.","lastModifiedDate":"2021-02-25"},{"lineNumber":302,"author":{"gitId":"DrWala"},"content":"* `ofind 10` returns `09-100`, `09-110`, `10-100`, and `10-101`.","lastModifiedDate":"2021-02-25"},{"lineNumber":303,"author":{"gitId":"DrWala"},"content":"* `ofind s` returns `SHN` and `smellyroom`.","lastModifiedDate":"2021-03-30"},{"lineNumber":304,"author":{"gitId":"DrWala"},"content":"* `ofind 1 s` returns `10-100` and `SHN`.","lastModifiedDate":"2021-03-30"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"benedictkhoomw"},"content":"#### Edit a room record : `oedit`","lastModifiedDate":"2021-03-31"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"benedictkhoomw"},"content":"Edits the existing room record at a specified index.","lastModifiedDate":"2021-02-26"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"benedictkhoomw"},"content":"Format: `oedit INDEX [r/ROOM_NUMBER] [t/ROOM_TYPE] [g/TAG]`","lastModifiedDate":"2021-04-05"},{"lineNumber":312,"author":{"gitId":"benedictkhoomw"},"content":"* `INDEX` refers to the index number shown in the displayed room list. `INDEX` **must be a positive integer 1, 2, 3, …**.","lastModifiedDate":"2021-02-26"},{"lineNumber":313,"author":{"gitId":"DrWala"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2021-02-25"},{"lineNumber":314,"author":{"gitId":"DrWala"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2021-02-25"},{"lineNumber":315,"author":{"gitId":"DrWala"},"content":"* `oedit` will be blocked if the room is occupied. Run `dealloc` to deallocate the room before making further edits.","lastModifiedDate":"2021-03-31"},{"lineNumber":316,"author":{"gitId":"DrWala"},"content":"* The occupancy status is not controllable through the `oedit` command.","lastModifiedDate":"2021-04-05"},{"lineNumber":317,"author":{"gitId":"DrWala"},"content":"* Room occupancy status can only be changed through the `alloc` or `dealloc` command when a resident is allocated or deallocated. ","lastModifiedDate":"2021-04-07"},{"lineNumber":318,"author":{"gitId":"DrWala"},"content":"  See [allocate a resident](#allocate-resident-to-room-alloc) or [deallocate a resident](#deallocate-resident-from-room-dealloc) for more info.","lastModifiedDate":"2021-04-07"},{"lineNumber":319,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":320,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":321,"author":{"gitId":"DrWala"},"content":"Parameters:","lastModifiedDate":"2021-04-05"},{"lineNumber":322,"author":{"gitId":"DrWala"},"content":"* [INDEX](#index) The index of the room to edit.","lastModifiedDate":"2021-04-05"},{"lineNumber":323,"author":{"gitId":"DrWala"},"content":"* [ROOM_NUMBER](#room_number) The room number to change the room identified by [INDEX](#index) to.","lastModifiedDate":"2021-04-05"},{"lineNumber":324,"author":{"gitId":"DrWala"},"content":"* [ROOM_TYPE](#room_type) The room type to change the room identified by [INDEX](#index) to.","lastModifiedDate":"2021-04-05"},{"lineNumber":325,"author":{"gitId":"DrWala"},"content":"* [TAG](#tag) Optional tags that may be updated for the room identified by [INDEX](#index).","lastModifiedDate":"2021-04-05"},{"lineNumber":326,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":327,"author":{"gitId":"DrWala"},"content":"Example:","lastModifiedDate":"2021-02-25"},{"lineNumber":328,"author":{"gitId":"DrWala"},"content":"* `oedit 1 g/SHN g/Blue` Edits the 1st room\u0027s tags to `SHN` and `Blue`.","lastModifiedDate":"2021-03-31"},{"lineNumber":329,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":331,"author":{"gitId":"benedictkhoomw"},"content":"#### Delete a room : `odel`","lastModifiedDate":"2021-03-31"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":333,"author":{"gitId":"benedictkhoomw"},"content":"Deletes the room at a specified index.","lastModifiedDate":"2021-02-26"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":335,"author":{"gitId":"DrWala"},"content":"Format: `odel INDEX`","lastModifiedDate":"2021-02-25"},{"lineNumber":336,"author":{"gitId":"benedictkhoomw"},"content":"* `INDEX` refers to the index number shown in the displayed resident list. `INDEX` **must be a positive integer 1,2,3, ...**.","lastModifiedDate":"2021-02-26"},{"lineNumber":337,"author":{"gitId":"DrWala"},"content":"* `odel` will be blocked if the room is occupied. Run `dealloc` to deallocate the room before attempting to delete the room. ","lastModifiedDate":"2021-03-31"},{"lineNumber":338,"author":{"gitId":"DrWala"},"content":"  See [deallocate a resident](#deallocate-resident-from-room-dealloc) for more info.","lastModifiedDate":"2021-04-07"},{"lineNumber":339,"author":{"gitId":"DrWala"},"content":"* `odel` will be blocked if the there are issues associated with the room. ","lastModifiedDate":"2021-04-07"},{"lineNumber":340,"author":{"gitId":"DrWala"},"content":"  Run `idel` to delete all issues associated the room before attempting to delete the room. ","lastModifiedDate":"2021-04-07"},{"lineNumber":341,"author":{"gitId":"DrWala"},"content":"  See [delete an issue](#delete-an-issue--idel) for more info.","lastModifiedDate":"2021-04-07"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":343,"author":{"gitId":"DrWala"},"content":"Parameters:","lastModifiedDate":"2021-04-05"},{"lineNumber":344,"author":{"gitId":"DrWala"},"content":"* [INDEX](#index) The index of the room to delete.","lastModifiedDate":"2021-04-05"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":346,"author":{"gitId":"benedictkhoomw"},"content":"Example:","lastModifiedDate":"2021-02-26"},{"lineNumber":347,"author":{"gitId":"DrWala"},"content":"* `odel 1` Deletes the 1st room in the room list.","lastModifiedDate":"2021-02-25"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":349,"author":{"gitId":"benedictkhoomw"},"content":"### Room Allocation/Deallocation","lastModifiedDate":"2021-03-31"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":351,"author":{"gitId":"benedictkhoomw"},"content":"#### List all unallocated residents : `rulist`","lastModifiedDate":"2021-03-31"},{"lineNumber":352,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":353,"author":{"gitId":"benedictkhoomw"},"content":"Shows a list of all unallocated residents in the system sorted by alphabetical order.","lastModifiedDate":"2021-03-31"},{"lineNumber":354,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":355,"author":{"gitId":"benedictkhoomw"},"content":"Format: `rulist`","lastModifiedDate":"2021-03-31"},{"lineNumber":356,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":357,"author":{"gitId":"benedictkhoomw"},"content":"#### Allocate resident to room : `alloc`","lastModifiedDate":"2021-03-31"},{"lineNumber":358,"author":{"gitId":"colintkn"},"content":"Allocates an existing resident to an existing room.","lastModifiedDate":"2021-03-24"},{"lineNumber":359,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":360,"author":{"gitId":"colintkn"},"content":"Format: `alloc ri/RESIDENT_INDEX oi/ROOM_INDEX`","lastModifiedDate":"2021-04-05"},{"lineNumber":361,"author":{"gitId":"colintkn"},"content":"* Both fields must be provided.","lastModifiedDate":"2021-03-24"},{"lineNumber":362,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":363,"author":{"gitId":"colintkn"},"content":"Parameters:","lastModifiedDate":"2021-04-05"},{"lineNumber":364,"author":{"gitId":"colintkn"},"content":"* [RESIDENT_INDEX](#index) The index of the displayed resident.","lastModifiedDate":"2021-04-05"},{"lineNumber":365,"author":{"gitId":"colintkn"},"content":"* [ROOM_INDEX](#index) The index of the displayed room.","lastModifiedDate":"2021-04-05"},{"lineNumber":366,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":367,"author":{"gitId":"colintkn"},"content":"Note that RESIDENT_INDEX and ROOM_INDEX both conform to [INDEX](#index). ","lastModifiedDate":"2021-04-05"},{"lineNumber":368,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":369,"author":{"gitId":"colintkn"},"content":"Example:","lastModifiedDate":"2021-03-24"},{"lineNumber":370,"author":{"gitId":"colintkn"},"content":"* `alloc ri/1 oi/2` Allocates the 1st resident in the resident list to the 2nd room in the room list.","lastModifiedDate":"2021-04-05"},{"lineNumber":371,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":372,"author":{"gitId":"benedictkhoomw"},"content":"#### Deallocate resident from room : `dealloc`","lastModifiedDate":"2021-03-31"},{"lineNumber":373,"author":{"gitId":"colintkn"},"content":"Deallocates an existing resident from an existing room.","lastModifiedDate":"2021-03-24"},{"lineNumber":374,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":375,"author":{"gitId":"colintkn"},"content":"Format: `dealloc INDEX`","lastModifiedDate":"2021-03-31"},{"lineNumber":376,"author":{"gitId":"colintkn"},"content":"* `INDEX` refers to the index number shown in the displayed resident list. `INDEX` **must be a positive integer 1,2,3, ...**.","lastModifiedDate":"2021-03-31"},{"lineNumber":377,"author":{"gitId":"colintkn"},"content":"* The resident at the `INDEX` must already be allocated.","lastModifiedDate":"2021-03-31"},{"lineNumber":378,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":379,"author":{"gitId":"colintkn"},"content":"Parameters:","lastModifiedDate":"2021-04-05"},{"lineNumber":380,"author":{"gitId":"colintkn"},"content":"* [INDEX](#index) The index of the displayed resident.","lastModifiedDate":"2021-04-05"},{"lineNumber":381,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":382,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":383,"author":{"gitId":"colintkn"},"content":"Example:","lastModifiedDate":"2021-03-24"},{"lineNumber":384,"author":{"gitId":"colintkn"},"content":"* `dealloc 1` Deallocates the 1st resident in the resident list from its allocated room.","lastModifiedDate":"2021-03-31"},{"lineNumber":385,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":386,"author":{"gitId":"benedictkhoomw"},"content":"### Issue Management","lastModifiedDate":"2021-03-31"},{"lineNumber":387,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":388,"author":{"gitId":"benedictkhoomw"},"content":"#### Add an open issue : `iadd`","lastModifiedDate":"2021-03-31"},{"lineNumber":389,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":390,"author":{"gitId":"stein414"},"content":"Adds an issue to the housing management system.","lastModifiedDate":"2021-02-25"},{"lineNumber":391,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":392,"author":{"gitId":"benedictkhoomw"},"content":"Format: `iadd r/ROOM_NUMBER d/DESCRIPTION [t/TIMESTAMP] [s/STATUS] [c/CATEGORY] [g/TAG]`","lastModifiedDate":"2021-04-05"},{"lineNumber":393,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":394,"author":{"gitId":"stein414"},"content":"Example:","lastModifiedDate":"2021-02-25"},{"lineNumber":395,"author":{"gitId":"DrWala"},"content":"* `iadd r/10-100 d/Broken light c/Furniture` ","lastModifiedDate":"2021-04-07"},{"lineNumber":396,"author":{"gitId":"DrWala"},"content":"  Creates an issue for room number `10-100` with description `Broken light` under the category `Furniture`.","lastModifiedDate":"2021-04-07"},{"lineNumber":397,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":398,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":399,"author":{"gitId":"benedictkhoomw"},"content":"#### List all issues : `ilist`","lastModifiedDate":"2021-03-31"},{"lineNumber":400,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":401,"author":{"gitId":"benedictkhoomw"},"content":"Shows a list of all issues in the system sorted by their timestamp.","lastModifiedDate":"2021-02-26"},{"lineNumber":402,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":403,"author":{"gitId":"stein414"},"content":"Format: `ilist`","lastModifiedDate":"2021-02-25"},{"lineNumber":404,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":405,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":406,"author":{"gitId":"benedictkhoomw"},"content":"#### Find issues : `ifind`","lastModifiedDate":"2021-03-31"},{"lineNumber":407,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":408,"author":{"gitId":"DrWala"},"content":"Finds all issues that contain any of the given keywords in the description, room number or tags.","lastModifiedDate":"2021-03-31"},{"lineNumber":409,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":410,"author":{"gitId":"stein414"},"content":"Format: `ifind KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2021-02-25"},{"lineNumber":411,"author":{"gitId":"benedictkhoomw"},"content":"* The search is case-insensitive. e.g. `broken` will match `Broken`.","lastModifiedDate":"2021-02-26"},{"lineNumber":412,"author":{"gitId":"benedictkhoomw"},"content":"* The order of the keywords does not matter. e.g. `Broken light` will match `light broken`.","lastModifiedDate":"2021-02-26"},{"lineNumber":413,"author":{"gitId":"DrWala"},"content":"* The search for tags and description matches any part of the tag and is NOT case-sensitive. ","lastModifiedDate":"2021-04-07"},{"lineNumber":414,"author":{"gitId":"DrWala"},"content":"  e.g `high`, `HIGH` or `h` all work to match `High`. `H` will match both `Hot` and `High`.","lastModifiedDate":"2021-04-07"},{"lineNumber":415,"author":{"gitId":"DrWala"},"content":"* The search matches any part of the room number. e.g. `10` will match `10-111` and `14-101`.","lastModifiedDate":"2021-03-31"},{"lineNumber":416,"author":{"gitId":"DrWala"},"content":"* Only the description, room number, and tags are searched.","lastModifiedDate":"2021-03-31"},{"lineNumber":417,"author":{"gitId":"DrWala"},"content":"* Issues matching at least one keyword will be returned (i.e. OR search). ","lastModifiedDate":"2021-04-07"},{"lineNumber":418,"author":{"gitId":"DrWala"},"content":"  e.g. `Broken window` will return `Broken light`, `Dirty window`, and `Broken window`.","lastModifiedDate":"2021-04-07"},{"lineNumber":419,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":420,"author":{"gitId":"stein414"},"content":"Examples:","lastModifiedDate":"2021-02-25"},{"lineNumber":421,"author":{"gitId":"stein414"},"content":"* `ifind chair` returns `Broken chair` and `Chair missing wheel`.","lastModifiedDate":"2021-02-25"},{"lineNumber":422,"author":{"gitId":"stein414"},"content":"* `ifind wardrobe table` returns `Wardrobe door broke`, `Table unstable`, and `Table stuck in wardrobe`.","lastModifiedDate":"2021-02-25"},{"lineNumber":423,"author":{"gitId":"DrWala"},"content":"* `ifind 1 s` returns room number `10-100`, description `Table unstable` and tag `Insect` as they all either contain `1` or the string `s`.","lastModifiedDate":"2021-03-31"},{"lineNumber":424,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":425,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":426,"author":{"gitId":"benedictkhoomw"},"content":"#### Edit an issue record : `iedit`","lastModifiedDate":"2021-03-31"},{"lineNumber":427,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":428,"author":{"gitId":"benedictkhoomw"},"content":"Edits the existing issue record at a specified index.","lastModifiedDate":"2021-02-26"},{"lineNumber":429,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":430,"author":{"gitId":"benedictkhoomw"},"content":"Format: `iedit INDEX [r/ROOM_NUMBER] [d/DESCRIPTION] [t/TIMESTAMP] [s/STATUS] [c/CATEGORY] [g/TAG]`","lastModifiedDate":"2021-04-05"},{"lineNumber":431,"author":{"gitId":"benedictkhoomw"},"content":"* `INDEX` refers to the index number shown in the displayed issue list. `INDEX` **must be a positive integer 1, 2, 3, …**.","lastModifiedDate":"2021-02-26"},{"lineNumber":432,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2021-02-25"},{"lineNumber":433,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2021-02-25"},{"lineNumber":434,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":435,"author":{"gitId":"stein414"},"content":"Example:","lastModifiedDate":"2021-02-25"},{"lineNumber":436,"author":{"gitId":"stein414"},"content":"* `iedit 1 r/20-109 s/Closed` Edits the room number and status of the 1st issue to be `20-109` and `Closed` respectively.","lastModifiedDate":"2021-02-25"},{"lineNumber":437,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":438,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":439,"author":{"gitId":"benedictkhoomw"},"content":"#### Close an issue : `iclo`","lastModifiedDate":"2021-03-31"},{"lineNumber":440,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":441,"author":{"gitId":"benedictkhoomw"},"content":"Marks as closed the issue at a specified index.","lastModifiedDate":"2021-02-26"},{"lineNumber":442,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":443,"author":{"gitId":"stein414"},"content":"Format: `iclo INDEX`","lastModifiedDate":"2021-03-31"},{"lineNumber":444,"author":{"gitId":"benedictkhoomw"},"content":"* `INDEX` refers to the index number shown in the displayed issue list. `INDEX` **must be a positive integer 1, 2, 3, …**.","lastModifiedDate":"2021-02-26"},{"lineNumber":445,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":446,"author":{"gitId":"stein414"},"content":"Example:","lastModifiedDate":"2021-02-25"},{"lineNumber":447,"author":{"gitId":"stein414"},"content":"* `iclo 1` Closes the 1st issue.","lastModifiedDate":"2021-03-31"},{"lineNumber":448,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":449,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":450,"author":{"gitId":"benedictkhoomw"},"content":"#### Delete an issue : `idel`","lastModifiedDate":"2021-03-31"},{"lineNumber":451,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":452,"author":{"gitId":"benedictkhoomw"},"content":"Deletes the issue at a specified index.","lastModifiedDate":"2021-02-26"},{"lineNumber":453,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":454,"author":{"gitId":"stein414"},"content":"Format: `idel INDEX`","lastModifiedDate":"2021-02-25"},{"lineNumber":455,"author":{"gitId":"benedictkhoomw"},"content":"* `INDEX` refers to the index number shown in the displayed resident list. `INDEX` **must be a positive integer 1,2,3, ...**.","lastModifiedDate":"2021-02-26"},{"lineNumber":456,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":457,"author":{"gitId":"stein414"},"content":"Example:","lastModifiedDate":"2021-02-25"},{"lineNumber":458,"author":{"gitId":"stein414"},"content":"* `idel 1` Deletes the 1st issue.","lastModifiedDate":"2021-02-25"},{"lineNumber":459,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":460,"author":{"gitId":"benedictkhoomw"},"content":"### General","lastModifiedDate":"2021-03-31"},{"lineNumber":461,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":462,"author":{"gitId":"benedictkhoomw"},"content":"#### Show help : `help`","lastModifiedDate":"2021-03-31"},{"lineNumber":463,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":464,"author":{"gitId":"benedictkhoomw"},"content":"Shows a message explaining how to access the help page.","lastModifiedDate":"2021-03-31"},{"lineNumber":465,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":466,"author":{"gitId":"benedictkhoomw"},"content":"Format: `help`","lastModifiedDate":"2021-03-31"},{"lineNumber":467,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":468,"author":{"gitId":"benedictkhoomw"},"content":"#### Delete all data : `clear`","lastModifiedDate":"2021-03-31"},{"lineNumber":469,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":470,"author":{"gitId":"benedictkhoomw"},"content":"Deletes all rooms, residents and issues in SunRez.","lastModifiedDate":"2021-03-31"},{"lineNumber":471,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":472,"author":{"gitId":"benedictkhoomw"},"content":"Format: `clear`","lastModifiedDate":"2021-03-31"},{"lineNumber":473,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":474,"author":{"gitId":"benedictkhoomw"},"content":"#### Undo previous command : `undo`","lastModifiedDate":"2021-03-31"},{"lineNumber":475,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":476,"author":{"gitId":"benedictkhoomw"},"content":"Restores SunRez to its state before an _undoable_ command was executed.","lastModifiedDate":"2021-03-28"},{"lineNumber":477,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":478,"author":{"gitId":"benedictkhoomw"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":479,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":480,"author":{"gitId":"benedictkhoomw"},"content":"**:information_source: _Undoable_ command:**\u003cbr\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":481,"author":{"gitId":"benedictkhoomw"},"content":"An undoable command is one which modifies the data of SunRez.","lastModifiedDate":"2021-03-28"},{"lineNumber":482,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":483,"author":{"gitId":"benedictkhoomw"},"content":"e.g. `radd`, `redit`, `idel`, `clear`, etc.","lastModifiedDate":"2021-03-28"},{"lineNumber":484,"author":{"gitId":"benedictkhoomw"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":485,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":486,"author":{"gitId":"benedictkhoomw"},"content":"Format: `undo`","lastModifiedDate":"2021-03-28"},{"lineNumber":487,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":488,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-03-28"},{"lineNumber":489,"author":{"gitId":"benedictkhoomw"},"content":"* `rdel 1` \u003cbr\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":490,"author":{"gitId":"benedictkhoomw"},"content":"  `undo` Undoes the `rdel 1` command.","lastModifiedDate":"2021-03-28"},{"lineNumber":491,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":492,"author":{"gitId":"benedictkhoomw"},"content":"* `iedit 1 r/20-109 s/Closed` \u003cbr\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":493,"author":{"gitId":"benedictkhoomw"},"content":"  `clear` \u003cbr\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":494,"author":{"gitId":"benedictkhoomw"},"content":"  `undo` Undoes the `clear` command. \u003cbr\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":495,"author":{"gitId":"benedictkhoomw"},"content":"  `undo` Undoes the `iedit 1 r/20-109 s/Closed` command.","lastModifiedDate":"2021-03-28"},{"lineNumber":496,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":497,"author":{"gitId":"benedictkhoomw"},"content":"* `history 5` \u003cbr\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":498,"author":{"gitId":"benedictkhoomw"},"content":"  `undo` Fails because `history 5` did not modify SunRez\u0027s data.","lastModifiedDate":"2021-03-28"},{"lineNumber":499,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":500,"author":{"gitId":"benedictkhoomw"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":501,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":502,"author":{"gitId":"benedictkhoomw"},"content":"**:information_source: Shortcuts to undo:**\u003cbr\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":503,"author":{"gitId":"benedictkhoomw"},"content":"1. **GUI:** Select `Edit` -\u003e `Undo` in the menu at the top of SunRez.","lastModifiedDate":"2021-03-28"},{"lineNumber":504,"author":{"gitId":"benedictkhoomw"},"content":"2. **Keyboard:** Press `CTRL+Z` (Windows, Linux) or `CMD+Z` (Mac).","lastModifiedDate":"2021-03-28"},{"lineNumber":505,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":506,"author":{"gitId":"benedictkhoomw"},"content":"These behave as if you entered `undo` in the command box and hit `ENTER`; an `undo` command will be registered in","lastModifiedDate":"2021-03-28"},{"lineNumber":507,"author":{"gitId":"benedictkhoomw"},"content":"command history.","lastModifiedDate":"2021-03-28"},{"lineNumber":508,"author":{"gitId":"benedictkhoomw"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":509,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":510,"author":{"gitId":"benedictkhoomw"},"content":"#### Redo previously undone command: `redo`","lastModifiedDate":"2021-03-31"},{"lineNumber":511,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":512,"author":{"gitId":"benedictkhoomw"},"content":"Reverses the previous undo operation.","lastModifiedDate":"2021-03-28"},{"lineNumber":513,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":514,"author":{"gitId":"benedictkhoomw"},"content":"Format: `redo`","lastModifiedDate":"2021-03-28"},{"lineNumber":515,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":516,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-03-28"},{"lineNumber":517,"author":{"gitId":"benedictkhoomw"},"content":"* `rdel 1` \u003cbr\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":518,"author":{"gitId":"benedictkhoomw"},"content":"  `undo` Undoes the `rdel 1` command.","lastModifiedDate":"2021-03-28"},{"lineNumber":519,"author":{"gitId":"benedictkhoomw"},"content":"  `redo` Redoes the `rdel 1` command.","lastModifiedDate":"2021-03-28"},{"lineNumber":520,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":521,"author":{"gitId":"benedictkhoomw"},"content":"* `rdel 1` \u003cbr\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":522,"author":{"gitId":"benedictkhoomw"},"content":"  `redo` Fails because there are no previous `undo` commands.","lastModifiedDate":"2021-03-28"},{"lineNumber":523,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":524,"author":{"gitId":"benedictkhoomw"},"content":"* `iedit 1 r/20-109 s/Closed` \u003cbr\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":525,"author":{"gitId":"benedictkhoomw"},"content":"  `clear` \u003cbr\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":526,"author":{"gitId":"benedictkhoomw"},"content":"  `undo` Undoes the `clear` command. \u003cbr\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":527,"author":{"gitId":"benedictkhoomw"},"content":"  `undo` Undoes the `iedit 1 r/20-109 s/Closed` command. \u003cbr\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":528,"author":{"gitId":"benedictkhoomw"},"content":"  `redo` Redoes the `iedit 1 r/20-109 s/Closed` command. \u003cbr\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":529,"author":{"gitId":"benedictkhoomw"},"content":"  `redo` Redoes the `clear` command.","lastModifiedDate":"2021-03-28"},{"lineNumber":530,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":531,"author":{"gitId":"benedictkhoomw"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":532,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":533,"author":{"gitId":"benedictkhoomw"},"content":"**:information_source: Shortcuts to redo:**\u003cbr\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":534,"author":{"gitId":"benedictkhoomw"},"content":"1. **GUI:** Select `Edit` -\u003e `Redo` in the menu at the top of SunRez.","lastModifiedDate":"2021-03-28"},{"lineNumber":535,"author":{"gitId":"benedictkhoomw"},"content":"2. **Keyboard:** Press `CTRL+SHIFT+Z` (Windows, Linux) or `CMD+SHIFT+Z` (Mac).","lastModifiedDate":"2021-03-28"},{"lineNumber":536,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":537,"author":{"gitId":"benedictkhoomw"},"content":"These behave as if you entered `redo` in the command box and hit `ENTER`; a `redo` command will be registered in","lastModifiedDate":"2021-03-28"},{"lineNumber":538,"author":{"gitId":"benedictkhoomw"},"content":"command history.","lastModifiedDate":"2021-03-28"},{"lineNumber":539,"author":{"gitId":"benedictkhoomw"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":540,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":541,"author":{"gitId":"benedictkhoomw"},"content":"#### Add an alias : `alias`","lastModifiedDate":"2021-03-31"},{"lineNumber":542,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":543,"author":{"gitId":"cnlinh"},"content":"Adds a user-defined alias, which represents a shortcut to a longer command.","lastModifiedDate":"2021-03-16"},{"lineNumber":544,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":545,"author":{"gitId":"cnlinh"},"content":"Format: `alias a/ALIAS_NAME cmd/COMMAND`","lastModifiedDate":"2021-03-16"},{"lineNumber":546,"author":{"gitId":"cnlinh"},"content":"* Parameters must be in this exact order.","lastModifiedDate":"2021-03-31"},{"lineNumber":547,"author":{"gitId":"cnlinh"},"content":"* Any parameters after `cmd/` will be parsed as part of the command.","lastModifiedDate":"2021-03-31"},{"lineNumber":548,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":549,"author":{"gitId":"cnlinh"},"content":"Parameters:","lastModifiedDate":"2021-04-07"},{"lineNumber":550,"author":{"gitId":"cnlinh"},"content":"* [`ALIAS_NAME`](#alias_name) The name of the alias to be added.","lastModifiedDate":"2021-04-07"},{"lineNumber":551,"author":{"gitId":"cnlinh"},"content":"* [`COMMAND`](#command) The command that the alias is short for.","lastModifiedDate":"2021-04-07"},{"lineNumber":552,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":553,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-03-16"},{"lineNumber":554,"author":{"gitId":"cnlinh"},"content":"* `alias a/ol cmd/olist` Adds the `ol` alias which is a shortcut for `olist` command.","lastModifiedDate":"2021-03-31"},{"lineNumber":555,"author":{"gitId":"cnlinh"},"content":"* `alias a/fNemo cmd/rfind Nemo` Adds the `fNemo` alias which is a shortcut for `rfind Nemo` command.","lastModifiedDate":"2021-03-31"},{"lineNumber":556,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":557,"author":{"gitId":"benedictkhoomw"},"content":"#### Delete an alias : `unalias`","lastModifiedDate":"2021-03-31"},{"lineNumber":558,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":559,"author":{"gitId":"cnlinh"},"content":"Deletes a previously defined alias.","lastModifiedDate":"2021-03-31"},{"lineNumber":560,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":561,"author":{"gitId":"cnlinh"},"content":"Format: `unalias a/ALIAS_NAME`","lastModifiedDate":"2021-03-31"},{"lineNumber":562,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":563,"author":{"gitId":"cnlinh"},"content":"Parameters:","lastModifiedDate":"2021-04-07"},{"lineNumber":564,"author":{"gitId":"cnlinh"},"content":"* [`ALIAS_NAME`](#alias_name) The name of the alias to be deleted.","lastModifiedDate":"2021-04-07"},{"lineNumber":565,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":566,"author":{"gitId":"cnlinh"},"content":"Example:","lastModifiedDate":"2021-03-31"},{"lineNumber":567,"author":{"gitId":"cnlinh"},"content":"* `unalias a/findBob` Deletes the `findBob` alias, provided that the alias was previously added.","lastModifiedDate":"2021-03-31"},{"lineNumber":568,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":569,"author":{"gitId":"benedictkhoomw"},"content":"#### List all aliases : `aliases`","lastModifiedDate":"2021-03-31"},{"lineNumber":570,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":571,"author":{"gitId":"cnlinh"},"content":"Shows a list of current aliases in the system sorted by names in alphabetical order.","lastModifiedDate":"2021-04-06"},{"lineNumber":572,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":573,"author":{"gitId":"cnlinh"},"content":"Format: `aliases`","lastModifiedDate":"2021-03-31"},{"lineNumber":574,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":575,"author":{"gitId":"benedictkhoomw"},"content":"#### View command history : `history`","lastModifiedDate":"2021-03-31"},{"lineNumber":576,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":577,"author":{"gitId":"benedictkhoomw"},"content":"Displays the user\u0027s valid command history, sorted from most to least recent.","lastModifiedDate":"2021-03-31"},{"lineNumber":578,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":579,"author":{"gitId":"benedictkhoomw"},"content":"Format: `history [COUNT]`","lastModifiedDate":"2021-03-31"},{"lineNumber":580,"author":{"gitId":"benedictkhoomw"},"content":"* Displays the `COUNT` most recent command entries, if `COUNT` is specified. Otherwise, displays all command entries.","lastModifiedDate":"2021-04-05"},{"lineNumber":581,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":582,"author":{"gitId":"benedictkhoomw"},"content":"Parameters:","lastModifiedDate":"2021-04-05"},{"lineNumber":583,"author":{"gitId":"benedictkhoomw"},"content":"* [`COUNT`](#count) The number of most recent command entries to display.","lastModifiedDate":"2021-04-05"},{"lineNumber":584,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":585,"author":{"gitId":"benedictkhoomw"},"content":"Examples:","lastModifiedDate":"2021-03-31"},{"lineNumber":586,"author":{"gitId":"benedictkhoomw"},"content":"* `history` Displays all command entries.","lastModifiedDate":"2021-03-31"},{"lineNumber":587,"author":{"gitId":"benedictkhoomw"},"content":"* `history 5` Displays the 5 most recent command entries.","lastModifiedDate":"2021-03-31"},{"lineNumber":588,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":589,"author":{"gitId":"benedictkhoomw"},"content":"#### Access command history","lastModifiedDate":"2021-03-31"},{"lineNumber":590,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":591,"author":{"gitId":"benedictkhoomw"},"content":"Previous successful commands can be accessed via the UP and DOWN arrow keys on the keyboard. ","lastModifiedDate":"2021-03-31"},{"lineNumber":592,"author":{"gitId":"benedictkhoomw"},"content":"UP selects the previous command. DOWN selects the next command.","lastModifiedDate":"2021-03-31"},{"lineNumber":593,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":594,"author":{"gitId":"benedictkhoomw"},"content":"Example usage:","lastModifiedDate":"2021-03-16"},{"lineNumber":595,"author":{"gitId":"benedictkhoomw"},"content":"1. Enter some commands as per normal.","lastModifiedDate":"2021-03-16"},{"lineNumber":596,"author":{"gitId":"benedictkhoomw"},"content":"1. Make sure the command box is in focus (e.g. click on it).","lastModifiedDate":"2021-03-16"},{"lineNumber":597,"author":{"gitId":"benedictkhoomw"},"content":"1. Press the UP arrow key on your keyboard.","lastModifiedDate":"2021-03-16"},{"lineNumber":598,"author":{"gitId":"benedictkhoomw"},"content":"1. SunRez should display the most recent successful command in the command box.","lastModifiedDate":"2021-03-16"},{"lineNumber":599,"author":{"gitId":"benedictkhoomw"},"content":"    * Hit ENTER to run that command again.","lastModifiedDate":"2021-03-16"},{"lineNumber":600,"author":{"gitId":"benedictkhoomw"},"content":"    * Alternatively, select other commands via the UP and DOWN arrow keys.","lastModifiedDate":"2021-03-16"},{"lineNumber":601,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":602,"author":{"gitId":"benedictkhoomw"},"content":"#### Exit the program : `exit`","lastModifiedDate":"2021-03-31"},{"lineNumber":603,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":604,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2021-03-31"},{"lineNumber":605,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":606,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2021-03-31"},{"lineNumber":607,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":608,"author":{"gitId":"benedictkhoomw"},"content":"### SunRez Data Files","lastModifiedDate":"2021-03-31"},{"lineNumber":609,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":610,"author":{"gitId":"benedictkhoomw"},"content":"SunRez main application data and command history are saved in the hard disk automatically after any command","lastModifiedDate":"2021-03-23"},{"lineNumber":611,"author":{"gitId":"benedictkhoomw"},"content":"that changes the data. There is no need to save manually.","lastModifiedDate":"2021-03-23"},{"lineNumber":612,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":613,"author":{"gitId":"benedictkhoomw"},"content":"#### Undo/redo history","lastModifiedDate":"2021-03-31"},{"lineNumber":614,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":615,"author":{"gitId":"benedictkhoomw"},"content":"Undo/redo history is not saved to the hard disk, so it will be lost when SunRez is exited.","lastModifiedDate":"2021-03-31"},{"lineNumber":616,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":617,"author":{"gitId":"benedictkhoomw"},"content":"#### Edit the data files","lastModifiedDate":"2021-03-31"},{"lineNumber":618,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":619,"author":{"gitId":"benedictkhoomw"},"content":"* SunRez main application data is saved as a JSON file `[JAR_file_location]/data/sunrez.json`.","lastModifiedDate":"2021-03-24"},{"lineNumber":620,"author":{"gitId":"benedictkhoomw"},"content":"* SunRez command history is saved as a plain-text file `[JAR_file_location]/data/commandhistory.txt`.","lastModifiedDate":"2021-03-24"},{"lineNumber":621,"author":{"gitId":"benedictkhoomw"},"content":"    * Each command history entry is a single line in the file.","lastModifiedDate":"2021-03-23"},{"lineNumber":622,"author":{"gitId":"benedictkhoomw"},"content":"    * The entire command history can be cleared by simply deleting the contents of the command history file.","lastModifiedDate":"2021-03-23"},{"lineNumber":623,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":624,"author":{"gitId":"benedictkhoomw"},"content":"Advanced users are welcome to edit these files directly.","lastModifiedDate":"2021-03-23"},{"lineNumber":625,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":626,"author":{"gitId":"benedictkhoomw"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":627,"author":{"gitId":"benedictkhoomw"},"content":"**Caution**: \u003cbr\u003e","lastModifiedDate":"2021-02-26"},{"lineNumber":628,"author":{"gitId":"benedictkhoomw"},"content":"If your changes to the data file makes its format invalid, SunRez will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2021-02-26"},{"lineNumber":629,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":630,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":631,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":632,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":633,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":634,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":635,"author":{"gitId":"benedictkhoomw"},"content":"### How do I transfer my data to another computer?","lastModifiedDate":"2021-03-31"},{"lineNumber":636,"author":{"gitId":"benedictkhoomw"},"content":"* On the computer with your data, do the following:","lastModifiedDate":"2021-03-31"},{"lineNumber":637,"author":{"gitId":"benedictkhoomw"},"content":"    1. Navigate to where SunRez is installed: the location of `sunrez.jar`.","lastModifiedDate":"2021-03-31"},{"lineNumber":638,"author":{"gitId":"benedictkhoomw"},"content":"    1. Copy the following files to your other computer: `preferences.json`, `data/commandhistory.txt`, ","lastModifiedDate":"2021-03-31"},{"lineNumber":639,"author":{"gitId":"benedictkhoomw"},"content":"       `data/sunrez.json`","lastModifiedDate":"2021-03-31"},{"lineNumber":640,"author":{"gitId":"benedictkhoomw"},"content":"* Then, on your other computer, do the following:","lastModifiedDate":"2021-03-31"},{"lineNumber":641,"author":{"gitId":"benedictkhoomw"},"content":"    1. Download SunRez (`sunrez.jar`) and place it in a suitable folder.","lastModifiedDate":"2021-03-31"},{"lineNumber":642,"author":{"gitId":"benedictkhoomw"},"content":"    1. Paste the files from earlier in this folder. If prompted to replace existing files, do so.","lastModifiedDate":"2021-03-31"},{"lineNumber":643,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":644,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":645,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":646,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":647,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":648,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":649,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":650,"author":{"gitId":"colintkn"},"content":"**Show help** | `help`","lastModifiedDate":"2021-02-20"},{"lineNumber":651,"author":{"gitId":"benedictkhoomw"},"content":"**Add a resident** | `radd n/NAME p/PHONE_NUMBER e/EMAIL y/YEAR` \u003cbr\u003e e.g. `radd n/Joseph Tan p/84666774 e/e0103994@u.nus.edu y/2`","lastModifiedDate":"2021-04-05"},{"lineNumber":652,"author":{"gitId":"colintkn"},"content":"**List all residents** | `rlist`","lastModifiedDate":"2021-02-20"},{"lineNumber":653,"author":{"gitId":"colintkn"},"content":"**List all unallocated residents** | `rulist`","lastModifiedDate":"2021-03-29"},{"lineNumber":654,"author":{"gitId":"colintkn"},"content":"**Find residents** | `rfind KEYWORD [MORE_KEYWORDS]` \u003cbr\u003e e.g. `rfind bob bobby`","lastModifiedDate":"2021-02-20"},{"lineNumber":655,"author":{"gitId":"colintkn"},"content":"**Edit a resident record** | `redit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [y/YEAR]` \u003cbr\u003e e.g. `redit 1 p/91234567 e/e0123456@u.nus.edu`","lastModifiedDate":"2021-04-05"},{"lineNumber":656,"author":{"gitId":"colintkn"},"content":"**Delete a resident** |  `rdel INDEX` \u003cbr\u003e e.g. `rdel 1`","lastModifiedDate":"2021-02-20"},{"lineNumber":657,"author":{"gitId":"DrWala"},"content":"**Add a room** |  `oadd r/ROOM_NUMBER t/ROOM_TYPE [g/TAG]` \u003cbr\u003e e.g. `oadd r/17-101 t/corridor_ac g/SHN`","lastModifiedDate":"2021-04-05"},{"lineNumber":658,"author":{"gitId":"stein414"},"content":"**List all rooms** |  `olist`","lastModifiedDate":"2021-02-25"},{"lineNumber":659,"author":{"gitId":"stein414"},"content":"**Find rooms** |  `ofind KEYWORD [MORE_KEYWORDS]` \u003cbr\u003e e.g. `ofind 10- 15-`","lastModifiedDate":"2021-02-25"},{"lineNumber":660,"author":{"gitId":"benedictkhoomw"},"content":"**Edit a room record** |  `oedit INDEX [r/ROOM_NUMBER] [t/ROOM_TYPE] [g/TAG]` \u003cbr\u003e e.g. `oedit 1 g/SHN`","lastModifiedDate":"2021-04-05"},{"lineNumber":661,"author":{"gitId":"stein414"},"content":"**Delete a room** | `odel INDEX` \u003cbr\u003e e.g. `odel 1`","lastModifiedDate":"2021-02-25"},{"lineNumber":662,"author":{"gitId":"colintkn"},"content":"**Allocate a Resident to Room** | `alloc ri/RESIDENT_INDEX oi/ROOM_INDEX` \u003cbr\u003e e.g. `alloc ri/1 oi/2`","lastModifiedDate":"2021-04-05"},{"lineNumber":663,"author":{"gitId":"colintkn"},"content":"**Deallocate a Resident from Room** | `dealloc INDEX` \u003cbr\u003e e.g. `dealloc 1`","lastModifiedDate":"2021-04-05"},{"lineNumber":664,"author":{"gitId":"benedictkhoomw"},"content":"**Add an open issue** | `iadd r/ROOM_NUMBER d/DESCRIPTION [t/TIMESTAMP] [s/STATUS] [c/CATEGORY] [g/TAG]` \u003cbr\u003e e.g. `iadd r/10-100 d/Broken light c/Furniture g/HIGH`","lastModifiedDate":"2021-04-05"},{"lineNumber":665,"author":{"gitId":"stein414"},"content":"**List all issues** | `ilist`","lastModifiedDate":"2021-02-25"},{"lineNumber":666,"author":{"gitId":"stein414"},"content":"**Find issues** | `ifind KEYWORD [MORE_KEYWORDS]` \u003cbr\u003e e.g. `ifind wardrobe table`","lastModifiedDate":"2021-02-25"},{"lineNumber":667,"author":{"gitId":"benedictkhoomw"},"content":"**Edit an issue record** | `iedit INDEX [r/ROOM_NUMBER] [d/DESCRIPTION] [t/TIMESTAMP] [s/STATUS] [c/CATEGORY] [g/TAG]` \u003cbr\u003e e.g. `iedit 1 r/20-109 s/Closed`","lastModifiedDate":"2021-04-05"},{"lineNumber":668,"author":{"gitId":"stein414"},"content":"**Close an issue** | `iclo INDEX` \u003cbr\u003e e.g. `iclo 1`","lastModifiedDate":"2021-03-31"},{"lineNumber":669,"author":{"gitId":"stein414"},"content":"**Delete an issue** | `idel INDEX` \u003cbr\u003e e.g. `idel 1`","lastModifiedDate":"2021-02-25"},{"lineNumber":670,"author":{"gitId":"benedictkhoomw"},"content":"**View command history** | `history [COUNT]` \u003cbr\u003e e.g. `history 5`","lastModifiedDate":"2021-03-09"},{"lineNumber":671,"author":{"gitId":"benedictkhoomw"},"content":"**Undo previous command** | `undo` \u003cbr\u003e `CTRL+Z`/`CMD+Z` (keyboard shortcuts)","lastModifiedDate":"2021-03-28"},{"lineNumber":672,"author":{"gitId":"benedictkhoomw"},"content":"**Redo previously undone command** | `redo` \u003cbr\u003e `CTRL+SHIFT+Z`/`CMD+SHIFT+Z` (keyboard shortcuts)","lastModifiedDate":"2021-03-28"},{"lineNumber":673,"author":{"gitId":"cnlinh"},"content":"**Add an alias** | `alias a/ALIAS_NAME cmd/COMMAND` \u003cbr\u003e e.g. `alias a/il cmd/ilist`","lastModifiedDate":"2021-03-31"},{"lineNumber":674,"author":{"gitId":"cnlinh"},"content":"**Delete an alias** | `unalias a/ALIAS_NAME` \u003cbr\u003e e.g. `unalias a/findBob`","lastModifiedDate":"2021-03-31"},{"lineNumber":675,"author":{"gitId":"cnlinh"},"content":"**List all aliases** | `aliases`","lastModifiedDate":"2021-03-31"},{"lineNumber":676,"author":{"gitId":"benedictkhoomw"},"content":"**Delete all data** | `clear`","lastModifiedDate":"2021-03-31"},{"lineNumber":677,"author":{"gitId":"stein414"},"content":"**Exit the app** | `exit`","lastModifiedDate":"2021-02-25"}],"authorContributionMap":{"benedictkhoomw":248,"cnlinh":47,"stein414":56,"colintkn":75,"-":131,"DrWala":120}},{"path":"docs/diagrams/alias/AliasCreationSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"@startuml","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"!include ../style.puml","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"Actor User as user USER_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"Participant \":CommandBox\" as ui UI_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"Participant \":Logic\" as logic LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"Participant \":AddressBookParser\" as abParser LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"Participant \":AliasCommandParser\" as aParser LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"Participant \":AliasCommand\" as aCmd LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"Participant \":Model\" as model MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"Participant \":CommandResult\" as cmdResult LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"user -[USER_COLOR]\u003e ui: key in \"alias a/h cmd/help\"","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"activate ui UI_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"ui -[LOGIC_COLOR]\u003e logic: executeCommand(cmdText)","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"logic -[LOGIC_COLOR]\u003e abParser: parseCommand(cmdText)","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"activate abParser LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"abParser -[LOGIC_COLOR]\u003e aParser: parse(arguments)","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"activate aParser LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"note right of aParser","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"An Alias object is","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"created. Process is","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"omitted for brevity.","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"end note","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"aParser -[LOGIC_COLOR]\u003e aCmd**: AliasCommand(alias)","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"activate aCmd LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"return command","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"return command","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"return command","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"logic -[LOGIC_COLOR]\u003e aCmd: execute(model)","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"activate aCmd LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"aCmd -[MODEL_COLOR]\u003e model: addAlias(alias)","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"note right of model","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"Storage process","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"omitted for brevity","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"end note","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"return","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"aCmd -[LOGIC_COLOR]\u003e cmdResult**","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"activate cmdResult LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"return commandResult","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"return commandResult","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"return commandResult","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"return display commandResult","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"@enduml","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"cnlinh":55}},{"path":"docs/diagrams/alias/AliasExecutionActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"@startuml","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"\u0027https://plantuml.com/activity-diagram-beta","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"!include ../style.puml","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"start","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":":User enters a command;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"repeat :Parse command string;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"if () then ([begins with existing command word])","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":":Parse as existing command;","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"if () then ([all parameters are valid])","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":":Return command;","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"stop","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"else ([else])","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":":Show error to user;","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"stop","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"endif","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"else ([else])","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":":Parse as alias;","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"if () then ([begins with alias])","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":":Replace alias with mapped command;","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"else ([else])","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":":Show error to user;","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"stop","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"@enduml","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"cnlinh":25}},{"path":"docs/diagrams/commandhistory/CmdHistAccessHistorySequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"@startuml","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"!include ../style.puml","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"Actor User as user USER_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"Participant \":CommandBox\" as ui UI_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"Participant \":CommandHistorySelector\" as selector LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"Participant \":ReadOnlyCommandHistory\" as cmdHist MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"user -[USER_COLOR]\u003e ui : press UP arrow","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"activate ui UI_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"ui -[UI_COLOR]\u003e selector : selectPrevious()","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"activate selector LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"selector -[LOGIC_COLOR]\u003e selector : update state","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"activate selector LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"selector --[LOGIC_COLOR]\u003e selector","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"deactivate selector","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"selector -[LOGIC_COLOR]\u003e cmdHist : get(previous)","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"activate cmdHist MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"cmdHist --[MODEL_COLOR]\u003e selector : command entry","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"deactivate cmdHist","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"selector --[LOGIC_COLOR]\u003e ui : command entry","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"deactivate selector","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"ui --[UI_COLOR]\u003e user : display\\n command entry","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"deactivate ui UI_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"@enduml","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"benedictkhoomw":33}},{"path":"docs/diagrams/commandhistory/CmdHistModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"@startuml","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"!include ../style.puml","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"package UI \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"class CommandBox UI_COLOR_T3","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"package Model \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"class CommandHistory MODEL_COLOR_T3","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"interface ReadOnlyCommandHistory \u003c\u003cinterface\u003e\u003e MODEL_COLOR_T3","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"class ModelManager MODEL_COLOR_T3","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"class CommandHistoryEntry MODEL_COLOR_T3","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"package Logic \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"class ViewHistoryCommand LOGIC_COLOR_T3","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"interface CommandHistorySelector \u003c\u003cinterface\u003e\u003e LOGIC_COLOR_T3","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"class SuppliedCommandHistorySelector LOGIC_COLOR_T3","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"class ViewHistoryCommandParser LOGIC_COLOR_T3","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"package Storage \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"interface CommandHistoryStorage \u003c\u003cinterface\u003e\u003e STORAGE_COLOR_T3","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"class PlainTextCommandHistoryStorage STORAGE_COLOR_T3","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"ReadOnlyCommandHistory \u003c|.. CommandHistory","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"CommandBox --\u003e CommandHistorySelector : delegates\\nselection logic to \u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"CommandHistory *-\u003e \"*\" CommandHistoryEntry : composed of \u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"ModelManager -\u003e \"1\" CommandHistory : has \u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"ViewHistoryCommand ..\u003e ReadOnlyCommandHistory : formats \u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"ViewHistoryCommandParser ..\u003e ViewHistoryCommand : constructs \u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"CommandHistoryStorage ..\u003e ReadOnlyCommandHistory : serializes \u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"PlainTextCommandHistoryStorage ..|\u003e CommandHistoryStorage","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"CommandHistorySelector \u003c|.. SuppliedCommandHistorySelector","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"SuppliedCommandHistorySelector --\u003e ReadOnlyCommandHistory : selects from \u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"@enduml","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"benedictkhoomw":38}},{"path":"docs/diagrams/commandhistory/CmdHistUpdateSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"@startuml","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"!include ../style.puml","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"Participant \":Logic\" as logic LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"Participant \":Model\" as model MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"Participant \":CommandHistory\" as cmdHist MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"-[UI_COLOR]\u003e logic : execute(\"help\")","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"logic -[LOGIC_COLOR]\u003e logic : parseAndExecute(\"help\")","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"logic -[LOGIC_COLOR]-\u003e logic","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"deactivate logic","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"logic -[LOGIC_COLOR]\u003e model : appendCommandHistoryEntry(\"help\")","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"note right: A command is only recorded\\n in history if it parses and\\n executes successfully","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"model -[MODEL_COLOR]\u003e cmdHist : appendEntry(\"help\")","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"activate cmdHist MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"model \u003c-[MODEL_COLOR]- cmdHist","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"deactivate cmdHist","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"model -[MODEL_COLOR]-\u003e logic","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"deactivate model","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"\u003c-[LOGIC_COLOR]- logic","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"deactivate logic","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"@enduml","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"benedictkhoomw":33}},{"path":"docs/diagrams/commandhistory/CmdHistViewHistorySequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"@startuml","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"!include ../style.puml","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"skinParam DefaultFontSize 18","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"skinParam ParticipantFontSize 20","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"Participant \":Logic\" as logic LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"Participant \":ViewHistoryCommand\" as cmd LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"Participant \"model:Model\" as model MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"Participant \"hist:ReadOnlyCommandHistory\" as cmdHist MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"-[UI_COLOR]\u003e logic : execute(\"history 5\")","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"note left: Parsing details\\n omitted","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"logic -[LOGIC_COLOR]\u003e cmd ** : ViewHistoryCommand(5)","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"activate cmd LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"cmd --[LOGIC_COLOR]\u003e logic","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"deactivate cmd","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"logic -[LOGIC_COLOR]\u003e cmd : execute(model)","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"activate cmd LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"cmd -[LOGIC_COLOR]\u003e model : getCommandHistory()","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"model -[MODEL_COLOR]-\u003e cmd : hist","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"deactivate model MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"loop until each entry to be listed has been read","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"    cmd -[LOGIC_COLOR]\u003e cmdHist : get(i)","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"    activate cmdHist MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    cmd \u003c[MODEL_COLOR]-- cmdHist : ith entry","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    deactivate cmdHist","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"end","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"cmd --[LOGIC_COLOR]\u003e logic : cmdHistoryMsg","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"deactivate cmd","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"\u003c-[LOGIC_COLOR]- logic : cmdHistoryMsg","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"@enduml","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"benedictkhoomw":44}},{"path":"docs/diagrams/commandhistory/CommandHistoryStorageActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"@startuml","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"!include ../style.puml","lastModifiedDate":"2021-04-07"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"start","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":":User enters command;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":":Parse command text;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"if () then ([else])","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":":Show error","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"message to user;","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"stop","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"else ([parsing successful])","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":":Execute command;","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"if () then ([else])","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":":Show error","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"message to user;","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"stop","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"else ([execution successful])","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":":Append command text","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"to command history;","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":":Serialize","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"command history;","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":":Save command","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"history to file;","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":":Show success","lastModifiedDate":"2021-04-07"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"message to user;","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"stop","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"endif","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"endif","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"@enduml","lastModifiedDate":"2021-04-07"}],"authorContributionMap":{"benedictkhoomw":28}},{"path":"docs/diagrams/issue/AddIssueCommandActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"@startuml","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"!include ../style.puml","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"start","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":":User enters command adding a issue;","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":":Parse command text;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"if () then ([all parameters are valid])","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":":Construct Issue","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"with given parameters;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":":Add issue to model;","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"note left","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"Adding to the model","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"involves updating","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"storage too. This","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"process has been","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"omitted for brevity.","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"end note","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":":Show success message to user;","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"else ([else])","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":":Show invalid usage","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"error to user;","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"stop","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"endif","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"stop","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"@enduml","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"stein414":25}},{"path":"docs/diagrams/issue/AddIssueCommandSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"@startuml","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"!include ../style.puml","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"Actor User as user USER_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"Participant \":CommandBox\" as ui UI_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"Participant \":Logic\" as logic LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"Participant \":AddressBookParser\" as abParser LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"Participant \":AddIssue\\nCommandParser\" as aicParser LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"Participant \":AddIssue\\nCommand\" as addIssueCmd LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"Participant \":Model\" as model MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"Participant \":CommandResult\" as cmdResult LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"user -[USER_COLOR]\u003e ui: key in \"iadd n/10-100 \\n d/flickering light\"","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"activate ui UI_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"ui -[LOGIC_COLOR]\u003e logic: executeCommand(cmdText)","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"logic -[LOGIC_COLOR]\u003e abParser: parseCommand(cmdText)","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"activate abParser LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"note over abParser","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"The parsing process","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"breaks cmdText down","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"into an argumentMap","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"named args. This","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"process is omitted","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"here for brevity.","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"end note","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"abParser -[LOGIC_COLOR]\u003e aicParser **:","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"activate aicParser LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"return","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"abParser -[LOGIC_COLOR]\u003e aicParser: parse(args)","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"activate aicParser LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"aicParser -[LOGIC_COLOR]\u003e addIssueCmd**:","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"activate addIssueCmd LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"return","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"return addIssueCmd","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"destroy aicParser","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"return addIssueCmd","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"logic -[LOGIC_COLOR]\u003e addIssueCmd: execute(model)","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"activate addIssueCmd LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"addIssueCmd -[MODEL_COLOR]\u003e model: addIssue(Issue)","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"note right of model","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"Storage mechanism","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"omitted for brevity","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"end note","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"return","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"addIssueCmd -[LOGIC_COLOR]\u003e cmdResult**:","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"activate cmdResult LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"return","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"return commandResult","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"return commandResult","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"ui --[UI_COLOR]\u003e user: display commandResult","lastModifiedDate":"2021-03-24"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"deactivate","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"@enduml","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"stein414":66}},{"path":"docs/diagrams/issue/IssueClass.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"@startuml","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"!include ../style.puml","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"package Model {","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"Class AddressBook","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"package Issue {","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"Class UniqueIssueList","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"Class Issue","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"Class RoomNumber","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"Class Description","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"Class Timestamp","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"Class Status","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"Class Category","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"Enum \"\u003c\u003cenumeration\u003e\u003e\\nIssueStatus\" as IssueStatus","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"AddressBook *--\u003e UniqueIssueList","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"UniqueIssueList \"1\" *--\u003e \"*\" Issue","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"Issue *--\u003e \"1\" RoomNumber","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"Issue *--\u003e \"1\" Description","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"Issue *--\u003e \"1\" Timestamp","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"Issue *--\u003e \"1\" Status","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"Issue *--\u003e \"1\" Category","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"Status *--\u003e \"1\" IssueStatus","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"@enduml","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"stein414":30}},{"path":"docs/diagrams/resident/AddResidentCommandActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"@startuml","lastModifiedDate":"2021-04-06"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"!include ../style.puml","lastModifiedDate":"2021-04-06"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"start","lastModifiedDate":"2021-04-06"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":":User enters command adding a resident;","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":":Parse command text;","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"if () then ([all parameters are valid])","lastModifiedDate":"2021-04-06"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":":Construct Resident","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"with given parameters;","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"if () then ([No duplicate resident in model])","lastModifiedDate":"2021-04-06"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":":Add resident to model;","lastModifiedDate":"2021-04-06"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"note left","lastModifiedDate":"2021-04-06"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"Adding to the model","lastModifiedDate":"2021-04-06"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"involves updating","lastModifiedDate":"2021-04-06"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"storage too. This","lastModifiedDate":"2021-04-06"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"process has been","lastModifiedDate":"2021-04-06"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"omitted for brevity.","lastModifiedDate":"2021-04-06"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"end note","lastModifiedDate":"2021-04-06"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":":Show success message to user;","lastModifiedDate":"2021-04-06"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"else ([else])","lastModifiedDate":"2021-04-06"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":":Show duplicate resident","lastModifiedDate":"2021-04-06"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"error to user;","lastModifiedDate":"2021-04-06"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"stop","lastModifiedDate":"2021-04-06"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"endif","lastModifiedDate":"2021-04-06"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"else ([else])","lastModifiedDate":"2021-04-06"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":":Show invalid usage","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"error to user;","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"stop","lastModifiedDate":"2021-04-06"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"endif","lastModifiedDate":"2021-04-06"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2021-04-06"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2021-04-06"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"\u0027if () then ([command commits AddressBook])","lastModifiedDate":"2021-04-06"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"\u0027    :Purge redundant states;","lastModifiedDate":"2021-04-06"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"\u0027    :Save AddressBook to","lastModifiedDate":"2021-04-06"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"\u0027    addressBookStateList;","lastModifiedDate":"2021-04-06"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"\u0027else ([else])","lastModifiedDate":"2021-04-06"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"\u0027endif","lastModifiedDate":"2021-04-06"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"stop","lastModifiedDate":"2021-04-06"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"@enduml","lastModifiedDate":"2021-04-06"}],"authorContributionMap":{"colintkn":40}},{"path":"docs/diagrams/resident/AddResidentCommandSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"@startuml","lastModifiedDate":"2021-04-06"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"!include ../style.puml","lastModifiedDate":"2021-04-06"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"Actor User as user USER_COLOR","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"Participant \":CommandBox\" as ui UI_COLOR","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"Participant \":Logic\" as logic LOGIC_COLOR","lastModifiedDate":"2021-04-06"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"Participant \":AddressBookParser\" as abParser LOGIC_COLOR","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"Participant \":AddResident\\nCommandParser\" as arcParser LOGIC_COLOR","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"Participant \":AddResident\\nCommand\" as addResidentCmd LOGIC_COLOR","lastModifiedDate":"2021-04-06"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"Participant \":Model\" as model MODEL_COLOR","lastModifiedDate":"2021-04-06"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"Participant \":CommandResult\" as cmdResult LOGIC_COLOR","lastModifiedDate":"2021-04-06"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"user -[USER_COLOR]\u003e ui: key in \"radd n/John Doe \\n p/91234567 \\n e/johndoe@email.com y/3\"","lastModifiedDate":"2021-04-06"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"activate ui UI_COLOR","lastModifiedDate":"2021-04-06"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"ui -[LOGIC_COLOR]\u003e logic: executeCommand(cmdText)","lastModifiedDate":"2021-04-06"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2021-04-06"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"logic -[LOGIC_COLOR]\u003e abParser: parseCommand(cmdText)","lastModifiedDate":"2021-04-06"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"activate abParser LOGIC_COLOR","lastModifiedDate":"2021-04-06"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"note over abParser","lastModifiedDate":"2021-04-06"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"The parsing process","lastModifiedDate":"2021-04-06"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"breaks cmdText down","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"into an argumentMap","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"named args. This","lastModifiedDate":"2021-04-06"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"process is omitted","lastModifiedDate":"2021-04-06"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"here for brevity.","lastModifiedDate":"2021-04-06"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"end note","lastModifiedDate":"2021-04-06"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"abParser -[LOGIC_COLOR]\u003e arcParser **:","lastModifiedDate":"2021-04-06"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"activate arcParser LOGIC_COLOR","lastModifiedDate":"2021-04-06"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"return","lastModifiedDate":"2021-04-06"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"abParser -[LOGIC_COLOR]\u003e arcParser: parse(args)","lastModifiedDate":"2021-04-06"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"activate arcParser LOGIC_COLOR","lastModifiedDate":"2021-04-06"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"arcParser -[LOGIC_COLOR]\u003e addResidentCmd**:","lastModifiedDate":"2021-04-06"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"activate addResidentCmd LOGIC_COLOR","lastModifiedDate":"2021-04-06"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"return","lastModifiedDate":"2021-04-06"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"return addResidentCmd","lastModifiedDate":"2021-04-06"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"destroy arcParser","lastModifiedDate":"2021-04-06"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"return addResidentCmd","lastModifiedDate":"2021-04-06"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"logic -[LOGIC_COLOR]\u003e addResidentCmd: execute(model)","lastModifiedDate":"2021-04-06"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"activate addResidentCmd LOGIC_COLOR","lastModifiedDate":"2021-04-06"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"addResidentCmd -[MODEL_COLOR]\u003e model: addResident(Resident)","lastModifiedDate":"2021-04-06"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2021-04-06"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"note right of model","lastModifiedDate":"2021-04-06"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"Storage mechanism","lastModifiedDate":"2021-04-06"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"omitted for brevity","lastModifiedDate":"2021-04-06"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"end note","lastModifiedDate":"2021-04-06"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"return","lastModifiedDate":"2021-04-06"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"addResidentCmd -[LOGIC_COLOR]\u003e cmdResult**:","lastModifiedDate":"2021-04-06"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"activate cmdResult LOGIC_COLOR","lastModifiedDate":"2021-04-06"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"return","lastModifiedDate":"2021-04-06"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"return commandResult","lastModifiedDate":"2021-04-06"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"return commandResult","lastModifiedDate":"2021-04-06"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"ui --[UI_COLOR]\u003e user: display commandResult","lastModifiedDate":"2021-04-06"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"deactivate","lastModifiedDate":"2021-04-06"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"@enduml","lastModifiedDate":"2021-04-06"}],"authorContributionMap":{"colintkn":66}},{"path":"docs/diagrams/resident/ResidentClass.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"@startuml","lastModifiedDate":"2021-04-05"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"!include ../style.puml","lastModifiedDate":"2021-04-05"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"package Model {","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"Class AddressBook","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"package Resident {","lastModifiedDate":"2021-04-05"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"Class UniqueResidentList","lastModifiedDate":"2021-04-05"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"Class Resident","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"Class Name","lastModifiedDate":"2021-04-05"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"Class Phone","lastModifiedDate":"2021-04-05"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"Class Email","lastModifiedDate":"2021-04-05"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"Class Year","lastModifiedDate":"2021-04-05"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"Class Room","lastModifiedDate":"2021-04-05"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-04-05"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-04-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"AddressBook *--\u003e UniqueResidentList","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"UniqueResidentList \"1\" *--\u003e \"*\" Resident","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"Resident *--\u003e \"1\" Name","lastModifiedDate":"2021-04-06"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"Resident *--\u003e \"1\" Phone","lastModifiedDate":"2021-04-06"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"Resident *--\u003e \"1\"  Email","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"Resident *--\u003e \"1\"  Year","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"Resident *--\u003e \"0..1\"  Room","lastModifiedDate":"2021-04-06"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"@enduml","lastModifiedDate":"2021-04-05"}],"authorContributionMap":{"colintkn":28}},{"path":"docs/diagrams/residentroom/ResidentRoomAllocationActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"@startuml","lastModifiedDate":"2021-04-06"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"\u0027https://plantuml.com/activity-diagram-beta","lastModifiedDate":"2021-04-06"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"start","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":":Check if Room exists;","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"if () then ([Room exists])","lastModifiedDate":"2021-04-06"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"    :Check if Resident exists;","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"    if () then ([Resident exists])","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"        : Check if Resident or Room is already allocated;","lastModifiedDate":"2021-04-06"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"        if () then ([Resident and room not allocated])","lastModifiedDate":"2021-04-06"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"            : Set the room number in Resident;","lastModifiedDate":"2021-04-06"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"            : Set the occupancy as \u0027Y\u0027 in Room;","lastModifiedDate":"2021-04-06"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"            stop","lastModifiedDate":"2021-04-06"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"        else ([else])","lastModifiedDate":"2021-04-06"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"            :Show error message to user;","lastModifiedDate":"2021-04-06"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"            stop","lastModifiedDate":"2021-04-06"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"        endif","lastModifiedDate":"2021-04-06"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"    else ([else])","lastModifiedDate":"2021-04-06"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"        :Show error message to user;","lastModifiedDate":"2021-04-06"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"        stop","lastModifiedDate":"2021-04-06"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"   endif","lastModifiedDate":"2021-04-06"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"else ([else])","lastModifiedDate":"2021-04-06"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"    :Show error message to user;","lastModifiedDate":"2021-04-06"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    stop","lastModifiedDate":"2021-04-06"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"@enduml","lastModifiedDate":"2021-04-06"}],"authorContributionMap":{"colintkn":27}},{"path":"docs/diagrams/residentroom/ResidentRoomAllocationDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"@startuml","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"\u0027https://plantuml.com/activity-diagram-beta","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"start","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":":Check if Room exists;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"if () then ([Room exists])","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"    :Check if Resident exists;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"    if () then ([Resident exists])","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"        : Check if Resident or Room is already allocated;","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"        if () then ([Resident and room not allocated])","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"            : Set the room number in Resident;","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"            : Set the occupancy as \u0027Y\u0027 in Room;","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"            stop","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"        else ([else])","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"            stop","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"    endif","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    else ([else])","lastModifiedDate":"2021-03-25"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"        stop","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"   endif","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"else ([else])","lastModifiedDate":"2021-03-25"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    stop","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"@enduml","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"colintkn":23}},{"path":"docs/diagrams/residentroom/ResidentRoomDeallocationSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"@startuml","lastModifiedDate":"2021-04-05"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"!include ../style.puml","lastModifiedDate":"2021-04-05"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"Actor User as user USER_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"Participant \":CommandBox\" as ui UI_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"Participant \":Logic\" as logic LOGIC_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"Participant \":AddressBookParser\" as abParser LOGIC_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"Participant \":DeallocateResidentRoom\\nCommandParser\" as deallocParser LOGIC_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"Participant \":DeallocateResidentRoom\\nCommand\" as deallocCmd LOGIC_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"Participant \":Model\" as model MODEL_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"Participant \":CommandResult\" as cmdResult LOGIC_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"user -[USER_COLOR]\u003e ui: key in \"dealloc 1\"","lastModifiedDate":"2021-04-05"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"activate ui UI_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"ui -[LOGIC_COLOR]\u003e logic: executeCommand(cmdText)","lastModifiedDate":"2021-04-05"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"logic -[LOGIC_COLOR]\u003e abParser: parseCommand(cmdText)","lastModifiedDate":"2021-04-05"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"activate abParser LOGIC_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"note over abParser","lastModifiedDate":"2021-04-05"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"The parsing process","lastModifiedDate":"2021-04-05"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"breaks cmdText down","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"into an argumentMap","lastModifiedDate":"2021-04-05"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"named args. This","lastModifiedDate":"2021-04-05"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"process is omitted","lastModifiedDate":"2021-04-05"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"here for brevity.","lastModifiedDate":"2021-04-05"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"end note","lastModifiedDate":"2021-04-05"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"abParser -[LOGIC_COLOR]\u003e deallocParser **:","lastModifiedDate":"2021-04-05"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"activate deallocParser LOGIC_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"return","lastModifiedDate":"2021-04-05"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"abParser -[LOGIC_COLOR]\u003e deallocParser: parse(args)","lastModifiedDate":"2021-04-05"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"activate deallocParser LOGIC_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"deallocParser -[LOGIC_COLOR]\u003e deallocCmd**:","lastModifiedDate":"2021-04-05"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"activate deallocCmd LOGIC_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"return","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"return deallocCmd","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"destroy deallocParser","lastModifiedDate":"2021-04-05"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"return deallocCmd","lastModifiedDate":"2021-04-05"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"logic -[LOGIC_COLOR]\u003e deallocCmd: execute(model)","lastModifiedDate":"2021-04-05"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"activate deallocCmd LOGIC_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"deallocCmd -[MODEL_COLOR]\u003e model: deallocate(1)","lastModifiedDate":"2021-04-05"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"note right of model","lastModifiedDate":"2021-04-05"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"Storage mechanism","lastModifiedDate":"2021-04-05"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"omitted for brevity","lastModifiedDate":"2021-04-05"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"end note","lastModifiedDate":"2021-04-05"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"return","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"deallocCmd -[LOGIC_COLOR]\u003e cmdResult**:","lastModifiedDate":"2021-04-05"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"activate cmdResult LOGIC_COLOR","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"return","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"return commandResult","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"return commandResult","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"ui --[UI_COLOR]\u003e user: display commandResult","lastModifiedDate":"2021-04-05"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"deactivate","lastModifiedDate":"2021-04-05"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"@enduml","lastModifiedDate":"2021-04-05"}],"authorContributionMap":{"colintkn":66}},{"path":"docs/diagrams/room/AddRoomCommandActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"@startuml","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"!include ../style.puml","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"start","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":":User enters command adding a room;","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":":Parse command text;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"if () then ([all parameters are valid])","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":":Construct Room","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"with given parameters;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"if () then ([No duplicate room in model])","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":":Add room to model;","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"note left","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"Adding to the model","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"involves updating","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"storage too. This","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"process has been","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"omitted for brevity.","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"end note","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":":Show success message to user;","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"else ([else])","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":":Show duplicate room","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"error to user;","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"stop","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"endif","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"else ([else])","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":":Show invalid usage","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"error to user;","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"stop","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"endif","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"\u0027if () then ([command commits AddressBook])","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"\u0027    :Purge redundant states;","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"\u0027    :Save AddressBook to","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"\u0027    addressBookStateList;","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"\u0027else ([else])","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"\u0027endif","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"stop","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"@enduml","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"DrWala":40}},{"path":"docs/diagrams/room/AddRoomCommandSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"@startuml","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"!include ../style.puml","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"Actor User as user USER_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"Participant \":CommandBox\" as ui UI_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"Participant \":Logic\" as logic LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"Participant \":AddressBookParser\" as abParser LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"Participant \":AddRoom\\nCommandParser\" as arcParser LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"Participant \":AddRoom\\nCommand\" as addRoomCmd LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"Participant \":Model\" as model MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"Participant \":CommandResult\" as cmdResult LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"user -[USER_COLOR]\u003e ui: key in \"oadd n/12-100 \\n t/corridor_non_ac\"","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"activate ui UI_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"ui -[LOGIC_COLOR]\u003e logic: executeCommand(cmdText)","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"logic -[LOGIC_COLOR]\u003e abParser: parseCommand(cmdText)","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"activate abParser LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"note over abParser","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"The parsing process","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"breaks cmdText down","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"into an argumentMap","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"named args. This","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"process is omitted","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"here for brevity.","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"end note","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"abParser -[LOGIC_COLOR]\u003e arcParser **:","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"activate arcParser LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"return","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"abParser -[LOGIC_COLOR]\u003e arcParser: parse(args)","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"activate arcParser LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"arcParser -[LOGIC_COLOR]\u003e addRoomCmd**:","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"activate addRoomCmd LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"return","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"return addRoomCmd","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"destroy arcParser","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"return addRoomCmd","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"logic -[LOGIC_COLOR]\u003e addRoomCmd: execute(model)","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"activate addRoomCmd LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"addRoomCmd -[MODEL_COLOR]\u003e model: addRoom(Room)","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"note right of model","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"Storage mechanism","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"omitted for brevity","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"end note","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"return","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"addRoomCmd -[LOGIC_COLOR]\u003e cmdResult**:","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"activate cmdResult LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"return","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"return commandResult","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"return commandResult","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"ui --[UI_COLOR]\u003e user: display commandResult","lastModifiedDate":"2021-03-24"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"deactivate","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"@enduml","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"DrWala":66}},{"path":"docs/diagrams/room/RoomClass.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"@startuml","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"!include ../style.puml","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"package Model {","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"Class AddressBook","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"package Room {","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"Class UniqueRoomList","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"Class Room","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"Class RoomNumber {","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    departureTime : Date","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"Class RoomType","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"Class IsOccupied","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"Enum \"\u003c\u003cenumeration\u003e\u003e\\nRoomTypeOptions\" as RoomTypeOptions","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"package Tag {","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"Class Tag","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"AddressBook *--\u003e UniqueRoomList","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"UniqueRoomList \"1\" *--\u003e \"*\" Room","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"Room *--\u003e RoomNumber","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"Room *--\u003e RoomType","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"Room *--\u003e IsOccupied","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"Room *--\u003e \"*\" Tag","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"RoomType *--\u003e \"1  \" RoomTypeOptions","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"@enduml","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"DrWala":32}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"title: SunRez","lastModifiedDate":"2021-02-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103-T14-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103-T14-1/tp/actions)","lastModifiedDate":"2021-02-25"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103-T14-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103-T14-1/tp)","lastModifiedDate":"2021-02-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"**SunRez** is a desktop app designed for college residential staff to efficiently manage student housing services. It is optimized for use via a Command Line Interface (CLI). ","lastModifiedDate":"2021-02-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"**SunRez** has the following features:","lastModifiedDate":"2021-02-25"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of maintenance issues","lastModifiedDate":"2021-02-25"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of student records","lastModifiedDate":"2021-02-25"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"* Keeps track of room records","lastModifiedDate":"2021-02-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"If this is your first time using/contributing to **SunRez**, check out our guides in the [Site Map](#site-map) section below.","lastModifiedDate":"2021-02-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"## Site Map","lastModifiedDate":"2021-02-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2021-02-25"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2021-02-25"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2021-02-25"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"* [Github](https://github.com/AY2021S2-CS2103-T14-1/tp)","lastModifiedDate":"2021-02-25"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"## Acknowledgements","lastModifiedDate":"2021-02-25"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"* This project is based on the [AddressBook-Level3 project](https://se-education.org/addressbook-level3/), ","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"  and inspired by the [AddressBook-Level4 project](https://se-education.org/addressbook-level4/);","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"  both were created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"* Logo designed using [FreeLogoDesign](https://www.freelogodesign.org/).","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"## License: [MIT](https://github.com/AY2021S2-CS2103-T14-1/tp/blob/master/LICENSE)","lastModifiedDate":"2021-02-25"}],"authorContributionMap":{"benedictkhoomw":23,"-":12}},{"path":"eclipse-formatter.xml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"no\"?\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"\u003cprofiles version\u003d\"13\"\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"\u003cprofile kind\u003d\"CodeFormatterProfile\" name\u003d\"Eclipse\" version\u003d\"13\"\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode\" value\u003d\"enabled\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.codegen.targetPlatform\" value\u003d\"10\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.compliance\" value\u003d\"10\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.problem.assertIdentifier\" value\u003d\"error\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.problem.enumIdentifier\" value\u003d\"error\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.source\" value\u003d\"10\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.align_fields_grouping_blank_lines\" value\u003d\"2147483647\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.align_type_members_on_columns\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation\" value\u003d\"0\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_assignment\" value\u003d\"0\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_binary_expression\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_compact_if\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_conditional_expression\" value\u003d\"80\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_enum_constants\" value\u003d\"0\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_expressions_in_for_loop_header\" value\u003d\"0\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_method_declaration\" value\u003d\"0\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_module_statements\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_multiple_fields\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_parameterized_type_references\" value\u003d\"0\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_resources_in_try\" value\u003d\"80\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_type_arguments\" value\u003d\"0\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_type_parameters\" value\u003d\"0\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch\" value\u003d\"16\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_after_imports\" value\u003d\"1\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_after_package\" value\u003d\"1\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_field\" value\u003d\"0\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration\" value\u003d\"0\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_imports\" value\u003d\"1\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_member_type\" value\u003d\"1\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_method\" value\u003d\"1\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk\" value\u003d\"1\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_package\" value\u003d\"0\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_between_import_groups\" value\u003d\"1\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations\" value\u003d\"1\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_array_initializer\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_block_in_case\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_block\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_enum_constant\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_lambda_body\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_method_declaration\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_switch\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_type_declaration\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.count_line_length_from_starting_position\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_block_comments\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_header\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_html\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_javadoc_comments\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_line_comments\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_source_code\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.indent_parameter_description\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.indent_root_tags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.line_length\" value\u003d\"120\"/\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.compact_else_if\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer\" value\u003d\"1\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.continuation_indentation\" value\u003d\"2\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.disabling_tag\" value\u003d\"@formatter:off\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.enabling_tag\" value\u003d\"@formatter:on\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_empty_lines\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_statements_compare_to_block\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_statements_compare_to_body\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indentation.size\" value\u003d\"4\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_enum_constant\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":104,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":105,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_label\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_type_annotation\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":109,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":110,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":111,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":112,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":113,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":114,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":116,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":117,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":118,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":119,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":120,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":121,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":122,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":123,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":124,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":125,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":126,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_binary_operator\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":127,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":128,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":129,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":130,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":131,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":132,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":133,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":134,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":135,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":136,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":137,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":138,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":139,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":140,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":141,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":142,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":143,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":144,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":145,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":146,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":147,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":148,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":149,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":150,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":151,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":152,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":153,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":154,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":155,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_ellipsis\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":156,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_lambda_arrow\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":157,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":158,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":159,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":160,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":161,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":162,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":163,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":164,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":165,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":166,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":167,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":168,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":169,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":170,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":171,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":172,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":173,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":174,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":175,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":176,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":177,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":178,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":179,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":180,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":181,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":182,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":183,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_unary_operator\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":184,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":185,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":186,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":187,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_binary_operator\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":188,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":189,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":190,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":191,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":192,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":193,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":194,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":195,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":196,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":197,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":198,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":199,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":200,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":201,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":202,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":203,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":204,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":205,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":206,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":207,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":208,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":209,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":210,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":211,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":212,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":213,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":214,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":215,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":216,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":217,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":218,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":219,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":220,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":221,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":222,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":223,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":224,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":225,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":226,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":227,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":228,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":229,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":230,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":231,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":232,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":233,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_ellipsis\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":234,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_lambda_arrow\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":235,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":236,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":237,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":238,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":239,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":240,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":241,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":242,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":243,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":244,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":245,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":246,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":247,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":248,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":249,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":250,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":251,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":252,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":253,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":254,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":255,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":256,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":257,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":258,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":259,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":260,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":261,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":262,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":263,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":264,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":265,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":266,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":267,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":268,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":269,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":270,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":271,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":272,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":273,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_semicolon\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":274,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_unary_operator\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":275,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":276,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":277,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":278,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":279,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":280,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":281,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":282,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":283,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.join_lines_in_comments\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":284,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.join_wrapped_lines\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":285,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":286,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":287,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":288,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":289,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.lineSplit\" value\u003d\"120\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":290,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":291,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":292,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body\" value\u003d\"0\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":293,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve\" value\u003d\"1\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":294,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_annotation\" value\u003d\"common_lines\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":295,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_catch_clause\" value\u003d\"common_lines\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":296,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_enum_constant_declaration\" value\u003d\"common_lines\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":297,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_for_statment\" value\u003d\"common_lines\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":298,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_if_while_statement\" value\u003d\"common_lines\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":299,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_lambda_declaration\" value\u003d\"common_lines\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":300,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_method_delcaration\" value\u003d\"common_lines\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":301,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_method_invocation\" value\u003d\"common_lines\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":302,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_switch_statement\" value\u003d\"common_lines\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":303,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.parentheses_positions_in_try_clause\" value\u003d\"common_lines\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":304,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":305,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.tabulation.char\" value\u003d\"tab\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":306,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.tabulation.size\" value\u003d\"4\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":307,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.use_on_off_tags\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":308,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":309,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_before_assignment_operator\" value\u003d\"false\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":310,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_before_binary_operator\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":311,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_before_conditional_operator\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":312,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":313,"author":{"gitId":"stein414"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":314,"author":{"gitId":"stein414"},"content":"\u003c/profile\u003e","lastModifiedDate":"2021-02-23"},{"lineNumber":315,"author":{"gitId":"stein414"},"content":"\u003c/profiles\u003e","lastModifiedDate":"2021-02-23"}],"authorContributionMap":{"stein414":315}},{"path":"setup/setup.sh","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"cp setup/pre-commit .git/hooks/pre-commit","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"chmod +x .git/hooks/pre-commit","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"stein414":3}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistory;","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.storage.commandhistory.CommandHistoryStorage;","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.storage.commandhistory.PlainTextCommandHistoryStorage;","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);","lastModifiedDate":"2017-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing SunRez ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-04-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"        CommandHistoryStorage commandHistoryStorage \u003d new PlainTextCommandHistoryStorage(","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"                userPrefs.getCommandHistoryFilePath());","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, commandHistoryStorage);","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book, {@code storage}\u0027s","lastModifiedDate":"2021-03-23"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"     * command history, and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book. \u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"     * An empty command history will be used if {@code storage}\u0027s command history is not found or if errors occur","lastModifiedDate":"2021-03-23"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"     * when reading {@code storage}\u0027s command history.","lastModifiedDate":"2021-03-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"                logger.info(\"Data file not found. Will be starting with a sample data file.\");","lastModifiedDate":"2021-04-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty data file.\");","lastModifiedDate":"2021-04-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty data file.\");","lastModifiedDate":"2021-04-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"benedictkhoomw"},"content":"        ReadOnlyCommandHistory initialCommandHistory;","lastModifiedDate":"2021-03-23"},{"lineNumber":105,"author":{"gitId":"benedictkhoomw"},"content":"        try {","lastModifiedDate":"2021-03-23"},{"lineNumber":106,"author":{"gitId":"benedictkhoomw"},"content":"            Optional\u003cReadOnlyCommandHistory\u003e commandHistoryOptional \u003d storage.readCommandHistory();","lastModifiedDate":"2021-03-23"},{"lineNumber":107,"author":{"gitId":"benedictkhoomw"},"content":"            if (commandHistoryOptional.isEmpty()) {","lastModifiedDate":"2021-03-23"},{"lineNumber":108,"author":{"gitId":"benedictkhoomw"},"content":"                logger.info(\"Command history file not found. Will be starting with an empty CommandHistory.\");","lastModifiedDate":"2021-03-23"},{"lineNumber":109,"author":{"gitId":"benedictkhoomw"},"content":"            }","lastModifiedDate":"2021-03-23"},{"lineNumber":110,"author":{"gitId":"benedictkhoomw"},"content":"            initialCommandHistory \u003d commandHistoryOptional.orElse(new CommandHistory());","lastModifiedDate":"2021-03-23"},{"lineNumber":111,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-03-23"},{"lineNumber":112,"author":{"gitId":"benedictkhoomw"},"content":"            logger.warning(\"Problem while reading from command history file. \"","lastModifiedDate":"2021-03-23"},{"lineNumber":113,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Will be starting with an empty CommandHistory.\");","lastModifiedDate":"2021-03-23"},{"lineNumber":114,"author":{"gitId":"benedictkhoomw"},"content":"            initialCommandHistory \u003d new CommandHistory();","lastModifiedDate":"2021-03-23"},{"lineNumber":115,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":116,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":117,"author":{"gitId":"benedictkhoomw"},"content":"        return new ModelManager(initialData, userPrefs, initialCommandHistory);","lastModifiedDate":"2021-03-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"benedictkhoomw"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty data file.\");","lastModifiedDate":"2021-04-05"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        // Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"benedictkhoomw"},"content":"        logger.info(\"Starting SunRez \" + MainApp.VERSION);","lastModifiedDate":"2021-04-05"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"benedictkhoomw"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping SunRez ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-04-05"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"benedictkhoomw":33,"stein414":2,"-":172}},{"path":"src/main/java/seedu/address/commons/core/Alias.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"//Solution below adapted from https://github.com/briyanii/main","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import java.io.Serializable;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"/**","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":" * Represents an user-defined alias for a command shortcut","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":" * Guarantees: fields are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":" */","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"public class Alias implements Serializable {","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"            \"Alias name can only contain alphanumeric characters and cannot be empty\";","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_COMMAND_CONSTRAINTS \u003d \"Command cannot be empty\";","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    public static final String NAME_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"    private final String aliasName;","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"    private final String command;","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"     * Creates an Alias object.","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"     * All fields should not be null.","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName Name of alias.","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"     * @param command Command content.","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"     * @throws NullPointerException If the input is null.","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"    public Alias(String aliasName, String command) {","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"        requireAllNonNull(aliasName, command);","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"        checkArgument(isValidName(aliasName), MESSAGE_NAME_CONSTRAINTS);","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"        checkArgument(isValidCommand(command), MESSAGE_COMMAND_CONSTRAINTS);","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"        this.aliasName \u003d aliasName;","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"     * Validates alias name.","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName Name of the alias.","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"     * @return Whether the name matches the regex pattern and is not empty.","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"    public static boolean isValidName(String aliasName) {","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"        return Pattern.matches(NAME_REGEX, aliasName) \u0026\u0026 !aliasName.isEmpty();","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"     * Validates command.","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"     * @param command Command string.","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"     * @return Whether the command is not empty.","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"    public static boolean isValidCommand(String command) {","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"        return !command.isEmpty();","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"    public String getAliasName() {","lastModifiedDate":"2021-03-13"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"        assert aliasName !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"        return aliasName;","lastModifiedDate":"2021-03-13"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":"    public String getCommand() {","lastModifiedDate":"2021-03-13"},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"        assert aliasName !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"        return command;","lastModifiedDate":"2021-03-13"},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-13"},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":"        return Objects.hash(aliasName, command);","lastModifiedDate":"2021-03-13"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":77,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":78,"author":{"gitId":"cnlinh"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-03-13"},{"lineNumber":79,"author":{"gitId":"cnlinh"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2021-03-13"},{"lineNumber":80,"author":{"gitId":"cnlinh"},"content":"            return true;","lastModifiedDate":"2021-03-13"},{"lineNumber":81,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":82,"author":{"gitId":"cnlinh"},"content":"        if (!(obj instanceof Alias)) {","lastModifiedDate":"2021-03-13"},{"lineNumber":83,"author":{"gitId":"cnlinh"},"content":"            return false;","lastModifiedDate":"2021-03-13"},{"lineNumber":84,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":85,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":86,"author":{"gitId":"cnlinh"},"content":"        Alias other \u003d (Alias) obj;","lastModifiedDate":"2021-03-13"},{"lineNumber":87,"author":{"gitId":"cnlinh"},"content":"        return aliasName.equals(other.aliasName)","lastModifiedDate":"2021-03-13"},{"lineNumber":88,"author":{"gitId":"cnlinh"},"content":"                \u0026\u0026 command.equals(other.command);","lastModifiedDate":"2021-03-13"},{"lineNumber":89,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":90,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":91,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":92,"author":{"gitId":"cnlinh"},"content":"    public String toString() {","lastModifiedDate":"2021-03-13"},{"lineNumber":93,"author":{"gitId":"cnlinh"},"content":"        return \"Alias: \" + aliasName + \" Command: \" + command;","lastModifiedDate":"2021-03-13"},{"lineNumber":94,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":95,"author":{"gitId":"cnlinh"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"cnlinh":95}},{"path":"src/main/java/seedu/address/commons/core/AliasMapping.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"//Solution below adapted from https://github.com/briyanii/main","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import java.io.Serializable;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import java.util.Collections;","lastModifiedDate":"2021-04-06"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import java.util.List;","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import java.util.Map;","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.alias.AliasCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.alias.ListAliasCommand;","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.alias.UnaliasCommand;","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.commandhistory.ViewHistoryCommand;","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.issue.AddIssueCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.issue.CloseIssueCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.issue.DeleteIssueCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.issue.EditIssueCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.issue.FindIssueCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.issue.ListIssueCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.resident.DeleteResidentCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.resident.FindResidentCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.resident.ListResidentCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.resident.ListUnallocatedResidentsCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.residentroom.AllocateResidentRoomCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.residentroom.DeallocateResidentRoomCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.room.AddRoomCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.room.DeleteRoomCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.room.EditRoomCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.room.FindRoomCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.room.ListRoomCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.undoredo.RedoCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.undoredo.UndoCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"/**","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":" * Represents the current user\u0027s {@code Alias} command mapping.","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":" * Guarantees: fields are present and not null, fields values are mutable","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":" */","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"public class AliasMapping implements Serializable {","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"    private Map\u003cString, Alias\u003e mapping;","lastModifiedDate":"2021-03-13"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"     * Creates an empty AliasMapping.","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"    public AliasMapping() {","lastModifiedDate":"2021-03-13"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"        this.mapping \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-13"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"     * Sets the mapping to the mapping of the specified AliasMapping object.","lastModifiedDate":"2021-04-06"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"     * @param aliasMapping The specified AliasMapping object.","lastModifiedDate":"2021-04-06"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"    public void setAliasMapping(AliasMapping aliasMapping) {","lastModifiedDate":"2021-04-06"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"        this.mapping \u003d new HashMap\u003c\u003e(aliasMapping.mapping);","lastModifiedDate":"2021-04-06"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"     * Returns the map object.","lastModifiedDate":"2021-04-06"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"     * @return The map object.","lastModifiedDate":"2021-04-06"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"    public Map\u003cString, Alias\u003e getMapping() {","lastModifiedDate":"2021-04-06"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"        return this.mapping;","lastModifiedDate":"2021-04-06"},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"     * Returns an Alias object from alias name.","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName Name of the alias.","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"     * @return The alias with the specified name.","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":78,"author":{"gitId":"cnlinh"},"content":"    public Alias getAlias(String aliasName) {","lastModifiedDate":"2021-03-13"},{"lineNumber":79,"author":{"gitId":"cnlinh"},"content":"        return mapping.get(aliasName);","lastModifiedDate":"2021-03-13"},{"lineNumber":80,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":81,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":82,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":83,"author":{"gitId":"cnlinh"},"content":"     * Adds a new Alias object to the current mapping.","lastModifiedDate":"2021-03-16"},{"lineNumber":84,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":85,"author":{"gitId":"cnlinh"},"content":"     * @param alias The alias object to be added.","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":87,"author":{"gitId":"cnlinh"},"content":"    public void addAlias(Alias alias) {","lastModifiedDate":"2021-03-13"},{"lineNumber":88,"author":{"gitId":"cnlinh"},"content":"        assert alias !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":89,"author":{"gitId":"cnlinh"},"content":"        mapping.put(alias.getAliasName(), alias);","lastModifiedDate":"2021-03-13"},{"lineNumber":90,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":91,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":92,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":93,"author":{"gitId":"cnlinh"},"content":"     * Deletes a user-defined alias from the current mapping.","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName The name of the alias to be deleted.","lastModifiedDate":"2021-03-26"},{"lineNumber":96,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":97,"author":{"gitId":"cnlinh"},"content":"    public void deleteAlias(String aliasName) {","lastModifiedDate":"2021-03-26"},{"lineNumber":98,"author":{"gitId":"cnlinh"},"content":"        assert aliasName !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":99,"author":{"gitId":"cnlinh"},"content":"        assert mapping.containsKey(aliasName);","lastModifiedDate":"2021-04-08"},{"lineNumber":100,"author":{"gitId":"cnlinh"},"content":"        mapping.remove(aliasName);","lastModifiedDate":"2021-03-26"},{"lineNumber":101,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":102,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":103,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":104,"author":{"gitId":"cnlinh"},"content":"     * Checks if the current mapping contains an Alias based on alias name.","lastModifiedDate":"2021-03-16"},{"lineNumber":105,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":106,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName Name of the alias.","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"cnlinh"},"content":"     * @return Whether the mapping contains the alias.","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":109,"author":{"gitId":"cnlinh"},"content":"    public boolean containsAlias(String aliasName) {","lastModifiedDate":"2021-03-13"},{"lineNumber":110,"author":{"gitId":"cnlinh"},"content":"        return mapping.containsKey(aliasName);","lastModifiedDate":"2021-03-13"},{"lineNumber":111,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":112,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":113,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":114,"author":{"gitId":"cnlinh"},"content":"     * Checks if alias name is a reserved keyword.","lastModifiedDate":"2021-03-26"},{"lineNumber":115,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":116,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName Name of the alias.","lastModifiedDate":"2021-03-30"},{"lineNumber":117,"author":{"gitId":"cnlinh"},"content":"     * @return Whether the alias name is reserved.","lastModifiedDate":"2021-03-30"},{"lineNumber":118,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":119,"author":{"gitId":"cnlinh"},"content":"    public boolean isReservedKeyword(String aliasName) {","lastModifiedDate":"2021-03-13"},{"lineNumber":120,"author":{"gitId":"cnlinh"},"content":"        switch (aliasName) {","lastModifiedDate":"2021-03-13"},{"lineNumber":121,"author":{"gitId":"cnlinh"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d System Commands \u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-16"},{"lineNumber":122,"author":{"gitId":"cnlinh"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-13"},{"lineNumber":123,"author":{"gitId":"cnlinh"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-13"},{"lineNumber":124,"author":{"gitId":"cnlinh"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-13"},{"lineNumber":125,"author":{"gitId":"cnlinh"},"content":"        case ViewHistoryCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":126,"author":{"gitId":"cnlinh"},"content":"        case UndoCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-31"},{"lineNumber":127,"author":{"gitId":"cnlinh"},"content":"        case RedoCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-31"},{"lineNumber":128,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":129,"author":{"gitId":"cnlinh"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d Resident Commands \u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-16"},{"lineNumber":130,"author":{"gitId":"cnlinh"},"content":"        case AddResidentCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":131,"author":{"gitId":"cnlinh"},"content":"        case EditResidentCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":132,"author":{"gitId":"cnlinh"},"content":"        case DeleteResidentCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":133,"author":{"gitId":"cnlinh"},"content":"        case FindResidentCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":134,"author":{"gitId":"cnlinh"},"content":"        case ListResidentCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":135,"author":{"gitId":"cnlinh"},"content":"        case ListUnallocatedResidentsCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-31"},{"lineNumber":136,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":137,"author":{"gitId":"cnlinh"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d Room Commands \u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-16"},{"lineNumber":138,"author":{"gitId":"cnlinh"},"content":"        case AddRoomCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":139,"author":{"gitId":"cnlinh"},"content":"        case EditRoomCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":140,"author":{"gitId":"cnlinh"},"content":"        case DeleteRoomCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":141,"author":{"gitId":"cnlinh"},"content":"        case FindRoomCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":142,"author":{"gitId":"cnlinh"},"content":"        case ListRoomCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":143,"author":{"gitId":"cnlinh"},"content":"        case AllocateResidentRoomCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-31"},{"lineNumber":144,"author":{"gitId":"cnlinh"},"content":"        case DeallocateResidentRoomCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-31"},{"lineNumber":145,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":146,"author":{"gitId":"cnlinh"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d Issue Commands \u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-16"},{"lineNumber":147,"author":{"gitId":"cnlinh"},"content":"        case AddIssueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":148,"author":{"gitId":"cnlinh"},"content":"        case ListIssueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":149,"author":{"gitId":"cnlinh"},"content":"        case FindIssueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":150,"author":{"gitId":"cnlinh"},"content":"        case EditIssueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":151,"author":{"gitId":"cnlinh"},"content":"        case DeleteIssueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":152,"author":{"gitId":"cnlinh"},"content":"        case CloseIssueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-30"},{"lineNumber":153,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":154,"author":{"gitId":"cnlinh"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d Alias Commands \u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-26"},{"lineNumber":155,"author":{"gitId":"cnlinh"},"content":"        case AliasCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-26"},{"lineNumber":156,"author":{"gitId":"cnlinh"},"content":"        case UnaliasCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-26"},{"lineNumber":157,"author":{"gitId":"cnlinh"},"content":"        case ListAliasCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-26"},{"lineNumber":158,"author":{"gitId":"cnlinh"},"content":"            return true;","lastModifiedDate":"2021-03-13"},{"lineNumber":159,"author":{"gitId":"cnlinh"},"content":"        default:","lastModifiedDate":"2021-03-13"},{"lineNumber":160,"author":{"gitId":"cnlinh"},"content":"            return false;","lastModifiedDate":"2021-03-13"},{"lineNumber":161,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":162,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":163,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":164,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":165,"author":{"gitId":"cnlinh"},"content":"     * Checks if the command used is an existing alias.","lastModifiedDate":"2021-03-26"},{"lineNumber":166,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":167,"author":{"gitId":"cnlinh"},"content":"     * @param commandWord The command word.","lastModifiedDate":"2021-03-30"},{"lineNumber":168,"author":{"gitId":"cnlinh"},"content":"     * @return Whether the command word is recursive.","lastModifiedDate":"2021-03-30"},{"lineNumber":169,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":170,"author":{"gitId":"cnlinh"},"content":"    public boolean isRecursiveKeyword(String commandWord) {","lastModifiedDate":"2021-03-16"},{"lineNumber":171,"author":{"gitId":"cnlinh"},"content":"        return mapping.containsKey(commandWord);","lastModifiedDate":"2021-03-13"},{"lineNumber":172,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":173,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":174,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":175,"author":{"gitId":"cnlinh"},"content":"     * Returns the current number of user-defined aliases.","lastModifiedDate":"2021-03-26"},{"lineNumber":176,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":177,"author":{"gitId":"cnlinh"},"content":"     * @return Size of the current mapping.","lastModifiedDate":"2021-03-26"},{"lineNumber":178,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":179,"author":{"gitId":"cnlinh"},"content":"    public int size() {","lastModifiedDate":"2021-03-26"},{"lineNumber":180,"author":{"gitId":"cnlinh"},"content":"        assert mapping !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":181,"author":{"gitId":"cnlinh"},"content":"        return mapping.size();","lastModifiedDate":"2021-03-26"},{"lineNumber":182,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":183,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":184,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":185,"author":{"gitId":"cnlinh"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-13"},{"lineNumber":186,"author":{"gitId":"cnlinh"},"content":"        return mapping.hashCode();","lastModifiedDate":"2021-03-13"},{"lineNumber":187,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":188,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":189,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":190,"author":{"gitId":"cnlinh"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-03-16"},{"lineNumber":191,"author":{"gitId":"cnlinh"},"content":"        if (o \u003d\u003d this) {","lastModifiedDate":"2021-03-16"},{"lineNumber":192,"author":{"gitId":"cnlinh"},"content":"            return true;","lastModifiedDate":"2021-03-13"},{"lineNumber":193,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":194,"author":{"gitId":"cnlinh"},"content":"        if (!(o instanceof AliasMapping)) {","lastModifiedDate":"2021-03-16"},{"lineNumber":195,"author":{"gitId":"cnlinh"},"content":"            return false;","lastModifiedDate":"2021-03-13"},{"lineNumber":196,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":197,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":198,"author":{"gitId":"cnlinh"},"content":"        AliasMapping am \u003d (AliasMapping) o;","lastModifiedDate":"2021-03-16"},{"lineNumber":199,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":200,"author":{"gitId":"cnlinh"},"content":"        return mapping.keySet().stream().allMatch(key -\u003e mapping.get(key).equals(am.mapping.get(key)));","lastModifiedDate":"2021-03-16"},{"lineNumber":201,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":202,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":203,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":204,"author":{"gitId":"cnlinh"},"content":"    public String toString() {","lastModifiedDate":"2021-03-26"},{"lineNumber":205,"author":{"gitId":"cnlinh"},"content":"        final String format \u003d \"%d:\\t%s \u003d %s\\n\";","lastModifiedDate":"2021-03-26"},{"lineNumber":206,"author":{"gitId":"cnlinh"},"content":"        StringBuilder msg \u003d new StringBuilder();","lastModifiedDate":"2021-03-26"},{"lineNumber":207,"author":{"gitId":"cnlinh"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-03-26"},{"lineNumber":208,"author":{"gitId":"cnlinh"},"content":"        List\u003cString\u003e aliasByName \u003d new ArrayList\u003c\u003e(mapping.keySet());","lastModifiedDate":"2021-04-06"},{"lineNumber":209,"author":{"gitId":"cnlinh"},"content":"        Collections.sort(aliasByName);","lastModifiedDate":"2021-04-06"},{"lineNumber":210,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":211,"author":{"gitId":"cnlinh"},"content":"        for (String aliasName : aliasByName) {","lastModifiedDate":"2021-04-06"},{"lineNumber":212,"author":{"gitId":"cnlinh"},"content":"            count++;","lastModifiedDate":"2021-03-26"},{"lineNumber":213,"author":{"gitId":"cnlinh"},"content":"            msg.append(String.format(format, count, aliasName, mapping.get(aliasName).getCommand()));","lastModifiedDate":"2021-04-06"},{"lineNumber":214,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":215,"author":{"gitId":"cnlinh"},"content":"        return msg.toString();","lastModifiedDate":"2021-03-26"},{"lineNumber":216,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":217,"author":{"gitId":"cnlinh"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"cnlinh":216,"benedictkhoomw":1}},{"path":"src/main/java/seedu/address/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import java.util.Locale;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    public static final Locale DEFAULT_LOCALE \u003d new Locale(\"en\", \"SG\");","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { // this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"stein414":3,"-":63}},{"path":"src/main/java/seedu/address/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String LOG_FILE \u003d \"sunrez.log\";","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"benedictkhoomw":1,"-":111}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX \u003d \"The resident index provided is invalid\";","lastModifiedDate":"2021-03-05"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_RESIDENTS_LISTED_OVERVIEW \u003d \"%1$d residents listed!\";","lastModifiedDate":"2021-03-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_INVALID_ROOM_DISPLAYED_INDEX \u003d \"The room index provided is invalid\";","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_ROOMS_LISTED_OVERVIEW \u003d \"%1$d rooms listed!\";","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX \u003d \"The issue index provided is invalid\";","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_ISSUES_LISTED_OVERVIEW \u003d \"%1$d issues listed!\";","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"stein414":2,"colintkn":2,"-":13,"DrWala":3}},{"path":"src/main/java/seedu/address/commons/util/EnumUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":" * Utility methods related to Enums","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"public class EnumUtil {","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"    // Taken from https://stackoverflow.com/a/13783744","lastModifiedDate":"2021-03-06"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"     * Returns all enum values of a provided enum as a String array","lastModifiedDate":"2021-03-06"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"     * @param e Enum to get string values of","lastModifiedDate":"2021-03-06"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"     * @return String array containing the enum values","lastModifiedDate":"2021-03-06"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    public static String[] getNames(Class\u003c? extends Enum\u003c?\u003e\u003e e) {","lastModifiedDate":"2021-03-06"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"        return Arrays.stream(e.getEnumConstants()).map(Enum::name).toArray(String[]::new);","lastModifiedDate":"2021-03-06"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"DrWala":20}},{"path":"src/main/java/seedu/address/commons/util/MathUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":" * Helper functions for common math operations.","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"public class MathUtil {","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"     * To prevent instantiation.","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"    private MathUtil() {","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"     * Clamps a value between an inclusive upper and lower bound.","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns {@code min} if {@code value} \u003c {@code min}. Returns {@code max} if {@code value} \u003e {@code max}.","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"     * Otherwise, returns {@code value}.","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"     * @param value The value to clamp.","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"     * @param min The inclusive lower bound.","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"     * @param max The inclusive upper bound.","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The clamped value.","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws IllegalArgumentException If min \u003e max.","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    public static int clamp(int value, int min, int max) throws IllegalArgumentException {","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"        if (min \u003e max) {","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        if (value \u003c min) {","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"            return min;","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        if (value \u003e max) {","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"            return max;","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        return value;","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"benedictkhoomw":38}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"     * examples:","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"     * \u003cpre\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param word     cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"     * Ignores case.","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"     * examples:","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"     * \u003cpre\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"     *       containsIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"     *       containsIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"     *       containsIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"     * \u003c/pre\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"     * @param word     cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"    public static boolean containsIgnoreCase(String sentence, String word) {","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"        requireNonNull(word);","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"        String preppedWord \u003d word.trim().toLowerCase();","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"        String preppedSentence \u003d sentence.toLowerCase();","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"                .anyMatch(preppedSentenceWord -\u003e preppedSentenceWord.contains(preppedWord));","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"stein414":35,"-":67}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commandhistory.CommandHistorySelector;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException   If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    /** Returns an unmodifiable view of the filtered list of residents */","lastModifiedDate":"2021-03-05"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"    ObservableList\u003cResident\u003e getFilteredResidentList();","lastModifiedDate":"2021-03-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"    /** Returns an unmodifiable view of the filtered list of rooms */","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    ObservableList\u003cRoom\u003e getFilteredRoomList();","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    /** Returns an unmodifiable view of the filtered list of issues */","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"    ObservableList\u003cIssue\u003e getFilteredIssueList();","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the command history.","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    ReadOnlyCommandHistory getCommandHistory();","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the command history selector.","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"    CommandHistorySelector getCommandHistorySelector();","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if the previous undo can be redone. False otherwise.","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"     * @return True if the previous undo can be redone. False otherwise.","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"    boolean canRedoAddressBook();","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if the previous command can be undone. False otherwise.","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"     * @return True if the previous command can be undone. False otherwise.","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"    boolean canUndoAddressBook();","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"benedictkhoomw":26,"stein414":4,"colintkn":3,"-":49,"DrWala":3}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commandhistory.CommandHistorySelector;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commandhistory.SuppliedCommandHistorySelector;","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    private final CommandHistorySelector commandHistorySelector;","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        commandHistorySelector \u003d new SuppliedCommandHistorySelector(this::getCommandHistory);","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"        commandHistorySelector.navigateToOnePastLast();","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText, model.getAddressBook());","lastModifiedDate":"2021-04-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        model.appendCommandHistoryEntry(commandText);","lastModifiedDate":"2021-03-09"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"        commandHistorySelector.navigateToOnePastLast();","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2021-03-13"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"            storage.saveCommandHistory(model.getCommandHistory());","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"    public ObservableList\u003cResident\u003e getFilteredResidentList() {","lastModifiedDate":"2021-03-05"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"        return model.getFilteredResidentList();","lastModifiedDate":"2021-03-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"    public ObservableList\u003cRoom\u003e getFilteredRoomList() {","lastModifiedDate":"2021-03-10"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"        return model.getFilteredRoomList();","lastModifiedDate":"2021-03-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"    public ObservableList\u003cIssue\u003e getFilteredIssueList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"        return model.getFilteredIssueList();","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":105,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":106,"author":{"gitId":"benedictkhoomw"},"content":"    public ReadOnlyCommandHistory getCommandHistory() {","lastModifiedDate":"2021-03-15"},{"lineNumber":107,"author":{"gitId":"benedictkhoomw"},"content":"        return model.getCommandHistory();","lastModifiedDate":"2021-03-15"},{"lineNumber":108,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":109,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":110,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":111,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandHistorySelector getCommandHistorySelector() {","lastModifiedDate":"2021-03-23"},{"lineNumber":112,"author":{"gitId":"benedictkhoomw"},"content":"        return commandHistorySelector;","lastModifiedDate":"2021-03-23"},{"lineNumber":113,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":114,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":115,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":116,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean canRedoAddressBook() {","lastModifiedDate":"2021-03-30"},{"lineNumber":117,"author":{"gitId":"benedictkhoomw"},"content":"        return model.canRedoAddressBook();","lastModifiedDate":"2021-03-30"},{"lineNumber":118,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":119,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":120,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":121,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean canUndoAddressBook() {","lastModifiedDate":"2021-03-30"},{"lineNumber":122,"author":{"gitId":"benedictkhoomw"},"content":"        return model.canUndoAddressBook();","lastModifiedDate":"2021-03-30"},{"lineNumber":123,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"benedictkhoomw":30,"cnlinh":2,"stein414":4,"colintkn":3,"-":81,"DrWala":4}},{"path":"src/main/java/seedu/address/logic/commandhistory/CommandHistorySelector.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.logic.commandhistory;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":" * Represents the logic of navigating command history.","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"public interface CommandHistorySelector {","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"     * Sets the currently \u0027selected\u0027 entry to one past the most recent entry.","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"     * A subsequent call to {@code selectPrevious} will select the last entry.","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    void navigateToOnePastLast();","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"     * Selects the next command text and returns it, if any. If the last entry is selected before","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"     * this method is called, then {@code Optional.empty()} will be returned. The one-past-last \u0027element\u0027","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"     * will be the current entry after this call.","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The next command text, if any.","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    Optional\u003cString\u003e selectNextUntilOnePastLast();","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"     * Selects the previous command text and returns it, if any. If the first entry is selected before this","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"     * method is called, then {@code Optional.of} the first entry will be returned, and remain selected","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     * after this call.","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The previous command text, if any.","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    Optional\u003cString\u003e selectPreviousUntilFirst();","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"benedictkhoomw":32}},{"path":"src/main/java/seedu/address/logic/commandhistory/SuppliedCommandHistorySelector.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.logic.commandhistory;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.function.Supplier;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.commons.util.MathUtil;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":" * An implementation of {@code CommandHistorySelector} that relies on a supplier of command history.","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"public class SuppliedCommandHistorySelector implements CommandHistorySelector {","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    private final Supplier\u003cReadOnlyCommandHistory\u003e commandHistorySupplier;","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    private int commandHistoryIndex;","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a {@code SuppliedCommandHistorySelector} that uses the input command history supplier","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"     * for selection.","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"     * @param commandHistorySupplier The supplier of command history.","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws NullPointerException If {@code commandHistorySupplier} is null.","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    public SuppliedCommandHistorySelector(Supplier\u003cReadOnlyCommandHistory\u003e commandHistorySupplier) {","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"        requireNonNull(commandHistorySupplier);","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        this.commandHistorySupplier \u003d commandHistorySupplier;","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"     * Sets the currently \u0027selected\u0027 entry to one past the most recent entry.","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"     * A subsequent call to {@code selectPrevious} will select the last entry.","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    public void navigateToOnePastLast() {","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        assert commandHistorySupplier !\u003d null \u0026\u0026 commandHistorySupplier.get() !\u003d null;","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        final int onePastLast \u003d commandHistorySupplier.get().size();","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        selectAt(onePastLast);","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"     * Selects the next command text and returns it, if any. If the last entry is selected before","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"     * this method is called, then {@code Optional.empty()} will be returned. The one-past-last \u0027element\u0027","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"     * will be the current entry after this call.","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The next command text, if any.","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"    public Optional\u003cString\u003e selectNextUntilOnePastLast() {","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"        return selectAt(commandHistoryIndex + 1);","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"     * Selects the previous command text and returns it, if any. If the first entry is selected before this","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"     * method is called, then {@code Optional.of} the first entry will be returned, and remain selected","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"     * after this call.","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The previous command text, if any.","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"    public Optional\u003cString\u003e selectPreviousUntilFirst() {","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"        return selectAt(commandHistoryIndex - 1);","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"     * Selects the command text at the given index and returns it, if any. The selection index will be","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"     * bound to the range [0, history size]. Only indices in the range [0, history size - 1] will return","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"     * valid entries. Outside that range, {@code Optional.empty()} is returned.","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"     * @param index The index to try to select.","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The entry at the index, if any.","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"    private Optional\u003cString\u003e selectAt(int index) {","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"        assert commandHistorySupplier !\u003d null \u0026\u0026 commandHistorySupplier.get() !\u003d null","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"                \u0026\u0026 commandHistorySupplier.get().size() \u003e\u003d 0;","lastModifiedDate":"2021-03-24"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"        final ReadOnlyCommandHistory history \u003d commandHistorySupplier.get();","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"        final int size \u003d history.size();","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"        commandHistoryIndex \u003d MathUtil.clamp(index, 0, size);","lastModifiedDate":"2021-03-23"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"        if (commandHistoryIndex \u003e\u003d size) {","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"        return Optional.of(history.get(commandHistoryIndex).value);","lastModifiedDate":"2021-03-23"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"benedictkhoomw":85}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"SunRez has been cleared!\";","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"        model.commitAddressBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"benedictkhoomw":1,"-":22,"DrWala":1}},{"path":"src/main/java/seedu/address/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"     * Help information should be shown to the user.","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    private final boolean shouldShowHelp;","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"     * The application should exit.","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    private final boolean shouldExit;","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"     * Constructs a simpler CommandResult which assumes that the command is neither a resident nor room command.","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"     * The command therefore can only be a help or exit command.","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"     * @param feedbackToUser Feedback string to return to user.","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     * @param shouldShowHelp Indication if command is a help command.","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     * @param shouldExit Indication if command is an exit command.","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult(String feedbackToUser, boolean shouldShowHelp, boolean shouldExit) {","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"        this.shouldShowHelp \u003d shouldShowHelp;","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        this.shouldExit \u003d shouldExit;","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false);","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        return shouldShowHelp;","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"        return shouldExit;","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"                \u0026\u0026 shouldShowHelp \u003d\u003d otherCommandResult.shouldShowHelp","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"                \u0026\u0026 shouldExit \u003d\u003d otherCommandResult.shouldExit;","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"        return Objects.hash(feedbackToUser, shouldShowHelp, shouldExit);","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"benedictkhoomw":12,"-":58,"DrWala":10}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting SunRez as requested ...\";","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"benedictkhoomw":1,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/alias/AliasCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"//Solution below adapted from https://github.com/briyanii/main","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"package seedu.address.logic.commands.alias;","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"/**","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":" * Sets a shortcut command for a longer command.","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":" */","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"public class AliasCommand extends Command {","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"    public static final String COMMAND_WORD \u003d \"alias\";","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets a shortcut command for a longer command.\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"            + \"Parameters: a/ALIAS cmd/COMMAND\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"            + \"Example: \" + COMMAND_WORD + \" a/rl cmd/rlist\";","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_SUCCESS_NEW \u003d \"Alias created: %1$s\";","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_SUCCESS_UPDATED \u003d \"Alias updated: %1$s\";","lastModifiedDate":"2021-04-06"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_RESERVED_KEYWORD \u003d","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"            \"%1$s is a reserved keyword and cannot be used as an alias\";","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_RECURSIVE \u003d","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"            \"Recursive alias is not allowed\";","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AliasCommand.class);","lastModifiedDate":"2021-04-08"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"    private final Alias alias;","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"     * Creates an AliasCommand object.","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"     * The field must not be null.","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"     * @param alias Alias object.","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"     * @throws NullPointerException If the input is null.","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"    public AliasCommand(Alias alias) {","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"        requireAllNonNull(alias);","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"        this.alias \u003d alias;","lastModifiedDate":"2021-03-13"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"     * Executes an AliasCommand to create a new Alias.","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"     * @return Result of command execution.","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"     * @throws CommandException If input is invalid.","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"     * @throws NullPointerException If the input is null.","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-13"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"        requireAllNonNull(model);","lastModifiedDate":"2021-03-13"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"        // if the command word is a reserved keyword","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"        String aliasName \u003d alias.getAliasName();","lastModifiedDate":"2021-03-13"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"        assert aliasName !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":"        if (model.getAliasMapping().isReservedKeyword(aliasName)) {","lastModifiedDate":"2021-04-06"},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"            logger.warning(\"Reserved keyword for alias name given\");","lastModifiedDate":"2021-04-08"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"            throw new CommandException(String.format(MESSAGE_RESERVED_KEYWORD, aliasName));","lastModifiedDate":"2021-03-13"},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"        boolean isExisting \u003d model.getAliasMapping().containsAlias(aliasName);","lastModifiedDate":"2021-04-06"},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"        // if the command word is recursive keyword","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":"        String commandWord \u003d alias.getCommand().stripLeading().split(\"\\\\s+\")[0];","lastModifiedDate":"2021-03-13"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":"        assert commandWord !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":77,"author":{"gitId":"cnlinh"},"content":"        if (commandWord.equals(aliasName)","lastModifiedDate":"2021-03-16"},{"lineNumber":78,"author":{"gitId":"cnlinh"},"content":"                || commandWord.equals(COMMAND_WORD)","lastModifiedDate":"2021-03-16"},{"lineNumber":79,"author":{"gitId":"cnlinh"},"content":"                || model.getAliasMapping().isRecursiveKeyword(commandWord)) {","lastModifiedDate":"2021-04-06"},{"lineNumber":80,"author":{"gitId":"cnlinh"},"content":"            logger.warning(\"Recursive alias given\");","lastModifiedDate":"2021-04-08"},{"lineNumber":81,"author":{"gitId":"cnlinh"},"content":"            throw new CommandException(MESSAGE_RECURSIVE);","lastModifiedDate":"2021-03-13"},{"lineNumber":82,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":83,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":84,"author":{"gitId":"cnlinh"},"content":"        // update model","lastModifiedDate":"2021-03-26"},{"lineNumber":85,"author":{"gitId":"cnlinh"},"content":"        model.addAlias(alias);","lastModifiedDate":"2021-03-13"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"        model.commitAddressBook();","lastModifiedDate":"2021-04-07"},{"lineNumber":87,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":88,"author":{"gitId":"cnlinh"},"content":"        if (isExisting) {","lastModifiedDate":"2021-04-06"},{"lineNumber":89,"author":{"gitId":"cnlinh"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS_UPDATED, alias.getAliasName()));","lastModifiedDate":"2021-04-06"},{"lineNumber":90,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":91,"author":{"gitId":"cnlinh"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS_NEW, alias.getAliasName()));","lastModifiedDate":"2021-04-06"},{"lineNumber":92,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":93,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":94,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":95,"author":{"gitId":"cnlinh"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-03-13"},{"lineNumber":96,"author":{"gitId":"cnlinh"},"content":"        return obj \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-13"},{"lineNumber":97,"author":{"gitId":"cnlinh"},"content":"                || (obj instanceof AliasCommand // instanceof handles nulls","lastModifiedDate":"2021-03-13"},{"lineNumber":98,"author":{"gitId":"cnlinh"},"content":"                \u0026\u0026 this.alias.equals(((AliasCommand) obj).alias));","lastModifiedDate":"2021-03-13"},{"lineNumber":99,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":100,"author":{"gitId":"cnlinh"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"cnlinh":99,"benedictkhoomw":1}},{"path":"src/main/java/seedu/address/logic/commands/alias/ListAliasCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package seedu.address.logic.commands.alias;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.AliasMapping;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":" * Lists all current aliases.","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"public class ListAliasCommand extends Command {","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"    public static final String COMMAND_WORD \u003d \"aliases\";","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List all user-defined aliases.\";","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_EMPTY_ALIAS \u003d \"No aliases have been created yet.\";","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_SUCCESS_HEADER \u003d \"All %d aliases listed: \\n\";","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"     * Executes an ListAliasCommand to list all aliases.","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"     * @return Result of command execution.","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"     * @throws CommandException If input is invalid.","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"     * @throws NullPointerException If the input is null.","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"        AliasMapping mapping \u003d model.getAliasMapping();","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"        assert mapping !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"        int aliasCount \u003d mapping.size();","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"        assert aliasCount \u003e\u003d 0;","lastModifiedDate":"2021-04-08"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"        if (aliasCount \u003d\u003d 0) {","lastModifiedDate":"2021-04-08"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"            return new CommandResult(MESSAGE_EMPTY_ALIAS);","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"        StringBuilder msg \u003d new StringBuilder();","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"        msg.append(String.format(MESSAGE_SUCCESS_HEADER, aliasCount));","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"        msg.append(model.getAliasMapping().toString());","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"        return new CommandResult(msg.toString());","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"        return other instanceof ListAliasCommand;","lastModifiedDate":"2021-03-26"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"cnlinh":56}},{"path":"src/main/java/seedu/address/logic/commands/alias/UnaliasCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package seedu.address.logic.commands.alias;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"/**","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":" * Deletes the alias with the specified name.","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":" */","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"public class UnaliasCommand extends Command {","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    public static final String COMMAND_WORD \u003d \"unalias\";","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete alias with the specified name.\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"            + \"Parameters: a/ALIAS\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"            + \"Example: unalias a/findBob\";","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Alias deleted: %1$s\";","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Alias not found\";","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(UnaliasCommand.class);","lastModifiedDate":"2021-04-08"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"    private String aliasName;","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"     * Creates an UnaliasCommand with the specified {@code aliasName}.","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"     * The field must not be null.","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName Name of the alias.","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"     * @throws NullPointerException If the input is null.","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"    public UnaliasCommand(String aliasName) {","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"        requireNonNull(aliasName);","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"        this.aliasName \u003d aliasName.trim();","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"     * Executes an UnaliasCommand to delete an Alias.","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"     * @return Result of command execution.","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"     * @throws CommandException If input is invalid.","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"     * @throws NullPointerException If the input is null.","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-26"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"        assert aliasName !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"        // if no alias with the specified name is found","lastModifiedDate":"2021-03-26"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"        if (!model.getAliasMapping().containsAlias(aliasName)) {","lastModifiedDate":"2021-04-06"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"            logger.warning(\"An unknown alias name given entered\");","lastModifiedDate":"2021-04-08"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"            throw new CommandException(String.format(MESSAGE_FAILURE, aliasName));","lastModifiedDate":"2021-03-26"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"        //update model","lastModifiedDate":"2021-03-26"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"        model.deleteAlias(aliasName);","lastModifiedDate":"2021-03-26"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"        model.commitAddressBook();","lastModifiedDate":"2021-04-07"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, aliasName));","lastModifiedDate":"2021-03-26"},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-03-26"},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"        return obj \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-26"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"                || (obj instanceof UnaliasCommand // instanceof handles nulls","lastModifiedDate":"2021-03-26"},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":"                \u0026\u0026 this.aliasName.trim().equals(((UnaliasCommand) obj).aliasName.trim()));","lastModifiedDate":"2021-03-26"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"cnlinh":75,"benedictkhoomw":1}},{"path":"src/main/java/seedu/address/logic/commands/commandhistory/ViewHistoryCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.logic.commands.commandhistory;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":" * Displays the most recent commands entered to the user.","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"public class ViewHistoryCommand extends Command {","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String COMMAND_WORD \u003d \"history\";","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"            + \": Displays the COUNT most recent commands entered. \"","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"            + \"If COUNT is not specified, then it displays all commands entered.\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"            + \"Parameters: COUNT (optional, must be a positive integer)\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"            + \"Example: \" + COMMAND_WORD + \" 5\";","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_INVALID_COUNT \u003d \"The provided COUNT is invalid. \"","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"            + \"Valid range: %d to %d (inclusive)\";","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_EMPTY_HISTORY \u003d \"No non-empty commands have been entered yet.\";","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_HEADER_SUCCESS \u003d \"Last %d command(s):\\n\";","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_ENTRY_FORMAT \u003d \"%d:\\t%s\\n\";","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"    private final Optional\u003cInteger\u003e optCount;","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a new {@code ViewHistoryCommand} with the given number of entries to display.","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"     * @param count The number of entries to display.","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"    public ViewHistoryCommand(int count) {","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        optCount \u003d Optional.of(count);","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a new {@code ViewHistoryCommand} that displays the entire command history.","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"    public ViewHistoryCommand() {","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        optCount \u003d Optional.empty();","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"                || (other instanceof ViewHistoryCommand // instanceof handles nulls","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"                \u0026\u0026 optCount.equals(((ViewHistoryCommand) other).optCount)); // state check","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"     * Displays the requested number of command history entries.","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A {@code CommandResult} with the command history to display.","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws CommandException     If the {@code count} this command was constructed with is out of range.","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws NullPointerException If {@code model} is null.","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"        ReadOnlyCommandHistory history \u003d model.getCommandHistory();","lastModifiedDate":"2021-03-23"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"        assert history !\u003d null;","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"        assert history.size() \u003e\u003d 0;","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"        if (history.size() \u003d\u003d 0) {","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"            return new CommandResult(MESSAGE_EMPTY_HISTORY);","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"        assert optCount !\u003d null;","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"        int count \u003d optCount.orElse(history.size());","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"        if (count \u003c\u003d 0 || count \u003e history.size()) {","lastModifiedDate":"2021-03-23"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"            throw new CommandException(String.format(MESSAGE_INVALID_COUNT, 1, history.size()));","lastModifiedDate":"2021-03-23"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"        StringBuilder msg \u003d new StringBuilder();","lastModifiedDate":"2021-03-23"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"        msg.append(String.format(MESSAGE_HEADER_SUCCESS, count));","lastModifiedDate":"2021-03-23"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d history.size() - 1; i \u003e\u003d history.size() - count; i--) {","lastModifiedDate":"2021-03-23"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"            assert history.get(i) !\u003d null \u0026\u0026 history.get(i).value !\u003d null;","lastModifiedDate":"2021-03-24"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"            final int entryNum \u003d i + 1;","lastModifiedDate":"2021-03-23"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"            final String entryText \u003d history.get(i).toString();","lastModifiedDate":"2021-03-23"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"            msg.append(String.format(MESSAGE_ENTRY_FORMAT, entryNum, entryText));","lastModifiedDate":"2021-03-23"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(msg.toString());","lastModifiedDate":"2021-03-23"},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"benedictkhoomw":98}},{"path":"src/main/java/seedu/address/logic/commands/issue/AddIssueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-04-08"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":" * Adds a issue to the address book.","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"public class AddIssueCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    public static final String COMMAND_WORD \u003d \"iadd\";","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an issue to SunRez. \"","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"            + PREFIX_ROOM_NUMBER + \"ROOM_NO \"","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \"","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"            + \"[\" + PREFIX_TIMESTAMP + \"TIMESTAMP] \"","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"            + \"[\" + PREFIX_STATUS + \"STATUS] \"","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"            + \"[\" + PREFIX_CATEGORY + \"CATEGORY] \"","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"            + \"[\" + PREFIX_TAG + \"TAG] \\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"            + PREFIX_ROOM_NUMBER + \"10-100 \"","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"            + PREFIX_DESCRIPTION + \"Broken light \"","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"            + PREFIX_TIMESTAMP + \"2020/01/12 03:30pm \"","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"            + PREFIX_STATUS + \"pending \"","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"            + PREFIX_CATEGORY + \"furniture \"","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"            + PREFIX_TAG + \"HIGH\";","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New issue added: %1$s\";","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_NO_SUCH_ROOM \u003d \"There is no such room\";","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_DUPLICATE_ISSUE \u003d \"This issue already exists in SunRez\";","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AddIssueCommand.class);","lastModifiedDate":"2021-04-08"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"    private final Issue toAdd;","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"     * Creates an AddIssueCommand to add the specified {@code issue}.","lastModifiedDate":"2021-04-08"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"     * @param issue The issue to add.","lastModifiedDate":"2021-04-08"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code issue} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"    public AddIssueCommand(Issue issue) {","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"        requireNonNull(issue);","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"        toAdd \u003d issue;","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-04-08"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"     * Executes an AddIssuecommand to add an issue.","lastModifiedDate":"2021-04-08"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-04-08"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"     * @return Result of command execution.","lastModifiedDate":"2021-04-08"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"     * @throws CommandException     If {@code model} is invalid.","lastModifiedDate":"2021-04-08"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If the {@code model} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-04-08"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"        if (!model.hasRoom(new seedu.address.model.room.RoomNumber(toAdd.getRoomNumber().value))) {","lastModifiedDate":"2021-04-01"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"            logger.warning(\"Non existent room given to iadd command\");","lastModifiedDate":"2021-04-08"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"            throw new CommandException(MESSAGE_NO_SUCH_ROOM);","lastModifiedDate":"2021-04-01"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"        if (model.hasIssue(toAdd)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"            logger.warning(\"Duplicate issue given to iadd command\");","lastModifiedDate":"2021-04-08"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ISSUE);","lastModifiedDate":"2021-03-31"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"        model.addIssue(toAdd);","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"        model.commitAddressBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"                || (other instanceof AddIssueCommand // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 toAdd.equals(((AddIssueCommand) other).toAdd));","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"cnlinh":5,"benedictkhoomw":1,"stein414":90}},{"path":"src/main/java/seedu/address/logic/commands/issue/CloseIssueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import java.util.List;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.IssueStatus;","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":" * Closes a issue identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"public class CloseIssueCommand extends Command {","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public static final String COMMAND_WORD \u003d \"iclo\";","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"            + \": Closes the issue identified by the index number used in the displayed issue list.\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_CLOSE_ISSUE_SUCCESS \u003d \"Closed Issue: %1$s\";","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_CLOSE_ISSUE_CLOSED \u003d \"Issue has already been closed.\";","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CloseIssueCommand.class);","lastModifiedDate":"2021-04-08"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"     * Creates a CloseIssueCommand to close the specified issue at {@code targetIndex}.","lastModifiedDate":"2021-04-08"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"     * @param targetIndex Target index of the issue in the filtered issue list to close.","lastModifiedDate":"2021-04-08"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code targetIndex} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-04-08"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    public CloseIssueCommand(Index targetIndex) {","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"        requireNonNull(targetIndex);","lastModifiedDate":"2021-04-08"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"     * Executes an CloseIssuecommand to set the status of the targeted issue to Closed.","lastModifiedDate":"2021-04-08"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-04-08"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"     * @return Result of command execution.","lastModifiedDate":"2021-04-08"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"     * @throws CommandException     If {@code model} is invalid.","lastModifiedDate":"2021-04-08"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If the {@code model} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-04-08"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-26"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-26"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"        List\u003cIssue\u003e lastShownList \u003d model.getFilteredIssueList();","lastModifiedDate":"2021-03-26"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-26"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"            logger.warning(\"Provided index was more than current list size\");","lastModifiedDate":"2021-04-08"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-26"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"        Issue issueToClose \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-26"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"        assert issueToClose !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"        if (issueToClose.getStatus().value \u003d\u003d IssueStatus.Closed) {","lastModifiedDate":"2021-03-26"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"            logger.warning(\"Issue to close is already closed\");","lastModifiedDate":"2021-04-08"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"            throw new CommandException(MESSAGE_CLOSE_ISSUE_CLOSED);","lastModifiedDate":"2021-03-26"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"        model.closeIssue(issueToClose);","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"        model.commitAddressBook();","lastModifiedDate":"2021-04-02"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"        return new CommandResult(String.format(MESSAGE_CLOSE_ISSUE_SUCCESS, issueToClose));","lastModifiedDate":"2021-03-26"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-26"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-26"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"                || (other instanceof CloseIssueCommand // instanceof handles nulls","lastModifiedDate":"2021-03-26"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 targetIndex.equals(((CloseIssueCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-03-26"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"benedictkhoomw":1,"stein414":85}},{"path":"src/main/java/seedu/address/logic/commands/issue/DeleteIssueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import java.util.List;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":" * Deletes a issue identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"public class DeleteIssueCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    public static final String COMMAND_WORD \u003d \"idel\";","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"            + \": Deletes the issue identified by the index number used in the displayed issue list.\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_DELETE_ISSUE_SUCCESS \u003d \"Deleted Issue: %1$s\";","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(DeleteIssueCommand.class);","lastModifiedDate":"2021-04-08"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-04-08"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"     * Creates a DeleteIssueCommand to delete the specified issue at {@code targetIndex}.","lastModifiedDate":"2021-04-08"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"     * @param targetIndex Target index of the issue in the filtered issue list to delete.","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code targetIndex} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-04-08"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"    public DeleteIssueCommand(Index targetIndex) {","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"        requireNonNull(targetIndex);","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-04-08"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"     * Executes an DeleteIssuecommand to delete a targeted issue.","lastModifiedDate":"2021-04-08"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"     * @return Result of command execution.","lastModifiedDate":"2021-04-08"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"     * @throws CommandException     If {@code model} is invalid.","lastModifiedDate":"2021-04-08"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If the {@code model} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-04-08"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"        List\u003cIssue\u003e lastShownList \u003d model.getFilteredIssueList();","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"            logger.warning(\"Provided index was more than current list size\");","lastModifiedDate":"2021-04-08"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"        Issue issueToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"        assert issueToDelete !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"        model.deleteIssue(issueToDelete);","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"        model.commitAddressBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_ISSUE_SUCCESS, issueToDelete));","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"                || (other instanceof DeleteIssueCommand // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 targetIndex.equals(((DeleteIssueCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"benedictkhoomw":1,"stein414":77}},{"path":"src/main/java/seedu/address/logic/commands/issue/EditIssueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ISSUES;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import java.util.List;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-04-08"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Category;","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Description;","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.RoomNumber;","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Status;","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Timestamp;","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":" * Edits the details of an existing issue in the address book.","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"public class EditIssueCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"    public static final String COMMAND_WORD \u003d \"iedit\";","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the issue identified \"","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"            + \"by the index number used in the displayed issue list. \"","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"            + \"[\" + PREFIX_ROOM_NUMBER + \"ROOM_NO] \"","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \"","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"            + \"[\" + PREFIX_TIMESTAMP + \"TIMESTAMP] \"","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"            + \"[\" + PREFIX_STATUS + \"STATUS] \"","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]\"","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"            + PREFIX_DESCRIPTION + \"Broken window \"","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"            + PREFIX_CATEGORY + \"Window\";","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_EDIT_ISSUE_SUCCESS \u003d \"Edited Issue: %1$s\";","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_NO_SUCH_ROOM \u003d \"There is no such room\";","lastModifiedDate":"2021-04-01"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_DUPLICATE_ISSUE \u003d \"This issue already exists in SunRez.\";","lastModifiedDate":"2021-04-05"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EditIssueCommand.class);","lastModifiedDate":"2021-04-08"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"    private final Index index;","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"    private final EditIssueDescriptor editIssueDescriptor;","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"     * Creates an EditIssueCommand to edit the specified issue at {@code targetIndex} to the new Issue described by","lastModifiedDate":"2021-04-08"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"     * {@code editIssueDescriptor}.","lastModifiedDate":"2021-04-08"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"     * @param index               Index of the issue in the filtered issue list to edit.","lastModifiedDate":"2021-04-08"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"     * @param editIssueDescriptor Description of the updated issue.","lastModifiedDate":"2021-04-08"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code index} or {@code editIssueDescriptor} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"    public EditIssueCommand(Index index, EditIssueDescriptor editIssueDescriptor) {","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"        requireNonNull(editIssueDescriptor);","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"        this.editIssueDescriptor \u003d new EditIssueDescriptor(editIssueDescriptor);","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-04-08"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"     * Executes an EditIssuecommand to replace a targeted issue with a new issue.","lastModifiedDate":"2021-04-08"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"     * @param model The {@code model} which the command should operate on.","lastModifiedDate":"2021-04-08"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"     * @return Result of command execution.","lastModifiedDate":"2021-04-08"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"     * @throws CommandException     If {@code model} is invalid.","lastModifiedDate":"2021-04-08"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If the {@code model} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-04-08"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"        List\u003cIssue\u003e lastShownList \u003d model.getFilteredIssueList();","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"            logger.warning(\"Provided index was more than current list size\");","lastModifiedDate":"2021-04-08"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-16"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"        Issue issueToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-15"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"        assert issueToEdit !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"        Issue editedIssue \u003d createEditedIssue(issueToEdit, editIssueDescriptor);","lastModifiedDate":"2021-03-15"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"        assert editedIssue !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":104,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":105,"author":{"gitId":"stein414"},"content":"        if (!model.hasRoom(new seedu.address.model.room.RoomNumber(editedIssue.getRoomNumber().value))) {","lastModifiedDate":"2021-04-01"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":"            logger.warning(\"Non existent room given to iadd command\");","lastModifiedDate":"2021-04-08"},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"            throw new CommandException(MESSAGE_NO_SUCH_ROOM);","lastModifiedDate":"2021-04-01"},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":109,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":110,"author":{"gitId":"stein414"},"content":"        if (!issueToEdit.equals(editedIssue) \u0026\u0026 model.hasIssue(editedIssue)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":111,"author":{"gitId":"stein414"},"content":"            logger.warning(\"Duplicate issue given to iadd command\");","lastModifiedDate":"2021-04-08"},{"lineNumber":112,"author":{"gitId":"stein414"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ISSUE);","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":114,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":"        model.setIssue(issueToEdit, editedIssue);","lastModifiedDate":"2021-03-15"},{"lineNumber":116,"author":{"gitId":"stein414"},"content":"        model.updateFilteredIssueList(PREDICATE_SHOW_ALL_ISSUES);","lastModifiedDate":"2021-03-15"},{"lineNumber":117,"author":{"gitId":"benedictkhoomw"},"content":"        model.commitAddressBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":118,"author":{"gitId":"stein414"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_ISSUE_SUCCESS, editedIssue));","lastModifiedDate":"2021-03-15"},{"lineNumber":119,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":120,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":121,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":122,"author":{"gitId":"stein414"},"content":"     * Creates and returns an {@code Issue} with the details of {@code issueToEdit}","lastModifiedDate":"2021-04-08"},{"lineNumber":123,"author":{"gitId":"stein414"},"content":"     * edited with {@code editIssueDescriptor}.","lastModifiedDate":"2021-03-15"},{"lineNumber":124,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":125,"author":{"gitId":"stein414"},"content":"    private static Issue createEditedIssue(Issue issueToEdit, EditIssueDescriptor editIssueDescriptor) {","lastModifiedDate":"2021-03-15"},{"lineNumber":126,"author":{"gitId":"stein414"},"content":"        requireNonNull(issueToEdit);","lastModifiedDate":"2021-04-08"},{"lineNumber":127,"author":{"gitId":"stein414"},"content":"        requireNonNull(editIssueDescriptor);","lastModifiedDate":"2021-04-08"},{"lineNumber":128,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":129,"author":{"gitId":"stein414"},"content":"        RoomNumber updatedRoomNumber \u003d editIssueDescriptor.getRoomNumber().orElse(issueToEdit.getRoomNumber());","lastModifiedDate":"2021-03-15"},{"lineNumber":130,"author":{"gitId":"stein414"},"content":"        Description updatedDescription \u003d editIssueDescriptor.getDescription()","lastModifiedDate":"2021-03-15"},{"lineNumber":131,"author":{"gitId":"stein414"},"content":"                .orElse(issueToEdit.getDescription());","lastModifiedDate":"2021-03-15"},{"lineNumber":132,"author":{"gitId":"stein414"},"content":"        Timestamp updatedTimestamp \u003d editIssueDescriptor.getTimestamp().orElse(issueToEdit.getTimestamp());","lastModifiedDate":"2021-03-15"},{"lineNumber":133,"author":{"gitId":"stein414"},"content":"        Status updatedStatus \u003d editIssueDescriptor.getStatus().orElse(issueToEdit.getStatus());","lastModifiedDate":"2021-03-15"},{"lineNumber":134,"author":{"gitId":"stein414"},"content":"        Category updatedCategory \u003d editIssueDescriptor.getCategory().orElse(issueToEdit.getCategory());","lastModifiedDate":"2021-03-15"},{"lineNumber":135,"author":{"gitId":"cnlinh"},"content":"        Set\u003cTag\u003e updatedTags \u003d editIssueDescriptor.getTags().orElse(issueToEdit.getTags());","lastModifiedDate":"2021-03-26"},{"lineNumber":136,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":137,"author":{"gitId":"cnlinh"},"content":"        return new Issue(updatedRoomNumber, updatedDescription, updatedTimestamp, updatedStatus, updatedCategory,","lastModifiedDate":"2021-03-26"},{"lineNumber":138,"author":{"gitId":"cnlinh"},"content":"                updatedTags);","lastModifiedDate":"2021-03-26"},{"lineNumber":139,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":140,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":141,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":142,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":143,"author":{"gitId":"stein414"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":144,"author":{"gitId":"stein414"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-15"},{"lineNumber":145,"author":{"gitId":"stein414"},"content":"            return true;","lastModifiedDate":"2021-03-15"},{"lineNumber":146,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":147,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":148,"author":{"gitId":"stein414"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":149,"author":{"gitId":"stein414"},"content":"        if (!(other instanceof EditIssueCommand)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":150,"author":{"gitId":"stein414"},"content":"            return false;","lastModifiedDate":"2021-03-15"},{"lineNumber":151,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":152,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":153,"author":{"gitId":"stein414"},"content":"        // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":154,"author":{"gitId":"stein414"},"content":"        EditIssueCommand e \u003d (EditIssueCommand) other;","lastModifiedDate":"2021-03-15"},{"lineNumber":155,"author":{"gitId":"stein414"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-03-15"},{"lineNumber":156,"author":{"gitId":"stein414"},"content":"                \u0026\u0026 editIssueDescriptor.equals(e.editIssueDescriptor);","lastModifiedDate":"2021-03-15"},{"lineNumber":157,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":158,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":159,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":160,"author":{"gitId":"stein414"},"content":"     * Stores the details to edit the issue with. Each non-empty field value will replace the","lastModifiedDate":"2021-03-15"},{"lineNumber":161,"author":{"gitId":"stein414"},"content":"     * corresponding field value of the issue.","lastModifiedDate":"2021-03-15"},{"lineNumber":162,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":163,"author":{"gitId":"stein414"},"content":"    public static class EditIssueDescriptor {","lastModifiedDate":"2021-03-15"},{"lineNumber":164,"author":{"gitId":"stein414"},"content":"        private RoomNumber roomNumber;","lastModifiedDate":"2021-03-15"},{"lineNumber":165,"author":{"gitId":"stein414"},"content":"        private Description description;","lastModifiedDate":"2021-03-15"},{"lineNumber":166,"author":{"gitId":"stein414"},"content":"        private Timestamp timestamp;","lastModifiedDate":"2021-03-15"},{"lineNumber":167,"author":{"gitId":"stein414"},"content":"        private Status status;","lastModifiedDate":"2021-03-15"},{"lineNumber":168,"author":{"gitId":"stein414"},"content":"        private Category category;","lastModifiedDate":"2021-03-15"},{"lineNumber":169,"author":{"gitId":"cnlinh"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2021-03-26"},{"lineNumber":170,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":171,"author":{"gitId":"stein414"},"content":"        public EditIssueDescriptor() {","lastModifiedDate":"2021-03-15"},{"lineNumber":172,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":173,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":174,"author":{"gitId":"stein414"},"content":"        /**","lastModifiedDate":"2021-03-15"},{"lineNumber":175,"author":{"gitId":"stein414"},"content":"         * Copy constructor.","lastModifiedDate":"2021-03-15"},{"lineNumber":176,"author":{"gitId":"stein414"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-03-15"},{"lineNumber":177,"author":{"gitId":"stein414"},"content":"         */","lastModifiedDate":"2021-03-15"},{"lineNumber":178,"author":{"gitId":"stein414"},"content":"        public EditIssueDescriptor(EditIssueDescriptor toCopy) {","lastModifiedDate":"2021-03-15"},{"lineNumber":179,"author":{"gitId":"stein414"},"content":"            requireNonNull(toCopy);","lastModifiedDate":"2021-04-08"},{"lineNumber":180,"author":{"gitId":"stein414"},"content":"            setRoomNumber(toCopy.roomNumber);","lastModifiedDate":"2021-03-15"},{"lineNumber":181,"author":{"gitId":"stein414"},"content":"            setDescription(toCopy.description);","lastModifiedDate":"2021-03-15"},{"lineNumber":182,"author":{"gitId":"stein414"},"content":"            setTimestamp(toCopy.timestamp);","lastModifiedDate":"2021-03-15"},{"lineNumber":183,"author":{"gitId":"stein414"},"content":"            setStatus(toCopy.status);","lastModifiedDate":"2021-03-15"},{"lineNumber":184,"author":{"gitId":"stein414"},"content":"            setCategory(toCopy.category);","lastModifiedDate":"2021-03-15"},{"lineNumber":185,"author":{"gitId":"cnlinh"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2021-03-26"},{"lineNumber":186,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":187,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":188,"author":{"gitId":"stein414"},"content":"        /**","lastModifiedDate":"2021-03-15"},{"lineNumber":189,"author":{"gitId":"stein414"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-03-15"},{"lineNumber":190,"author":{"gitId":"stein414"},"content":"         */","lastModifiedDate":"2021-03-15"},{"lineNumber":191,"author":{"gitId":"stein414"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-03-15"},{"lineNumber":192,"author":{"gitId":"cnlinh"},"content":"            return CollectionUtil.isAnyNonNull(roomNumber, description, timestamp, status, category, tags);","lastModifiedDate":"2021-03-26"},{"lineNumber":193,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":194,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":195,"author":{"gitId":"stein414"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":196,"author":{"gitId":"stein414"},"content":"         * Sets {@code roomNumber} to this object\u0027s {@code roomNumber}.","lastModifiedDate":"2021-04-08"},{"lineNumber":197,"author":{"gitId":"stein414"},"content":"         *","lastModifiedDate":"2021-04-08"},{"lineNumber":198,"author":{"gitId":"stein414"},"content":"         * @param roomNumber The new room number.","lastModifiedDate":"2021-04-08"},{"lineNumber":199,"author":{"gitId":"stein414"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":200,"author":{"gitId":"stein414"},"content":"        public void setRoomNumber(RoomNumber roomNumber) {","lastModifiedDate":"2021-04-08"},{"lineNumber":201,"author":{"gitId":"stein414"},"content":"            this.roomNumber \u003d roomNumber;","lastModifiedDate":"2021-04-08"},{"lineNumber":202,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":203,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":204,"author":{"gitId":"stein414"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":205,"author":{"gitId":"stein414"},"content":"         * Returns an immutable room number.","lastModifiedDate":"2021-04-08"},{"lineNumber":206,"author":{"gitId":"stein414"},"content":"         * Returns {@code Optional#empty()} if {@code roomNumber} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":207,"author":{"gitId":"stein414"},"content":"         *","lastModifiedDate":"2021-04-08"},{"lineNumber":208,"author":{"gitId":"stein414"},"content":"         * @return RoomNumber of the issue.","lastModifiedDate":"2021-04-08"},{"lineNumber":209,"author":{"gitId":"stein414"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":210,"author":{"gitId":"stein414"},"content":"        public Optional\u003cRoomNumber\u003e getRoomNumber() {","lastModifiedDate":"2021-03-15"},{"lineNumber":211,"author":{"gitId":"stein414"},"content":"            return Optional.ofNullable(roomNumber);","lastModifiedDate":"2021-03-15"},{"lineNumber":212,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":213,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":214,"author":{"gitId":"stein414"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":215,"author":{"gitId":"stein414"},"content":"         * Sets {@code description} to this object\u0027s {@code description}.","lastModifiedDate":"2021-04-08"},{"lineNumber":216,"author":{"gitId":"stein414"},"content":"         *","lastModifiedDate":"2021-04-08"},{"lineNumber":217,"author":{"gitId":"stein414"},"content":"         * @param description The new description.","lastModifiedDate":"2021-04-08"},{"lineNumber":218,"author":{"gitId":"stein414"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":219,"author":{"gitId":"stein414"},"content":"        public void setDescription(Description description) {","lastModifiedDate":"2021-04-08"},{"lineNumber":220,"author":{"gitId":"stein414"},"content":"            this.description \u003d description;","lastModifiedDate":"2021-04-08"},{"lineNumber":221,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":222,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":223,"author":{"gitId":"stein414"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":224,"author":{"gitId":"stein414"},"content":"         * Returns an immutable description.","lastModifiedDate":"2021-04-08"},{"lineNumber":225,"author":{"gitId":"stein414"},"content":"         * Returns {@code Optional#empty()} if {@code description} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":226,"author":{"gitId":"stein414"},"content":"         *","lastModifiedDate":"2021-04-08"},{"lineNumber":227,"author":{"gitId":"stein414"},"content":"         * @return Description of the issue.","lastModifiedDate":"2021-04-08"},{"lineNumber":228,"author":{"gitId":"stein414"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":229,"author":{"gitId":"stein414"},"content":"        public Optional\u003cDescription\u003e getDescription() {","lastModifiedDate":"2021-03-15"},{"lineNumber":230,"author":{"gitId":"stein414"},"content":"            return Optional.ofNullable(description);","lastModifiedDate":"2021-03-15"},{"lineNumber":231,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":232,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":233,"author":{"gitId":"stein414"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":234,"author":{"gitId":"stein414"},"content":"         * Sets {@code timestamp} to this object\u0027s {@code timestamp}.","lastModifiedDate":"2021-04-08"},{"lineNumber":235,"author":{"gitId":"stein414"},"content":"         *","lastModifiedDate":"2021-04-08"},{"lineNumber":236,"author":{"gitId":"stein414"},"content":"         * @param timestamp The new timestamp.","lastModifiedDate":"2021-04-08"},{"lineNumber":237,"author":{"gitId":"stein414"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":238,"author":{"gitId":"stein414"},"content":"        public void setTimestamp(Timestamp timestamp) {","lastModifiedDate":"2021-04-08"},{"lineNumber":239,"author":{"gitId":"stein414"},"content":"            this.timestamp \u003d timestamp;","lastModifiedDate":"2021-04-08"},{"lineNumber":240,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":241,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":242,"author":{"gitId":"stein414"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":243,"author":{"gitId":"stein414"},"content":"         * Returns an immutable timestamp.","lastModifiedDate":"2021-04-08"},{"lineNumber":244,"author":{"gitId":"stein414"},"content":"         * Returns {@code Optional#empty()} if {@code timestamp} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":245,"author":{"gitId":"stein414"},"content":"         *","lastModifiedDate":"2021-04-08"},{"lineNumber":246,"author":{"gitId":"stein414"},"content":"         * @return Timestamp of the issue.","lastModifiedDate":"2021-04-08"},{"lineNumber":247,"author":{"gitId":"stein414"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":248,"author":{"gitId":"stein414"},"content":"        public Optional\u003cTimestamp\u003e getTimestamp() {","lastModifiedDate":"2021-03-15"},{"lineNumber":249,"author":{"gitId":"stein414"},"content":"            return Optional.ofNullable(timestamp);","lastModifiedDate":"2021-03-15"},{"lineNumber":250,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":251,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":252,"author":{"gitId":"stein414"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":253,"author":{"gitId":"stein414"},"content":"         * Sets {@code status} to this object\u0027s {@code status}.","lastModifiedDate":"2021-04-08"},{"lineNumber":254,"author":{"gitId":"stein414"},"content":"         *","lastModifiedDate":"2021-04-08"},{"lineNumber":255,"author":{"gitId":"stein414"},"content":"         * @param status The new status.","lastModifiedDate":"2021-04-08"},{"lineNumber":256,"author":{"gitId":"stein414"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":257,"author":{"gitId":"stein414"},"content":"        public void setStatus(Status status) {","lastModifiedDate":"2021-04-08"},{"lineNumber":258,"author":{"gitId":"stein414"},"content":"            this.status \u003d status;","lastModifiedDate":"2021-04-08"},{"lineNumber":259,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":260,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":261,"author":{"gitId":"stein414"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":262,"author":{"gitId":"stein414"},"content":"         * Returns an immutable status.","lastModifiedDate":"2021-04-08"},{"lineNumber":263,"author":{"gitId":"stein414"},"content":"         * Returns {@code Optional#empty()} if {@code status} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":264,"author":{"gitId":"stein414"},"content":"         *","lastModifiedDate":"2021-04-08"},{"lineNumber":265,"author":{"gitId":"stein414"},"content":"         * @return Status of the issue.","lastModifiedDate":"2021-04-08"},{"lineNumber":266,"author":{"gitId":"stein414"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":267,"author":{"gitId":"stein414"},"content":"        public Optional\u003cStatus\u003e getStatus() {","lastModifiedDate":"2021-03-15"},{"lineNumber":268,"author":{"gitId":"stein414"},"content":"            return Optional.ofNullable(status);","lastModifiedDate":"2021-03-15"},{"lineNumber":269,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":270,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":271,"author":{"gitId":"stein414"},"content":"        /**","lastModifiedDate":"2021-03-15"},{"lineNumber":272,"author":{"gitId":"stein414"},"content":"         * Sets {@code category} to this object\u0027s {@code category}.","lastModifiedDate":"2021-03-15"},{"lineNumber":273,"author":{"gitId":"stein414"},"content":"         *","lastModifiedDate":"2021-04-08"},{"lineNumber":274,"author":{"gitId":"stein414"},"content":"         * @param category The new category.","lastModifiedDate":"2021-04-08"},{"lineNumber":275,"author":{"gitId":"stein414"},"content":"         */","lastModifiedDate":"2021-03-15"},{"lineNumber":276,"author":{"gitId":"stein414"},"content":"        public void setCategory(Category category) {","lastModifiedDate":"2021-03-15"},{"lineNumber":277,"author":{"gitId":"stein414"},"content":"            this.category \u003d category;","lastModifiedDate":"2021-03-15"},{"lineNumber":278,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":279,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":280,"author":{"gitId":"stein414"},"content":"        /**","lastModifiedDate":"2021-03-15"},{"lineNumber":281,"author":{"gitId":"stein414"},"content":"         * Returns an immutable status.","lastModifiedDate":"2021-04-08"},{"lineNumber":282,"author":{"gitId":"stein414"},"content":"         * Returns {@code Optional#empty()} if {@code status} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":283,"author":{"gitId":"stein414"},"content":"         *","lastModifiedDate":"2021-04-08"},{"lineNumber":284,"author":{"gitId":"stein414"},"content":"         * @return Category of the issue.","lastModifiedDate":"2021-04-08"},{"lineNumber":285,"author":{"gitId":"stein414"},"content":"         */","lastModifiedDate":"2021-03-15"},{"lineNumber":286,"author":{"gitId":"stein414"},"content":"        public Optional\u003cCategory\u003e getCategory() {","lastModifiedDate":"2021-03-15"},{"lineNumber":287,"author":{"gitId":"stein414"},"content":"            return Optional.ofNullable(category);","lastModifiedDate":"2021-03-15"},{"lineNumber":288,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":289,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":290,"author":{"gitId":"cnlinh"},"content":"        /**","lastModifiedDate":"2021-03-26"},{"lineNumber":291,"author":{"gitId":"cnlinh"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2021-03-26"},{"lineNumber":292,"author":{"gitId":"cnlinh"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-03-26"},{"lineNumber":293,"author":{"gitId":"cnlinh"},"content":"         */","lastModifiedDate":"2021-03-26"},{"lineNumber":294,"author":{"gitId":"cnlinh"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-26"},{"lineNumber":295,"author":{"gitId":"cnlinh"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2021-03-26"},{"lineNumber":296,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":297,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":298,"author":{"gitId":"cnlinh"},"content":"        /**","lastModifiedDate":"2021-03-26"},{"lineNumber":299,"author":{"gitId":"cnlinh"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2021-03-26"},{"lineNumber":300,"author":{"gitId":"cnlinh"},"content":"         * if modification is attempted.","lastModifiedDate":"2021-03-26"},{"lineNumber":301,"author":{"gitId":"stein414"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":302,"author":{"gitId":"stein414"},"content":"         *","lastModifiedDate":"2021-04-08"},{"lineNumber":303,"author":{"gitId":"stein414"},"content":"         * @return Optional set of tags.","lastModifiedDate":"2021-04-08"},{"lineNumber":304,"author":{"gitId":"cnlinh"},"content":"         */","lastModifiedDate":"2021-03-26"},{"lineNumber":305,"author":{"gitId":"cnlinh"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2021-03-26"},{"lineNumber":306,"author":{"gitId":"cnlinh"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2021-03-26"},{"lineNumber":307,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":308,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":309,"author":{"gitId":"stein414"},"content":"        /**","lastModifiedDate":"2021-04-08"},{"lineNumber":310,"author":{"gitId":"stein414"},"content":"         * Checks if this EditIssueDescriptor is equal to another. Follows Issue\u0027s equals method.","lastModifiedDate":"2021-04-08"},{"lineNumber":311,"author":{"gitId":"stein414"},"content":"         *","lastModifiedDate":"2021-04-08"},{"lineNumber":312,"author":{"gitId":"stein414"},"content":"         * @param other The other issue.","lastModifiedDate":"2021-04-08"},{"lineNumber":313,"author":{"gitId":"stein414"},"content":"         * @return True if they are the equal.","lastModifiedDate":"2021-04-08"},{"lineNumber":314,"author":{"gitId":"stein414"},"content":"         */","lastModifiedDate":"2021-04-08"},{"lineNumber":315,"author":{"gitId":"stein414"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":316,"author":{"gitId":"stein414"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":317,"author":{"gitId":"stein414"},"content":"            // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":318,"author":{"gitId":"stein414"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-15"},{"lineNumber":319,"author":{"gitId":"stein414"},"content":"                return true;","lastModifiedDate":"2021-03-15"},{"lineNumber":320,"author":{"gitId":"stein414"},"content":"            }","lastModifiedDate":"2021-03-15"},{"lineNumber":321,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":322,"author":{"gitId":"stein414"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":323,"author":{"gitId":"stein414"},"content":"            if (!(other instanceof EditIssueDescriptor)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":324,"author":{"gitId":"stein414"},"content":"                return false;","lastModifiedDate":"2021-03-15"},{"lineNumber":325,"author":{"gitId":"stein414"},"content":"            }","lastModifiedDate":"2021-03-15"},{"lineNumber":326,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":327,"author":{"gitId":"stein414"},"content":"            // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":328,"author":{"gitId":"stein414"},"content":"            EditIssueDescriptor e \u003d (EditIssueDescriptor) other;","lastModifiedDate":"2021-03-15"},{"lineNumber":329,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":330,"author":{"gitId":"stein414"},"content":"            return getRoomNumber().equals(e.getRoomNumber())","lastModifiedDate":"2021-03-15"},{"lineNumber":331,"author":{"gitId":"stein414"},"content":"                    \u0026\u0026 getDescription().equals(e.getDescription())","lastModifiedDate":"2021-03-15"},{"lineNumber":332,"author":{"gitId":"stein414"},"content":"                    \u0026\u0026 getTimestamp().equals(e.getTimestamp())","lastModifiedDate":"2021-03-15"},{"lineNumber":333,"author":{"gitId":"stein414"},"content":"                    \u0026\u0026 getStatus().equals(e.getStatus())","lastModifiedDate":"2021-03-15"},{"lineNumber":334,"author":{"gitId":"cnlinh"},"content":"                    \u0026\u0026 getCategory().equals(e.getCategory())","lastModifiedDate":"2021-03-26"},{"lineNumber":335,"author":{"gitId":"cnlinh"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2021-03-26"},{"lineNumber":336,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":337,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":338,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"cnlinh":31,"benedictkhoomw":2,"stein414":305}},{"path":"src/main/java/seedu/address/logic/commands/issue/FindIssueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.issue.RoomNumberOrTagContainsKeywordsPredicate;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":" * Finds and lists all issues in address book whose name contains any of the argument keywords.","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"public class FindIssueCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    public static final String COMMAND_WORD \u003d \"ifind\";","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all issues whose room numbers contain any of \"","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"            + \"the specified keywords and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"            + \"Example: \" + COMMAND_WORD + \" 10-100 12-120\";","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    private final RoomNumberOrTagContainsKeywordsPredicate predicate;","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-04-08"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"     * Creates a FindIssueCommand with the given predicate used to filter issue list.","lastModifiedDate":"2021-04-08"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"     * @param predicate Predicate to filter the issue list.","lastModifiedDate":"2021-04-08"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code predicate} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-04-08"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"    public FindIssueCommand(RoomNumberOrTagContainsKeywordsPredicate predicate) {","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-04-08"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"     * Executes an FindIssuecommand that display issues that passes the predicate.","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-04-08"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"     * @return Result of command execution.","lastModifiedDate":"2021-04-08"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"     * @throws CommandException     If {@code model} is invalid.","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If the {@code model} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"        model.updateFilteredIssueList(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"        return new CommandResult(","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"                String.format(Messages.MESSAGE_ISSUES_LISTED_OVERVIEW, model.getFilteredIssueList().size()));","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"                || (other instanceof FindIssueCommand // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 predicate.equals(((FindIssueCommand) other).predicate)); // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"stein414":57,"DrWala":3}},{"path":"src/main/java/seedu/address/logic/commands/issue/ListIssueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ISSUES;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":" * Lists all issues in the address book to the user.","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"public class ListIssueCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"    public static final String COMMAND_WORD \u003d \"ilist\";","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all issues\";","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-04-08"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"     * Executes an ListIssueCommand that displays all issues.","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-04-08"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"     * @return Result of command execution.","lastModifiedDate":"2021-04-08"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"     * @throws CommandException     If {@code model} is invalid.","lastModifiedDate":"2021-04-08"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If the {@code model} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-04-08"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"        model.updateFilteredIssueList(PREDICATE_SHOW_ALL_ISSUES);","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"stein414":34}},{"path":"src/main/java/seedu/address/logic/commands/resident/AddResidentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.resident;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;","lastModifiedDate":"2021-03-05"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":" * Adds a resident to the address book.","lastModifiedDate":"2021-03-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"public class AddResidentCommand extends Command {","lastModifiedDate":"2021-02-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"    public static final String COMMAND_WORD \u003d \"radd\";","lastModifiedDate":"2021-02-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a resident to SunRez.\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"            + PREFIX_YEAR + \"YEAR\\n\"","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2021-02-25"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"            + PREFIX_YEAR + \"1\";","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New resident added: %1$s\";","lastModifiedDate":"2021-03-05"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_DUPLICATE_RESIDENT \u003d \"This resident already exists in SunRez.\";","lastModifiedDate":"2021-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"    private final Resident toAdd;","lastModifiedDate":"2021-03-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"     * Creates an AddResidentCommand to add the specified {@code Resident}","lastModifiedDate":"2021-03-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"    public AddResidentCommand(Resident resident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        requireNonNull(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        toAdd \u003d resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"        if (model.hasResident(toAdd)) {","lastModifiedDate":"2021-03-05"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_RESIDENT);","lastModifiedDate":"2021-03-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        model.addResident(toAdd);","lastModifiedDate":"2021-03-05"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        model.commitAddressBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"                || (other instanceof AddResidentCommand // instanceof handles nulls","lastModifiedDate":"2021-02-22"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 toAdd.equals(((AddResidentCommand) other).toAdd));","lastModifiedDate":"2021-02-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"benedictkhoomw":3,"colintkn":24,"-":39}},{"path":"src/main/java/seedu/address/logic/commands/resident/DeleteResidentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.resident;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":" * Deletes a resident identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2021-03-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"public class DeleteResidentCommand extends Command {","lastModifiedDate":"2021-02-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    public static final String COMMAND_WORD \u003d \"rdel\";","lastModifiedDate":"2021-02-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"            + \": Deletes the resident identified by the index number used in the displayed resident list.\\n\"","lastModifiedDate":"2021-03-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_DELETE_RESIDENT_SUCCESS \u003d \"Deleted Resident: %1$s\";","lastModifiedDate":"2021-03-05"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_RESIDENT_ALLOCATED_FAILURE \u003d","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"            \"The resident has been allocated to a room. Please deallocate the resident before deletion.\";","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    public DeleteResidentCommand(Index targetIndex) {","lastModifiedDate":"2021-02-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        List\u003cResident\u003e lastShownList \u003d model.getFilteredResidentList();","lastModifiedDate":"2021-03-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        Resident residentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-05"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        if (model.hasEitherResidentRoom(new ResidentRoom(residentToDelete.getName(), null))) {","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"            throw new CommandException(MESSAGE_RESIDENT_ALLOCATED_FAILURE);","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        model.deleteResident(residentToDelete);","lastModifiedDate":"2021-03-05"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        model.commitAddressBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_RESIDENT_SUCCESS, residentToDelete));","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"                || (other instanceof DeleteResidentCommand // instanceof handles nulls","lastModifiedDate":"2021-02-22"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteResidentCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-02-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"benedictkhoomw":1,"colintkn":25,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/resident/EditResidentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.resident;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;","lastModifiedDate":"2021-03-05"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RESIDENTS;","lastModifiedDate":"2021-03-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;","lastModifiedDate":"2021-03-05"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;","lastModifiedDate":"2021-03-05"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;","lastModifiedDate":"2021-03-05"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;","lastModifiedDate":"2021-03-05"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":" * Edits the details of an existing resident in the address book.","lastModifiedDate":"2021-03-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"public class EditResidentCommand extends Command {","lastModifiedDate":"2021-02-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"    public static final String COMMAND_WORD \u003d \"redit\";","lastModifiedDate":"2021-02-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the resident identified \"","lastModifiedDate":"2021-03-05"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"            + \"by the index number used in the displayed resident list. \"","lastModifiedDate":"2021-03-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"            + \"[\" + PREFIX_YEAR + \"YEAR]\\n\"","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"            + PREFIX_EMAIL + \"e0123456@u.nus.edu \";","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_EDIT_RESIDENT_SUCCESS \u003d \"Edited Resident: %1$s\";","lastModifiedDate":"2021-03-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_DUPLICATE_RESIDENT \u003d \"This resident already exists in SunRez.\";","lastModifiedDate":"2021-04-05"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_RESIDENT_ALLOCATED_FAILURE \u003d","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"            \"The resident has been allocated to a room. Please deallocate the resident before editing.\";","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"    private final EditResidentDescriptor editResidentDescriptor;","lastModifiedDate":"2021-03-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"     * @param index of the resident in the filtered resident list to edit","lastModifiedDate":"2021-03-05"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"     * @param editResidentDescriptor details to edit the resident with","lastModifiedDate":"2021-03-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"    public EditResidentCommand(Index index, EditResidentDescriptor editResidentDescriptor) {","lastModifiedDate":"2021-03-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        requireNonNull(editResidentDescriptor);","lastModifiedDate":"2021-03-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"        this.editResidentDescriptor \u003d new EditResidentDescriptor(editResidentDescriptor);","lastModifiedDate":"2021-03-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"        List\u003cResident\u003e lastShownList \u003d model.getFilteredResidentList();","lastModifiedDate":"2021-03-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"        Resident residentToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-05"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        Resident editedResident \u003d createEditedResident(residentToEdit, editResidentDescriptor);","lastModifiedDate":"2021-03-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"        if (!residentToEdit.isSameResident(editedResident) \u0026\u0026 model.hasResident(editedResident)) {","lastModifiedDate":"2021-03-05"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_RESIDENT);","lastModifiedDate":"2021-03-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"        if (model.hasEitherResidentRoom(new ResidentRoom(residentToEdit.getName(), null))) {","lastModifiedDate":"2021-03-27"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"            throw new CommandException(MESSAGE_RESIDENT_ALLOCATED_FAILURE);","lastModifiedDate":"2021-03-27"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"        model.setResident(residentToEdit, editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"        model.updateFilteredResidentList(PREDICATE_SHOW_ALL_RESIDENTS);","lastModifiedDate":"2021-03-05"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"        model.commitAddressBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_RESIDENT_SUCCESS, editedResident));","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"     * Creates and returns a {@code Resident} with the details of {@code residentToEdit}","lastModifiedDate":"2021-03-05"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"     * edited with {@code editResidentDescriptor}.","lastModifiedDate":"2021-03-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"    public static Resident createEditedResident(Resident residentToEdit,","lastModifiedDate":"2021-03-25"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"            EditResidentDescriptor editResidentDescriptor) {","lastModifiedDate":"2021-03-05"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"        assert residentToEdit !\u003d null;","lastModifiedDate":"2021-03-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"        Name updatedName \u003d editResidentDescriptor.getName().orElse(residentToEdit.getName());","lastModifiedDate":"2021-03-05"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"        Phone updatedPhone \u003d editResidentDescriptor.getPhone().orElse(residentToEdit.getPhone());","lastModifiedDate":"2021-03-05"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"        Email updatedEmail \u003d editResidentDescriptor.getEmail().orElse(residentToEdit.getEmail());","lastModifiedDate":"2021-03-05"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"        Year updatedYear \u003d editResidentDescriptor.getYear().orElse(residentToEdit.getYear());","lastModifiedDate":"2021-03-05"},{"lineNumber":108,"author":{"gitId":"colintkn"},"content":"        Room updatedRoom \u003d editResidentDescriptor.getRoom().orElse(residentToEdit.getRoom());","lastModifiedDate":"2021-03-05"},{"lineNumber":109,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":110,"author":{"gitId":"colintkn"},"content":"        return new Resident(updatedName, updatedPhone, updatedEmail, updatedYear, updatedRoom);","lastModifiedDate":"2021-03-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"colintkn"},"content":"        if (!(other instanceof EditResidentCommand)) {","lastModifiedDate":"2021-02-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand e \u003d (EditResidentCommand) other;","lastModifiedDate":"2021-02-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":128,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 editResidentDescriptor.equals(e.editResidentDescriptor);","lastModifiedDate":"2021-03-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":132,"author":{"gitId":"colintkn"},"content":"     * Stores the details to edit the resident with. Each non-empty field value will replace the","lastModifiedDate":"2021-03-05"},{"lineNumber":133,"author":{"gitId":"colintkn"},"content":"     * corresponding field value of the resident.","lastModifiedDate":"2021-03-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"colintkn"},"content":"    public static class EditResidentDescriptor {","lastModifiedDate":"2021-03-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":139,"author":{"gitId":"colintkn"},"content":"        private Year year;","lastModifiedDate":"2021-03-05"},{"lineNumber":140,"author":{"gitId":"colintkn"},"content":"        private Room room;","lastModifiedDate":"2021-02-25"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":142,"author":{"gitId":"colintkn"},"content":"        public EditResidentDescriptor() {}","lastModifiedDate":"2021-03-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":145,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":146,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":147,"author":{"gitId":"colintkn"},"content":"        public EditResidentDescriptor(EditResidentDescriptor toCopy) {","lastModifiedDate":"2021-03-05"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":151,"author":{"gitId":"colintkn"},"content":"            setYear(toCopy.year);","lastModifiedDate":"2021-03-05"},{"lineNumber":152,"author":{"gitId":"colintkn"},"content":"            setRoom(toCopy.room);","lastModifiedDate":"2021-02-25"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"colintkn"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, year, room);","lastModifiedDate":"2021-03-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"colintkn"},"content":"        public void setYear(Year year) {","lastModifiedDate":"2021-03-05"},{"lineNumber":187,"author":{"gitId":"colintkn"},"content":"            this.year \u003d year;","lastModifiedDate":"2021-03-05"},{"lineNumber":188,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-05"},{"lineNumber":189,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":190,"author":{"gitId":"colintkn"},"content":"        public Optional\u003cYear\u003e getYear() {","lastModifiedDate":"2021-03-05"},{"lineNumber":191,"author":{"gitId":"colintkn"},"content":"            return Optional.ofNullable(year);","lastModifiedDate":"2021-03-05"},{"lineNumber":192,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-05"},{"lineNumber":193,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":194,"author":{"gitId":"colintkn"},"content":"        public void setRoom(Room room) {","lastModifiedDate":"2021-02-25"},{"lineNumber":195,"author":{"gitId":"colintkn"},"content":"            this.room \u003d room;","lastModifiedDate":"2021-02-25"},{"lineNumber":196,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-02-25"},{"lineNumber":197,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":198,"author":{"gitId":"colintkn"},"content":"        public Optional\u003cRoom\u003e getRoom() {","lastModifiedDate":"2021-02-25"},{"lineNumber":199,"author":{"gitId":"colintkn"},"content":"            return Optional.ofNullable(room);","lastModifiedDate":"2021-02-25"},{"lineNumber":200,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-02-25"},{"lineNumber":201,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":210,"author":{"gitId":"colintkn"},"content":"            if (!(other instanceof EditResidentDescriptor)) {","lastModifiedDate":"2021-03-05"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":215,"author":{"gitId":"colintkn"},"content":"            EditResidentDescriptor e \u003d (EditResidentDescriptor) other;","lastModifiedDate":"2021-03-05"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":219,"author":{"gitId":"colintkn"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2021-02-25"},{"lineNumber":220,"author":{"gitId":"colintkn"},"content":"                    \u0026\u0026 getYear().equals(e.getYear())","lastModifiedDate":"2021-03-05"},{"lineNumber":221,"author":{"gitId":"colintkn"},"content":"                    \u0026\u0026 getRoom().equals(e.getRoom());","lastModifiedDate":"2021-02-25"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"benedictkhoomw":2,"colintkn":89,"-":133}},{"path":"src/main/java/seedu/address/logic/commands/resident/FindResidentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.resident;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2018-04-01"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"public class FindResidentCommand extends Command {","lastModifiedDate":"2021-02-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    public static final String COMMAND_WORD \u003d \"rfind\";","lastModifiedDate":"2021-02-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    public FindResidentCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2021-02-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        model.updateFilteredResidentList(predicate);","lastModifiedDate":"2021-03-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"                String.format(Messages.MESSAGE_RESIDENTS_LISTED_OVERVIEW, model.getFilteredResidentList().size()));","lastModifiedDate":"2021-03-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"                || (other instanceof FindResidentCommand // instanceof handles nulls","lastModifiedDate":"2021-02-22"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 predicate.equals(((FindResidentCommand) other).predicate)); // state check","lastModifiedDate":"2021-02-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"colintkn":11,"-":33}},{"path":"src/main/java/seedu/address/logic/commands/resident/ListResidentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.resident;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RESIDENTS;","lastModifiedDate":"2021-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":" * Lists all residents in the address book to the user.","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"public class ListResidentCommand extends Command {","lastModifiedDate":"2021-02-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"    public static final String COMMAND_WORD \u003d \"rlist\";","lastModifiedDate":"2021-02-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all residents\";","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"        model.updateFilteredResidentList(PREDICATE_SHOW_ALL_RESIDENTS);","lastModifiedDate":"2021-03-05"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"colintkn":11,"-":15}},{"path":"src/main/java/seedu/address/logic/commands/resident/ListUnallocatedResidentsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.resident;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.ResidentUnallocatedPredicate;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":" * Lists all unallocated residents in the address book to the user.","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"public class ListUnallocatedResidentsCommand extends Command {","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"    public static final String COMMAND_WORD \u003d \"rulist\";","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all unallocated residents\";","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"        ResidentUnallocatedPredicate predicate \u003d new ResidentUnallocatedPredicate();","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"        model.updateFilteredResidentList(predicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"colintkn":27}},{"path":"src/main/java/seedu/address/logic/commands/residentroom/AllocateResidentRoomCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.residentroom;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESIDENT_INDEX;","lastModifiedDate":"2021-04-05"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_INDEX;","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import java.util.List;","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-04-05"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-25"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand.EditResidentDescriptor;","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.room.EditRoomCommand;","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.room.EditRoomCommand.EditRoomDescriptor;","lastModifiedDate":"2021-03-25"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-25"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-25"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-03-25"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.room.IsOccupied;","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-25"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"public class AllocateResidentRoomCommand extends Command {","lastModifiedDate":"2021-03-25"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"    public static final String COMMAND_WORD \u003d \"alloc\";","lastModifiedDate":"2021-03-25"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Allocates a resident to a room in SunRez. \"","lastModifiedDate":"2021-03-25"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-03-25"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"            + PREFIX_RESIDENT_INDEX + \"INDEX \"","lastModifiedDate":"2021-04-05"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"            + PREFIX_ROOM_INDEX + \"INDEX \\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-25"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"            + PREFIX_RESIDENT_INDEX + \"1 \"","lastModifiedDate":"2021-04-05"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"            + PREFIX_ROOM_INDEX + \"2\";","lastModifiedDate":"2021-04-05"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New allocation made: %1$s\";","lastModifiedDate":"2021-03-25"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_DUPLICATE_RESIDENTROOM \u003d \"This resident or room has \"","lastModifiedDate":"2021-03-25"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"            + \"already been allocated in SunRez\";","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"    private final Index targetResidentIndex;","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"    private final Index targetRoomIndex;","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"     * Creates an AddResidentRoomCommand to add the specified {@code ResidentRoom}","lastModifiedDate":"2021-03-25"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"    public AllocateResidentRoomCommand(Index targetResidentIndex, Index targetRoomIndex) {","lastModifiedDate":"2021-04-05"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        this.targetResidentIndex \u003d targetResidentIndex;","lastModifiedDate":"2021-04-05"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        this.targetRoomIndex \u003d targetRoomIndex;","lastModifiedDate":"2021-04-05"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-25"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-25"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        List\u003cResident\u003e lastShownResidentList \u003d model.getFilteredResidentList();","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        List\u003cRoom\u003e lastShownRoomList \u003d model.getFilteredRoomList();","lastModifiedDate":"2021-04-05"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        if (targetResidentIndex.getZeroBased() \u003e\u003d lastShownResidentList.size()) {","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        if (targetRoomIndex.getZeroBased() \u003e\u003d lastShownRoomList.size()) {","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ROOM_DISPLAYED_INDEX);","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"        Resident residentToAllocate \u003d lastShownResidentList.get(targetResidentIndex.getZeroBased());","lastModifiedDate":"2021-04-05"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"        Room roomToBeAllocated \u003d lastShownRoomList.get(targetRoomIndex.getZeroBased());","lastModifiedDate":"2021-04-05"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"        ResidentRoom residentRoom \u003d new ResidentRoom(residentToAllocate.getName(), roomToBeAllocated.getRoomNumber());","lastModifiedDate":"2021-04-05"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"        // Checks if either resident or room is allocated or occupied","lastModifiedDate":"2021-03-25"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"        if (model.hasEitherResidentRoom(residentRoom)) {","lastModifiedDate":"2021-04-05"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_RESIDENTROOM);","lastModifiedDate":"2021-03-25"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"        setResidentToAllocated(residentToAllocate, roomToBeAllocated, model);","lastModifiedDate":"2021-04-05"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        setRoomToOccupied(roomToBeAllocated, model);","lastModifiedDate":"2021-04-05"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"        // Set ResidentRoom","lastModifiedDate":"2021-03-25"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"        model.addResidentRoom(residentRoom);","lastModifiedDate":"2021-04-05"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"        model.commitAddressBook();","lastModifiedDate":"2021-04-02"},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, residentRoom));","lastModifiedDate":"2021-04-05"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"    private void setResidentToAllocated(Resident resident, Room room, Model model) {","lastModifiedDate":"2021-04-05"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor editResidentDescriptor \u003d new EditResidentCommand.EditResidentDescriptor();","lastModifiedDate":"2021-04-05"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"        editResidentDescriptor.setRoom(new seedu.address.model.resident.Room(room.getRoomNumber().toString()));","lastModifiedDate":"2021-04-05"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"        Resident editedResident \u003d EditResidentCommand","lastModifiedDate":"2021-04-05"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"                .createEditedResident(resident, editResidentDescriptor);","lastModifiedDate":"2021-04-05"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"        model.setResident(resident, editedResident);","lastModifiedDate":"2021-04-05"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"        model.updateFilteredResidentList(Model.PREDICATE_SHOW_ALL_RESIDENTS);","lastModifiedDate":"2021-04-05"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"    private void setRoomToOccupied(Room room, Model model) {","lastModifiedDate":"2021-04-05"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"        EditRoomDescriptor editRoomDescriptor \u003d new EditRoomCommand.EditRoomDescriptor();","lastModifiedDate":"2021-04-05"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"        editRoomDescriptor.setIsOccupied(new IsOccupied(IsOccupied.OCCUPIED));","lastModifiedDate":"2021-04-05"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"        seedu.address.model.room.Room editedRoom \u003d EditRoomCommand.createEditedRoom(room, editRoomDescriptor);","lastModifiedDate":"2021-04-05"},{"lineNumber":96,"author":{"gitId":"colintkn"},"content":"        model.setRoom(room, editedRoom);","lastModifiedDate":"2021-04-05"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"        model.updateFilteredRoomList(Model.PREDICATE_SHOW_ALL_ROOMS);","lastModifiedDate":"2021-04-05"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-25"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-25"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"                || (other instanceof AllocateResidentRoomCommand // instanceof handles nulls","lastModifiedDate":"2021-03-25"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 targetResidentIndex.equals(((AllocateResidentRoomCommand) other).targetResidentIndex)","lastModifiedDate":"2021-04-05"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 targetRoomIndex.equals(((AllocateResidentRoomCommand) other).targetRoomIndex));","lastModifiedDate":"2021-04-05"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-03-25"}],"authorContributionMap":{"benedictkhoomw":1,"colintkn":106}},{"path":"src/main/java/seedu/address/logic/commands/residentroom/DeallocateResidentRoomCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.residentroom;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import java.util.List;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-25"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;","lastModifiedDate":"2021-03-25"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand.EditResidentDescriptor;","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.room.EditRoomCommand;","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.room.EditRoomCommand.EditRoomDescriptor;","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-25"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-03-25"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.room.IsOccupied;","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.room.RoomNumber;","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"public class DeallocateResidentRoomCommand extends Command {","lastModifiedDate":"2021-03-25"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"    public static final String COMMAND_WORD \u003d \"dealloc\";","lastModifiedDate":"2021-03-25"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deallocates a resident from a room in SunRez. \"","lastModifiedDate":"2021-03-25"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"            + \"Parameters: INDEX (must be positive integer)\\n\"","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deallocation made: %1$s\";","lastModifiedDate":"2021-03-25"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"    public static final String UNALLOCATED_FAILURE \u003d \"The resident has not been allocated.\";","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"     * Creates an AddResidentRoomCommand to add the specified {@code ResidentRoom}","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"    public DeallocateResidentRoomCommand(Index targetIndex) {","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-25"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-25"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        List\u003cResident\u003e lastShownList \u003d model.getFilteredResidentList();","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        Resident residentToDeallocate \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        ResidentRoom residentRoomToDeallocate \u003d getResidentRoomToDeallocate(residentToDeallocate);","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"        setResidentToUnallocated(residentToDeallocate, model);","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        setRoomToUnoccupied(residentToDeallocate, model);","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"        model.deleteResidentRoom(residentRoomToDeallocate);","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"        model.commitAddressBook();","lastModifiedDate":"2021-04-02"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, residentRoomToDeallocate));","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"    private ResidentRoom getResidentRoomToDeallocate(Resident residentToDeallocate) throws CommandException {","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"        if (residentToDeallocate.getRoom().toString().equals(Room.UNALLOCATED_REGEX)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"            throw new CommandException(UNALLOCATED_FAILURE);","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"        Name name \u003d new Name(residentToDeallocate.getName().toString());","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"        RoomNumber roomNumber \u003d new RoomNumber(residentToDeallocate.getRoom().toString());","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"        return new ResidentRoom(name, roomNumber);","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"    private void setResidentToUnallocated(Resident residentToDeallocate, Model model) {","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor editResidentDescriptor \u003d new EditResidentCommand.EditResidentDescriptor();","lastModifiedDate":"2021-03-31"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        editResidentDescriptor.setRoom(new Room(Room.UNALLOCATED_REGEX));","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"        Resident editedResident \u003d EditResidentCommand","lastModifiedDate":"2021-03-31"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"                .createEditedResident(residentToDeallocate, editResidentDescriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"        model.setResident(residentToDeallocate, editedResident);","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        model.updateFilteredResidentList(Model.PREDICATE_SHOW_ALL_RESIDENTS);","lastModifiedDate":"2021-03-25"},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"    private void setRoomToUnoccupied(Resident residentToDeallocate, Model model) {","lastModifiedDate":"2021-03-31"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"        EditRoomDescriptor editRoomDescriptor \u003d new EditRoomCommand.EditRoomDescriptor();","lastModifiedDate":"2021-03-31"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"        editRoomDescriptor.setIsOccupied(new IsOccupied(IsOccupied.UNOCCUPIED));","lastModifiedDate":"2021-03-31"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"        RoomNumber roomNumber \u003d new RoomNumber(residentToDeallocate.getRoom().toString());","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"        seedu.address.model.room.Room roomToEdit \u003d model.getRoomWithSameRoomNumber(roomNumber);","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"        seedu.address.model.room.Room editedRoom \u003d EditRoomCommand.createEditedRoom(roomToEdit, editRoomDescriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"        model.setRoom(roomToEdit, editedRoom);","lastModifiedDate":"2021-03-25"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"        model.updateFilteredRoomList(Model.PREDICATE_SHOW_ALL_ROOMS);","lastModifiedDate":"2021-03-25"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-25"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-25"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"                || (other instanceof DeallocateResidentRoomCommand // instanceof handles nulls","lastModifiedDate":"2021-03-25"},{"lineNumber":96,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 targetIndex.equals(((DeallocateResidentRoomCommand) other).targetIndex));","lastModifiedDate":"2021-03-31"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-03-25"}],"authorContributionMap":{"benedictkhoomw":1,"colintkn":97}},{"path":"src/main/java/seedu/address/logic/commands/room/AddRoomCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TAG;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TYPE;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"public class AddRoomCommand extends Command {","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    public static final String COMMAND_WORD \u003d \"oadd\";","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a room to SunRez. \"","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"            + PREFIX_ROOM_NUMBER + \"ROOM_NUMBER \"","lastModifiedDate":"2021-04-05"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"            + PREFIX_ROOM_TYPE + \"TYPE \"","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"            + \"[\" + PREFIX_ROOM_TAG + \"TAG]...\\n\"","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"            + PREFIX_ROOM_NUMBER + \"12-123 \"","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"            + PREFIX_ROOM_TYPE + \"CORRIDOR_AC \"","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"            + PREFIX_ROOM_TAG + \"SHN\";","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New room added: %1$s\";","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_DUPLICATE_ROOM \u003d \"This room already exists in SunRez\";","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    private final Room toAdd;","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"     * Creates an AddRoomCommand to add the specified {@code Room}","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    public AddRoomCommand(Room room) {","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        requireNonNull(room);","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        this.toAdd \u003d room;","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        if (model.hasRoom(toAdd)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ROOM);","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        model.addRoom(toAdd);","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        model.commitAddressBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-03-20"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"                || (other instanceof AddRoomCommand // instanceof handles nulls","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 toAdd.equals(((AddRoomCommand) other).toAdd));","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"benedictkhoomw":1,"DrWala":58}},{"path":"src/main/java/seedu/address/logic/commands/room/DeleteRoomCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import java.util.List;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":" * Deletes a room identified using it\u0027s displayed index from SunRez.","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"public class DeleteRoomCommand extends Command {","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    public static final String COMMAND_WORD \u003d \"odel\";","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"            + \": Deletes the room identified by the index number used in the displayed room list.\\n\"","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_DELETE_ROOM_SUCCESS \u003d \"Deleted room: %1$s\";","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_ROOM_ALLOCATED_FAILURE \u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"            \"The room has been allocated to another resident. Please deallocate the room before deletion.\";","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_ROOM_HAS_ISSUES \u003d \"This room still has issues assigned to it. Please delete all \"","lastModifiedDate":"2021-04-06"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"            + \"corresponding issues before deleting the room.\";","lastModifiedDate":"2021-04-06"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    public DeleteRoomCommand(Index targetIndex) {","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        List\u003cRoom\u003e lastShownList \u003d model.getFilteredRoomList();","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ROOM_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        Room roomToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"        if (model.hasEitherResidentRoom(new ResidentRoom(null, roomToDelete.getRoomNumber()))) {","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"            throw new CommandException(MESSAGE_ROOM_ALLOCATED_FAILURE);","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"        if (model.issuesContainRoom(roomToDelete)) {","lastModifiedDate":"2021-04-06"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"            throw new CommandException(MESSAGE_ROOM_HAS_ISSUES);","lastModifiedDate":"2021-04-06"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"        model.deleteRoom(roomToDelete);","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"        model.commitAddressBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_ROOM_SUCCESS, roomToDelete));","lastModifiedDate":"2021-03-20"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-20"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"                || (other instanceof DeleteRoomCommand // instanceof handles nulls","lastModifiedDate":"2021-03-20"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteRoomCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"benedictkhoomw":1,"colintkn":8,"DrWala":60}},{"path":"src/main/java/seedu/address/logic/commands/room/EditRoomCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TAG;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TYPE;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ROOMS;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import java.util.List;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.IsOccupied;","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomNumber;","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomType;","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":" * Edits the details of an existing room in SunRez.","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"public class EditRoomCommand extends Command {","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    public static final String COMMAND_WORD \u003d \"oedit\";","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the room identified \"","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"            + \"by the index number used in the displayed room list. \"","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"            + \"[\" + PREFIX_ROOM_NUMBER + \"ROOM_NUMBER] \"","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"            + \"[\" + PREFIX_ROOM_TYPE + \"TYPE] \"","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"            + \"[\" + PREFIX_ROOM_TAG + \"TAG]...\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"            + PREFIX_ROOM_NUMBER + \"12-100 \";","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_EDIT_ROOM_SUCCESS \u003d \"Edited Room: %1$s\";","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_DUPLICATE_ROOM \u003d \"This room already exists in SunRez.\";","lastModifiedDate":"2021-04-05"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_ROOM_ALLOCATED_FAILURE \u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"            \"The room has already been allocated to another resident. Please deallocate the room before editing.\";","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"    private final Index index;","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"    private final EditRoomDescriptor editRoomDescriptor;","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"     * @param index              of the room in the filtered room list to edit","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"     * @param editRoomDescriptor details to edit the room with","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"    public EditRoomCommand(Index index, EditRoomDescriptor editRoomDescriptor) {","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-03-10"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"        requireNonNull(editRoomDescriptor);","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-03-10"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"        this.editRoomDescriptor \u003d new EditRoomDescriptor(editRoomDescriptor);","lastModifiedDate":"2021-03-10"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"        List\u003cRoom\u003e lastShownList \u003d model.getFilteredRoomList();","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ROOM_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-20"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"        Room roomToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"        Room editedRoom \u003d createEditedRoom(roomToEdit, editRoomDescriptor);","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"        if (!roomToEdit.isSameRoom(editedRoom) \u0026\u0026 model.hasRoom(editedRoom)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ROOM);","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"        if (model.hasEitherResidentRoom(new ResidentRoom(null, roomToEdit.getRoomNumber()))) {","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"            throw new CommandException(MESSAGE_ROOM_ALLOCATED_FAILURE);","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"        model.setRoom(roomToEdit, editedRoom);","lastModifiedDate":"2021-03-10"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"        model.updateFilteredRoomList(PREDICATE_SHOW_ALL_ROOMS);","lastModifiedDate":"2021-03-10"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"        model.commitAddressBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_ROOM_SUCCESS, editedRoom));","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"     * Creates and returns a {@code Room} with the details of {@code roomToEdit}","lastModifiedDate":"2021-03-10"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"     * edited with {@code editRoomDescriptor}.","lastModifiedDate":"2021-03-10"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"    public static Room createEditedRoom(Room roomToEdit, EditRoomDescriptor editRoomDescriptor) {","lastModifiedDate":"2021-03-25"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"        assert roomToEdit !\u003d null;","lastModifiedDate":"2021-03-10"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"        RoomNumber updatedRoomNumber \u003d editRoomDescriptor.getRoomNumber().orElse(roomToEdit.getRoomNumber());","lastModifiedDate":"2021-03-10"},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":"        RoomType updatedRoomType \u003d editRoomDescriptor.getRoomType().orElse(roomToEdit.getRoomType());","lastModifiedDate":"2021-03-12"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"        IsOccupied updatedIsOccupied \u003d editRoomDescriptor.getIsOccupied().orElse(roomToEdit.isOccupied());","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"        Set\u003cTag\u003e updatedTags \u003d editRoomDescriptor.getTags().orElse(roomToEdit.getTags());","lastModifiedDate":"2021-03-10"},{"lineNumber":104,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":"        return new Room(updatedRoomNumber, updatedRoomType, updatedIsOccupied, updatedTags);","lastModifiedDate":"2021-03-10"},{"lineNumber":106,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":110,"author":{"gitId":"DrWala"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-10"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-10"},{"lineNumber":112,"author":{"gitId":"DrWala"},"content":"            return true;","lastModifiedDate":"2021-03-10"},{"lineNumber":113,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":115,"author":{"gitId":"DrWala"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-10"},{"lineNumber":116,"author":{"gitId":"DrWala"},"content":"        if (!(other instanceof EditRoomCommand)) {","lastModifiedDate":"2021-03-13"},{"lineNumber":117,"author":{"gitId":"DrWala"},"content":"            return false;","lastModifiedDate":"2021-03-10"},{"lineNumber":118,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":119,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":120,"author":{"gitId":"DrWala"},"content":"        // state check","lastModifiedDate":"2021-03-10"},{"lineNumber":121,"author":{"gitId":"DrWala"},"content":"        EditRoomCommand e \u003d (EditRoomCommand) other;","lastModifiedDate":"2021-03-10"},{"lineNumber":122,"author":{"gitId":"DrWala"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-03-10"},{"lineNumber":123,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 editRoomDescriptor.equals(e.editRoomDescriptor);","lastModifiedDate":"2021-03-10"},{"lineNumber":124,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":125,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":126,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":127,"author":{"gitId":"DrWala"},"content":"     * Stores the details to edit the room with. Each non-empty field value will replace the","lastModifiedDate":"2021-03-10"},{"lineNumber":128,"author":{"gitId":"DrWala"},"content":"     * corresponding field value of the room.","lastModifiedDate":"2021-03-10"},{"lineNumber":129,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":130,"author":{"gitId":"DrWala"},"content":"    public static class EditRoomDescriptor {","lastModifiedDate":"2021-03-10"},{"lineNumber":131,"author":{"gitId":"DrWala"},"content":"        private RoomNumber roomNumber;","lastModifiedDate":"2021-03-10"},{"lineNumber":132,"author":{"gitId":"DrWala"},"content":"        private RoomType roomType;","lastModifiedDate":"2021-03-10"},{"lineNumber":133,"author":{"gitId":"DrWala"},"content":"        private IsOccupied isOccupied;","lastModifiedDate":"2021-03-10"},{"lineNumber":134,"author":{"gitId":"DrWala"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2021-03-10"},{"lineNumber":135,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":136,"author":{"gitId":"DrWala"},"content":"        public EditRoomDescriptor() {","lastModifiedDate":"2021-03-10"},{"lineNumber":137,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":138,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":139,"author":{"gitId":"DrWala"},"content":"        /**","lastModifiedDate":"2021-03-10"},{"lineNumber":140,"author":{"gitId":"DrWala"},"content":"         * Copy constructor.","lastModifiedDate":"2021-03-10"},{"lineNumber":141,"author":{"gitId":"DrWala"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-03-10"},{"lineNumber":142,"author":{"gitId":"DrWala"},"content":"         */","lastModifiedDate":"2021-03-10"},{"lineNumber":143,"author":{"gitId":"DrWala"},"content":"        public EditRoomDescriptor(EditRoomDescriptor toCopy) {","lastModifiedDate":"2021-03-10"},{"lineNumber":144,"author":{"gitId":"DrWala"},"content":"            setRoomNumber(toCopy.roomNumber);","lastModifiedDate":"2021-03-10"},{"lineNumber":145,"author":{"gitId":"DrWala"},"content":"            setRoomType(toCopy.roomType);","lastModifiedDate":"2021-03-10"},{"lineNumber":146,"author":{"gitId":"DrWala"},"content":"            setIsOccupied(toCopy.isOccupied);","lastModifiedDate":"2021-03-10"},{"lineNumber":147,"author":{"gitId":"DrWala"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2021-03-10"},{"lineNumber":148,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":149,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":150,"author":{"gitId":"DrWala"},"content":"        /**","lastModifiedDate":"2021-03-10"},{"lineNumber":151,"author":{"gitId":"DrWala"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-03-10"},{"lineNumber":152,"author":{"gitId":"DrWala"},"content":"         */","lastModifiedDate":"2021-03-10"},{"lineNumber":153,"author":{"gitId":"DrWala"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-03-10"},{"lineNumber":154,"author":{"gitId":"DrWala"},"content":"            return CollectionUtil.isAnyNonNull(roomNumber, roomType, tags);","lastModifiedDate":"2021-03-29"},{"lineNumber":155,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":156,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":157,"author":{"gitId":"DrWala"},"content":"        public void setRoomNumber(RoomNumber roomNumber) {","lastModifiedDate":"2021-03-10"},{"lineNumber":158,"author":{"gitId":"DrWala"},"content":"            this.roomNumber \u003d roomNumber;","lastModifiedDate":"2021-03-10"},{"lineNumber":159,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":160,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":161,"author":{"gitId":"DrWala"},"content":"        public Optional\u003cRoomNumber\u003e getRoomNumber() {","lastModifiedDate":"2021-03-10"},{"lineNumber":162,"author":{"gitId":"DrWala"},"content":"            return Optional.ofNullable(roomNumber);","lastModifiedDate":"2021-03-10"},{"lineNumber":163,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":164,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":165,"author":{"gitId":"DrWala"},"content":"        public void setRoomType(RoomType roomType) {","lastModifiedDate":"2021-03-10"},{"lineNumber":166,"author":{"gitId":"DrWala"},"content":"            this.roomType \u003d roomType;","lastModifiedDate":"2021-03-10"},{"lineNumber":167,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":168,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":169,"author":{"gitId":"DrWala"},"content":"        public Optional\u003cRoomType\u003e getRoomType() {","lastModifiedDate":"2021-03-10"},{"lineNumber":170,"author":{"gitId":"DrWala"},"content":"            return Optional.ofNullable(roomType);","lastModifiedDate":"2021-03-10"},{"lineNumber":171,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":172,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":173,"author":{"gitId":"DrWala"},"content":"        public void setIsOccupied(IsOccupied isOccupied) {","lastModifiedDate":"2021-03-10"},{"lineNumber":174,"author":{"gitId":"DrWala"},"content":"            this.isOccupied \u003d isOccupied;","lastModifiedDate":"2021-03-10"},{"lineNumber":175,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":176,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":177,"author":{"gitId":"DrWala"},"content":"        public Optional\u003cIsOccupied\u003e getIsOccupied() {","lastModifiedDate":"2021-03-10"},{"lineNumber":178,"author":{"gitId":"DrWala"},"content":"            return Optional.ofNullable(isOccupied);","lastModifiedDate":"2021-03-10"},{"lineNumber":179,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":180,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":181,"author":{"gitId":"DrWala"},"content":"        /**","lastModifiedDate":"2021-03-10"},{"lineNumber":182,"author":{"gitId":"DrWala"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2021-03-10"},{"lineNumber":183,"author":{"gitId":"DrWala"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-03-10"},{"lineNumber":184,"author":{"gitId":"DrWala"},"content":"         */","lastModifiedDate":"2021-03-10"},{"lineNumber":185,"author":{"gitId":"DrWala"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-10"},{"lineNumber":186,"author":{"gitId":"DrWala"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2021-03-10"},{"lineNumber":187,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":188,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":189,"author":{"gitId":"DrWala"},"content":"        /**","lastModifiedDate":"2021-03-10"},{"lineNumber":190,"author":{"gitId":"DrWala"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2021-03-10"},{"lineNumber":191,"author":{"gitId":"DrWala"},"content":"         * if modification is attempted.","lastModifiedDate":"2021-03-10"},{"lineNumber":192,"author":{"gitId":"DrWala"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2021-03-10"},{"lineNumber":193,"author":{"gitId":"DrWala"},"content":"         */","lastModifiedDate":"2021-03-10"},{"lineNumber":194,"author":{"gitId":"DrWala"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2021-03-10"},{"lineNumber":195,"author":{"gitId":"DrWala"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2021-03-10"},{"lineNumber":196,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":197,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":198,"author":{"gitId":"DrWala"},"content":"        @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":199,"author":{"gitId":"DrWala"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":200,"author":{"gitId":"DrWala"},"content":"            // short circuit if same object","lastModifiedDate":"2021-03-10"},{"lineNumber":201,"author":{"gitId":"DrWala"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-10"},{"lineNumber":202,"author":{"gitId":"DrWala"},"content":"                return true;","lastModifiedDate":"2021-03-10"},{"lineNumber":203,"author":{"gitId":"DrWala"},"content":"            }","lastModifiedDate":"2021-03-10"},{"lineNumber":204,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":205,"author":{"gitId":"DrWala"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-03-10"},{"lineNumber":206,"author":{"gitId":"DrWala"},"content":"            if (!(other instanceof EditRoomDescriptor)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":207,"author":{"gitId":"DrWala"},"content":"                return false;","lastModifiedDate":"2021-03-10"},{"lineNumber":208,"author":{"gitId":"DrWala"},"content":"            }","lastModifiedDate":"2021-03-10"},{"lineNumber":209,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":210,"author":{"gitId":"DrWala"},"content":"            // state check","lastModifiedDate":"2021-03-10"},{"lineNumber":211,"author":{"gitId":"DrWala"},"content":"            EditRoomDescriptor e \u003d (EditRoomDescriptor) other;","lastModifiedDate":"2021-03-10"},{"lineNumber":212,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":213,"author":{"gitId":"DrWala"},"content":"            return getRoomNumber().equals(e.getRoomNumber())","lastModifiedDate":"2021-03-10"},{"lineNumber":214,"author":{"gitId":"DrWala"},"content":"                    \u0026\u0026 getRoomType().equals(e.getRoomType())","lastModifiedDate":"2021-03-10"},{"lineNumber":215,"author":{"gitId":"DrWala"},"content":"                    \u0026\u0026 getIsOccupied().equals(e.getIsOccupied())","lastModifiedDate":"2021-03-10"},{"lineNumber":216,"author":{"gitId":"DrWala"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2021-03-10"},{"lineNumber":217,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":218,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":219,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"benedictkhoomw":2,"colintkn":9,"DrWala":208}},{"path":"src/main/java/seedu/address/logic/commands/room/FindRoomCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomNumberOrTagsContainsKeywordsPredicate;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":" * Finds and lists all rooms in SunRez whose name contains any of the argument keywords.","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"public class FindRoomCommand extends Command {","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    public static final String COMMAND_WORD \u003d \"ofind\";","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all rooms whose names contain any of \"","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"            + \"Example: \" + COMMAND_WORD + \" 12-345 01-001\";","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    private final RoomNumberOrTagsContainsKeywordsPredicate predicate;","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    public FindRoomCommand(RoomNumberOrTagsContainsKeywordsPredicate predicate) {","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        model.updateFilteredRoomList(predicate);","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        return new CommandResult(","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"                String.format(Messages.MESSAGE_ROOMS_LISTED_OVERVIEW, model.getFilteredRoomList().size()));","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"                || (other instanceof FindRoomCommand // instanceof handles nulls","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 predicate.equals(((FindRoomCommand) other).predicate)); // state check","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"DrWala":43}},{"path":"src/main/java/seedu/address/logic/commands/room/ListRoomCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ROOMS;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":" * Lists all rooms in SunRez to the user.","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"public class ListRoomCommand extends Command {","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    public static final String COMMAND_WORD \u003d \"olist\";","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all rooms\";","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"        model.updateFilteredRoomList(PREDICATE_SHOW_ALL_ROOMS);","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"DrWala":26}},{"path":"src/main/java/seedu/address/logic/commands/undoredo/RedoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"// Solution below adapted from AB-4: https://github.com/se-edu/addressbook-level4","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.logic.commands.undoredo;","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.undoredo.exceptions.RedoException;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":" * Undoes the most recent undo, if any.","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"public class RedoCommand extends Command {","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo successful.\";","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a new {@code RedoCommand}.","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    public RedoCommand() {","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"                || other instanceof RedoCommand; // instanceof handles nulls","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"     * Undoes the most recent undo command, if any.","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A {@code CommandResult} with a success message.","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws CommandException If the redo fails for whatever reason (e.g. no next state).","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws NullPointerException If model is null.","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        try {","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"            model.redoAddressBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"            model.updateFilteredIssueList(Model.PREDICATE_SHOW_ALL_ISSUES);","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"            model.updateFilteredResidentList(Model.PREDICATE_SHOW_ALL_RESIDENTS);","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"            model.updateFilteredRoomList(Model.PREDICATE_SHOW_ALL_ROOMS);","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (RedoException ex) {","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"            // We let the redo operation decide what the exact error is.","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"            throw new CommandException(ex.getMessage());","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"benedictkhoomw":56}},{"path":"src/main/java/seedu/address/logic/commands/undoredo/UndoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"// Solution below adapted from AB-4: https://github.com/se-edu/addressbook-level4","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.logic.commands.undoredo;","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.undoredo.exceptions.UndoException;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":" * Undoes the most recent state-changing command.","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"public class UndoCommand extends Command {","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo successful.\";","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a new {@code UndoCommand}.","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    public UndoCommand() {","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"                || other instanceof UndoCommand; // instanceof handles nulls","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"     * Undoes the most recent state-changing command, if any.","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A {@code CommandResult} with a success message.","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws CommandException If the undo fails for whatever reason (e.g. no previous state).","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws NullPointerException If model is null.","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        try {","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"            model.undoAddressBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"            model.updateFilteredIssueList(Model.PREDICATE_SHOW_ALL_ISSUES);","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"            model.updateFilteredResidentList(Model.PREDICATE_SHOW_ALL_RESIDENTS);","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"            model.updateFilteredRoomList(Model.PREDICATE_SHOW_ALL_ROOMS);","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (UndoException ex) {","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"            // We let the undo operation decide what the exact error is.","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"            throw new CommandException(ex.getMessage());","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"benedictkhoomw":56}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.alias.AliasCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.alias.ListAliasCommand;","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.alias.UnaliasCommand;","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.commandhistory.ViewHistoryCommand;","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.AddIssueCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.CloseIssueCommand;","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.DeleteIssueCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.EditIssueCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.FindIssueCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.ListIssueCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.DeleteResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.FindResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.ListResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.ListUnallocatedResidentsCommand;","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.residentroom.AllocateResidentRoomCommand;","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.residentroom.DeallocateResidentRoomCommand;","lastModifiedDate":"2021-03-25"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.AddRoomCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.DeleteRoomCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.EditRoomCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.FindRoomCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.ListRoomCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.undoredo.RedoCommand;","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.undoredo.UndoCommand;","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.parser.alias.AliasCommandParser;","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.parser.alias.UnaliasCommandParser;","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.parser.commandhistory.ViewHistoryCommandParser;","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.issue.AddIssueCommandParser;","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.issue.CloseIssueCommandParser;","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.issue.DeleteIssueCommandParser;","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.issue.EditIssueCommandParser;","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.issue.FindIssueCommandParser;","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.resident.AddResidentCommandParser;","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.resident.DeleteResidentCommandParser;","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.resident.EditResidentCommandParser;","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.resident.FindResidentCommandParser;","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.residentroom.AllocateResidentRoomCommandParser;","lastModifiedDate":"2021-03-25"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.residentroom.DeallocateResidentRoomCommandParser;","lastModifiedDate":"2021-03-25"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.room.AddRoomCommandParser;","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.room.DeleteRoomCommandParser;","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.room.EditRoomCommandParser;","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.room.FindRoomCommandParser;","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-04-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"     * @param userInput Full user input string.","lastModifiedDate":"2021-04-06"},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":"     * @param addressBook Current address book.","lastModifiedDate":"2021-04-06"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":"     * @return The command based on the user input.","lastModifiedDate":"2021-04-06"},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"     * @throws ParseException If the user input does not conform the expected format.","lastModifiedDate":"2021-04-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"cnlinh"},"content":"    public Command parseCommand(String userInput, ReadOnlyAddressBook addressBook) throws ParseException {","lastModifiedDate":"2021-04-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"        // \u003d\u003d\u003d\u003d\u003d\u003d Resident Commands \u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"        case AddResidentCommand.COMMAND_WORD:","lastModifiedDate":"2021-02-22"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"            return new AddResidentCommandParser().parse(arguments);","lastModifiedDate":"2021-03-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"        case ListResidentCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"            return new ListResidentCommand();","lastModifiedDate":"2021-03-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"        case FindResidentCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"            return new FindResidentCommandParser().parse(arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"        case EditResidentCommand.COMMAND_WORD:","lastModifiedDate":"2021-02-22"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"            return new EditResidentCommandParser().parse(arguments);","lastModifiedDate":"2021-03-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"        case DeleteResidentCommand.COMMAND_WORD:","lastModifiedDate":"2021-02-22"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"            return new DeleteResidentCommandParser().parse(arguments);","lastModifiedDate":"2021-03-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"        case ListUnallocatedResidentsCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-29"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"            return new ListUnallocatedResidentsCommand();","lastModifiedDate":"2021-03-29"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"        // \u003d\u003d\u003d\u003d\u003d\u003d Room Commands \u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-10"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":"        case AddRoomCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-10"},{"lineNumber":110,"author":{"gitId":"DrWala"},"content":"            return new AddRoomCommandParser().parse(arguments);","lastModifiedDate":"2021-03-10"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":112,"author":{"gitId":"stein414"},"content":"        case FindRoomCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":113,"author":{"gitId":"stein414"},"content":"            return new FindRoomCommandParser().parse(arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":114,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":"        case ListRoomCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":116,"author":{"gitId":"stein414"},"content":"            return new ListRoomCommand();","lastModifiedDate":"2021-03-16"},{"lineNumber":117,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":118,"author":{"gitId":"DrWala"},"content":"        case EditRoomCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-10"},{"lineNumber":119,"author":{"gitId":"DrWala"},"content":"            return new EditRoomCommandParser().parse(arguments);","lastModifiedDate":"2021-03-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"DrWala"},"content":"        case DeleteRoomCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-10"},{"lineNumber":122,"author":{"gitId":"DrWala"},"content":"            return new DeleteRoomCommandParser().parse(arguments);","lastModifiedDate":"2021-03-10"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"colintkn"},"content":"        // \u003d\u003d\u003d\u003d\u003d\u003d ResidentRoom Commands \u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":125,"author":{"gitId":"colintkn"},"content":"        case AllocateResidentRoomCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-25"},{"lineNumber":126,"author":{"gitId":"colintkn"},"content":"            return new AllocateResidentRoomCommandParser().parse(arguments);","lastModifiedDate":"2021-03-25"},{"lineNumber":127,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":128,"author":{"gitId":"colintkn"},"content":"        case DeallocateResidentRoomCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-25"},{"lineNumber":129,"author":{"gitId":"colintkn"},"content":"            return new DeallocateResidentRoomCommandParser().parse(arguments);","lastModifiedDate":"2021-03-25"},{"lineNumber":130,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":131,"author":{"gitId":"stein414"},"content":"        // \u003d\u003d\u003d\u003d\u003d\u003d Issue Commands \u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-16"},{"lineNumber":132,"author":{"gitId":"stein414"},"content":"        case AddIssueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-15"},{"lineNumber":133,"author":{"gitId":"stein414"},"content":"            return new AddIssueCommandParser().parse(arguments);","lastModifiedDate":"2021-03-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":135,"author":{"gitId":"stein414"},"content":"        case ListIssueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-15"},{"lineNumber":136,"author":{"gitId":"stein414"},"content":"            return new ListIssueCommand();","lastModifiedDate":"2021-03-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":138,"author":{"gitId":"stein414"},"content":"        case FindIssueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-15"},{"lineNumber":139,"author":{"gitId":"stein414"},"content":"            return new FindIssueCommandParser().parse(arguments);","lastModifiedDate":"2021-03-15"},{"lineNumber":140,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":141,"author":{"gitId":"stein414"},"content":"        case EditIssueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-15"},{"lineNumber":142,"author":{"gitId":"stein414"},"content":"            return new EditIssueCommandParser().parse(arguments);","lastModifiedDate":"2021-03-15"},{"lineNumber":143,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":144,"author":{"gitId":"stein414"},"content":"        case DeleteIssueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-15"},{"lineNumber":145,"author":{"gitId":"stein414"},"content":"            return new DeleteIssueCommandParser().parse(arguments);","lastModifiedDate":"2021-03-15"},{"lineNumber":146,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":147,"author":{"gitId":"stein414"},"content":"        case CloseIssueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-26"},{"lineNumber":148,"author":{"gitId":"stein414"},"content":"            return new CloseIssueCommandParser().parse(arguments);","lastModifiedDate":"2021-03-26"},{"lineNumber":149,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":150,"author":{"gitId":"DrWala"},"content":"        // \u003d\u003d\u003d\u003d\u003d\u003d System Commands \u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-10"},{"lineNumber":151,"author":{"gitId":"DrWala"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-10"},{"lineNumber":152,"author":{"gitId":"DrWala"},"content":"            return new ClearCommand();","lastModifiedDate":"2021-03-10"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":160,"author":{"gitId":"cnlinh"},"content":"        case ViewHistoryCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-26"},{"lineNumber":161,"author":{"gitId":"cnlinh"},"content":"            return new ViewHistoryCommandParser().parse(arguments);","lastModifiedDate":"2021-03-26"},{"lineNumber":162,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":163,"author":{"gitId":"cnlinh"},"content":"        // \u003d\u003d\u003d\u003d\u003d\u003d Alias Commands \u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-26"},{"lineNumber":164,"author":{"gitId":"cnlinh"},"content":"        case AliasCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-13"},{"lineNumber":165,"author":{"gitId":"cnlinh"},"content":"            return new AliasCommandParser().parse(arguments);","lastModifiedDate":"2021-03-13"},{"lineNumber":166,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":167,"author":{"gitId":"cnlinh"},"content":"        case UnaliasCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-26"},{"lineNumber":168,"author":{"gitId":"cnlinh"},"content":"            return new UnaliasCommandParser().parse(arguments);","lastModifiedDate":"2021-03-26"},{"lineNumber":169,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":170,"author":{"gitId":"cnlinh"},"content":"        case ListAliasCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-26"},{"lineNumber":171,"author":{"gitId":"cnlinh"},"content":"            return new ListAliasCommand();","lastModifiedDate":"2021-03-26"},{"lineNumber":172,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":173,"author":{"gitId":"benedictkhoomw"},"content":"        case UndoCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-27"},{"lineNumber":174,"author":{"gitId":"benedictkhoomw"},"content":"            return new UndoCommand();","lastModifiedDate":"2021-03-27"},{"lineNumber":175,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":176,"author":{"gitId":"benedictkhoomw"},"content":"        case RedoCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-27"},{"lineNumber":177,"author":{"gitId":"benedictkhoomw"},"content":"            return new RedoCommand();","lastModifiedDate":"2021-03-27"},{"lineNumber":178,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":180,"author":{"gitId":"cnlinh"},"content":"            if (addressBook.getAliasMapping().containsAlias(commandWord)) {","lastModifiedDate":"2021-04-06"},{"lineNumber":181,"author":{"gitId":"cnlinh"},"content":"                Alias alias \u003d addressBook.getAliasMapping().getAlias(commandWord);","lastModifiedDate":"2021-04-06"},{"lineNumber":182,"author":{"gitId":"cnlinh"},"content":"                return parseCommand(alias.getCommand() + \" \" + arguments, addressBook);","lastModifiedDate":"2021-04-06"},{"lineNumber":183,"author":{"gitId":"cnlinh"},"content":"            }","lastModifiedDate":"2021-03-13"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"cnlinh":27,"benedictkhoomw":12,"stein414":38,"colintkn":30,"-":58,"DrWala":22}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":" * commands","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"    public static final Prefix PREFIX_YEAR \u003d new Prefix(\"y/\");","lastModifiedDate":"2021-03-05"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"    public static final Prefix PREFIX_ROOM \u003d new Prefix(\"r/\");","lastModifiedDate":"2021-02-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    public static final Prefix PREFIX_ROOM_NUMBER \u003d new Prefix(\"r/\");","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    public static final Prefix PREFIX_ROOM_TYPE \u003d new Prefix(\"t/\");","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    public static final Prefix PREFIX_ROOM_TAG \u003d new Prefix(\"g/\");","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    public static final Prefix PREFIX_TIMESTAMP \u003d new Prefix(\"t/\");","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"s/\");","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"g/\");","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"    public static final Prefix PREFIX_ALIAS \u003d new Prefix(\"a/\");","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"    public static final Prefix PREFIX_COMMAND \u003d new Prefix(\"cmd/\");","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"    public static final Prefix PREFIX_RESIDENT_INDEX \u003d new Prefix(\"ri/\");","lastModifiedDate":"2021-04-05"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"    public static final Prefix PREFIX_ROOM_INDEX \u003d new Prefix(\"oi/\");","lastModifiedDate":"2021-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"cnlinh":3,"stein414":7,"colintkn":5,"-":13,"DrWala":3}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Category;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Description;","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Status;","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Timestamp;","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;","lastModifiedDate":"2021-03-05"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;","lastModifiedDate":"2021-03-05"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;","lastModifiedDate":"2021-03-05"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.IsOccupied;","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomType;","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-05"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"     * Parses a {@code String year} into an {@code Year}.","lastModifiedDate":"2021-03-05"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-05"},{"lineNumber":96,"author":{"gitId":"colintkn"},"content":"     *","lastModifiedDate":"2021-03-05"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"     * @throws ParseException if the given {@code year} is invalid.","lastModifiedDate":"2021-03-05"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-05"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"    public static Year parseYear(String year) throws ParseException {","lastModifiedDate":"2021-03-05"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"        requireNonNull(year);","lastModifiedDate":"2021-03-05"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"        String trimmedYear \u003d year.trim();","lastModifiedDate":"2021-03-05"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"        if (!Year.isValidYear(trimmedYear)) {","lastModifiedDate":"2021-03-05"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"            throw new ParseException(Year.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-05"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-05"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"        return new Year(trimmedYear);","lastModifiedDate":"2021-03-05"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-05"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":108,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-02-25"},{"lineNumber":109,"author":{"gitId":"colintkn"},"content":"     * Parses a {@code String room} into an {@code Room}.","lastModifiedDate":"2021-02-25"},{"lineNumber":110,"author":{"gitId":"colintkn"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-02-25"},{"lineNumber":111,"author":{"gitId":"colintkn"},"content":"     *","lastModifiedDate":"2021-02-25"},{"lineNumber":112,"author":{"gitId":"colintkn"},"content":"     * @throws ParseException if the given {@code room} is invalid.","lastModifiedDate":"2021-02-25"},{"lineNumber":113,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-02-25"},{"lineNumber":114,"author":{"gitId":"colintkn"},"content":"    public static Room parseRoom(String room) throws ParseException {","lastModifiedDate":"2021-02-25"},{"lineNumber":115,"author":{"gitId":"colintkn"},"content":"        requireNonNull(room);","lastModifiedDate":"2021-02-25"},{"lineNumber":116,"author":{"gitId":"colintkn"},"content":"        String trimmedRoom \u003d room.trim();","lastModifiedDate":"2021-02-25"},{"lineNumber":117,"author":{"gitId":"colintkn"},"content":"        if (!Room.isValidRoom(trimmedRoom)) {","lastModifiedDate":"2021-02-25"},{"lineNumber":118,"author":{"gitId":"colintkn"},"content":"            throw new ParseException(Room.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-02-25"},{"lineNumber":119,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-02-25"},{"lineNumber":120,"author":{"gitId":"colintkn"},"content":"        return new Room(trimmedRoom);","lastModifiedDate":"2021-02-25"},{"lineNumber":121,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-02-25"},{"lineNumber":122,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":149,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":150,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":151,"author":{"gitId":"DrWala"},"content":"     * Parses a {@code String roomNumber} into a {@code RoomNumber}.","lastModifiedDate":"2021-03-10"},{"lineNumber":152,"author":{"gitId":"DrWala"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-10"},{"lineNumber":153,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":154,"author":{"gitId":"DrWala"},"content":"     * @throws ParseException if the given {@code roomNumber} is invalid.","lastModifiedDate":"2021-03-10"},{"lineNumber":155,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":156,"author":{"gitId":"stein414"},"content":"    public static seedu.address.model.room.RoomNumber parseRoomNumber(String roomNumber) throws ParseException {","lastModifiedDate":"2021-03-16"},{"lineNumber":157,"author":{"gitId":"DrWala"},"content":"        requireNonNull(roomNumber);","lastModifiedDate":"2021-03-10"},{"lineNumber":158,"author":{"gitId":"DrWala"},"content":"        String trimmedRoomNumber \u003d roomNumber.trim();","lastModifiedDate":"2021-03-10"},{"lineNumber":159,"author":{"gitId":"stein414"},"content":"        if (!seedu.address.model.room.RoomNumber.isValidRoomNumber(trimmedRoomNumber)) {","lastModifiedDate":"2021-03-16"},{"lineNumber":160,"author":{"gitId":"stein414"},"content":"            throw new ParseException(seedu.address.model.room.RoomNumber.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-16"},{"lineNumber":161,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":162,"author":{"gitId":"stein414"},"content":"        return new seedu.address.model.room.RoomNumber(trimmedRoomNumber);","lastModifiedDate":"2021-03-16"},{"lineNumber":163,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":164,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":165,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":166,"author":{"gitId":"DrWala"},"content":"     * Parses a {@code String roomType} into a {@code RoomType}.","lastModifiedDate":"2021-03-10"},{"lineNumber":167,"author":{"gitId":"DrWala"},"content":"     * Leading and trailing whitespaces will be trimmed, and text will be converted to uppercase.","lastModifiedDate":"2021-03-10"},{"lineNumber":168,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":169,"author":{"gitId":"DrWala"},"content":"     * @throws ParseException if the given {@code roomType} is invalid.","lastModifiedDate":"2021-03-10"},{"lineNumber":170,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":171,"author":{"gitId":"DrWala"},"content":"    public static RoomType parseRoomType(String roomType) throws ParseException {","lastModifiedDate":"2021-03-10"},{"lineNumber":172,"author":{"gitId":"DrWala"},"content":"        requireNonNull(roomType);","lastModifiedDate":"2021-03-10"},{"lineNumber":173,"author":{"gitId":"DrWala"},"content":"        String trimmedRoomType \u003d roomType.toUpperCase().trim();","lastModifiedDate":"2021-03-10"},{"lineNumber":174,"author":{"gitId":"DrWala"},"content":"        if (!RoomType.isValidRoomType(trimmedRoomType)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":175,"author":{"gitId":"DrWala"},"content":"            throw new ParseException(RoomType.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-10"},{"lineNumber":176,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":177,"author":{"gitId":"DrWala"},"content":"        return new RoomType(trimmedRoomType);","lastModifiedDate":"2021-03-10"},{"lineNumber":178,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":179,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":180,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":181,"author":{"gitId":"DrWala"},"content":"     * Parses a {@code String roomOccupancyStatus} into a {@code IsOccupied}.","lastModifiedDate":"2021-03-10"},{"lineNumber":182,"author":{"gitId":"DrWala"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-10"},{"lineNumber":183,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":184,"author":{"gitId":"DrWala"},"content":"     * @throws ParseException if the given {@code roomOccupancyStatus} is invalid.","lastModifiedDate":"2021-03-10"},{"lineNumber":185,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":186,"author":{"gitId":"DrWala"},"content":"    public static IsOccupied parseRoomOccupancyStatus(String roomOccupancyStatus) throws ParseException {","lastModifiedDate":"2021-03-10"},{"lineNumber":187,"author":{"gitId":"DrWala"},"content":"        requireNonNull(roomOccupancyStatus);","lastModifiedDate":"2021-03-10"},{"lineNumber":188,"author":{"gitId":"DrWala"},"content":"        String trimmedRoomOccupancyStatus \u003d roomOccupancyStatus.trim();","lastModifiedDate":"2021-03-10"},{"lineNumber":189,"author":{"gitId":"DrWala"},"content":"        if (!IsOccupied.isValidOccupancyStatus(trimmedRoomOccupancyStatus)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":190,"author":{"gitId":"DrWala"},"content":"            throw new ParseException(IsOccupied.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-10"},{"lineNumber":191,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":192,"author":{"gitId":"DrWala"},"content":"        return new IsOccupied(trimmedRoomOccupancyStatus);","lastModifiedDate":"2021-03-10"},{"lineNumber":193,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":194,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":195,"author":{"gitId":"cnlinh"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dIssue Parsing Method\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-16"},{"lineNumber":196,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":197,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":198,"author":{"gitId":"stein414"},"content":"     * Parses a {@code String roomNumber} into a {@code RoomNumber}.","lastModifiedDate":"2021-03-16"},{"lineNumber":199,"author":{"gitId":"stein414"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-16"},{"lineNumber":200,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-16"},{"lineNumber":201,"author":{"gitId":"stein414"},"content":"     * @param roomNumber String representing the roomNumber.","lastModifiedDate":"2021-04-08"},{"lineNumber":202,"author":{"gitId":"stein414"},"content":"     * @return The parsed {@code RoomNumber}.","lastModifiedDate":"2021-04-08"},{"lineNumber":203,"author":{"gitId":"stein414"},"content":"     * @throws ParseException If the given {@code roomNumber} is invalid.","lastModifiedDate":"2021-04-08"},{"lineNumber":204,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":205,"author":{"gitId":"stein414"},"content":"    public static seedu.address.model.issue.RoomNumber parseIssueRoomNumber(String roomNumber) throws ParseException {","lastModifiedDate":"2021-03-16"},{"lineNumber":206,"author":{"gitId":"stein414"},"content":"        requireNonNull(roomNumber);","lastModifiedDate":"2021-03-15"},{"lineNumber":207,"author":{"gitId":"stein414"},"content":"        String trimmedRoomNumber \u003d roomNumber.trim();","lastModifiedDate":"2021-03-15"},{"lineNumber":208,"author":{"gitId":"stein414"},"content":"        if (!seedu.address.model.issue.RoomNumber.isValidRoomNumber(trimmedRoomNumber)) {","lastModifiedDate":"2021-03-16"},{"lineNumber":209,"author":{"gitId":"stein414"},"content":"            throw new ParseException(seedu.address.model.issue.RoomNumber.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-16"},{"lineNumber":210,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":211,"author":{"gitId":"stein414"},"content":"        return new seedu.address.model.issue.RoomNumber(trimmedRoomNumber);","lastModifiedDate":"2021-03-16"},{"lineNumber":212,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":213,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":214,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":215,"author":{"gitId":"stein414"},"content":"     * Parses a {@code String description} into a {@code Description}.","lastModifiedDate":"2021-03-15"},{"lineNumber":216,"author":{"gitId":"stein414"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-15"},{"lineNumber":217,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":218,"author":{"gitId":"stein414"},"content":"     * @param description String representing the description.","lastModifiedDate":"2021-04-08"},{"lineNumber":219,"author":{"gitId":"stein414"},"content":"     * @return The parsed {@code Description}.","lastModifiedDate":"2021-04-08"},{"lineNumber":220,"author":{"gitId":"stein414"},"content":"     * @throws ParseException If the given {@code description} is invalid.","lastModifiedDate":"2021-04-08"},{"lineNumber":221,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":222,"author":{"gitId":"stein414"},"content":"    public static Description parseDescription(String description) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":223,"author":{"gitId":"stein414"},"content":"        requireNonNull(description);","lastModifiedDate":"2021-03-15"},{"lineNumber":224,"author":{"gitId":"stein414"},"content":"        String trimmedDescription \u003d description.trim();","lastModifiedDate":"2021-03-15"},{"lineNumber":225,"author":{"gitId":"stein414"},"content":"        if (!Description.isValidDescription(trimmedDescription)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":226,"author":{"gitId":"stein414"},"content":"            throw new ParseException(Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":227,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":228,"author":{"gitId":"stein414"},"content":"        return new Description(trimmedDescription);","lastModifiedDate":"2021-03-15"},{"lineNumber":229,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":230,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":231,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":232,"author":{"gitId":"stein414"},"content":"     * Parses a {@code String timestamp} into a {@code Timestamp}.","lastModifiedDate":"2021-03-15"},{"lineNumber":233,"author":{"gitId":"stein414"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-15"},{"lineNumber":234,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":235,"author":{"gitId":"stein414"},"content":"     * @param timestamp String representing the timestamp.","lastModifiedDate":"2021-04-08"},{"lineNumber":236,"author":{"gitId":"stein414"},"content":"     * @return The parsed {@code Timestamp}.","lastModifiedDate":"2021-04-08"},{"lineNumber":237,"author":{"gitId":"stein414"},"content":"     * @throws ParseException If the given {@code timestamp} is invalid.","lastModifiedDate":"2021-04-08"},{"lineNumber":238,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":239,"author":{"gitId":"stein414"},"content":"    public static Timestamp parseTimestamp(String timestamp) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":240,"author":{"gitId":"stein414"},"content":"        requireNonNull(timestamp);","lastModifiedDate":"2021-03-15"},{"lineNumber":241,"author":{"gitId":"stein414"},"content":"        String trimmedTimestamp \u003d timestamp.trim();","lastModifiedDate":"2021-03-15"},{"lineNumber":242,"author":{"gitId":"stein414"},"content":"        if (!Timestamp.isValidTimestamp(trimmedTimestamp)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":243,"author":{"gitId":"stein414"},"content":"            throw new ParseException(Timestamp.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":244,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":245,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":246,"author":{"gitId":"stein414"},"content":"        LocalDateTime datetime \u003d LocalDateTime.parse(trimmedTimestamp.toUpperCase(), Timestamp.FORMATTER);","lastModifiedDate":"2021-04-07"},{"lineNumber":247,"author":{"gitId":"stein414"},"content":"        if (datetime.compareTo(LocalDateTime.now()) \u003e 0) {","lastModifiedDate":"2021-04-07"},{"lineNumber":248,"author":{"gitId":"stein414"},"content":"            throw new ParseException(Timestamp.MESSAGE_INVALID_FUTURE);","lastModifiedDate":"2021-04-07"},{"lineNumber":249,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":250,"author":{"gitId":"stein414"},"content":"        return new Timestamp(trimmedTimestamp);","lastModifiedDate":"2021-03-15"},{"lineNumber":251,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":252,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":253,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":254,"author":{"gitId":"stein414"},"content":"     * Parses a {@code String status} into a {@code Status}.","lastModifiedDate":"2021-03-15"},{"lineNumber":255,"author":{"gitId":"stein414"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-15"},{"lineNumber":256,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":257,"author":{"gitId":"stein414"},"content":"     * @param status String representing the status.","lastModifiedDate":"2021-04-08"},{"lineNumber":258,"author":{"gitId":"stein414"},"content":"     * @return The parsed {@code Status}.","lastModifiedDate":"2021-04-08"},{"lineNumber":259,"author":{"gitId":"stein414"},"content":"     * @throws ParseException If the given {@code status} is invalid.","lastModifiedDate":"2021-04-08"},{"lineNumber":260,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":261,"author":{"gitId":"stein414"},"content":"    public static Status parseStatus(String status) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":262,"author":{"gitId":"stein414"},"content":"        requireNonNull(status);","lastModifiedDate":"2021-03-15"},{"lineNumber":263,"author":{"gitId":"stein414"},"content":"        String trimmedStatus \u003d status.trim();","lastModifiedDate":"2021-03-15"},{"lineNumber":264,"author":{"gitId":"stein414"},"content":"        if (!Status.isValidStatus(trimmedStatus)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":265,"author":{"gitId":"stein414"},"content":"            throw new ParseException(Status.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":266,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":267,"author":{"gitId":"stein414"},"content":"        return new Status(trimmedStatus);","lastModifiedDate":"2021-03-15"},{"lineNumber":268,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":269,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":270,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":271,"author":{"gitId":"stein414"},"content":"     * Parses a {@code String category} into a {@code Category}.","lastModifiedDate":"2021-03-15"},{"lineNumber":272,"author":{"gitId":"stein414"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-15"},{"lineNumber":273,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":274,"author":{"gitId":"stein414"},"content":"     * @param category String representing the category.","lastModifiedDate":"2021-04-08"},{"lineNumber":275,"author":{"gitId":"stein414"},"content":"     * @return The parsed {@code Category}.","lastModifiedDate":"2021-04-08"},{"lineNumber":276,"author":{"gitId":"stein414"},"content":"     * @throws ParseException If the given {@code category} is invalid.","lastModifiedDate":"2021-04-08"},{"lineNumber":277,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":278,"author":{"gitId":"stein414"},"content":"    public static Category parseCategory(String category) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":279,"author":{"gitId":"stein414"},"content":"        if (category \u003d\u003d null) {","lastModifiedDate":"2021-03-15"},{"lineNumber":280,"author":{"gitId":"stein414"},"content":"            return null;","lastModifiedDate":"2021-03-15"},{"lineNumber":281,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":282,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":283,"author":{"gitId":"stein414"},"content":"        String trimmedCategory \u003d category.trim();","lastModifiedDate":"2021-03-15"},{"lineNumber":284,"author":{"gitId":"stein414"},"content":"        if (!Category.isValidCategory(trimmedCategory)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":285,"author":{"gitId":"stein414"},"content":"            throw new ParseException(Category.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":286,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":287,"author":{"gitId":"stein414"},"content":"        return new Category(trimmedCategory);","lastModifiedDate":"2021-03-15"},{"lineNumber":288,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":289,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":290,"author":{"gitId":"cnlinh"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dAlias Parsing Method\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-16"},{"lineNumber":291,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":292,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":293,"author":{"gitId":"cnlinh"},"content":"     * Parses a {@code String aliasName} and {@code String command} into a {@code Alias}.","lastModifiedDate":"2021-03-16"},{"lineNumber":294,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-07"},{"lineNumber":295,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName name of the alias","lastModifiedDate":"2021-03-16"},{"lineNumber":296,"author":{"gitId":"cnlinh"},"content":"     * @param command   content of the command","lastModifiedDate":"2021-03-16"},{"lineNumber":297,"author":{"gitId":"cnlinh"},"content":"     * @throws ParseException if the inputs are invalid","lastModifiedDate":"2021-03-16"},{"lineNumber":298,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":299,"author":{"gitId":"cnlinh"},"content":"    public static Alias parseAlias(String aliasName, String command) throws ParseException {","lastModifiedDate":"2021-03-13"},{"lineNumber":300,"author":{"gitId":"cnlinh"},"content":"        if (!Alias.isValidName(aliasName)) {","lastModifiedDate":"2021-03-16"},{"lineNumber":301,"author":{"gitId":"cnlinh"},"content":"            throw new ParseException(Alias.MESSAGE_NAME_CONSTRAINTS);","lastModifiedDate":"2021-03-16"},{"lineNumber":302,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":303,"author":{"gitId":"cnlinh"},"content":"        if (!Alias.isValidCommand(command)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":304,"author":{"gitId":"cnlinh"},"content":"            throw new ParseException(Alias.MESSAGE_COMMAND_CONSTRAINTS);","lastModifiedDate":"2021-03-31"},{"lineNumber":305,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":306,"author":{"gitId":"cnlinh"},"content":"        return new Alias(aliasName, command);","lastModifiedDate":"2021-03-13"},{"lineNumber":307,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":308,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"cnlinh":21,"stein414":103,"colintkn":35,"-":105,"DrWala":44}},{"path":"src/main/java/seedu/address/logic/parser/alias/AliasCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package seedu.address.logic.parser.alias;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMAND;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-04-08"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.alias.AliasCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":" * Parses input arguments and creates a new AliasCommand object.","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"public class AliasCommandParser implements Parser\u003cAliasCommand\u003e {","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"    private static final int ARGUMENT_NO \u003d 3;","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AliasCommandParser.class);","lastModifiedDate":"2021-04-08"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"     * Parses the given {@code String} of arguments in the context of the AliasCommand","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"     * and returns an AliasCommand object for execution.","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"     * @param args Arguments string.","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"     * @return An Alias Command object.","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"     * @throws ParseException If the user input does not conform the expected format.","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"     * @throws NullPointerException If the argument is null.","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"    public AliasCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"        requireAllNonNull(args);","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ALIAS, PREFIX_COMMAND);","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"        String[] parsedArgs \u003d args.split(\"\\\\s+\", ARGUMENT_NO);","lastModifiedDate":"2021-04-08"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"        if (argMultimap.getValue(PREFIX_ALIAS).isEmpty()","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"                || argMultimap.getValue(PREFIX_COMMAND).isEmpty()","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"                || parsedArgs.length \u003c 3) {","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"            logger.warning(\"Invalid alias command format\");","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-13"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AliasCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"        if (!parsedArgs[2].startsWith(\"cmd/\")) {","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"            logger.warning(\"Invalid alias name given\");","lastModifiedDate":"2021-04-08"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"            throw new ParseException(Alias.MESSAGE_NAME_CONSTRAINTS);","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"        assert parsedArgs[1].startsWith(\"a/\");","lastModifiedDate":"2021-04-08"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"        assert parsedArgs[2].startsWith(\"cmd/\");","lastModifiedDate":"2021-04-08"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"        String aliasName \u003d parsedArgs[1].substring(PREFIX_ALIAS.toString().length());","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"        String command \u003d parsedArgs[2].substring(PREFIX_COMMAND.toString().length());","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"        Alias alias \u003d ParserUtil.parseAlias(aliasName, command);","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"        return new AliasCommand(alias);","lastModifiedDate":"2021-03-13"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"cnlinh":64}},{"path":"src/main/java/seedu/address/logic/parser/alias/UnaliasCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package seedu.address.logic.parser.alias;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.alias.UnaliasCommand;","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":" * Parses input arguments and creates a new UnaliasCommand object.","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"public class UnaliasCommandParser implements Parser\u003cUnaliasCommand\u003e {","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(UnaliasCommandParser.class);","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"     * Parses the given {@code String} of arguments in the context of the UnaliasCommand","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"     * and returns an UnaliasCommand object for execution.","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"     * @param args Arguments string.","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"     * @return An Unalias Command object.","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"     * @throws ParseException If the user input does not conform the expected format.","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"     * @throws NullPointerException If the argument is null.","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"    public UnaliasCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"        requireAllNonNull(args);","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ALIAS);","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"        String aliasName \u003d argMultimap.getValue(PREFIX_ALIAS).orElse(\"\");","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"        if (aliasName.isEmpty()) {","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"            logger.warning(\"Invalid unalias command format\");","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnaliasCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"        return new UnaliasCommand(aliasName);","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"cnlinh":45}},{"path":"src/main/java/seedu/address/logic/parser/commandhistory/ViewHistoryCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.logic.parser.commandhistory;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.commandhistory.ViewHistoryCommand;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":" * Parses input arguments and creates a new {@code ViewHistoryCommand} object.","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"public class ViewHistoryCommandParser implements Parser\u003cViewHistoryCommand\u003e {","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    private static boolean isInvalidCount(int count) {","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"        return count \u003c\u003d 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code ViewHistoryCommand}","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"     * and returns a {@code ViewHistoryCommand} object for execution.","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"     * @param args The arguments to be parsed.","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The parsed {@code ViewHistoryCommand}.","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws ParseException If the user input does not conform the expected format","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"    public ViewHistoryCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        if (args \u003d\u003d null || args.isEmpty()) {","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"            return new ViewHistoryCommand();","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        try {","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"            int count \u003d Integer.parseInt(args.trim());","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"            if (isInvalidCount(count)) {","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"                throw new ParseException(","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewHistoryCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"            }","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"            return new ViewHistoryCommand(count);","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewHistoryCommand.MESSAGE_USAGE), nfe);","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"benedictkhoomw":46}},{"path":"src/main/java/seedu/address/logic/parser/issue/AddIssueCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.parser.issue;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-04-08"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.AddIssueCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Category;","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Description;","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.IssueStatus;","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.RoomNumber;","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Status;","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Timestamp;","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":" * Parses input arguments and creates a new AddIssueCommand object.","lastModifiedDate":"2021-04-08"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"public class AddIssueCommandParser implements Parser\u003cAddIssueCommand\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AddIssueCommandParser.class);","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"     * Parses the given {@code String} of arguments in the context of the AddIssueCommand","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"     * and returns an AddIssueCommand object for execution.","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"     * @param args The argument string.","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"     * @return {@code AddIssueCommand} with the specified arguments.","lastModifiedDate":"2021-04-08"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"     * @throws ParseException       If the user input does not conform the expected format.","lastModifiedDate":"2021-04-08"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If args is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"    public AddIssueCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-04-08"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ROOM_NUMBER, PREFIX_DESCRIPTION,","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"                PREFIX_TIMESTAMP, PREFIX_STATUS, PREFIX_CATEGORY, PREFIX_TAG);","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_ROOM_NUMBER, PREFIX_DESCRIPTION)","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"            logger.warning(\"Input is not in a valid format for iadd command\");","lastModifiedDate":"2021-04-08"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIssueCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"        RoomNumber roomNumber \u003d ParserUtil.parseIssueRoomNumber(argMultimap.getValue(PREFIX_ROOM_NUMBER).get());","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"        Timestamp timestamp \u003d ParserUtil","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"                .parseTimestamp(argMultimap.getValue(PREFIX_TIMESTAMP).orElse(new Timestamp().toString()));","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"        Status status \u003d ParserUtil","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"                .parseStatus(argMultimap.getValue(PREFIX_STATUS).orElse(IssueStatus.Pending.toString()));","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"        Category category \u003d ParserUtil","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"                .parseCategory(argMultimap.getValue(PREFIX_CATEGORY).orElse(Category.NO_CATEGORY_NAME));","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2021-03-26"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"        Issue issue \u003d new Issue(roomNumber, description, timestamp, status, category, tagList);","lastModifiedDate":"2021-03-26"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"        return new AddIssueCommand(issue);","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"cnlinh":6,"stein414":78}},{"path":"src/main/java/seedu/address/logic/parser/issue/CloseIssueCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.parser.issue;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.CloseIssueCommand;","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":" * Parses input arguments and creates a new CloseIssueCommand object.","lastModifiedDate":"2021-04-08"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"public class CloseIssueCommandParser implements Parser\u003cCloseIssueCommand\u003e {","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CloseIssueCommandParser.class);","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"     * Parses the given {@code String} of arguments in the context of the CloseIssueCommand","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"     * and returns a CloseIssueCommand object for execution.","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"     * @param args The argument string.","lastModifiedDate":"2021-04-08"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"     * @return {@code CloseIssueCommand} with the specified arguments.","lastModifiedDate":"2021-04-08"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"     * @throws ParseException       If the user input does not conform the expected format.","lastModifiedDate":"2021-04-08"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If args is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    public CloseIssueCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-04-08"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        try {","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"            return new CloseIssueCommand(index);","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"            logger.warning(\"Failed to parse index for iclo command\");","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CloseIssueCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"stein414":44}},{"path":"src/main/java/seedu/address/logic/parser/issue/DeleteIssueCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.parser.issue;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.DeleteIssueCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":" * Parses input arguments and creates a new DeleteIssueCommand object.","lastModifiedDate":"2021-04-08"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"public class DeleteIssueCommandParser implements Parser\u003cDeleteIssueCommand\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(DeleteIssueCommandParser.class);","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteIssueCommand","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"     * and returns a DeleteIssueCommand object for execution.","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"     * @param args The argument string.","lastModifiedDate":"2021-04-08"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"     * @return {@code DeleteIssueCommand} with the specified arguments.","lastModifiedDate":"2021-04-08"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"     * @throws ParseException       If the user input does not conform the expected format.","lastModifiedDate":"2021-04-08"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If args is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    public DeleteIssueCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-04-08"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        try {","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"            return new DeleteIssueCommand(index);","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"            logger.warning(\"Failed to parse index for idel command\");","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteIssueCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"stein414":44}},{"path":"src/main/java/seedu/address/logic/parser/issue/EditIssueCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.parser.issue;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import java.util.Collection;","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-04-08"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.EditIssueCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.EditIssueCommand.EditIssueDescriptor;","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":" * Parses input arguments and creates a new EditIssueCommand object.","lastModifiedDate":"2021-04-08"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"public class EditIssueCommandParser implements Parser\u003cEditIssueCommand\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EditIssueCommandParser.class);","lastModifiedDate":"2021-04-08"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"     * Parses the given {@code String} of arguments in the context of the EditIssueCommand","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"     * and returns an EditIssueCommand object for execution.","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"     * @param args The argument string.","lastModifiedDate":"2021-04-08"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"     * @return {@code EditIssueCommand} with the specified arguments.","lastModifiedDate":"2021-04-08"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"     * @throws ParseException       If the user input does not conform the expected format.","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If args is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"    public EditIssueCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ROOM_NUMBER, PREFIX_DESCRIPTION,","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"                PREFIX_TIMESTAMP, PREFIX_STATUS, PREFIX_CATEGORY, PREFIX_TAG);","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"        Index index;","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        try {","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"            logger.warning(\"Failed to parse preamble for index to be edited for iedit command\");","lastModifiedDate":"2021-04-08"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditIssueCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"        EditIssueDescriptor editIssueDescriptor \u003d new EditIssueDescriptor();","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"        if (argMultimap.getValue(PREFIX_ROOM_NUMBER).isPresent()) {","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"            editIssueDescriptor","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"                    .setRoomNumber(ParserUtil.parseIssueRoomNumber(argMultimap.getValue(PREFIX_ROOM_NUMBER).get()));","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"            editIssueDescriptor","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"                    .setDescription(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"        if (argMultimap.getValue(PREFIX_TIMESTAMP).isPresent()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"            editIssueDescriptor.setTimestamp(ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_TIMESTAMP).get()));","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"            editIssueDescriptor.setStatus(ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get()));","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"            editIssueDescriptor.setCategory(ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));","lastModifiedDate":"2021-03-16"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"cnlinh"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editIssueDescriptor::setTags);","lastModifiedDate":"2021-03-26"},{"lineNumber":80,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"        if (!editIssueDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-03-16"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"            logger.warning(\"iedit command did not edit any field for targeted issue\");","lastModifiedDate":"2021-04-08"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"            throw new ParseException(EditIssueCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"        return new EditIssueCommand(index, editIssueDescriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":90,"author":{"gitId":"cnlinh"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2021-03-26"},{"lineNumber":91,"author":{"gitId":"cnlinh"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2021-03-26"},{"lineNumber":92,"author":{"gitId":"cnlinh"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2021-03-26"},{"lineNumber":93,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":94,"author":{"gitId":"cnlinh"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2021-03-26"},{"lineNumber":95,"author":{"gitId":"cnlinh"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2021-03-26"},{"lineNumber":96,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":97,"author":{"gitId":"cnlinh"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2021-03-26"},{"lineNumber":98,"author":{"gitId":"cnlinh"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-26"},{"lineNumber":99,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":100,"author":{"gitId":"cnlinh"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2021-03-26"},{"lineNumber":101,"author":{"gitId":"cnlinh"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2021-03-26"},{"lineNumber":102,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"cnlinh":24,"stein414":79}},{"path":"src/main/java/seedu/address/logic/parser/issue/FindIssueCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.parser.issue;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-04-08"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.FindIssueCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.issue.RoomNumberOrTagContainsKeywordsPredicate;","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":" * Parses input arguments and creates a new FindIssueCommand object","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"public class FindIssueCommandParser implements Parser\u003cFindIssueCommand\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(FindIssueCommandParser.class);","lastModifiedDate":"2021-04-08"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"     * Parses the given {@code String} of arguments in the context of the FindIssueCommand","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"     * and returns a FindIssueCommand object for execution.","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"     * @param args The argument string.","lastModifiedDate":"2021-04-08"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"     * @return {@code FindIssueCommand} with the specified arguments.","lastModifiedDate":"2021-04-08"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"     * @throws ParseException       If the user input does not conform the expected format.","lastModifiedDate":"2021-04-08"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If args is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    public FindIssueCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-04-08"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"            logger.warning(\"ifind was either given an empty keyword or a keyword with only whitespaces\");","lastModifiedDate":"2021-04-08"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindIssueCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        return new FindIssueCommand(new RoomNumberOrTagContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"stein414":44,"DrWala":2}},{"path":"src/main/java/seedu/address/logic/parser/resident/AddResidentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.parser.resident;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;","lastModifiedDate":"2021-03-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;","lastModifiedDate":"2021-03-05"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;","lastModifiedDate":"2021-03-05"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;","lastModifiedDate":"2021-03-05"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;","lastModifiedDate":"2021-03-05"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":" * Parses input arguments and creates a new AddResidentCommand object","lastModifiedDate":"2021-02-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"public class AddResidentCommandParser implements Parser\u003cAddResidentCommand\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"     * Parses the given {@code String} of arguments in the context of the AddResidentCommand","lastModifiedDate":"2021-02-22"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"     * and returns an AddResidentCommand object for execution.","lastModifiedDate":"2021-02-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"    public AddResidentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-02-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_YEAR);","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_YEAR)","lastModifiedDate":"2021-03-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddResidentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-02-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        Year year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());","lastModifiedDate":"2021-03-05"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        Room room \u003d ParserUtil.parseRoom(Room.UNALLOCATED_REGEX);","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"        Resident resident \u003d new Resident(name, phone, email, year, room);","lastModifiedDate":"2021-03-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        return new AddResidentCommand(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"colintkn":27,"-":37}},{"path":"src/main/java/seedu/address/logic/parser/resident/DeleteResidentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.parser.resident;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.DeleteResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":" * Parses input arguments and creates a new DeleteResidentCommand object","lastModifiedDate":"2021-02-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"public class DeleteResidentCommandParser implements Parser\u003cDeleteResidentCommand\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteResidentCommand","lastModifiedDate":"2021-02-22"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"     * and returns a DeleteResidentCommand object for execution.","lastModifiedDate":"2021-02-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    public DeleteResidentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-02-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"            return new DeleteResidentCommand(index);","lastModifiedDate":"2021-02-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteResidentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-02-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"colintkn":11,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/resident/EditResidentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.parser.resident;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;","lastModifiedDate":"2021-03-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand.EditResidentDescriptor;","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":" * Parses input arguments and creates a new EditResidentCommand object","lastModifiedDate":"2021-02-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"public class EditResidentCommandParser implements Parser\u003cEditResidentCommand\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"     * Parses the given {@code String} of arguments in the context of the EditResidentCommand","lastModifiedDate":"2021-02-22"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"     * and returns an EditResidentCommand object for execution.","lastModifiedDate":"2021-02-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"    public EditResidentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-02-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_YEAR);","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-02-22"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"                EditResidentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-02-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor editResidentDescriptor \u003d new EditResidentDescriptor();","lastModifiedDate":"2021-03-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"            editResidentDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2021-03-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"            editResidentDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2021-03-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"            editResidentDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2021-03-05"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-05"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        if (argMultimap.getValue(PREFIX_YEAR).isPresent()) {","lastModifiedDate":"2021-03-05"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"            editResidentDescriptor.setYear(ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get()));","lastModifiedDate":"2021-03-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"        if (!editResidentDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-03-05"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"            throw new ParseException(EditResidentCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-02-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        return new EditResidentCommand(index, editResidentDescriptor);","lastModifiedDate":"2021-03-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"colintkn":26,"-":36}},{"path":"src/main/java/seedu/address/logic/parser/resident/FindResidentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.parser.resident;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.FindResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":" * Parses input arguments and creates a new FindResidentCommand object","lastModifiedDate":"2021-02-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"public class FindResidentCommandParser implements Parser\u003cFindResidentCommand\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"     * Parses the given {@code String} of arguments in the context of the FindResidentCommand","lastModifiedDate":"2021-02-22"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"     * and returns a FindResidentCommand object for execution.","lastModifiedDate":"2021-02-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    public FindResidentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-02-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindResidentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-02-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        return new FindResidentCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-02-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"colintkn":11,"-":23}},{"path":"src/main/java/seedu/address/logic/parser/residentroom/AllocateResidentRoomCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.parser.residentroom;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESIDENT_INDEX;","lastModifiedDate":"2021-04-05"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_INDEX;","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.residentroom.AllocateResidentRoomCommand;","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-25"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"/**","lastModifiedDate":"2021-03-25"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":" * Parses input arguments and creates a new AddResidentCommand object","lastModifiedDate":"2021-03-25"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":" */","lastModifiedDate":"2021-03-25"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"public class AllocateResidentRoomCommandParser implements Parser\u003cAllocateResidentRoomCommand\u003e {","lastModifiedDate":"2021-03-25"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"     * Parses the given {@code String} of arguments in the context of the AddResidentCommand","lastModifiedDate":"2021-04-05"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"     * and returns an AddResidentCommand object for execution.","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-25"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    public AllocateResidentRoomCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-25"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_RESIDENT_INDEX, PREFIX_ROOM_INDEX);","lastModifiedDate":"2021-04-05"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_RESIDENT_INDEX, PREFIX_ROOM_INDEX)","lastModifiedDate":"2021-04-05"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-25"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-25"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"                    AllocateResidentRoomCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-25"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"        try {","lastModifiedDate":"2021-04-05"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"            Index targetResidentIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_RESIDENT_INDEX).get());","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"            Index targetRoomIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_ROOM_INDEX).get());","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"            return new AllocateResidentRoomCommand(targetResidentIndex, targetRoomIndex);","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"            throw new ParseException(","lastModifiedDate":"2021-04-05"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AllocateResidentRoomCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-04-05"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-25"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-25"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-25"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-25"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-03-25"}],"authorContributionMap":{"colintkn":55}},{"path":"src/main/java/seedu/address/logic/parser/residentroom/DeallocateResidentRoomCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.parser.residentroom;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.residentroom.DeallocateResidentRoomCommand;","lastModifiedDate":"2021-03-25"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-25"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"/**","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":" * Parses input arguments and creates a new DeallocateResidentRoomCommand object","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":" */","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"public class DeallocateResidentRoomCommandParser implements Parser\u003cDeallocateResidentRoomCommand\u003e {","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"     * Parses the given {@code String} of arguments in the context of the DeallocateResidentRoom","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"     * and returns a DeallocateResidentRoomCommand object for execution.","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-25"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    public DeallocateResidentRoomCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-25"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"        try {","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"            return new DeallocateResidentRoomCommand(index);","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeallocateResidentRoomCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-03-25"}],"authorContributionMap":{"colintkn":32}},{"path":"src/main/java/seedu/address/logic/parser/room/AddRoomCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.parser.room;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TAG;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TYPE;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.AddRoomCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomNumber;","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomType;","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":" * Parses input arguments and creates a new AddRoomCommand object","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"public class AddRoomCommandParser implements Parser\u003cAddRoomCommand\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"     * Parses the given {@code String} of arguments in the context of the AddRoomCommand","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"     * and returns an AddRoomCommand object for execution.","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    public AddRoomCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_ROOM_NUMBER, PREFIX_ROOM_TYPE,","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"                        PREFIX_ROOM_TAG);","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_ROOM_NUMBER, PREFIX_ROOM_TYPE)","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRoomCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"        RoomNumber roomNumber \u003d ParserUtil.parseRoomNumber(argMultimap.getValue(PREFIX_ROOM_NUMBER).get());","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        RoomType roomType \u003d ParserUtil.parseRoomType(argMultimap.getValue(PREFIX_ROOM_TYPE).get());","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_ROOM_TAG));","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"        Room room \u003d new Room(roomNumber, roomType, tagList);","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        return new AddRoomCommand(room);","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-10"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"DrWala":62}},{"path":"src/main/java/seedu/address/logic/parser/room/DeleteRoomCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.parser.room;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.DeleteRoomCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":" * Parses input arguments and creates a new DeleteRoomCommand object","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"public class DeleteRoomCommandParser implements Parser\u003cDeleteRoomCommand\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteRoomCommand","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"     * and returns a DeleteRoomCommand object for execution.","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    public DeleteRoomCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"        Index index \u003d ParserUtil.parseIndex(userInput);","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"        return new DeleteRoomCommand(index);","lastModifiedDate":"2021-04-03"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"DrWala":24}},{"path":"src/main/java/seedu/address/logic/parser/room/EditRoomCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.parser.room;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TAG;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TYPE;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import java.util.Collection;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.EditRoomCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.EditRoomCommand.EditRoomDescriptor;","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":" * Parses input arguments and creates a new EditRoomCommand object","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"public class EditRoomCommandParser implements Parser\u003cEditRoomCommand\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"     * Parses the given {@code String} of arguments in the context of the EditRoomCommand","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"     * and returns an EditRoomCommand object for execution.","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    public EditRoomCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"        requireNonNull(userInput);","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"                ArgumentTokenizer.tokenize(userInput, PREFIX_ROOM_NUMBER, PREFIX_ROOM_TYPE, PREFIX_ROOM_TAG);","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"        Index index;","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        EditRoomDescriptor editRoomDescriptor \u003d new EditRoomDescriptor();","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"        if (argMultimap.getValue(PREFIX_ROOM_NUMBER).isPresent()) {","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"            editRoomDescriptor","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"                    .setRoomNumber(ParserUtil.parseRoomNumber(argMultimap.getValue(PREFIX_ROOM_NUMBER).get()));","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        if (argMultimap.getValue(PREFIX_ROOM_TYPE).isPresent()) {","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"            editRoomDescriptor","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"                    .setRoomType(ParserUtil.parseRoomType(argMultimap.getValue(PREFIX_ROOM_TYPE).get()));","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_ROOM_TAG)).ifPresent(editRoomDescriptor::setTags);","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"        if (!editRoomDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"            throw new ParseException(EditRoomCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"        return new EditRoomCommand(index, editRoomDescriptor);","lastModifiedDate":"2021-03-10"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2021-03-10"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"DrWala":77}},{"path":"src/main/java/seedu/address/logic/parser/room/FindRoomCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.parser.room;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.FindRoomCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomNumberOrTagsContainsKeywordsPredicate;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"public class FindRoomCommandParser implements Parser\u003cFindRoomCommand\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"     * Parses the given {@code String} of arguments in the context of the FindRoomCommand","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"     * and returns a FindRoomCommand object for execution.","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    public FindRoomCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindRoomCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"        return new FindRoomCommand(new RoomNumberOrTagsContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"-":20,"DrWala":11}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import java.util.Objects;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;","lastModifiedDate":"2021-04-06"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.AliasMapping;","lastModifiedDate":"2021-04-06"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.IssueList;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.UniqueResidentList;","lastModifiedDate":"2021-03-05"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.UniqueResidentRoomList;","lastModifiedDate":"2021-03-25"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.room.RoomNumber;","lastModifiedDate":"2021-03-25"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.UniqueRoomList;","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":" * Duplicates are not allowed (by .isSameResident comparison)","lastModifiedDate":"2021-03-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    private final UniqueResidentList residents;","lastModifiedDate":"2021-03-05"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    private final UniqueRoomList rooms;","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"    private final UniqueResidentRoomList residentRooms;","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    private final IssueList issues;","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"    private final AliasMapping aliasMapping;","lastModifiedDate":"2021-04-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        residents \u003d new UniqueResidentList();","lastModifiedDate":"2021-03-05"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        rooms \u003d new UniqueRoomList();","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        residentRooms \u003d new UniqueResidentRoomList();","lastModifiedDate":"2021-03-25"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"        issues \u003d new IssueList();","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"        aliasMapping \u003d new AliasMapping();","lastModifiedDate":"2021-04-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"    public AddressBook() {","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"     * Creates an AddressBook using the Residents in the {@code toBeCopied}.","lastModifiedDate":"2021-04-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"     * Replaces the contents of the resident list with {@code residents}.","lastModifiedDate":"2021-03-05"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"     * {@code residents} must not contain duplicate residents.","lastModifiedDate":"2021-03-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"    public void setResidents(List\u003cResident\u003e residents) {","lastModifiedDate":"2021-03-05"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"        this.residents.setResidents(residents);","lastModifiedDate":"2021-03-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"    public void setRooms(List\u003cRoom\u003e rooms) {","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"        this.rooms.setRooms(rooms);","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"    public void setResidentRooms(List\u003cResidentRoom\u003e residentRooms) {","lastModifiedDate":"2021-03-25"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        this.residentRooms.setResidentRooms(residentRooms);","lastModifiedDate":"2021-03-25"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"     * Replaces the contents of the issue list with {@code issues}.","lastModifiedDate":"2021-03-16"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"    public void setIssues(List\u003cIssue\u003e issues) {","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"        this.issues.setIssues(issues);","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"    //// resident-level operations","lastModifiedDate":"2021-03-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"     * Returns true if a resident with the same identity as {@code resident} exists in the address book.","lastModifiedDate":"2021-03-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"    public boolean hasResident(Resident resident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"        requireNonNull(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"        return residents.contains(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":96,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2021-03-25"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"     * Returns true if a resident with the same identity as {@code resident} exists in the address book.","lastModifiedDate":"2021-03-25"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"    public boolean hasResident(Name name) {","lastModifiedDate":"2021-03-25"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-03-25"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"        return residents.contains(name);","lastModifiedDate":"2021-03-25"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"     * Adds a resident to the address book.","lastModifiedDate":"2021-03-05"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"     * The resident must not already exist in the address book.","lastModifiedDate":"2021-03-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"colintkn"},"content":"    public void addResident(Resident p) {","lastModifiedDate":"2021-03-05"},{"lineNumber":110,"author":{"gitId":"colintkn"},"content":"        residents.add(p);","lastModifiedDate":"2021-03-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":114,"author":{"gitId":"colintkn"},"content":"     * Replaces the given resident {@code target} in the list with {@code editedResident}.","lastModifiedDate":"2021-03-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":116,"author":{"gitId":"colintkn"},"content":"     * The resident identity of {@code editedResident} must not be the same","lastModifiedDate":"2021-03-05"},{"lineNumber":117,"author":{"gitId":"colintkn"},"content":"     * as another existing resident in the address book.","lastModifiedDate":"2021-03-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":119,"author":{"gitId":"colintkn"},"content":"    public void setResident(Resident target, Resident editedResident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":120,"author":{"gitId":"colintkn"},"content":"        requireNonNull(editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":122,"author":{"gitId":"colintkn"},"content":"        residents.setResident(target, editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":129,"author":{"gitId":"colintkn"},"content":"    public void removeResident(Resident key) {","lastModifiedDate":"2021-03-05"},{"lineNumber":130,"author":{"gitId":"colintkn"},"content":"        residents.remove(key);","lastModifiedDate":"2021-03-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":133,"author":{"gitId":"DrWala"},"content":"    //// room-level operations","lastModifiedDate":"2021-03-10"},{"lineNumber":134,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":136,"author":{"gitId":"DrWala"},"content":"     * Returns true if a room with the same identity as {@code room} exists SunRez.","lastModifiedDate":"2021-03-10"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":138,"author":{"gitId":"DrWala"},"content":"    public boolean hasRoom(Room room) {","lastModifiedDate":"2021-03-10"},{"lineNumber":139,"author":{"gitId":"DrWala"},"content":"        requireNonNull(room);","lastModifiedDate":"2021-03-10"},{"lineNumber":140,"author":{"gitId":"DrWala"},"content":"        return rooms.contains(room);","lastModifiedDate":"2021-03-10"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":144,"author":{"gitId":"colintkn"},"content":"     * Returns true if a room with the same identity as {@code room} exists SunRez.","lastModifiedDate":"2021-03-25"},{"lineNumber":145,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":146,"author":{"gitId":"colintkn"},"content":"    public boolean hasRoom(RoomNumber roomNumber) {","lastModifiedDate":"2021-03-25"},{"lineNumber":147,"author":{"gitId":"colintkn"},"content":"        requireNonNull(roomNumber);","lastModifiedDate":"2021-03-25"},{"lineNumber":148,"author":{"gitId":"colintkn"},"content":"        return rooms.contains(roomNumber);","lastModifiedDate":"2021-03-25"},{"lineNumber":149,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":150,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":152,"author":{"gitId":"DrWala"},"content":"     * Adds a room to SunRez.","lastModifiedDate":"2021-03-10"},{"lineNumber":153,"author":{"gitId":"DrWala"},"content":"     * The room must not already exist in SunRez.","lastModifiedDate":"2021-03-10"},{"lineNumber":154,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":155,"author":{"gitId":"DrWala"},"content":"    public void addRoom(Room room) {","lastModifiedDate":"2021-03-10"},{"lineNumber":156,"author":{"gitId":"DrWala"},"content":"        rooms.add(room);","lastModifiedDate":"2021-03-10"},{"lineNumber":157,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":158,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":159,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":160,"author":{"gitId":"DrWala"},"content":"     * Replaces the given room {@code target} in the list with {@code editedRoom}.","lastModifiedDate":"2021-03-10"},{"lineNumber":161,"author":{"gitId":"DrWala"},"content":"     * {@code target} must exist in SunRez.","lastModifiedDate":"2021-03-10"},{"lineNumber":162,"author":{"gitId":"DrWala"},"content":"     * The room identity of {@code editedRoom} must not be the same as another existing room in SunRez.","lastModifiedDate":"2021-03-10"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":164,"author":{"gitId":"DrWala"},"content":"    public void setRoom(Room target, Room editedRoom) {","lastModifiedDate":"2021-03-10"},{"lineNumber":165,"author":{"gitId":"DrWala"},"content":"        requireNonNull(editedRoom);","lastModifiedDate":"2021-03-10"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":167,"author":{"gitId":"DrWala"},"content":"        rooms.setRoom(target, editedRoom);","lastModifiedDate":"2021-03-10"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":172,"author":{"gitId":"DrWala"},"content":"     * {@code Room} must exist in SunRez.","lastModifiedDate":"2021-03-10"},{"lineNumber":173,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":174,"author":{"gitId":"DrWala"},"content":"    public void removeRoom(Room key) {","lastModifiedDate":"2021-03-10"},{"lineNumber":175,"author":{"gitId":"DrWala"},"content":"        rooms.remove(key);","lastModifiedDate":"2021-03-10"},{"lineNumber":176,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":177,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":178,"author":{"gitId":"colintkn"},"content":"    //// residentroom-level operations","lastModifiedDate":"2021-03-25"},{"lineNumber":179,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":180,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":181,"author":{"gitId":"colintkn"},"content":"     * Returns true if a residentroom with the same name or room number exists in SunRez.","lastModifiedDate":"2021-03-25"},{"lineNumber":182,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":183,"author":{"gitId":"colintkn"},"content":"    public boolean hasEitherResidentRoom(ResidentRoom residentRoom) {","lastModifiedDate":"2021-03-25"},{"lineNumber":184,"author":{"gitId":"colintkn"},"content":"        requireNonNull(residentRoom);","lastModifiedDate":"2021-03-25"},{"lineNumber":185,"author":{"gitId":"colintkn"},"content":"        return residentRooms.containsEitherResidentRoom(residentRoom);","lastModifiedDate":"2021-03-25"},{"lineNumber":186,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":187,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":188,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":189,"author":{"gitId":"colintkn"},"content":"     * Returns true if a residentroom with the same name and room number exists in SunRez.","lastModifiedDate":"2021-03-25"},{"lineNumber":190,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":191,"author":{"gitId":"colintkn"},"content":"    public boolean hasBothResidentRoom(ResidentRoom residentRoom) {","lastModifiedDate":"2021-03-25"},{"lineNumber":192,"author":{"gitId":"colintkn"},"content":"        requireNonNull(residentRoom);","lastModifiedDate":"2021-03-25"},{"lineNumber":193,"author":{"gitId":"colintkn"},"content":"        return residentRooms.containsBothResidentRoom(residentRoom);","lastModifiedDate":"2021-03-25"},{"lineNumber":194,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":195,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":196,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":197,"author":{"gitId":"colintkn"},"content":"     * Adds a residentroom to SunRez.","lastModifiedDate":"2021-03-25"},{"lineNumber":198,"author":{"gitId":"colintkn"},"content":"     * The residentroom must not already exist in SunRez.","lastModifiedDate":"2021-03-25"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":200,"author":{"gitId":"colintkn"},"content":"    public void addResidentRoom(ResidentRoom residentRoom) {","lastModifiedDate":"2021-03-25"},{"lineNumber":201,"author":{"gitId":"colintkn"},"content":"        residentRooms.add(residentRoom);","lastModifiedDate":"2021-03-25"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":204,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":205,"author":{"gitId":"colintkn"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2021-03-25"},{"lineNumber":206,"author":{"gitId":"colintkn"},"content":"     * {@code ResidentRoom} must exist in SunRez.","lastModifiedDate":"2021-03-25"},{"lineNumber":207,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":208,"author":{"gitId":"colintkn"},"content":"    public void removeResidentRoom(ResidentRoom key) {","lastModifiedDate":"2021-03-25"},{"lineNumber":209,"author":{"gitId":"colintkn"},"content":"        residentRooms.remove(key);","lastModifiedDate":"2021-03-25"},{"lineNumber":210,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":211,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":212,"author":{"gitId":"DrWala"},"content":"    //// meta methods","lastModifiedDate":"2021-03-10"},{"lineNumber":213,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2021-03-10"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2021-03-10"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2021-03-10"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":220,"author":{"gitId":"DrWala"},"content":"        setResidents(newData.getResidentList());","lastModifiedDate":"2021-03-13"},{"lineNumber":221,"author":{"gitId":"DrWala"},"content":"        setRooms(newData.getRoomList());","lastModifiedDate":"2021-03-10"},{"lineNumber":222,"author":{"gitId":"colintkn"},"content":"        setResidentRooms(newData.getResidentRoomList());","lastModifiedDate":"2021-03-25"},{"lineNumber":223,"author":{"gitId":"stein414"},"content":"        setIssues(newData.getIssueList());","lastModifiedDate":"2021-03-16"},{"lineNumber":224,"author":{"gitId":"cnlinh"},"content":"        setAliasMapping(newData.getAliasMapping());","lastModifiedDate":"2021-04-06"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"stein414"},"content":"    //// issue-level operations","lastModifiedDate":"2021-03-15"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":230,"author":{"gitId":"stein414"},"content":"     * Returns true if a issue with the same identity as {@code issue} exists SunRez.","lastModifiedDate":"2021-03-31"},{"lineNumber":231,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":232,"author":{"gitId":"stein414"},"content":"     * @param issue The issue to check.","lastModifiedDate":"2021-04-08"},{"lineNumber":233,"author":{"gitId":"stein414"},"content":"     * @return True if SunRez has the issue.","lastModifiedDate":"2021-04-08"},{"lineNumber":234,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code issue} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":236,"author":{"gitId":"stein414"},"content":"    public boolean hasIssue(Issue issue) {","lastModifiedDate":"2021-03-31"},{"lineNumber":237,"author":{"gitId":"stein414"},"content":"        return issues.contains(issue);","lastModifiedDate":"2021-03-31"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":241,"author":{"gitId":"stein414"},"content":"     * Adds the given issue.","lastModifiedDate":"2021-04-08"},{"lineNumber":242,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":243,"author":{"gitId":"stein414"},"content":"     * @param issue The issue to add.","lastModifiedDate":"2021-04-08"},{"lineNumber":244,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code issue} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":246,"author":{"gitId":"stein414"},"content":"    public void addIssue(Issue issue) {","lastModifiedDate":"2021-03-15"},{"lineNumber":247,"author":{"gitId":"stein414"},"content":"        issues.add(issue);","lastModifiedDate":"2021-03-15"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":251,"author":{"gitId":"stein414"},"content":"     * Replaces the given issue {@code target} in the list with","lastModifiedDate":"2021-03-15"},{"lineNumber":252,"author":{"gitId":"stein414"},"content":"     * {@code editedIssue}.","lastModifiedDate":"2021-03-15"},{"lineNumber":253,"author":{"gitId":"stein414"},"content":"     * {@code target} must exist in SunRez.","lastModifiedDate":"2021-04-08"},{"lineNumber":254,"author":{"gitId":"stein414"},"content":"     * The issue identity of {@code editedIssue} must not be the same as another","lastModifiedDate":"2021-03-15"},{"lineNumber":255,"author":{"gitId":"stein414"},"content":"     * existing issue in SunRez.","lastModifiedDate":"2021-04-08"},{"lineNumber":256,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":257,"author":{"gitId":"stein414"},"content":"     * @param target      The target issue to replace.","lastModifiedDate":"2021-04-08"},{"lineNumber":258,"author":{"gitId":"stein414"},"content":"     * @param editedIssue The replacement issue.","lastModifiedDate":"2021-04-08"},{"lineNumber":259,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code target} or {@code editedIssue} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":261,"author":{"gitId":"stein414"},"content":"    public void setIssue(Issue target, Issue editedIssue) {","lastModifiedDate":"2021-03-15"},{"lineNumber":262,"author":{"gitId":"stein414"},"content":"        issues.setIssue(target, editedIssue);","lastModifiedDate":"2021-03-15"},{"lineNumber":263,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":265,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":266,"author":{"gitId":"stein414"},"content":"     * Removes {@code key} from this SunRez.","lastModifiedDate":"2021-04-08"},{"lineNumber":267,"author":{"gitId":"stein414"},"content":"     * {@code key} must exist in SunRez.","lastModifiedDate":"2021-04-08"},{"lineNumber":268,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":269,"author":{"gitId":"stein414"},"content":"     * @param key Issue to be removed.","lastModifiedDate":"2021-04-08"},{"lineNumber":270,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code key} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":271,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":272,"author":{"gitId":"stein414"},"content":"    public void removeIssue(Issue key) {","lastModifiedDate":"2021-03-15"},{"lineNumber":273,"author":{"gitId":"stein414"},"content":"        issues.remove(key);","lastModifiedDate":"2021-03-15"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":277,"author":{"gitId":"stein414"},"content":"     * Checks if any issues have the given room associated with it.","lastModifiedDate":"2021-04-08"},{"lineNumber":278,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":279,"author":{"gitId":"DrWala"},"content":"     * @param target Room to check if it has issues associated with it.","lastModifiedDate":"2021-04-06"},{"lineNumber":280,"author":{"gitId":"DrWala"},"content":"     * @return True if there are issues with the given room associated with it.","lastModifiedDate":"2021-04-07"},{"lineNumber":281,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":282,"author":{"gitId":"DrWala"},"content":"    public boolean issuesContainRoom(Room target) {","lastModifiedDate":"2021-04-06"},{"lineNumber":283,"author":{"gitId":"DrWala"},"content":"        return issues.containsRoom(target);","lastModifiedDate":"2021-04-06"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"stein414"},"content":"        return residents.asUnmodifiableObservableList().size() + \" residents\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":291,"author":{"gitId":"stein414"},"content":"                + rooms.asUnmodifiableObservableList().size() + \" rooms\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":292,"author":{"gitId":"stein414"},"content":"                + issues.asUnmodifiableObservableList().size() + \" issues\";","lastModifiedDate":"2021-03-15"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"colintkn"},"content":"    public ObservableList\u003cResident\u003e getResidentList() {","lastModifiedDate":"2021-03-05"},{"lineNumber":298,"author":{"gitId":"colintkn"},"content":"        return residents.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-05"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":301,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":302,"author":{"gitId":"DrWala"},"content":"    public ObservableList\u003cRoom\u003e getRoomList() {","lastModifiedDate":"2021-03-10"},{"lineNumber":303,"author":{"gitId":"DrWala"},"content":"        return rooms.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-10"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":306,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":307,"author":{"gitId":"stein414"},"content":"    public ObservableList\u003cIssue\u003e getIssueList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":308,"author":{"gitId":"stein414"},"content":"        return issues.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-15"},{"lineNumber":309,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":310,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":311,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":312,"author":{"gitId":"colintkn"},"content":"    public ObservableList\u003cResidentRoom\u003e getResidentRoomList() {","lastModifiedDate":"2021-03-25"},{"lineNumber":313,"author":{"gitId":"colintkn"},"content":"        return residentRooms.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-25"},{"lineNumber":314,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":315,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":316,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":317,"author":{"gitId":"cnlinh"},"content":"     * Returns the current alias mapping.","lastModifiedDate":"2021-04-06"},{"lineNumber":318,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":319,"author":{"gitId":"cnlinh"},"content":"     * @return The mapping.","lastModifiedDate":"2021-04-06"},{"lineNumber":320,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":321,"author":{"gitId":"cnlinh"},"content":"    public AliasMapping getAliasMapping() {","lastModifiedDate":"2021-04-06"},{"lineNumber":322,"author":{"gitId":"cnlinh"},"content":"        return this.aliasMapping;","lastModifiedDate":"2021-04-06"},{"lineNumber":323,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":324,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":325,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":326,"author":{"gitId":"cnlinh"},"content":"     * Sets the current mapping to the specified mapping.","lastModifiedDate":"2021-04-06"},{"lineNumber":327,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":328,"author":{"gitId":"cnlinh"},"content":"     * @param aliasMapping The mapping.","lastModifiedDate":"2021-04-06"},{"lineNumber":329,"author":{"gitId":"cnlinh"},"content":"     * @throws NullPointerException If the input is null.","lastModifiedDate":"2021-04-06"},{"lineNumber":330,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":331,"author":{"gitId":"cnlinh"},"content":"    public void setAliasMapping(AliasMapping aliasMapping) {","lastModifiedDate":"2021-04-06"},{"lineNumber":332,"author":{"gitId":"cnlinh"},"content":"        requireNonNull(aliasMapping);","lastModifiedDate":"2021-04-06"},{"lineNumber":333,"author":{"gitId":"cnlinh"},"content":"        this.aliasMapping.setAliasMapping(aliasMapping);","lastModifiedDate":"2021-04-06"},{"lineNumber":334,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":335,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":336,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":337,"author":{"gitId":"cnlinh"},"content":"     * Adds a user-defined alias to the current mapping.","lastModifiedDate":"2021-04-06"},{"lineNumber":338,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":339,"author":{"gitId":"cnlinh"},"content":"     * @param alias The alias to be added.","lastModifiedDate":"2021-04-06"},{"lineNumber":340,"author":{"gitId":"cnlinh"},"content":"     * @throws NullPointerException If the input is null.","lastModifiedDate":"2021-04-06"},{"lineNumber":341,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":342,"author":{"gitId":"cnlinh"},"content":"    public void addAlias(Alias alias) {","lastModifiedDate":"2021-04-06"},{"lineNumber":343,"author":{"gitId":"cnlinh"},"content":"        requireNonNull(alias);","lastModifiedDate":"2021-04-06"},{"lineNumber":344,"author":{"gitId":"cnlinh"},"content":"        this.aliasMapping.addAlias(alias);","lastModifiedDate":"2021-04-06"},{"lineNumber":345,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":346,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":347,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":348,"author":{"gitId":"cnlinh"},"content":"     * Deletes a user-defined alias from the current mapping.","lastModifiedDate":"2021-04-06"},{"lineNumber":349,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":350,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName The name of the alias to be deleted.","lastModifiedDate":"2021-04-06"},{"lineNumber":351,"author":{"gitId":"cnlinh"},"content":"     * @throws NullPointerException If the input is null.","lastModifiedDate":"2021-04-06"},{"lineNumber":352,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":353,"author":{"gitId":"cnlinh"},"content":"    public void deleteAlias(String aliasName) {","lastModifiedDate":"2021-04-06"},{"lineNumber":354,"author":{"gitId":"cnlinh"},"content":"        requireNonNull(aliasName);","lastModifiedDate":"2021-04-06"},{"lineNumber":355,"author":{"gitId":"cnlinh"},"content":"        this.aliasMapping.deleteAlias(aliasName);","lastModifiedDate":"2021-04-06"},{"lineNumber":356,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":357,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":358,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":359,"author":{"gitId":"cnlinh"},"content":"     * Returns an Alias based on name.","lastModifiedDate":"2021-04-06"},{"lineNumber":360,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":361,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName Name of the alias.","lastModifiedDate":"2021-04-06"},{"lineNumber":362,"author":{"gitId":"cnlinh"},"content":"     * @return The alias with the specified name.","lastModifiedDate":"2021-04-06"},{"lineNumber":363,"author":{"gitId":"cnlinh"},"content":"     * @throws NullPointerException If the input is null.","lastModifiedDate":"2021-04-06"},{"lineNumber":364,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":365,"author":{"gitId":"cnlinh"},"content":"    public Alias getAlias(String aliasName) {","lastModifiedDate":"2021-04-06"},{"lineNumber":366,"author":{"gitId":"cnlinh"},"content":"        requireNonNull(aliasName);","lastModifiedDate":"2021-04-06"},{"lineNumber":367,"author":{"gitId":"cnlinh"},"content":"        return this.aliasMapping.getAlias(aliasName);","lastModifiedDate":"2021-04-06"},{"lineNumber":368,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":369,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":370,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":371,"author":{"gitId":"cnlinh"},"content":"     * Checks if the current mapping contains an alias based on name.","lastModifiedDate":"2021-04-06"},{"lineNumber":372,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":373,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName Name of the alias.","lastModifiedDate":"2021-04-06"},{"lineNumber":374,"author":{"gitId":"cnlinh"},"content":"     * @return Whether the mapping contains the alias.","lastModifiedDate":"2021-04-06"},{"lineNumber":375,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":376,"author":{"gitId":"cnlinh"},"content":"    public boolean containsAlias(String aliasName) {","lastModifiedDate":"2021-04-06"},{"lineNumber":377,"author":{"gitId":"cnlinh"},"content":"        return this.aliasMapping.containsAlias(aliasName);","lastModifiedDate":"2021-04-06"},{"lineNumber":378,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":379,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":380,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":381,"author":{"gitId":"cnlinh"},"content":"     * Checks if the alias name is a reserved keyword.","lastModifiedDate":"2021-04-06"},{"lineNumber":382,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":383,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName Name of the alias.","lastModifiedDate":"2021-04-06"},{"lineNumber":384,"author":{"gitId":"cnlinh"},"content":"     * @return Whether the name is reserved.","lastModifiedDate":"2021-04-06"},{"lineNumber":385,"author":{"gitId":"cnlinh"},"content":"     * @throws NullPointerException If the input is null.","lastModifiedDate":"2021-04-06"},{"lineNumber":386,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":387,"author":{"gitId":"cnlinh"},"content":"    public boolean isReservedKeyword(String aliasName) {","lastModifiedDate":"2021-04-06"},{"lineNumber":388,"author":{"gitId":"cnlinh"},"content":"        requireNonNull(aliasName);","lastModifiedDate":"2021-04-06"},{"lineNumber":389,"author":{"gitId":"cnlinh"},"content":"        return this.aliasMapping.isReservedKeyword(aliasName);","lastModifiedDate":"2021-04-06"},{"lineNumber":390,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":391,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":392,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":393,"author":{"gitId":"cnlinh"},"content":"     * Checks if the command word is recursive.","lastModifiedDate":"2021-04-06"},{"lineNumber":394,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":395,"author":{"gitId":"cnlinh"},"content":"     * @param commandWord The command word.","lastModifiedDate":"2021-04-06"},{"lineNumber":396,"author":{"gitId":"cnlinh"},"content":"     * @return Whether the command word is recursive.","lastModifiedDate":"2021-04-06"},{"lineNumber":397,"author":{"gitId":"cnlinh"},"content":"     * @throws NullPointerException If the input is null.","lastModifiedDate":"2021-04-06"},{"lineNumber":398,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":399,"author":{"gitId":"cnlinh"},"content":"    public boolean isRecursiveKeyword(String commandWord) {","lastModifiedDate":"2021-04-06"},{"lineNumber":400,"author":{"gitId":"cnlinh"},"content":"        requireNonNull(commandWord);","lastModifiedDate":"2021-04-06"},{"lineNumber":401,"author":{"gitId":"cnlinh"},"content":"        return this.aliasMapping.isRecursiveKeyword(commandWord);","lastModifiedDate":"2021-04-06"},{"lineNumber":402,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":403,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":404,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":405,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":406,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":407,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":408,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 residents.equals(((AddressBook) other).residents)","lastModifiedDate":"2021-03-16"},{"lineNumber":409,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 rooms.equals(((AddressBook) other).rooms)","lastModifiedDate":"2021-03-16"},{"lineNumber":410,"author":{"gitId":"cnlinh"},"content":"                        \u0026\u0026 issues.equals(((AddressBook) other).issues)","lastModifiedDate":"2021-04-06"},{"lineNumber":411,"author":{"gitId":"cnlinh"},"content":"                        \u0026\u0026 aliasMapping.equals(((AddressBook) other).aliasMapping));","lastModifiedDate":"2021-04-06"},{"lineNumber":412,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":413,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":414,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":415,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":416,"author":{"gitId":"colintkn"},"content":"        return Objects.hash(residents, rooms, residentRooms, issues, aliasMapping);","lastModifiedDate":"2021-04-07"},{"lineNumber":417,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":418,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"cnlinh":93,"stein414":61,"colintkn":94,"-":126,"DrWala":44}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.AliasMapping;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.room.RoomNumber;","lastModifiedDate":"2021-03-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"     * {@code Predicate} that always evaluate to true","lastModifiedDate":"2021-04-06"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    Predicate\u003cResident\u003e PREDICATE_SHOW_ALL_RESIDENTS \u003d unused -\u003e true;","lastModifiedDate":"2021-03-05"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    Predicate\u003cRoom\u003e PREDICATE_SHOW_ALL_ROOMS \u003d unused -\u003e true;","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"    Predicate\u003cIssue\u003e PREDICATE_SHOW_ALL_ISSUES \u003d unused -\u003e true;","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"    Predicate\u003cResidentRoom\u003e PREDICATE_SHOW_ALL_RESIDENTROOMS \u003d unused -\u003e true;","lastModifiedDate":"2021-03-25"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"     * Returns the AddressBook","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Resident \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"     * Returns true if a resident with the same identity as {@code resident} exists in the address book.","lastModifiedDate":"2021-03-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":"    boolean hasResident(Resident resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"    boolean hasResident(Name name);","lastModifiedDate":"2021-03-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"     * Deletes the given resident.","lastModifiedDate":"2021-03-05"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"     * The resident must exist in the address book.","lastModifiedDate":"2021-03-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"    void deleteResident(Resident target);","lastModifiedDate":"2021-03-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"     * Adds the given resident.","lastModifiedDate":"2021-03-05"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"     * {@code resident} must not already exist in the address book.","lastModifiedDate":"2021-03-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"    void addResident(Resident resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"     * Replaces the given resident {@code target} with {@code editedResident}.","lastModifiedDate":"2021-03-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"     * The resident identity of {@code editedResident} must not be the same","lastModifiedDate":"2021-03-05"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"     * as another existing resident in the address book.","lastModifiedDate":"2021-03-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"    void setResident(Resident target, Resident editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"     * Gets the resident with the matching room number in the list.","lastModifiedDate":"2021-03-25"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"    Resident getResidentWithSameName(Name name);","lastModifiedDate":"2021-03-25"},{"lineNumber":108,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":109,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":110,"author":{"gitId":"colintkn"},"content":"     * Gets the index of the matching resident in the list","lastModifiedDate":"2021-03-25"},{"lineNumber":111,"author":{"gitId":"colintkn"},"content":"     * with a given name.","lastModifiedDate":"2021-03-25"},{"lineNumber":112,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":113,"author":{"gitId":"colintkn"},"content":"    Index getIndexOfResidentWithSameName(Name name);","lastModifiedDate":"2021-03-25"},{"lineNumber":114,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":116,"author":{"gitId":"stein414"},"content":"     * Returns an unmodifiable view of the filtered resident list","lastModifiedDate":"2021-03-16"},{"lineNumber":117,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":118,"author":{"gitId":"colintkn"},"content":"    ObservableList\u003cResident\u003e getFilteredResidentList();","lastModifiedDate":"2021-03-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":121,"author":{"gitId":"colintkn"},"content":"     * Updates the filter of the filtered resident list to filter by the given {@code predicate}.","lastModifiedDate":"2021-03-05"},{"lineNumber":122,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":125,"author":{"gitId":"colintkn"},"content":"    void updateFilteredResidentList(Predicate\u003cResident\u003e predicate);","lastModifiedDate":"2021-03-05"},{"lineNumber":126,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":127,"author":{"gitId":"colintkn"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Room \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":128,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":129,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":130,"author":{"gitId":"DrWala"},"content":"     * Returns true if a room with the same room number as {@code room} exists in SunRez.","lastModifiedDate":"2021-03-10"},{"lineNumber":131,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":132,"author":{"gitId":"DrWala"},"content":"    boolean hasRoom(Room room);","lastModifiedDate":"2021-03-10"},{"lineNumber":133,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":134,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":135,"author":{"gitId":"colintkn"},"content":"     * Returns true if a room with the same room number as {@code roomNumber} exists in SunRez.","lastModifiedDate":"2021-03-25"},{"lineNumber":136,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":137,"author":{"gitId":"colintkn"},"content":"    boolean hasRoom(RoomNumber roomNumber);","lastModifiedDate":"2021-03-25"},{"lineNumber":138,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":139,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":140,"author":{"gitId":"DrWala"},"content":"     * Deletes the given room.","lastModifiedDate":"2021-03-10"},{"lineNumber":141,"author":{"gitId":"DrWala"},"content":"     * The room must exist in SunRez.","lastModifiedDate":"2021-03-10"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":143,"author":{"gitId":"DrWala"},"content":"    void deleteRoom(Room target);","lastModifiedDate":"2021-03-10"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":145,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":146,"author":{"gitId":"DrWala"},"content":"     * Adds the given room.","lastModifiedDate":"2021-03-10"},{"lineNumber":147,"author":{"gitId":"DrWala"},"content":"     * {@code room} must not already exist in SunRez.","lastModifiedDate":"2021-03-10"},{"lineNumber":148,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":149,"author":{"gitId":"DrWala"},"content":"    void addRoom(Room room);","lastModifiedDate":"2021-03-10"},{"lineNumber":150,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":151,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":152,"author":{"gitId":"colintkn"},"content":"     * Gets the room with the matching room number in the list.","lastModifiedDate":"2021-03-25"},{"lineNumber":153,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":154,"author":{"gitId":"colintkn"},"content":"    Room getRoomWithSameRoomNumber(RoomNumber roomNumber);","lastModifiedDate":"2021-03-25"},{"lineNumber":155,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":156,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":157,"author":{"gitId":"colintkn"},"content":"     * Gets the index of the matching room in the list","lastModifiedDate":"2021-03-25"},{"lineNumber":158,"author":{"gitId":"colintkn"},"content":"     * with a given roomNumber.","lastModifiedDate":"2021-03-25"},{"lineNumber":159,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":160,"author":{"gitId":"colintkn"},"content":"    Index getIndexOfRoomWithSameRoomNumber(RoomNumber roomNumber);","lastModifiedDate":"2021-03-25"},{"lineNumber":161,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":162,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":163,"author":{"gitId":"DrWala"},"content":"     * Replaces the given room {@code target} with {@code editedRoom}.","lastModifiedDate":"2021-03-10"},{"lineNumber":164,"author":{"gitId":"DrWala"},"content":"     * {@code target} must exist in SunRez.","lastModifiedDate":"2021-03-10"},{"lineNumber":165,"author":{"gitId":"DrWala"},"content":"     * The Room identity of {@code editedRoom} must not be the same as another existing room in SunRez.","lastModifiedDate":"2021-03-10"},{"lineNumber":166,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":167,"author":{"gitId":"DrWala"},"content":"    void setRoom(Room target, Room editedRoom);","lastModifiedDate":"2021-03-10"},{"lineNumber":168,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":169,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":170,"author":{"gitId":"DrWala"},"content":"     * Returns an unmodifiable view of the filtered room list","lastModifiedDate":"2021-03-10"},{"lineNumber":171,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":172,"author":{"gitId":"DrWala"},"content":"    ObservableList\u003cRoom\u003e getFilteredRoomList();","lastModifiedDate":"2021-03-10"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":175,"author":{"gitId":"DrWala"},"content":"     * Updates the filter of the filtered rooms list to filter by the given {@code predicate}.","lastModifiedDate":"2021-03-16"},{"lineNumber":176,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":179,"author":{"gitId":"DrWala"},"content":"    void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate);","lastModifiedDate":"2021-03-10"},{"lineNumber":180,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":181,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":182,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns an unmodifiable view of the command history.","lastModifiedDate":"2021-03-09"},{"lineNumber":183,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":184,"author":{"gitId":"benedictkhoomw"},"content":"     * @return An unmodifiable view of the command history.","lastModifiedDate":"2021-03-09"},{"lineNumber":185,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":186,"author":{"gitId":"benedictkhoomw"},"content":"    ReadOnlyCommandHistory getCommandHistory();","lastModifiedDate":"2021-03-09"},{"lineNumber":187,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":188,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":189,"author":{"gitId":"benedictkhoomw"},"content":"     * Appends a command history entry to the command history list.","lastModifiedDate":"2021-03-09"},{"lineNumber":190,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":191,"author":{"gitId":"benedictkhoomw"},"content":"     * @param commandText The command text entry to append.","lastModifiedDate":"2021-03-09"},{"lineNumber":192,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":193,"author":{"gitId":"benedictkhoomw"},"content":"    void appendCommandHistoryEntry(String commandText);","lastModifiedDate":"2021-03-09"},{"lineNumber":194,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":195,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":196,"author":{"gitId":"stein414"},"content":"     * Returns true if a issue with the same identity as {@code issue} exists in SunRez.","lastModifiedDate":"2021-04-08"},{"lineNumber":197,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":198,"author":{"gitId":"stein414"},"content":"     * @param issue Issue to be checked.","lastModifiedDate":"2021-04-08"},{"lineNumber":199,"author":{"gitId":"stein414"},"content":"     * @return {@code True} if issue is in SunRez.","lastModifiedDate":"2021-04-08"},{"lineNumber":200,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code issue} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":201,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":202,"author":{"gitId":"stein414"},"content":"    boolean hasIssue(Issue issue);","lastModifiedDate":"2021-03-31"},{"lineNumber":203,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":204,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":205,"author":{"gitId":"stein414"},"content":"     * Deletes the given issue.","lastModifiedDate":"2021-03-15"},{"lineNumber":206,"author":{"gitId":"stein414"},"content":"     * The issue must exist in SunRez.","lastModifiedDate":"2021-03-15"},{"lineNumber":207,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":208,"author":{"gitId":"stein414"},"content":"     * @param target Target issue to be deleted.","lastModifiedDate":"2021-04-08"},{"lineNumber":209,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code target} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":210,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":211,"author":{"gitId":"stein414"},"content":"    void deleteIssue(Issue target);","lastModifiedDate":"2021-03-15"},{"lineNumber":212,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":213,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":214,"author":{"gitId":"stein414"},"content":"     * Adds the given issue.","lastModifiedDate":"2021-03-15"},{"lineNumber":215,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":216,"author":{"gitId":"stein414"},"content":"     * @param issue Issue to be added.","lastModifiedDate":"2021-04-08"},{"lineNumber":217,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code issue} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":218,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":219,"author":{"gitId":"stein414"},"content":"    void addIssue(Issue issue);","lastModifiedDate":"2021-03-15"},{"lineNumber":220,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":221,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":222,"author":{"gitId":"stein414"},"content":"     * Replaces the given Issue {@code target} with {@code editedIssue}.","lastModifiedDate":"2021-03-15"},{"lineNumber":223,"author":{"gitId":"stein414"},"content":"     * {@code target} must exist in the SunRez.","lastModifiedDate":"2021-04-08"},{"lineNumber":224,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":225,"author":{"gitId":"stein414"},"content":"     * @param target      Target issue to be replaced.","lastModifiedDate":"2021-04-08"},{"lineNumber":226,"author":{"gitId":"stein414"},"content":"     * @param editedIssue Edited Issue to replace {@code target} with.","lastModifiedDate":"2021-04-08"},{"lineNumber":227,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code target} or {@editIssue} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":228,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":229,"author":{"gitId":"stein414"},"content":"    void setIssue(Issue target, Issue editedIssue);","lastModifiedDate":"2021-03-16"},{"lineNumber":230,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":231,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":232,"author":{"gitId":"stein414"},"content":"     * Closes the given issue.","lastModifiedDate":"2021-03-31"},{"lineNumber":233,"author":{"gitId":"stein414"},"content":"     * The issue must exist in SunRez.","lastModifiedDate":"2021-03-31"},{"lineNumber":234,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":235,"author":{"gitId":"stein414"},"content":"     * @param target Target issue to be replaced.","lastModifiedDate":"2021-04-08"},{"lineNumber":236,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code target} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":237,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":238,"author":{"gitId":"stein414"},"content":"    void closeIssue(Issue target);","lastModifiedDate":"2021-03-31"},{"lineNumber":239,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":240,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":241,"author":{"gitId":"stein414"},"content":"     * Checks if any issues have the given room associated with it.","lastModifiedDate":"2021-04-08"},{"lineNumber":242,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":243,"author":{"gitId":"DrWala"},"content":"     * @param target Room to check if it has issues associated with it.","lastModifiedDate":"2021-04-06"},{"lineNumber":244,"author":{"gitId":"stein414"},"content":"     * @return {@code True} if there are issues with the given room associated with it.","lastModifiedDate":"2021-04-08"},{"lineNumber":245,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":246,"author":{"gitId":"DrWala"},"content":"    boolean issuesContainRoom(Room target);","lastModifiedDate":"2021-04-06"},{"lineNumber":247,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":248,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":249,"author":{"gitId":"cnlinh"},"content":"     * Returns an unmodifiable view of the filtered issue list.","lastModifiedDate":"2021-03-16"},{"lineNumber":250,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":251,"author":{"gitId":"stein414"},"content":"     * @return ObservableList of issues.","lastModifiedDate":"2021-04-08"},{"lineNumber":252,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":253,"author":{"gitId":"stein414"},"content":"    ObservableList\u003cIssue\u003e getFilteredIssueList();","lastModifiedDate":"2021-03-15"},{"lineNumber":254,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":255,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":256,"author":{"gitId":"stein414"},"content":"     * Updates the filter of the filtered issue list to filter by the given","lastModifiedDate":"2021-04-08"},{"lineNumber":257,"author":{"gitId":"stein414"},"content":"     * {@code predicate}.","lastModifiedDate":"2021-03-15"},{"lineNumber":258,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":259,"author":{"gitId":"stein414"},"content":"     * @param predicate Predicate to filter the issue list.","lastModifiedDate":"2021-04-08"},{"lineNumber":260,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code predicate} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":261,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":262,"author":{"gitId":"stein414"},"content":"    void updateFilteredIssueList(Predicate\u003cIssue\u003e predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":263,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":264,"author":{"gitId":"colintkn"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ResidentRoom \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":265,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":266,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":267,"author":{"gitId":"colintkn"},"content":"     * Returns true if a residentroom with the same identity as {@code residentRoom} exists in the address book.","lastModifiedDate":"2021-03-25"},{"lineNumber":268,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":269,"author":{"gitId":"colintkn"},"content":"    boolean hasEitherResidentRoom(ResidentRoom residentRoom);","lastModifiedDate":"2021-03-25"},{"lineNumber":270,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":271,"author":{"gitId":"colintkn"},"content":"    boolean hasBothResidentRoom(ResidentRoom residentRoom);","lastModifiedDate":"2021-03-25"},{"lineNumber":272,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":273,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":274,"author":{"gitId":"colintkn"},"content":"     * Deletes the given residentRoom.","lastModifiedDate":"2021-03-25"},{"lineNumber":275,"author":{"gitId":"colintkn"},"content":"     * The residentRoom must exist in the address book.","lastModifiedDate":"2021-03-25"},{"lineNumber":276,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":277,"author":{"gitId":"colintkn"},"content":"    void deleteResidentRoom(ResidentRoom target);","lastModifiedDate":"2021-03-25"},{"lineNumber":278,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":279,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":280,"author":{"gitId":"colintkn"},"content":"     * Adds the given residentroom.","lastModifiedDate":"2021-03-25"},{"lineNumber":281,"author":{"gitId":"colintkn"},"content":"     * {@code residentRoom} must not already exist in the address book.","lastModifiedDate":"2021-03-25"},{"lineNumber":282,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":283,"author":{"gitId":"colintkn"},"content":"    void addResidentRoom(ResidentRoom residentRoom);","lastModifiedDate":"2021-03-25"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":285,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-04-05"},{"lineNumber":286,"author":{"gitId":"colintkn"},"content":"     * Returns an unmodifiable view of the filtered residentRoom list","lastModifiedDate":"2021-04-05"},{"lineNumber":287,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-04-05"},{"lineNumber":288,"author":{"gitId":"colintkn"},"content":"    ObservableList\u003cResidentRoom\u003e getFilteredResidentRoomList();","lastModifiedDate":"2021-04-05"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":291,"author":{"gitId":"colintkn"},"content":"     * Updates the filter of the filtered resident list to filter by the given {@code predicate}.","lastModifiedDate":"2021-03-25"},{"lineNumber":292,"author":{"gitId":"colintkn"},"content":"     *","lastModifiedDate":"2021-03-25"},{"lineNumber":293,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-03-25"},{"lineNumber":294,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":295,"author":{"gitId":"colintkn"},"content":"    void updateFilteredResidentRoomList(Predicate\u003cResidentRoom\u003e predicate);","lastModifiedDate":"2021-03-25"},{"lineNumber":296,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":297,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":298,"author":{"gitId":"cnlinh"},"content":"     * Returns the current user\u0027s alias mapping.","lastModifiedDate":"2021-03-16"},{"lineNumber":299,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-30"},{"lineNumber":300,"author":{"gitId":"cnlinh"},"content":"     * @return The alias mapping.","lastModifiedDate":"2021-03-30"},{"lineNumber":301,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":302,"author":{"gitId":"cnlinh"},"content":"    AliasMapping getAliasMapping();","lastModifiedDate":"2021-03-13"},{"lineNumber":303,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":304,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":305,"author":{"gitId":"cnlinh"},"content":"     * Sets the user\u0027s alias mapping.","lastModifiedDate":"2021-03-30"},{"lineNumber":306,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":307,"author":{"gitId":"cnlinh"},"content":"     * @param aliasMapping The specified mapping.","lastModifiedDate":"2021-03-30"},{"lineNumber":308,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":309,"author":{"gitId":"cnlinh"},"content":"    void setAliasMapping(AliasMapping aliasMapping);","lastModifiedDate":"2021-03-13"},{"lineNumber":310,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":311,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":312,"author":{"gitId":"cnlinh"},"content":"     * Adds a user-defined alias to the current mapping.","lastModifiedDate":"2021-03-30"},{"lineNumber":313,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":314,"author":{"gitId":"cnlinh"},"content":"     * @param alias The Alias to be added.","lastModifiedDate":"2021-03-30"},{"lineNumber":315,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":316,"author":{"gitId":"cnlinh"},"content":"    void addAlias(Alias alias);","lastModifiedDate":"2021-03-13"},{"lineNumber":317,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":318,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":319,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if the model has any previous states to restore. False otherwise.","lastModifiedDate":"2021-03-27"},{"lineNumber":320,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":321,"author":{"gitId":"benedictkhoomw"},"content":"     * @return True if the model has any previous states to restore. False otherwise.","lastModifiedDate":"2021-03-27"},{"lineNumber":322,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":323,"author":{"gitId":"benedictkhoomw"},"content":"    boolean canUndoAddressBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":324,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":325,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":326,"author":{"gitId":"benedictkhoomw"},"content":"     * Restores the model\u0027s state to its previous state, if any.","lastModifiedDate":"2021-03-27"},{"lineNumber":327,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":328,"author":{"gitId":"benedictkhoomw"},"content":"    void undoAddressBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":329,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":330,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":331,"author":{"gitId":"benedictkhoomw"},"content":"     * Saves the model\u0027s state for undo.","lastModifiedDate":"2021-03-27"},{"lineNumber":332,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":333,"author":{"gitId":"benedictkhoomw"},"content":"    void commitAddressBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":334,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":335,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":336,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if the model has any future states to restore. False otherwise.","lastModifiedDate":"2021-03-27"},{"lineNumber":337,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":338,"author":{"gitId":"benedictkhoomw"},"content":"     * @return True if the model has any future states to restore. False otherwise.","lastModifiedDate":"2021-03-27"},{"lineNumber":339,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":340,"author":{"gitId":"benedictkhoomw"},"content":"    boolean canRedoAddressBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":341,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":342,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":343,"author":{"gitId":"benedictkhoomw"},"content":"     * Restores the model\u0027s state to its next state, if any.","lastModifiedDate":"2021-03-27"},{"lineNumber":344,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":345,"author":{"gitId":"benedictkhoomw"},"content":"    void redoAddressBook();","lastModifiedDate":"2021-03-27"},{"lineNumber":346,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":347,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":348,"author":{"gitId":"cnlinh"},"content":"     * Deletes a user-defined alias from the current mapping.","lastModifiedDate":"2021-03-30"},{"lineNumber":349,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":350,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName The name of the alias to be deleted.","lastModifiedDate":"2021-03-26"},{"lineNumber":351,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":352,"author":{"gitId":"cnlinh"},"content":"    void deleteAlias(String aliasName);","lastModifiedDate":"2021-03-26"},{"lineNumber":353,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"cnlinh":30,"benedictkhoomw":46,"stein414":67,"colintkn":83,"-":81,"DrWala":46}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import java.util.List;","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.AliasMapping;","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-25"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistory;","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistoryEntry;","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-25"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-03-25"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.room.RoomNumber;","lastModifiedDate":"2021-03-25"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.undoredo.StatefulAddressBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    private final StatefulAddressBook statefulAddressBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"    private final CommandHistory commandHistory;","lastModifiedDate":"2021-03-09"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    private final FilteredList\u003cResident\u003e filteredResidents;","lastModifiedDate":"2021-03-05"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    private final FilteredList\u003cRoom\u003e filteredRooms;","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"    private final FilteredList\u003cResidentRoom\u003e filteredResidentRooms;","lastModifiedDate":"2021-03-25"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"    private final FilteredList\u003cIssue\u003e filteredIssues;","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"    private final AliasMapping aliasMapping;","lastModifiedDate":"2021-04-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"     * Initializes a ModelManager with the given addressBook, userPrefs and commandHistory.","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs,","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"            ReadOnlyCommandHistory commandHistory) {","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"        requireAllNonNull(addressBook, userPrefs, commandHistory);","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"        logger.fine(\"Initializing with data file: \" + addressBook + \", user prefs \" + userPrefs","lastModifiedDate":"2021-04-05"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"                + \" and command history \" + commandHistory);","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"        this.statefulAddressBook \u003d new StatefulAddressBook(addressBook);","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"        filteredResidents \u003d new FilteredList\u003c\u003e(this.statefulAddressBook.getResidentList());","lastModifiedDate":"2021-03-27"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"        filteredRooms \u003d new FilteredList\u003c\u003e(this.statefulAddressBook.getRoomList());","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        filteredResidentRooms \u003d new FilteredList\u003c\u003e(this.statefulAddressBook.getResidentRoomList());","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"        filteredIssues \u003d new FilteredList\u003c\u003e(this.statefulAddressBook.getIssueList());","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"        this.aliasMapping \u003d this.statefulAddressBook.getAliasMapping();","lastModifiedDate":"2021-04-06"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"        this.commandHistory \u003d new CommandHistory(commandHistory);","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"        this(addressBook, userPrefs, new CommandHistory());","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"benedictkhoomw"},"content":"        this.statefulAddressBook.resetData(addressBook);","lastModifiedDate":"2021-03-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"benedictkhoomw"},"content":"        return statefulAddressBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"colintkn"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Resident \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":127,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":129,"author":{"gitId":"colintkn"},"content":"    public boolean hasResident(Resident resident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":130,"author":{"gitId":"colintkn"},"content":"        requireNonNull(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":131,"author":{"gitId":"benedictkhoomw"},"content":"        return statefulAddressBook.hasResident(resident);","lastModifiedDate":"2021-03-27"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":134,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":135,"author":{"gitId":"colintkn"},"content":"    public boolean hasResident(Name name) {","lastModifiedDate":"2021-03-25"},{"lineNumber":136,"author":{"gitId":"colintkn"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-03-25"},{"lineNumber":137,"author":{"gitId":"colintkn"},"content":"        return statefulAddressBook.hasResident(name);","lastModifiedDate":"2021-03-31"},{"lineNumber":138,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":139,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":141,"author":{"gitId":"colintkn"},"content":"    public void deleteResident(Resident target) {","lastModifiedDate":"2021-03-05"},{"lineNumber":142,"author":{"gitId":"benedictkhoomw"},"content":"        statefulAddressBook.removeResident(target);","lastModifiedDate":"2021-03-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":146,"author":{"gitId":"colintkn"},"content":"    public void addResident(Resident resident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":147,"author":{"gitId":"benedictkhoomw"},"content":"        statefulAddressBook.addResident(resident);","lastModifiedDate":"2021-03-27"},{"lineNumber":148,"author":{"gitId":"colintkn"},"content":"        updateFilteredResidentList(PREDICATE_SHOW_ALL_RESIDENTS);","lastModifiedDate":"2021-03-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":152,"author":{"gitId":"colintkn"},"content":"    public void setResident(Resident target, Resident editedResident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":153,"author":{"gitId":"colintkn"},"content":"        requireAllNonNull(target, editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":155,"author":{"gitId":"benedictkhoomw"},"content":"        statefulAddressBook.setResident(target, editedResident);","lastModifiedDate":"2021-03-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":158,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":159,"author":{"gitId":"colintkn"},"content":"    public Index getIndexOfResidentWithSameName(Name name) {","lastModifiedDate":"2021-03-25"},{"lineNumber":160,"author":{"gitId":"colintkn"},"content":"        List\u003cResident\u003e lastShownList \u003d getFilteredResidentList();","lastModifiedDate":"2021-03-25"},{"lineNumber":161,"author":{"gitId":"colintkn"},"content":"        for (int i \u003d 0; i \u003c lastShownList.size(); i++) {","lastModifiedDate":"2021-03-25"},{"lineNumber":162,"author":{"gitId":"colintkn"},"content":"            if (lastShownList.get(i).getName().equals(name)) {","lastModifiedDate":"2021-03-25"},{"lineNumber":163,"author":{"gitId":"colintkn"},"content":"                return Index.fromZeroBased(i);","lastModifiedDate":"2021-03-25"},{"lineNumber":164,"author":{"gitId":"colintkn"},"content":"            }","lastModifiedDate":"2021-03-25"},{"lineNumber":165,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":166,"author":{"gitId":"colintkn"},"content":"        return Index.fromZeroBased(-1);","lastModifiedDate":"2021-03-25"},{"lineNumber":167,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":168,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":169,"author":{"gitId":"colintkn"},"content":"    public Resident getResidentWithSameName(Name name) {","lastModifiedDate":"2021-03-25"},{"lineNumber":170,"author":{"gitId":"colintkn"},"content":"        List\u003cResident\u003e lastShownList \u003d getFilteredResidentList();","lastModifiedDate":"2021-03-25"},{"lineNumber":171,"author":{"gitId":"colintkn"},"content":"        Index index \u003d getIndexOfResidentWithSameName(name);","lastModifiedDate":"2021-03-25"},{"lineNumber":172,"author":{"gitId":"colintkn"},"content":"        Resident resident \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-25"},{"lineNumber":173,"author":{"gitId":"colintkn"},"content":"        return resident;","lastModifiedDate":"2021-03-25"},{"lineNumber":174,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":175,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":176,"author":{"gitId":"colintkn"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Resident List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-05"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":179,"author":{"gitId":"colintkn"},"content":"     * Returns an unmodifiable view of the list of {@code Resident} backed by the internal list of","lastModifiedDate":"2021-03-05"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":183,"author":{"gitId":"colintkn"},"content":"    public ObservableList\u003cResident\u003e getFilteredResidentList() {","lastModifiedDate":"2021-03-05"},{"lineNumber":184,"author":{"gitId":"colintkn"},"content":"        return filteredResidents;","lastModifiedDate":"2021-03-05"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":188,"author":{"gitId":"colintkn"},"content":"    public void updateFilteredResidentList(Predicate\u003cResident\u003e predicate) {","lastModifiedDate":"2021-03-05"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":190,"author":{"gitId":"colintkn"},"content":"        filteredResidents.setPredicate(predicate);","lastModifiedDate":"2021-03-05"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":193,"author":{"gitId":"DrWala"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Room \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-10"},{"lineNumber":194,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":196,"author":{"gitId":"DrWala"},"content":"    public boolean hasRoom(Room room) {","lastModifiedDate":"2021-03-10"},{"lineNumber":197,"author":{"gitId":"DrWala"},"content":"        requireNonNull(room);","lastModifiedDate":"2021-03-10"},{"lineNumber":198,"author":{"gitId":"benedictkhoomw"},"content":"        return statefulAddressBook.hasRoom(room);","lastModifiedDate":"2021-03-27"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":202,"author":{"gitId":"colintkn"},"content":"    public boolean hasRoom(RoomNumber roomNumber) {","lastModifiedDate":"2021-03-25"},{"lineNumber":203,"author":{"gitId":"colintkn"},"content":"        requireNonNull(roomNumber);","lastModifiedDate":"2021-03-25"},{"lineNumber":204,"author":{"gitId":"colintkn"},"content":"        return statefulAddressBook.hasRoom(roomNumber);","lastModifiedDate":"2021-03-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":208,"author":{"gitId":"DrWala"},"content":"    public void addRoom(Room room) {","lastModifiedDate":"2021-03-10"},{"lineNumber":209,"author":{"gitId":"benedictkhoomw"},"content":"        statefulAddressBook.addRoom(room);","lastModifiedDate":"2021-03-27"},{"lineNumber":210,"author":{"gitId":"DrWala"},"content":"        updateFilteredRoomList(PREDICATE_SHOW_ALL_ROOMS);","lastModifiedDate":"2021-03-10"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":214,"author":{"gitId":"DrWala"},"content":"    public void deleteRoom(Room target) {","lastModifiedDate":"2021-03-10"},{"lineNumber":215,"author":{"gitId":"benedictkhoomw"},"content":"        statefulAddressBook.removeRoom(target);","lastModifiedDate":"2021-03-27"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":219,"author":{"gitId":"DrWala"},"content":"    public void setRoom(Room target, Room editedRoom) {","lastModifiedDate":"2021-03-10"},{"lineNumber":220,"author":{"gitId":"DrWala"},"content":"        requireAllNonNull(target, editedRoom);","lastModifiedDate":"2021-03-10"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":222,"author":{"gitId":"benedictkhoomw"},"content":"        statefulAddressBook.setRoom(target, editedRoom);","lastModifiedDate":"2021-03-27"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":225,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":226,"author":{"gitId":"colintkn"},"content":"    public Index getIndexOfRoomWithSameRoomNumber(RoomNumber roomNumber) {","lastModifiedDate":"2021-03-25"},{"lineNumber":227,"author":{"gitId":"colintkn"},"content":"        List\u003cRoom\u003e roomList \u003d getAddressBook().getRoomList();","lastModifiedDate":"2021-03-31"},{"lineNumber":228,"author":{"gitId":"colintkn"},"content":"        for (int i \u003d 0; i \u003c roomList.size(); i++) {","lastModifiedDate":"2021-03-31"},{"lineNumber":229,"author":{"gitId":"colintkn"},"content":"            if (roomList.get(i).getRoomNumber().equals(roomNumber)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":230,"author":{"gitId":"colintkn"},"content":"                return Index.fromZeroBased(i);","lastModifiedDate":"2021-03-25"},{"lineNumber":231,"author":{"gitId":"colintkn"},"content":"            }","lastModifiedDate":"2021-03-25"},{"lineNumber":232,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":233,"author":{"gitId":"colintkn"},"content":"        return Index.fromZeroBased(-1);","lastModifiedDate":"2021-03-25"},{"lineNumber":234,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":236,"author":{"gitId":"colintkn"},"content":"    public Room getRoomWithSameRoomNumber(RoomNumber roomNumber) {","lastModifiedDate":"2021-03-25"},{"lineNumber":237,"author":{"gitId":"colintkn"},"content":"        List\u003cRoom\u003e roomList \u003d getAddressBook().getRoomList();","lastModifiedDate":"2021-03-31"},{"lineNumber":238,"author":{"gitId":"colintkn"},"content":"        Index index \u003d getIndexOfRoomWithSameRoomNumber(roomNumber);","lastModifiedDate":"2021-03-25"},{"lineNumber":239,"author":{"gitId":"colintkn"},"content":"        Room room \u003d roomList.get(index.getZeroBased());","lastModifiedDate":"2021-03-31"},{"lineNumber":240,"author":{"gitId":"colintkn"},"content":"        return room;","lastModifiedDate":"2021-03-25"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":243,"author":{"gitId":"DrWala"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Room List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-10"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":246,"author":{"gitId":"DrWala"},"content":"     * Returns an unmodifiable view of the list of {@code Room} backed by the internal list of","lastModifiedDate":"2021-03-10"},{"lineNumber":247,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":248,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":250,"author":{"gitId":"DrWala"},"content":"    public ObservableList\u003cRoom\u003e getFilteredRoomList() {","lastModifiedDate":"2021-03-10"},{"lineNumber":251,"author":{"gitId":"DrWala"},"content":"        return filteredRooms;","lastModifiedDate":"2021-03-10"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":255,"author":{"gitId":"DrWala"},"content":"    public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {","lastModifiedDate":"2021-03-10"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":257,"author":{"gitId":"DrWala"},"content":"        filteredRooms.setPredicate(predicate);","lastModifiedDate":"2021-03-10"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":260,"author":{"gitId":"colintkn"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ResidentRoom \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":261,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":262,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":263,"author":{"gitId":"colintkn"},"content":"    public boolean hasEitherResidentRoom(ResidentRoom residentRoom) {","lastModifiedDate":"2021-03-25"},{"lineNumber":264,"author":{"gitId":"colintkn"},"content":"        requireNonNull(residentRoom);","lastModifiedDate":"2021-03-25"},{"lineNumber":265,"author":{"gitId":"colintkn"},"content":"        return statefulAddressBook.hasEitherResidentRoom(residentRoom);","lastModifiedDate":"2021-03-31"},{"lineNumber":266,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":267,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":268,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":269,"author":{"gitId":"colintkn"},"content":"    public boolean hasBothResidentRoom(ResidentRoom residentRoom) {","lastModifiedDate":"2021-03-25"},{"lineNumber":270,"author":{"gitId":"colintkn"},"content":"        requireNonNull(residentRoom);","lastModifiedDate":"2021-03-25"},{"lineNumber":271,"author":{"gitId":"colintkn"},"content":"        return statefulAddressBook.hasBothResidentRoom(residentRoom);","lastModifiedDate":"2021-03-31"},{"lineNumber":272,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":273,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":274,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":275,"author":{"gitId":"colintkn"},"content":"    public void addResidentRoom(ResidentRoom residentRoom) {","lastModifiedDate":"2021-03-25"},{"lineNumber":276,"author":{"gitId":"colintkn"},"content":"        statefulAddressBook.addResidentRoom(residentRoom);","lastModifiedDate":"2021-03-31"},{"lineNumber":277,"author":{"gitId":"colintkn"},"content":"        updateFilteredResidentRoomList(PREDICATE_SHOW_ALL_RESIDENTROOMS);","lastModifiedDate":"2021-03-25"},{"lineNumber":278,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":279,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":280,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":281,"author":{"gitId":"colintkn"},"content":"    public void deleteResidentRoom(ResidentRoom target) {","lastModifiedDate":"2021-03-25"},{"lineNumber":282,"author":{"gitId":"colintkn"},"content":"        statefulAddressBook.removeResidentRoom(target);","lastModifiedDate":"2021-03-31"},{"lineNumber":283,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":284,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":285,"author":{"gitId":"colintkn"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered ResidentRoom List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":286,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-04-05"},{"lineNumber":287,"author":{"gitId":"colintkn"},"content":"     * Returns an unmodifiable view of the list of {@code ResidentRoom} backed by the internal list of","lastModifiedDate":"2021-04-05"},{"lineNumber":288,"author":{"gitId":"colintkn"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2021-04-05"},{"lineNumber":289,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-04-05"},{"lineNumber":290,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-04-05"},{"lineNumber":291,"author":{"gitId":"colintkn"},"content":"    public ObservableList\u003cResidentRoom\u003e getFilteredResidentRoomList() {","lastModifiedDate":"2021-04-05"},{"lineNumber":292,"author":{"gitId":"colintkn"},"content":"        return filteredResidentRooms;","lastModifiedDate":"2021-04-05"},{"lineNumber":293,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":294,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":295,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":296,"author":{"gitId":"colintkn"},"content":"    public void updateFilteredResidentRoomList(Predicate\u003cResidentRoom\u003e predicate) {","lastModifiedDate":"2021-03-25"},{"lineNumber":297,"author":{"gitId":"colintkn"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-03-25"},{"lineNumber":298,"author":{"gitId":"colintkn"},"content":"        filteredResidentRooms.setPredicate(predicate);","lastModifiedDate":"2021-03-25"},{"lineNumber":299,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":300,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":301,"author":{"gitId":"benedictkhoomw"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Command History \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-09"},{"lineNumber":302,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":303,"author":{"gitId":"benedictkhoomw"},"content":"    public ReadOnlyCommandHistory getCommandHistory() {","lastModifiedDate":"2021-03-09"},{"lineNumber":304,"author":{"gitId":"benedictkhoomw"},"content":"        return commandHistory;","lastModifiedDate":"2021-03-09"},{"lineNumber":305,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":306,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":307,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":308,"author":{"gitId":"benedictkhoomw"},"content":"    public void appendCommandHistoryEntry(String commandText) {","lastModifiedDate":"2021-03-09"},{"lineNumber":309,"author":{"gitId":"benedictkhoomw"},"content":"        commandHistory.appendEntry(new CommandHistoryEntry(commandText));","lastModifiedDate":"2021-03-09"},{"lineNumber":310,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":311,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":312,"author":{"gitId":"benedictkhoomw"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Issues \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-16"},{"lineNumber":313,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":314,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":315,"author":{"gitId":"stein414"},"content":"    public boolean hasIssue(Issue issue) {","lastModifiedDate":"2021-03-31"},{"lineNumber":316,"author":{"gitId":"stein414"},"content":"        return statefulAddressBook.hasIssue(issue);","lastModifiedDate":"2021-03-31"},{"lineNumber":317,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":318,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":319,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":320,"author":{"gitId":"stein414"},"content":"    public void deleteIssue(Issue target) {","lastModifiedDate":"2021-03-15"},{"lineNumber":321,"author":{"gitId":"benedictkhoomw"},"content":"        statefulAddressBook.removeIssue(target);","lastModifiedDate":"2021-03-27"},{"lineNumber":322,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":323,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":324,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":325,"author":{"gitId":"stein414"},"content":"    public void addIssue(Issue issue) {","lastModifiedDate":"2021-03-15"},{"lineNumber":326,"author":{"gitId":"benedictkhoomw"},"content":"        statefulAddressBook.addIssue(issue);","lastModifiedDate":"2021-03-27"},{"lineNumber":327,"author":{"gitId":"stein414"},"content":"        updateFilteredIssueList(PREDICATE_SHOW_ALL_ISSUES);","lastModifiedDate":"2021-03-15"},{"lineNumber":328,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":329,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":330,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":331,"author":{"gitId":"stein414"},"content":"    public void setIssue(Issue target, Issue editedIssue) {","lastModifiedDate":"2021-03-15"},{"lineNumber":332,"author":{"gitId":"stein414"},"content":"        requireAllNonNull(target, editedIssue);","lastModifiedDate":"2021-03-15"},{"lineNumber":333,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":334,"author":{"gitId":"benedictkhoomw"},"content":"        statefulAddressBook.setIssue(target, editedIssue);","lastModifiedDate":"2021-03-27"},{"lineNumber":335,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":336,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":337,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":338,"author":{"gitId":"stein414"},"content":"    public void closeIssue(Issue target) {","lastModifiedDate":"2021-03-31"},{"lineNumber":339,"author":{"gitId":"stein414"},"content":"        Issue closedIssue \u003d Issue.closeIssue(target);","lastModifiedDate":"2021-03-31"},{"lineNumber":340,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":341,"author":{"gitId":"stein414"},"content":"        setIssue(target, closedIssue);","lastModifiedDate":"2021-03-31"},{"lineNumber":342,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":343,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":344,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-04-06"},{"lineNumber":345,"author":{"gitId":"DrWala"},"content":"    public boolean issuesContainRoom(Room target) {","lastModifiedDate":"2021-04-06"},{"lineNumber":346,"author":{"gitId":"DrWala"},"content":"        return statefulAddressBook.issuesContainRoom(target);","lastModifiedDate":"2021-04-06"},{"lineNumber":347,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":348,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":349,"author":{"gitId":"stein414"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Issue List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":350,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":351,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":352,"author":{"gitId":"stein414"},"content":"     * Returns an unmodifiable view of the list of {@code Issue} backed by the internal list of","lastModifiedDate":"2021-03-16"},{"lineNumber":353,"author":{"gitId":"stein414"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2021-03-15"},{"lineNumber":354,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":355,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":356,"author":{"gitId":"stein414"},"content":"    public ObservableList\u003cIssue\u003e getFilteredIssueList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":357,"author":{"gitId":"stein414"},"content":"        return filteredIssues;","lastModifiedDate":"2021-03-15"},{"lineNumber":358,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":359,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":360,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":361,"author":{"gitId":"stein414"},"content":"    public void updateFilteredIssueList(Predicate\u003cIssue\u003e predicate) {","lastModifiedDate":"2021-03-15"},{"lineNumber":362,"author":{"gitId":"stein414"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":363,"author":{"gitId":"stein414"},"content":"        filteredIssues.setPredicate(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":364,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":367,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":369,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":370,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":371,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":372,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":375,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":376,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":379,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":381,"author":{"gitId":"benedictkhoomw"},"content":"        return statefulAddressBook.equals(other.statefulAddressBook)","lastModifiedDate":"2021-03-27"},{"lineNumber":382,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":383,"author":{"gitId":"benedictkhoomw"},"content":"                \u0026\u0026 commandHistory.equals(other.commandHistory)","lastModifiedDate":"2021-03-16"},{"lineNumber":384,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 filteredResidents.equals(other.filteredResidents)","lastModifiedDate":"2021-03-13"},{"lineNumber":385,"author":{"gitId":"stein414"},"content":"                \u0026\u0026 filteredRooms.equals(other.filteredRooms)","lastModifiedDate":"2021-03-16"},{"lineNumber":386,"author":{"gitId":"cnlinh"},"content":"                \u0026\u0026 filteredIssues.equals(other.filteredIssues)","lastModifiedDate":"2021-04-06"},{"lineNumber":387,"author":{"gitId":"cnlinh"},"content":"                \u0026\u0026 aliasMapping.equals(other.aliasMapping);","lastModifiedDate":"2021-04-06"},{"lineNumber":388,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":390,"author":{"gitId":"cnlinh"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Alias \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-16"},{"lineNumber":391,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":392,"author":{"gitId":"cnlinh"},"content":"    public AliasMapping getAliasMapping() {","lastModifiedDate":"2021-03-13"},{"lineNumber":393,"author":{"gitId":"cnlinh"},"content":"        return statefulAddressBook.getAliasMapping();","lastModifiedDate":"2021-04-06"},{"lineNumber":394,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":395,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":396,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":397,"author":{"gitId":"cnlinh"},"content":"    public void setAliasMapping(AliasMapping aliasMapping) {","lastModifiedDate":"2021-03-13"},{"lineNumber":398,"author":{"gitId":"cnlinh"},"content":"        requireNonNull(aliasMapping);","lastModifiedDate":"2021-03-13"},{"lineNumber":399,"author":{"gitId":"cnlinh"},"content":"        statefulAddressBook.setAliasMapping(aliasMapping);","lastModifiedDate":"2021-04-06"},{"lineNumber":400,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":401,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":402,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":403,"author":{"gitId":"cnlinh"},"content":"    public void addAlias(Alias alias) {","lastModifiedDate":"2021-03-13"},{"lineNumber":404,"author":{"gitId":"cnlinh"},"content":"        statefulAddressBook.addAlias(alias);","lastModifiedDate":"2021-04-06"},{"lineNumber":405,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":406,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":407,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":408,"author":{"gitId":"cnlinh"},"content":"    public void deleteAlias(String aliasName) {","lastModifiedDate":"2021-03-26"},{"lineNumber":409,"author":{"gitId":"cnlinh"},"content":"        statefulAddressBook.deleteAlias(aliasName);","lastModifiedDate":"2021-04-06"},{"lineNumber":410,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":411,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":412,"author":{"gitId":"benedictkhoomw"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-27"},{"lineNumber":413,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":414,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean canUndoAddressBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":415,"author":{"gitId":"benedictkhoomw"},"content":"        return statefulAddressBook.canUndo();","lastModifiedDate":"2021-03-27"},{"lineNumber":416,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":417,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":418,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":419,"author":{"gitId":"benedictkhoomw"},"content":"    public void undoAddressBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":420,"author":{"gitId":"benedictkhoomw"},"content":"        statefulAddressBook.undo();","lastModifiedDate":"2021-03-27"},{"lineNumber":421,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":422,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":423,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":424,"author":{"gitId":"benedictkhoomw"},"content":"    public void commitAddressBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":425,"author":{"gitId":"benedictkhoomw"},"content":"        statefulAddressBook.commit();","lastModifiedDate":"2021-03-27"},{"lineNumber":426,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":427,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":428,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":429,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean canRedoAddressBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":430,"author":{"gitId":"benedictkhoomw"},"content":"        return statefulAddressBook.canRedo();","lastModifiedDate":"2021-03-27"},{"lineNumber":431,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":432,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":433,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":434,"author":{"gitId":"benedictkhoomw"},"content":"    public void redoAddressBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":435,"author":{"gitId":"benedictkhoomw"},"content":"        statefulAddressBook.redo();","lastModifiedDate":"2021-03-27"},{"lineNumber":436,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":437,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"cnlinh":26,"benedictkhoomw":78,"stein414":46,"colintkn":109,"-":155,"DrWala":23}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.AliasMapping;","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"    ObservableList\u003cResident\u003e getResidentList();","lastModifiedDate":"2021-03-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"     * Returns an unmodifiable view of the rooms list.","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"     * This list will not contain any duplicate rooms.","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    ObservableList\u003cRoom\u003e getRoomList();","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"     * Returns an unmodifiable view of the residentrooms list.","lastModifiedDate":"2021-03-25"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"     * This list will not contain any duplicate residentrooms.","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"    ObservableList\u003cResidentRoom\u003e getResidentRoomList();","lastModifiedDate":"2021-03-25"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"     * Returns an unmodifiable view of the issues list.","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"    ObservableList\u003cIssue\u003e getIssueList();","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Alias \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-04-06"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"     * Returns the current alias mapping.","lastModifiedDate":"2021-04-06"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"     * @return The mapping.","lastModifiedDate":"2021-04-06"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"    AliasMapping getAliasMapping();","lastModifiedDate":"2021-04-06"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"     * Returns an Alias based on name.","lastModifiedDate":"2021-04-06"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName Name of the alias.","lastModifiedDate":"2021-04-06"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"     * @return The alias with the specified name.","lastModifiedDate":"2021-04-06"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"    Alias getAlias(String aliasName);","lastModifiedDate":"2021-04-06"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"     * Checks if the current mapping contains an alias based on name.","lastModifiedDate":"2021-04-06"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName Name of the alias.","lastModifiedDate":"2021-04-06"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"     * @return Whether the mapping contains the alias.","lastModifiedDate":"2021-04-06"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"    boolean containsAlias(String aliasName);","lastModifiedDate":"2021-04-06"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"     * Checks if the alias name is a reserved keyword.","lastModifiedDate":"2021-04-06"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName Name of the alias.","lastModifiedDate":"2021-04-06"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":"     * @return Whether the name is reserved.","lastModifiedDate":"2021-04-06"},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"    boolean isReservedKeyword(String aliasName);","lastModifiedDate":"2021-04-06"},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"     * Checks if the command word is recursive.","lastModifiedDate":"2021-04-06"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":"     * @param commandWord The command word.","lastModifiedDate":"2021-04-06"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":"     * @return Whether the command word is recursive.","lastModifiedDate":"2021-04-06"},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":77,"author":{"gitId":"cnlinh"},"content":"    boolean isRecursiveKeyword(String commandWord);","lastModifiedDate":"2021-04-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"cnlinh":41,"stein414":7,"colintkn":9,"-":18,"DrWala":3}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CommandHistory \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns file path to command history data.","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    Path getCommandHistoryFilePath();","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"benedictkhoomw":6,"-":16}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"sunrez.json\");","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    private Path commandHistoryFilePath \u003d Paths.get(\"data\", \"commandhistory.txt\");","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the command history file path.","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The command history file path.","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    public Path getCommandHistoryFilePath() {","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"        return commandHistoryFilePath;","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"cnlinh"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)","lastModifiedDate":"2021-03-13"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"                \u0026\u0026 commandHistoryFilePath.equals(o.commandHistoryFilePath);","lastModifiedDate":"2021-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"cnlinh"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, commandHistoryFilePath);","lastModifiedDate":"2021-04-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":"        sb.append(\"\\nLocal command history file location : \" + commandHistoryFilePath);","lastModifiedDate":"2021-03-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"benedictkhoomw":13,"cnlinh":2,"-":83}},{"path":"src/main/java/seedu/address/model/commandhistory/CommandHistory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.model.commandhistory;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.List;","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":" * Represents the command history of the application.","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"public class CommandHistory implements ReadOnlyCommandHistory {","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    private final List\u003cCommandHistoryEntry\u003e entries;","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a {@code CommandHistory} that is a copy of {@code other}.","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"     * @param other The {@code CommandHistory} to copy.","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws NullPointerException If other is null.","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandHistory(ReadOnlyCommandHistory other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"        requireNonNull(other);","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"        entries \u003d new ArrayList\u003c\u003e(other.size());","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c other.size(); i++) {","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"            entries.add(other.get(i));","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a {@code CommandHistory} with an initial list of entries.","lastModifiedDate":"2021-03-09"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"     * @param entries The initial list of entries.","lastModifiedDate":"2021-03-09"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws NullPointerException If entries is null.","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandHistory(List\u003cCommandHistoryEntry\u003e entries) {","lastModifiedDate":"2021-03-09"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        requireNonNull(entries);","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        this.entries \u003d new ArrayList\u003c\u003e(entries);","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a {@code CommandHistory} with an empty initial list of entries.","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandHistory() {","lastModifiedDate":"2021-03-09"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"        this(new ArrayList\u003c\u003e());","lastModifiedDate":"2021-03-09"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"     * Appends the {@code CommandHistoryEntry} to the end of the command history.","lastModifiedDate":"2021-03-09"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"     * @param entry The entry to append.","lastModifiedDate":"2021-03-09"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"    public void appendEntry(CommandHistoryEntry entry) {","lastModifiedDate":"2021-03-09"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        assert entries !\u003d null;","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"        entries.add(entry);","lastModifiedDate":"2021-03-09"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"     * Two {@code CommandHistory} objects are equal when all entries are equal and in the same order.","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"     * @param other Other object to compare with.","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"     * @return True if equal. False otherwise.","lastModifiedDate":"2021-03-10"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"        if (this \u003d\u003d other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"            return true;","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"        if (!(other instanceof CommandHistory)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"            return false;","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory that \u003d (CommandHistory) other;","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"        return entries.equals(that.entries);","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the command history entry at the given {@code index}.","lastModifiedDate":"2021-03-09"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"     * @param index The index of the entry to return.","lastModifiedDate":"2021-03-09"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The command history entry at the given {@code index}.","lastModifiedDate":"2021-03-09"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws IndexOutOfBoundsException If (index \u003c 0 or index \u003e\u003d size()).","lastModifiedDate":"2021-03-23"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandHistoryEntry get(int index) {","lastModifiedDate":"2021-03-09"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"        assert entries !\u003d null;","lastModifiedDate":"2021-03-24"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"        return entries.get(index);","lastModifiedDate":"2021-03-09"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-10"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"        return Objects.hash(entries);","lastModifiedDate":"2021-03-10"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the number of entries in this {@code CommandHistory}.","lastModifiedDate":"2021-03-10"},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The number of entries in this {@code CommandHistory}.","lastModifiedDate":"2021-03-10"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"    public int size() {","lastModifiedDate":"2021-03-10"},{"lineNumber":101,"author":{"gitId":"benedictkhoomw"},"content":"        assert entries !\u003d null;","lastModifiedDate":"2021-03-24"},{"lineNumber":102,"author":{"gitId":"benedictkhoomw"},"content":"        return entries.size();","lastModifiedDate":"2021-03-10"},{"lineNumber":103,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":104,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"benedictkhoomw":104}},{"path":"src/main/java/seedu/address/model/commandhistory/CommandHistoryEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.model.commandhistory;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":" * Represents a command\u0027s text previously entered.","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":" * Guarantees: immutable.","lastModifiedDate":"2021-03-09"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-09"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"public class CommandHistoryEntry {","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    public final String value;","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a {@code CommandHistoryEntry}","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"     * @param text The command\u0027s text. Must be non-null.","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws NullPointerException If {@code text} is null.","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandHistoryEntry(String text) {","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"        requireNonNull(text);","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"        this.value \u003d text;","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"                || (other instanceof CommandHistoryEntry // instanceof handles nulls","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"                \u0026\u0026 value.equals(((CommandHistoryEntry) other).value)); // state check","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-09"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"    public String toString() {","lastModifiedDate":"2021-03-09"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        return value;","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"benedictkhoomw":40}},{"path":"src/main/java/seedu/address/model/commandhistory/ReadOnlyCommandHistory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.model.commandhistory;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":" * Unmodifiable view of a command history.","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"public interface ReadOnlyCommandHistory {","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the {@code CommandHistoryEntry} at the given index.","lastModifiedDate":"2021-03-09"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"     * @param index The index of the entry to return.","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The {@code CommandHistoryEntry} at the given index.","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    CommandHistoryEntry get(int index);","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the number of entries in the command history.","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The number of entries in the command history.","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    int size();","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"benedictkhoomw":21}},{"path":"src/main/java/seedu/address/model/issue/Category.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":" * Represents an issue\u0027s category in SunRez. Guarantees: immutable; is valid as","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":" * declared in {@link #isValidCategory(String)}.","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"public class Category {","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Categories should only contain alphanumeric \"","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"            + \"characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"    public static final String NO_CATEGORY_NAME \u003d \"No category\";","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"    public static final Category NO_CATEGORY \u003d new Category(NO_CATEGORY_NAME);","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    /*","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"     * The first character of the category must not be a whitespace, otherwise \" \"","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"     * (a blank string) becomes a valid input.","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public final String value;","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"     * Constructs a {@code Category}.","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"     * @param category A valid category.","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    public Category(String category) {","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"        requireNonNull(category);","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        checkArgument(isValidCategory(category), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"        this.value \u003d category;","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"     * Returns true if a given string is a valid category.","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"     * @param test String to check.","lastModifiedDate":"2021-04-08"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"     * @return True if test is valid.","lastModifiedDate":"2021-04-08"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    public static boolean isValidCategory(String test) {","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"    public String toString() {","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"        return value;","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"                || (other instanceof Category // instanceof handles nulls","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 value.equals(((Category) other).value)); // state check","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-10"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"stein414":63}},{"path":"src/main/java/seedu/address/model/issue/Description.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":" * Represents an issue\u0027s description in SunRez. Guarantees: immutable; is valid","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":" * as declared in {@link #isValidDescription(String)}.","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"public class Description {","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions should only contain alphanumeric \"","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"            + \"characters and spaces, and it should not be blank. Leading and trailing whitespaces will be trimmed.\";","lastModifiedDate":"2021-04-08"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"    /*","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"     * The first character of the description must not be a whitespace, otherwise","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"     * \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"    public static final String VALIDATION_REGEX \u003d \"[A-Za-z0-9][A-Za-z0-9 ]*\";","lastModifiedDate":"2021-04-08"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    public final String value;","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"     * Constructs a {@code Description}.","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"     * @param description A valid description.","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"    public Description(String description) {","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        requireNonNull(description);","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"        this.value \u003d description;","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"     * Returns true if a given string is a valid description.","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"     * @param test String to check.","lastModifiedDate":"2021-04-08"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"     * @return True if test is valid.","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"    public static boolean isValidDescription(String test) {","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"    public String toString() {","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"        return value;","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"                || (other instanceof Description // instanceof handles nulls","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 value.equals(((Description) other).value)); // state check","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"stein414":61}},{"path":"src/main/java/seedu/address/model/issue/Issue.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":" * Represents a Issue in the address book. Guarantees: details are present and","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":" * not null, field values are validated, immutable.","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"public class Issue implements Comparable\u003cIssue\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"    // Data fields","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    private final RoomNumber roomNumber;","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    private final Description description;","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    private final Timestamp timestamp;","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    private final Status status;","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    private final Category category;","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    public Issue(RoomNumber roomNumber, Description description, Timestamp timestamp, Status status,","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"            Category category, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        requireAllNonNull(roomNumber, description, timestamp, status, category);","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"        this.roomNumber \u003d roomNumber;","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"        this.timestamp \u003d timestamp;","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"        this.status \u003d status;","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        this.category \u003d category;","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"     * Takes in an issue and returns an issue with the same values except for Status being closed.","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"     * @param issue Issue to be closed.","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"     * @return A new issue with the same values except for status which is {@code Closed}.","lastModifiedDate":"2021-04-08"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"    public static Issue closeIssue(Issue issue) {","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"        requireNonNull(issue);","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"        return new Issue(","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"                issue.getRoomNumber(),","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"                issue.getDescription(),","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"                issue.getTimestamp(),","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"                new Status(IssueStatus.Closed),","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"                issue.getCategory(),","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"                issue.getTags());","lastModifiedDate":"2021-04-02"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"    public RoomNumber getRoomNumber() {","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"        return this.roomNumber;","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"    public Description getDescription() {","lastModifiedDate":"2021-03-10"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"        return this.description;","lastModifiedDate":"2021-03-10"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"    public Timestamp getTimestamp() {","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"        return this.timestamp;","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"    public Status getStatus() {","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"        return this.status;","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"     * Returns an immutable category set, which throws","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"     * {@code UnsupportedOperationException} if modification is attempted.","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"    public Category getCategory() {","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"        return this.category;","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":82,"author":{"gitId":"cnlinh"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2021-03-26"},{"lineNumber":83,"author":{"gitId":"cnlinh"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2021-03-26"},{"lineNumber":84,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":85,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"     * Returns true if both issues have the same identity and data fields. This","lastModifiedDate":"2021-03-10"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"     * defines a stronger notion of equality between two issues.","lastModifiedDate":"2021-03-10"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-10"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"            return true;","lastModifiedDate":"2021-03-10"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"        if (!(other instanceof Issue)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"            return false;","lastModifiedDate":"2021-03-10"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"        Issue otherIssue \u003d (Issue) other;","lastModifiedDate":"2021-03-10"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"        return otherIssue.getRoomNumber().equals(getRoomNumber())","lastModifiedDate":"2021-03-26"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"                \u0026\u0026 otherIssue.getDescription().equals(getDescription())","lastModifiedDate":"2021-03-10"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"                \u0026\u0026 otherIssue.getTimestamp().equals(getTimestamp()) \u0026\u0026 otherIssue.getStatus().equals(getStatus())","lastModifiedDate":"2021-03-10"},{"lineNumber":104,"author":{"gitId":"cnlinh"},"content":"                \u0026\u0026 otherIssue.getCategory().equals(getCategory())","lastModifiedDate":"2021-03-26"},{"lineNumber":105,"author":{"gitId":"cnlinh"},"content":"                \u0026\u0026 otherIssue.getTags().equals(getTags());","lastModifiedDate":"2021-03-26"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":109,"author":{"gitId":"stein414"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-10"},{"lineNumber":110,"author":{"gitId":"stein414"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-03-10"},{"lineNumber":111,"author":{"gitId":"stein414"},"content":"        return Objects.hash(roomNumber, description, timestamp, status, category);","lastModifiedDate":"2021-03-15"},{"lineNumber":112,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":113,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":114,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":"    public String toString() {","lastModifiedDate":"2021-03-10"},{"lineNumber":116,"author":{"gitId":"stein414"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-03-10"},{"lineNumber":117,"author":{"gitId":"stein414"},"content":"        builder.append(getRoomNumber())","lastModifiedDate":"2021-03-15"},{"lineNumber":118,"author":{"gitId":"stein414"},"content":"                .append(\"; Description: \").append(getDescription())","lastModifiedDate":"2021-03-15"},{"lineNumber":119,"author":{"gitId":"stein414"},"content":"                .append(\"; Timestamp: \").append(getTimestamp())","lastModifiedDate":"2021-03-15"},{"lineNumber":120,"author":{"gitId":"stein414"},"content":"                .append(\"; Status: \").append(getStatus())","lastModifiedDate":"2021-03-15"},{"lineNumber":121,"author":{"gitId":"stein414"},"content":"                .append(\"; Category: \").append(getCategory());","lastModifiedDate":"2021-03-15"},{"lineNumber":122,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":123,"author":{"gitId":"cnlinh"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2021-03-26"},{"lineNumber":124,"author":{"gitId":"cnlinh"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2021-03-26"},{"lineNumber":125,"author":{"gitId":"cnlinh"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2021-03-26"},{"lineNumber":126,"author":{"gitId":"cnlinh"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2021-03-26"},{"lineNumber":127,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":128,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":129,"author":{"gitId":"stein414"},"content":"        return builder.toString();","lastModifiedDate":"2021-03-10"},{"lineNumber":130,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":131,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":132,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":133,"author":{"gitId":"stein414"},"content":"    public int compareTo(Issue other) {","lastModifiedDate":"2021-03-16"},{"lineNumber":134,"author":{"gitId":"stein414"},"content":"        if (status.equals(other.status)) {","lastModifiedDate":"2021-04-07"},{"lineNumber":135,"author":{"gitId":"stein414"},"content":"            return timestamp.compareTo(other.timestamp);","lastModifiedDate":"2021-04-07"},{"lineNumber":136,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":137,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":138,"author":{"gitId":"stein414"},"content":"        if (status.value.equals(IssueStatus.Pending)) {","lastModifiedDate":"2021-04-07"},{"lineNumber":139,"author":{"gitId":"stein414"},"content":"            return -1;","lastModifiedDate":"2021-04-07"},{"lineNumber":140,"author":{"gitId":"stein414"},"content":"        } else {","lastModifiedDate":"2021-04-07"},{"lineNumber":141,"author":{"gitId":"stein414"},"content":"            return 1;","lastModifiedDate":"2021-04-07"},{"lineNumber":142,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":143,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":144,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":145,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"cnlinh":21,"stein414":124}},{"path":"src/main/java/seedu/address/model/issue/IssueList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import java.util.List;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-04-08"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.exceptions.DuplicateIssueException;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.exceptions.IssueNotFoundException;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-04-06"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":" * A list of issues that does not allow nulls.","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":" *","lastModifiedDate":"2021-04-08"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"public class IssueList implements Iterable\u003cIssue\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(IssueList.class);","lastModifiedDate":"2021-04-08"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    private final ObservableList\u003cIssue\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"    private final ObservableList\u003cIssue\u003e internalUnmodifiableList \u003d FXCollections","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"            .unmodifiableObservableList(internalList);","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"     * Returns true if the list contains an equivalent issue as the given argument.","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"    public boolean contains(Issue toCheck) {","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        return internalList.stream().anyMatch(toCheck::equals);","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"     * Adds a issue to the list.","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"     * The issue must not already exist in the list.","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code toAdd} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"    public void add(Issue toAdd) {","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"        assert internalList !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"            logger.warning(\"Attempted to add duplicate issue\");","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"            throw new DuplicateIssueException();","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"     * Replaces the issue {@code target} in the list with {@code editedIssue}.","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"     * The issue identity of {@code editedIssue} must not be the same as another","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"     * existing issue in the list.","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"     * @param target      Issue to be replaced.","lastModifiedDate":"2021-04-08"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"     * @param editedIssue The new issue to replace {@code target}.","lastModifiedDate":"2021-04-08"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code target} or {@editedIssue} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"    public void setIssue(Issue target, Issue editedIssue) {","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"        assert internalList !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"        requireAllNonNull(target, editedIssue);","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"            logger.warning(\"Failed to find target issue to be replaced\");","lastModifiedDate":"2021-04-08"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"            throw new IssueNotFoundException();","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"        if (!target.equals(editedIssue) \u0026\u0026 internalList.contains(editedIssue)) {","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"            logger.warning(\"Attempted to add duplicate issue\");","lastModifiedDate":"2021-04-08"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"            throw new DuplicateIssueException();","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"        internalList.set(index, editedIssue);","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-03-16"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"     * Removes the equivalent issue from the list.","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"     * The issue must exist in the list.","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"     * @param toRemove Issue to be removed.","lastModifiedDate":"2021-04-08"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code toRemove} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"    public void remove(Issue toRemove) {","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"        assert internalList !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-03-15"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"            logger.warning(\"Failed to find target issue to be removed\");","lastModifiedDate":"2021-04-08"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"            throw new IssueNotFoundException();","lastModifiedDate":"2021-03-15"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-04-08"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"     * Replaces the existing issues with the issues from {@code replacement}.","lastModifiedDate":"2021-04-08"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":104,"author":{"gitId":"stein414"},"content":"     * @param replacement The {@IssueList} to be replaced with.","lastModifiedDate":"2021-04-08"},{"lineNumber":105,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException If {@code replacement} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-04-08"},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"    public void setIssues(IssueList replacement) {","lastModifiedDate":"2021-03-15"},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"        assert internalList !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":109,"author":{"gitId":"stein414"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-03-15"},{"lineNumber":110,"author":{"gitId":"stein414"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-03-15"},{"lineNumber":111,"author":{"gitId":"stein414"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-03-16"},{"lineNumber":112,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":113,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":114,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":"     * Replaces the contents of this list with {@code issues}.","lastModifiedDate":"2021-03-15"},{"lineNumber":116,"author":{"gitId":"stein414"},"content":"     * {@code issues} must not contain duplicate issues.","lastModifiedDate":"2021-03-15"},{"lineNumber":117,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":118,"author":{"gitId":"stein414"},"content":"     * @param issues List of issues to be replaced with.","lastModifiedDate":"2021-04-08"},{"lineNumber":119,"author":{"gitId":"stein414"},"content":"     * @throws DuplicateIssueException If {@code issues} contains duplicate issues.","lastModifiedDate":"2021-04-08"},{"lineNumber":120,"author":{"gitId":"stein414"},"content":"     * @throws NullPointerException    If {@code replacement} is null.","lastModifiedDate":"2021-04-08"},{"lineNumber":121,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":122,"author":{"gitId":"stein414"},"content":"    public void setIssues(List\u003cIssue\u003e issues) {","lastModifiedDate":"2021-03-15"},{"lineNumber":123,"author":{"gitId":"stein414"},"content":"        assert internalList !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":124,"author":{"gitId":"stein414"},"content":"        requireAllNonNull(issues);","lastModifiedDate":"2021-03-15"},{"lineNumber":125,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":126,"author":{"gitId":"stein414"},"content":"        if (!issuesAreUnique(issues)) {","lastModifiedDate":"2021-03-29"},{"lineNumber":127,"author":{"gitId":"stein414"},"content":"            logger.warning(\"List of issues provided contain duplicate issues\");","lastModifiedDate":"2021-04-08"},{"lineNumber":128,"author":{"gitId":"stein414"},"content":"            throw new DuplicateIssueException();","lastModifiedDate":"2021-03-29"},{"lineNumber":129,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":130,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":131,"author":{"gitId":"stein414"},"content":"        internalList.setAll(issues);","lastModifiedDate":"2021-03-15"},{"lineNumber":132,"author":{"gitId":"stein414"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-03-16"},{"lineNumber":133,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":134,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":135,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":136,"author":{"gitId":"stein414"},"content":"     * Checks if any issues have the given room associated with it.","lastModifiedDate":"2021-04-08"},{"lineNumber":137,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":138,"author":{"gitId":"DrWala"},"content":"     * @param target Room to check if it has issues associated with it.","lastModifiedDate":"2021-04-06"},{"lineNumber":139,"author":{"gitId":"stein414"},"content":"     * @return {@code True} if there are issues with the given room associated with it.","lastModifiedDate":"2021-04-08"},{"lineNumber":140,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":141,"author":{"gitId":"DrWala"},"content":"    public boolean containsRoom(Room target) {","lastModifiedDate":"2021-04-06"},{"lineNumber":142,"author":{"gitId":"stein414"},"content":"        assert internalList !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":143,"author":{"gitId":"stein414"},"content":"        return internalList.stream()","lastModifiedDate":"2021-04-08"},{"lineNumber":144,"author":{"gitId":"stein414"},"content":"                .anyMatch(issue -\u003e issue.getRoomNumber().value.equals(target.getRoomNumber().roomNumber));","lastModifiedDate":"2021-04-08"},{"lineNumber":145,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":146,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":147,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":148,"author":{"gitId":"stein414"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-03-15"},{"lineNumber":149,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":150,"author":{"gitId":"stein414"},"content":"    public ObservableList\u003cIssue\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":151,"author":{"gitId":"stein414"},"content":"        assert internalUnmodifiableList !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":152,"author":{"gitId":"stein414"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-03-15"},{"lineNumber":153,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":154,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":155,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":156,"author":{"gitId":"stein414"},"content":"    public Iterator\u003cIssue\u003e iterator() {","lastModifiedDate":"2021-03-15"},{"lineNumber":157,"author":{"gitId":"stein414"},"content":"        assert internalList !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":158,"author":{"gitId":"stein414"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-03-15"},{"lineNumber":159,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":160,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":161,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":162,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":163,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":164,"author":{"gitId":"stein414"},"content":"                || (other instanceof IssueList // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":165,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 internalList.equals(((IssueList) other).internalList));","lastModifiedDate":"2021-03-15"},{"lineNumber":166,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":167,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":168,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":169,"author":{"gitId":"stein414"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-15"},{"lineNumber":170,"author":{"gitId":"stein414"},"content":"        assert internalList !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":171,"author":{"gitId":"stein414"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-03-15"},{"lineNumber":172,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":173,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":174,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":175,"author":{"gitId":"stein414"},"content":"     * Returns true if {@code issues} contains only unique issues.","lastModifiedDate":"2021-03-29"},{"lineNumber":176,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":177,"author":{"gitId":"stein414"},"content":"    private boolean issuesAreUnique(List\u003cIssue\u003e issues) {","lastModifiedDate":"2021-03-29"},{"lineNumber":178,"author":{"gitId":"stein414"},"content":"        assert internalList !\u003d null;","lastModifiedDate":"2021-04-08"},{"lineNumber":179,"author":{"gitId":"stein414"},"content":"        for (int i \u003d 0; i \u003c issues.size() - 1; i++) {","lastModifiedDate":"2021-03-29"},{"lineNumber":180,"author":{"gitId":"stein414"},"content":"            for (int j \u003d i + 1; j \u003c issues.size(); j++) {","lastModifiedDate":"2021-03-29"},{"lineNumber":181,"author":{"gitId":"stein414"},"content":"                if (issues.get(i).equals(issues.get(j))) {","lastModifiedDate":"2021-03-29"},{"lineNumber":182,"author":{"gitId":"stein414"},"content":"                    return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":183,"author":{"gitId":"stein414"},"content":"                }","lastModifiedDate":"2021-03-29"},{"lineNumber":184,"author":{"gitId":"stein414"},"content":"            }","lastModifiedDate":"2021-03-29"},{"lineNumber":185,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":186,"author":{"gitId":"stein414"},"content":"        return true;","lastModifiedDate":"2021-03-29"},{"lineNumber":187,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":188,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":189,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"stein414":181,"DrWala":8}},{"path":"src/main/java/seedu/address/model/issue/IssueStatus.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"public enum IssueStatus {","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"    Pending, Closed,","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"stein414":5}},{"path":"src/main/java/seedu/address/model/issue/RoomNumber.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":" * Represents an issue\u0027s room number in SunRez. Guarantees: immutable; is valid","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":" * as declared in {@link #isValidRoomNumber(String)}.","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"public class RoomNumber {","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Room numbers be of the format ##-###[-a] \"","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"            + \"where # is a number and \u0027a\u0027 is an alphabet.\";","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"    // The room number follows the format ##-###[-a]","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    public static final String VALIDATION_REGEX \u003d \"[0-9]{2}-[0-9]{3}(-[A-F])*\";","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"    public final String value;","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"     * Constructs a {@code RoomNumber}.","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"     * @param roomNumber A valid room number.","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    public RoomNumber(String roomNumber) {","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"        requireNonNull(roomNumber);","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"        checkArgument(isValidRoomNumber(roomNumber), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"        this.value \u003d roomNumber;","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"     * Returns true if a given string is a valid room number.","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"     * @param test String to check.","lastModifiedDate":"2021-04-08"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"     * @return True if test is valid.","lastModifiedDate":"2021-04-08"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"    public static boolean isValidRoomNumber(String test) {","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    public String toString() {","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"        return value;","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"                || (other instanceof RoomNumber // instanceof handles nulls","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 value.equals(((RoomNumber) other).value)); // state check","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"stein414":58}},{"path":"src/main/java/seedu/address/model/issue/RoomNumberOrTagContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.List;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":" * Tests that a {@code Issue}\u0027s {@code Name} or {@code Tag} matches any of the keywords given.","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"public class RoomNumberOrTagContainsKeywordsPredicate implements Predicate\u003cIssue\u003e {","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    public RoomNumberOrTagContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"     * Tests if any of the keywords are contained in either the room\u0027s number or any of its tags.","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"     * @param issue Issue whose room number and tags need to be checked to see if they contain","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"     *              any of the given keywords.","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"     * @return True if keyword is contained in the room\u0027s number or tags.","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    public boolean test(Issue issue) {","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"        return keywords.stream()","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsIgnoreCase(issue.getRoomNumber().value, keyword)","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"                        || StringUtil.containsIgnoreCase(issue.getDescription().value, keyword)","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"                        || issue.getTags().stream().anyMatch(t -\u003e StringUtil.containsIgnoreCase(t.tagName, keyword)));","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"                || (other instanceof RoomNumberOrTagContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 keywords.equals(((RoomNumberOrTagContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"DrWala":42}},{"path":"src/main/java/seedu/address/model/issue/Status.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.exceptions.InvalidIssueStatusException;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":" * Represents an issue\u0027s status in SunRez. Guarantees: immutable; is valid as","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":" * declared in {@link #isValidStatus(String)}.","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"public class Status {","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Statuses should be 1 of 2 words: \"","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"            + \"\u0027Pending\u0027 or \u0027Closed\u0027. It is case-insensitive and shorthand is \u0027p\u0027 and \u0027c\u0027 respectively.\";","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    /*","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"     * The first character of the status must not be a whitespace, otherwise \" \" (a","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"     * blank string) becomes a valid input.","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    public static final String VALIDATION_REGEX \u003d \"(?i)pending|p|closed|c\";","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public final IssueStatus value;","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"     * Constructs a {@code Status}.","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"     * @param status A valid status.","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    public Status(String status) {","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"        requireNonNull(status);","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        checkArgument(isValidStatus(status), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"        this.value \u003d parse(status);","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"     * Constructs a {@code Status}.","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"     * @param status A valid status.","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"    public Status(IssueStatus status) {","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"        requireNonNull(status);","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"        this.value \u003d status;","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"     * Returns true if a given string is a valid status.","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"     * @param test String to check.","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"     * @return True if test is valid.","lastModifiedDate":"2021-04-08"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"    public static boolean isValidStatus(String test) {","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"     * Retuns the IssueStatus enum of the given status.","lastModifiedDate":"2021-04-08"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"     * @param status String representing status.","lastModifiedDate":"2021-04-08"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"     * @return IssueStatus enum of status.","lastModifiedDate":"2021-04-08"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"    private static IssueStatus parse(String status) {","lastModifiedDate":"2021-03-10"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"        String lowercaseStatus \u003d status.toLowerCase();","lastModifiedDate":"2021-03-10"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"        switch (lowercaseStatus) {","lastModifiedDate":"2021-03-10"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"        case \"pending\":","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"        case \"p\":","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"            return IssueStatus.Pending;","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"        case \"closed\":","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"        case \"c\":","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"            return IssueStatus.Closed;","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"        default:","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"            throw new InvalidIssueStatusException(String.format(\"%s is not a valid issue status\", status));","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"    public String toString() {","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"        return value.toString();","lastModifiedDate":"2021-03-10"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-10"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"                || (other instanceof Status // instanceof handles nulls","lastModifiedDate":"2021-03-10"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 value.equals(((Status) other).value)); // state check","lastModifiedDate":"2021-03-10"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-10"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-10"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"stein414":93}},{"path":"src/main/java/seedu/address/model/issue/Timestamp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.core.Config.DEFAULT_LOCALE;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import java.time.format.DateTimeFormatterBuilder;","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import java.time.temporal.ChronoField;","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":" * Represents an issue\u0027s timestamp in SunRez. Guarantees: immutable; is valid as","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":" * declared in {@link #isValidTimestamp(String)}.","lastModifiedDate":"2021-04-08"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"public class Timestamp implements Comparable\u003cTimestamp\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public static final String TIMESTAMP_PATTERN \u003d \"yyyy/MM/dd hh:mma\";","lastModifiedDate":"2021-04-08"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    public static final DateTimeFormatter FORMATTER \u003d new DateTimeFormatterBuilder().appendPattern(TIMESTAMP_PATTERN)","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"            .parseDefaulting(ChronoField.ERA, 1)","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"            .toFormatter(DEFAULT_LOCALE)","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"            .withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Timestamps should be of valid date and time in the format \"","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"            + TIMESTAMP_PATTERN + \"\\n\\n\"","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"            + \"yyyy - 4 digit year (e.g. 2021)\\n\"","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"            + \"MM - 2 digits month (e.g. 01, 05, 12)\\n\"","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"            + \"dd - 2 digits day (e.g. 01, 05, 31)\\n\"","lastModifiedDate":"2021-04-08"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"            + \"hh - 2 digits hour (01-12) (midnight is 12:00am)\\n\"","lastModifiedDate":"2021-04-08"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"            + \"mm - minutes (0-59)\\n\"","lastModifiedDate":"2021-04-07"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"            + \"a - case-insensitive AM/PM\\n\"","lastModifiedDate":"2021-04-07"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"            + \"Example: 2021/01/01 12:00am\";","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_INVALID_FUTURE \u003d \"Timestamps should not be in the future\";","lastModifiedDate":"2021-04-07"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(Timestamp.class);","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    public final LocalDateTime value;","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"     * Constructs a {@code Timestamp}.","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"    public Timestamp() {","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"        value \u003d LocalDateTime.now();","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"     * Constructs a {@code Timestamp}.","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"     * @param timestamp A valid timestamp.","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"    public Timestamp(String timestamp) {","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"        requireNonNull(timestamp);","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"        timestamp \u003d timestamp.toUpperCase();","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"        checkArgument(isValidTimestamp(timestamp), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"        this.value \u003d LocalDateTime.parse(timestamp, FORMATTER);","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"     * Returns true if a given string is a valid timestamp.","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"     * @param test String to check.","lastModifiedDate":"2021-04-08"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"     * @return True if test is valid.","lastModifiedDate":"2021-04-08"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"    public static boolean isValidTimestamp(String test) {","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"        try {","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"            LocalDateTime.parse(test.toUpperCase(), FORMATTER);","lastModifiedDate":"2021-04-07"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"            return true;","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"        } catch (DateTimeParseException dtpe) {","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"            logger.warning(\"Invalid timestamp given: \" + dtpe.getMessage());","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"            return false;","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"    public String toString() {","lastModifiedDate":"2021-03-10"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"        return value.format(FORMATTER);","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-10"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"                || (other instanceof Timestamp // instanceof handles nulls","lastModifiedDate":"2021-03-10"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"                        \u0026\u0026 value.equals(((Timestamp) other).value)); // state check","lastModifiedDate":"2021-03-10"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-10"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-10"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"    public int compareTo(Timestamp o) {","lastModifiedDate":"2021-03-16"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"        return value.compareTo(o.value);","lastModifiedDate":"2021-03-16"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"stein414":103}},{"path":"src/main/java/seedu/address/model/issue/exceptions/DuplicateIssueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue.exceptions;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":" * Signals that the operation will result in duplicate Issues (Issues are considered duplicates if they have the","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":" * same identity).","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"public class DuplicateIssueException extends RuntimeException {","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"    public DuplicateIssueException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"        super(\"Operation would result in duplicate issues\");","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"stein414":11}},{"path":"src/main/java/seedu/address/model/issue/exceptions/InvalidIssueStatusException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue.exceptions;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"public class InvalidIssueStatusException extends RuntimeException {","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"    public InvalidIssueStatusException(String message) {","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"        super(message);","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"stein414":9}},{"path":"src/main/java/seedu/address/model/issue/exceptions/IssueNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue.exceptions;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":" * Signals that the operation is unable to find the specified issue.","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"public class IssueNotFoundException extends RuntimeException {}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"stein414":6}},{"path":"src/main/java/seedu/address/model/resident/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":" * Represents a Resident\u0027s email in the address book.","lastModifiedDate":"2021-03-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";","lastModifiedDate":"2018-02-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \"","lastModifiedDate":"2018-02-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    - be at least 2 characters long\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";","lastModifiedDate":"2018-02-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\"; // any","lastModifiedDate":"2021-02-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\"","lastModifiedDate":"2018-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"colintkn":3,"-":64}},{"path":"src/main/java/seedu/address/model/resident/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":" * Represents a Resident\u0027s name in the address book.","lastModifiedDate":"2021-03-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"public class Name implements Comparable\u003cName\u003e {","lastModifiedDate":"2021-04-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"            \"Names should only contain alphabetic characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"    boolean isSameResident(Resident resident) {","lastModifiedDate":"2021-03-25"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        return this.equals(resident.getName());","lastModifiedDate":"2021-03-25"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-04-05"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"    public int compareTo(Name o) {","lastModifiedDate":"2021-04-05"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"        return fullName.compareTo(o.fullName);","lastModifiedDate":"2021-04-05"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"colintkn":14,"-":54}},{"path":"src/main/java/seedu/address/model/resident/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":" * Tests that a {@code Resident}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2021-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cResident\u003e {","lastModifiedDate":"2021-03-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"    public boolean test(Resident resident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(resident.getName().fullName, keyword));","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"colintkn":5,"-":26}},{"path":"src/main/java/seedu/address/model/resident/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":" * Represents a Resident\u0027s phone number in the address book.","lastModifiedDate":"2021-03-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"colintkn":2,"-":51}},{"path":"src/main/java/seedu/address/model/resident/Resident.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":" * Represents a Resident in the address book.","lastModifiedDate":"2021-03-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"public class Resident implements Comparable\u003cResident\u003e {","lastModifiedDate":"2021-04-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    private final Year year;","lastModifiedDate":"2021-03-05"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"    private final Room room;","lastModifiedDate":"2021-02-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"    public Resident(Name name, Phone phone, Email email, Year year, Room room) {","lastModifiedDate":"2021-03-05"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"        requireAllNonNull(name, phone, email, year, room);","lastModifiedDate":"2021-03-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"        this.year \u003d year;","lastModifiedDate":"2021-03-05"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"        this.room \u003d room;","lastModifiedDate":"2021-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"    public Year getYear() {","lastModifiedDate":"2021-03-05"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        return year;","lastModifiedDate":"2021-03-05"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-05"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"    public Room getRoom() {","lastModifiedDate":"2021-02-25"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        return room;","lastModifiedDate":"2021-02-25"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-02-25"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"     * Returns true if both residents have the same name.","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"     * This defines a weaker notion of equality between two residents.","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"    public boolean isSameResident(Resident otherResident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        if (otherResident \u003d\u003d this) {","lastModifiedDate":"2021-03-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"        return otherResident !\u003d null","lastModifiedDate":"2021-03-05"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 otherResident.getName().equals(getName());","lastModifiedDate":"2021-03-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"     * Returns true if both residents have the same identity and data fields.","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"     * This defines a stronger notion of equality between two residents.","lastModifiedDate":"2021-03-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        if (!(other instanceof Resident)) {","lastModifiedDate":"2021-03-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        Resident otherResident \u003d (Resident) other;","lastModifiedDate":"2021-03-05"},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":"        return otherResident.getName().equals(getName())","lastModifiedDate":"2021-03-05"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 otherResident.getPhone().equals(getPhone())","lastModifiedDate":"2021-03-05"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 otherResident.getEmail().equals(getEmail())","lastModifiedDate":"2021-03-05"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 otherResident.getYear().equals(getYear())","lastModifiedDate":"2021-03-05"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 otherResident.getRoom().equals(getRoom());","lastModifiedDate":"2021-03-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"        return Objects.hash(name, phone, email, year, room);","lastModifiedDate":"2021-03-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"                .append(getEmail())","lastModifiedDate":"2021-02-25"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"                .append(\"; Year: \")","lastModifiedDate":"2021-03-05"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"                .append(getYear())","lastModifiedDate":"2021-03-05"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"                .append(\"; Room: \")","lastModifiedDate":"2021-02-25"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"                .append(getRoom());","lastModifiedDate":"2021-02-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-04-05"},{"lineNumber":110,"author":{"gitId":"colintkn"},"content":"    public int compareTo(Resident r) {","lastModifiedDate":"2021-04-05"},{"lineNumber":111,"author":{"gitId":"colintkn"},"content":"        return name.compareTo(r.name);","lastModifiedDate":"2021-04-05"},{"lineNumber":112,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"colintkn":42,"-":71}},{"path":"src/main/java/seedu/address/model/resident/ResidentUnallocatedPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":" * Tests that a {@code Resident}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"public class ResidentUnallocatedPredicate implements Predicate\u003cResident\u003e {","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"    private final String unallocatedKeyword;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"    public ResidentUnallocatedPredicate() {","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"        this.unallocatedKeyword \u003d Room.UNALLOCATED_REGEX;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"    public boolean test(Resident resident) {","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"        return unallocatedKeyword.equals(resident.getRoom().toString());","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"                || (other instanceof ResidentUnallocatedPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 unallocatedKeyword.equals(((ResidentUnallocatedPredicate) other).unallocatedKeyword)); // state check","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"colintkn":27}},{"path":"src/main/java/seedu/address/model/resident/Room.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-02-25"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-02-25"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"/**","lastModifiedDate":"2021-02-25"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":" * Represents a Resident\u0027s room assigned.","lastModifiedDate":"2021-03-05"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRoom(String)}","lastModifiedDate":"2021-02-25"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":" */","lastModifiedDate":"2021-02-25"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"public class Room {","lastModifiedDate":"2021-02-25"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-02-25"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"            \"Room should be of the format floor-unit \"","lastModifiedDate":"2021-03-05"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2021-02-27"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"            + \"1. The floor should contain 2 numeric characters\\n\"","lastModifiedDate":"2021-03-05"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"            + \"2. This is followed by a \u0027-\u0027 and then a unit. \"","lastModifiedDate":"2021-02-27"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"            + \"The unit must: \"","lastModifiedDate":"2021-03-05"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"            + \"contain 3 numeric characters\\n\";","lastModifiedDate":"2021-03-05"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"    public static final String UNALLOCATED_REGEX \u003d \"Room unallocated\";","lastModifiedDate":"2021-02-25"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"    public static final String FLOOR_REGEX \u003d \"\\\\d{2}\";","lastModifiedDate":"2021-03-05"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    public static final String UNIT_REGEX \u003d \"\\\\d{3}\";","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    public static final String VALIDATION_REGEX \u003d FLOOR_REGEX + \"-\" + UNIT_REGEX;","lastModifiedDate":"2021-03-05"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    public final String value;","lastModifiedDate":"2021-02-25"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-02-25"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"     * Constructs a {@code Room}.","lastModifiedDate":"2021-02-25"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"     *","lastModifiedDate":"2021-02-25"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"     * @param room A valid room number.","lastModifiedDate":"2021-02-25"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-02-25"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"    public Room(String room) {","lastModifiedDate":"2021-02-25"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        requireNonNull(room);","lastModifiedDate":"2021-02-25"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        checkArgument(isValidRoom(room), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-02-25"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        value \u003d room;","lastModifiedDate":"2021-02-25"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-02-25"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-02-25"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"     * Returns true if a given string is a valid room number.","lastModifiedDate":"2021-02-25"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-02-25"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"    public static boolean isValidRoom(String test) {","lastModifiedDate":"2021-02-25"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"        return test.matches(VALIDATION_REGEX) || test.equals(UNALLOCATED_REGEX);","lastModifiedDate":"2021-02-25"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-02-25"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-02-25"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"    public String toString() {","lastModifiedDate":"2021-02-25"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        return value;","lastModifiedDate":"2021-02-25"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-02-25"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-02-25"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-02-25"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-02-25"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"                || (other instanceof seedu.address.model.resident.Room // instanceof handles nulls","lastModifiedDate":"2021-03-05"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 value.equals(((seedu.address.model.resident.Room) other).value)); // state check","lastModifiedDate":"2021-03-05"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-02-25"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-02-25"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"    public int hashCode() {","lastModifiedDate":"2021-02-25"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"        return value.hashCode();","lastModifiedDate":"2021-02-25"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-02-25"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-02-25"}],"authorContributionMap":{"colintkn":61}},{"path":"src/main/java/seedu/address/model/resident/UniqueResidentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.exceptions.DuplicateResidentException;","lastModifiedDate":"2021-03-05"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.exceptions.ResidentNotFoundException;","lastModifiedDate":"2021-03-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":" * A list of residents that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2021-03-05"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":" * A resident is considered unique by comparing using {@code Resident#isSameResident(Resident)}.","lastModifiedDate":"2021-03-05"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":" * As such, adding and updating of resident uses Resident#isSameResident(Resident) for equality so as to","lastModifiedDate":"2021-03-05"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":" * ensure that the resident being added or updated is unique in terms of identity in the UniqueResidentList.","lastModifiedDate":"2021-03-05"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":" * However, the removal of a resident uses Resident#equals(Object) so","lastModifiedDate":"2021-03-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":" * as to ensure that the resident with exactly the same fields will be removed.","lastModifiedDate":"2021-03-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":" * @see Resident#isSameResident(Resident)","lastModifiedDate":"2021-03-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"public class UniqueResidentList implements Iterable\u003cResident\u003e {","lastModifiedDate":"2021-03-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    private final ObservableList\u003cResident\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-05"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"    private final ObservableList\u003cResident\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-03-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"     * Returns true if the list contains an equivalent resident as the given argument.","lastModifiedDate":"2021-03-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    public boolean contains(Resident toCheck) {","lastModifiedDate":"2021-03-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        return internalList.stream().anyMatch(toCheck::isSameResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"     * Returns true if the list contains an equivalent resident as the given argument.","lastModifiedDate":"2021-03-25"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"    public boolean contains(Name toCheck) {","lastModifiedDate":"2021-03-25"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-25"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        return internalList.stream().anyMatch(toCheck::isSameResident);","lastModifiedDate":"2021-03-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"     * Adds a resident to the list.","lastModifiedDate":"2021-03-05"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"     * The resident must not already exist in the list.","lastModifiedDate":"2021-03-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"    public void add(Resident toAdd) {","lastModifiedDate":"2021-03-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"            throw new DuplicateResidentException();","lastModifiedDate":"2021-03-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"     * Replaces the resident {@code target} in the list with {@code editedResident}.","lastModifiedDate":"2021-03-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"     * The resident identity of {@code editedResident} must not be the same as another existing resident in the list.","lastModifiedDate":"2021-03-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"    public void setResident(Resident target, Resident editedResident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"        requireAllNonNull(target, editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"            throw new ResidentNotFoundException();","lastModifiedDate":"2021-03-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"        if (!target.isSameResident(editedResident) \u0026\u0026 contains(editedResident)) {","lastModifiedDate":"2021-03-05"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"            throw new DuplicateResidentException();","lastModifiedDate":"2021-03-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"        internalList.set(index, editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-04-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"     * Removes the equivalent resident from the list.","lastModifiedDate":"2021-03-05"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"     * The resident must exist in the list.","lastModifiedDate":"2021-03-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"    public void remove(Resident toRemove) {","lastModifiedDate":"2021-03-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"            throw new ResidentNotFoundException();","lastModifiedDate":"2021-03-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-04-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"    public void setResidents(UniqueResidentList replacement) {","lastModifiedDate":"2021-03-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-04-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"     * Replaces the contents of this list with {@code residents}.","lastModifiedDate":"2021-03-05"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"     * {@code residents} must not contain duplicate residents.","lastModifiedDate":"2021-03-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"    public void setResidents(List\u003cResident\u003e residents) {","lastModifiedDate":"2021-03-05"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"        requireAllNonNull(residents);","lastModifiedDate":"2021-03-05"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"        if (!residentsAreUnique(residents)) {","lastModifiedDate":"2021-03-05"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"            throw new DuplicateResidentException();","lastModifiedDate":"2021-03-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":110,"author":{"gitId":"colintkn"},"content":"        internalList.setAll(residents);","lastModifiedDate":"2021-03-05"},{"lineNumber":111,"author":{"gitId":"colintkn"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-04-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":117,"author":{"gitId":"colintkn"},"content":"    public ObservableList\u003cResident\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-03-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"colintkn"},"content":"    public Iterator\u003cResident\u003e iterator() {","lastModifiedDate":"2021-03-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"colintkn"},"content":"                || (other instanceof UniqueResidentList // instanceof handles nulls","lastModifiedDate":"2021-03-05"},{"lineNumber":130,"author":{"gitId":"colintkn"},"content":"                        \u0026\u0026 internalList.equals(((UniqueResidentList) other).internalList));","lastModifiedDate":"2021-03-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":139,"author":{"gitId":"colintkn"},"content":"     * Returns true if {@code residents} contains only unique residents.","lastModifiedDate":"2021-03-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"colintkn"},"content":"    private boolean residentsAreUnique(List\u003cResident\u003e residents) {","lastModifiedDate":"2021-03-05"},{"lineNumber":142,"author":{"gitId":"colintkn"},"content":"        for (int i \u003d 0; i \u003c residents.size() - 1; i++) {","lastModifiedDate":"2021-03-05"},{"lineNumber":143,"author":{"gitId":"colintkn"},"content":"            for (int j \u003d i + 1; j \u003c residents.size(); j++) {","lastModifiedDate":"2021-03-05"},{"lineNumber":144,"author":{"gitId":"colintkn"},"content":"                if (residents.get(i).isSameResident(residents.get(j))) {","lastModifiedDate":"2021-03-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"colintkn":62,"-":89}},{"path":"src/main/java/seedu/address/model/resident/Year.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-05"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-05"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"/**","lastModifiedDate":"2021-03-05"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":" * Represents a Resident\u0027s seniority in the school.","lastModifiedDate":"2021-03-05"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidYear(String)}","lastModifiedDate":"2021-03-05"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":" */","lastModifiedDate":"2021-03-05"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"public class Year {","lastModifiedDate":"2021-03-05"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-05"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"            \"Year should be a single digit numeric character from 1 to 5 inclusive\\n\";","lastModifiedDate":"2021-03-05"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"    public static final String VALIDATION_REGEX \u003d \"[1-5]{1}\";","lastModifiedDate":"2021-03-05"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"    public final String value;","lastModifiedDate":"2021-03-05"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-05"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"     * Constructs a {@code Year}.","lastModifiedDate":"2021-03-05"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"     *","lastModifiedDate":"2021-03-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"     * @param year A valid year.","lastModifiedDate":"2021-03-05"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    public Year(String year) {","lastModifiedDate":"2021-03-05"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"        requireNonNull(year);","lastModifiedDate":"2021-03-05"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"        checkArgument(isValidYear(year), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-05"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"        value \u003d year;","lastModifiedDate":"2021-03-05"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-05"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-05"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"     * Returns true if a given string is a valid year.","lastModifiedDate":"2021-03-05"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-05"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"    public static boolean isValidYear(String test) {","lastModifiedDate":"2021-03-05"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-05"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-05"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-05"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"    public String toString() {","lastModifiedDate":"2021-03-05"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        return value;","lastModifiedDate":"2021-03-05"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-05"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-05"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-05"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-05"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"                || (other instanceof seedu.address.model.resident.Year // instanceof handles nulls","lastModifiedDate":"2021-03-05"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 value.equals(((seedu.address.model.resident.Year) other).value)); // state check","lastModifiedDate":"2021-03-05"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-05"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-05"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-05"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-05"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-05"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-03-05"}],"authorContributionMap":{"colintkn":52}},{"path":"src/main/java/seedu/address/model/resident/exceptions/DuplicateResidentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident.exceptions;","lastModifiedDate":"2021-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":" * Signals that the operation will result in duplicate Residents (Residents are considered duplicates if they have the","lastModifiedDate":"2021-03-05"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":" * same identity).","lastModifiedDate":"2021-03-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"public class DuplicateResidentException extends RuntimeException {","lastModifiedDate":"2021-03-05"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"    public DuplicateResidentException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"        super(\"Operation would result in duplicate residents\");","lastModifiedDate":"2021-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"colintkn":6,"-":5}},{"path":"src/main/java/seedu/address/model/resident/exceptions/ResidentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident.exceptions;","lastModifiedDate":"2021-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":" * Signals that the operation is unable to find the specified resident.","lastModifiedDate":"2021-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"public class ResidentNotFoundException extends RuntimeException {}","lastModifiedDate":"2021-03-05"}],"authorContributionMap":{"colintkn":3,"-":3}},{"path":"src/main/java/seedu/address/model/residentroom/ResidentRoom.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.residentroom;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-25"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.room.RoomNumber;","lastModifiedDate":"2021-03-25"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"/**","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":" * Represents a ResidentRoom.","lastModifiedDate":"2021-03-25"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":" */","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"public class ResidentRoom {","lastModifiedDate":"2021-03-25"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"    // Identity fields","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"    private final Name name;","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"    private final RoomNumber roomNumber;","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-25"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"    public ResidentRoom(Name name, RoomNumber roomNumber) {","lastModifiedDate":"2021-03-25"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-25"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"        this.roomNumber \u003d roomNumber;","lastModifiedDate":"2021-03-25"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"    public Name getName() {","lastModifiedDate":"2021-03-25"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"        return name;","lastModifiedDate":"2021-03-25"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"    public RoomNumber getRoomNumber() {","lastModifiedDate":"2021-03-25"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"        return roomNumber;","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"     * Returns true if both residents have the same name or","lastModifiedDate":"2021-03-25"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"     * returns true if both rooms are the same.","lastModifiedDate":"2021-03-25"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"     * This defines a weaker notion of equality between two residentroom.","lastModifiedDate":"2021-03-25"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    public boolean isSameResidentRoom(ResidentRoom otherResidentRoom) {","lastModifiedDate":"2021-03-25"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        if (otherResidentRoom \u003d\u003d this) {","lastModifiedDate":"2021-03-25"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"            return true;","lastModifiedDate":"2021-03-25"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        return otherResidentRoom !\u003d null","lastModifiedDate":"2021-03-25"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 (otherResidentRoom.getName().equals(getName())","lastModifiedDate":"2021-03-25"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"                || otherResidentRoom.getRoomNumber().equals(getRoomNumber()));","lastModifiedDate":"2021-03-25"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"     * Returns true if both residents have the same identity and data fields.","lastModifiedDate":"2021-03-25"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"     * This defines a stronger notion of equality between two residents.","lastModifiedDate":"2021-03-25"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-25"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-25"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"            return true;","lastModifiedDate":"2021-03-25"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        if (!(other instanceof ResidentRoom)) {","lastModifiedDate":"2021-03-25"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"            return false;","lastModifiedDate":"2021-03-25"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"        ResidentRoom otherResidentRoom \u003d (ResidentRoom) other;","lastModifiedDate":"2021-03-25"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"        return otherResidentRoom.getName().equals(getName())","lastModifiedDate":"2021-03-25"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 otherResidentRoom.getRoomNumber().equals(getRoomNumber());","lastModifiedDate":"2021-03-25"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-25"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-03-25"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"        return Objects.hash(name, roomNumber);","lastModifiedDate":"2021-03-25"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"    public String toString() {","lastModifiedDate":"2021-03-25"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-03-25"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        builder.append(getName())","lastModifiedDate":"2021-03-25"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"                .append(\"; Room Number: \")","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"                .append(getRoomNumber());","lastModifiedDate":"2021-03-25"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        return builder.toString();","lastModifiedDate":"2021-03-25"},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-03-25"}],"authorContributionMap":{"colintkn":82}},{"path":"src/main/java/seedu/address/model/residentroom/UniqueResidentRoomList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.residentroom;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-25"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-03-25"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import java.util.List;","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-25"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.exceptions.DuplicateResidentRoomException;","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.exceptions.ResidentRoomNotFoundException;","lastModifiedDate":"2021-03-25"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"/**","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":" * A list of residentRooms that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":" * A residentRoom is considered unique by comparing using {@code ResidentRoom#isSameResidentRoom(ResidentRoom)}.","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":" * As such, allocation and deallocation of residentRoom uses ResidentRoom#isSameResidentRoom(ResidentRoom) for","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":" * equality so as to ensure that the residentRoom being added or updated is unique in terms of identity in the","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":" * UniqueResidentRoomList.","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":" * However, the deallocation of a residentRoom uses ResidentRoom#containsBothResidentRoom(Object) so","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":" * as to ensure that the residentRoom with exactly the same fields will be removed.","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":" *","lastModifiedDate":"2021-03-25"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-03-25"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":" *","lastModifiedDate":"2021-03-25"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":" */","lastModifiedDate":"2021-03-25"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"public class UniqueResidentRoomList implements Iterable\u003cResidentRoom\u003e {","lastModifiedDate":"2021-03-25"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    private final ObservableList\u003cResidentRoom\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-25"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"    private final ObservableList\u003cResidentRoom\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"     * Returns true if the list contains the name or room number as the given argument.","lastModifiedDate":"2021-03-25"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    public boolean containsEitherResidentRoom(ResidentRoom toCheck) {","lastModifiedDate":"2021-03-25"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-25"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        return internalList.stream().anyMatch(toCheck::isSameResidentRoom);","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"     * Returns true if the list matches the resident and room number as the given argument.","lastModifiedDate":"2021-03-25"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"    public boolean containsBothResidentRoom(ResidentRoom toCheck) {","lastModifiedDate":"2021-03-25"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-25"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        return internalList.stream().anyMatch(toCheck::equals);","lastModifiedDate":"2021-03-25"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"     * Adds a residentroom to the list.","lastModifiedDate":"2021-03-25"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"     * The residentroom must not already exist in the list.","lastModifiedDate":"2021-03-25"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"    public void add(ResidentRoom toAdd) {","lastModifiedDate":"2021-03-25"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-03-25"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        if (containsEitherResidentRoom(toAdd)) {","lastModifiedDate":"2021-03-25"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"            throw new DuplicateResidentRoomException();","lastModifiedDate":"2021-03-25"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-03-25"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"     * Removes the equivalent residentRoom from the list.","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"     * The residentRoom must exist in the list.","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"    public void remove(ResidentRoom toRemove) {","lastModifiedDate":"2021-03-25"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-03-25"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-03-25"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"            throw new ResidentRoomNotFoundException();","lastModifiedDate":"2021-03-25"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"     * Replaces the contents of this list with {@code residentRoom}.","lastModifiedDate":"2021-03-25"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"     * {@code residentRooms} must not contain duplicate residentRooms.","lastModifiedDate":"2021-03-25"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"    public void setResidentRooms(List\u003cResidentRoom\u003e residentRooms) {","lastModifiedDate":"2021-03-25"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"        requireAllNonNull(residentRooms);","lastModifiedDate":"2021-03-25"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"        if (!residentRoomsAreUnique(residentRooms)) {","lastModifiedDate":"2021-03-25"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"            throw new DuplicateResidentRoomException();","lastModifiedDate":"2021-03-25"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":"        internalList.setAll(residentRooms);","lastModifiedDate":"2021-03-25"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-03-25"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"    public ObservableList\u003cResidentRoom\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-03-25"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-03-25"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"    public Iterator\u003cResidentRoom\u003e iterator() {","lastModifiedDate":"2021-03-25"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-03-25"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":96,"author":{"gitId":"colintkn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-25"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-25"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"                || (other instanceof UniqueResidentRoomList // instanceof handles nulls","lastModifiedDate":"2021-03-25"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"                        \u0026\u0026 internalList.equals(((UniqueResidentRoomList) other).internalList));","lastModifiedDate":"2021-03-25"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-25"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-03-25"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":108,"author":{"gitId":"colintkn"},"content":"     * Returns true if {@code residentRoom} contains only unique residentsRoom.","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":110,"author":{"gitId":"colintkn"},"content":"    private boolean residentRoomsAreUnique(List\u003cResidentRoom\u003e residentRooms) {","lastModifiedDate":"2021-03-25"},{"lineNumber":111,"author":{"gitId":"colintkn"},"content":"        for (int i \u003d 0; i \u003c residentRooms.size() - 1; i++) {","lastModifiedDate":"2021-03-25"},{"lineNumber":112,"author":{"gitId":"colintkn"},"content":"            for (int j \u003d i + 1; j \u003c residentRooms.size(); j++) {","lastModifiedDate":"2021-03-25"},{"lineNumber":113,"author":{"gitId":"colintkn"},"content":"                if (residentRooms.get(i).isSameResidentRoom(residentRooms.get(j))) {","lastModifiedDate":"2021-03-25"},{"lineNumber":114,"author":{"gitId":"colintkn"},"content":"                    return false;","lastModifiedDate":"2021-03-25"},{"lineNumber":115,"author":{"gitId":"colintkn"},"content":"                }","lastModifiedDate":"2021-03-25"},{"lineNumber":116,"author":{"gitId":"colintkn"},"content":"            }","lastModifiedDate":"2021-03-25"},{"lineNumber":117,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":118,"author":{"gitId":"colintkn"},"content":"        return true;","lastModifiedDate":"2021-03-25"},{"lineNumber":119,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":120,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-03-25"}],"authorContributionMap":{"colintkn":120}},{"path":"src/main/java/seedu/address/model/residentroom/exceptions/DuplicateResidentRoomException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.residentroom.exceptions;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"/**","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":" * Signals that the operation will result in duplicate ResidentRoom (ResidentRoom are considered duplicates if","lastModifiedDate":"2021-03-25"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":" * they have the same room number or same name in any of the existing ResidentRoom).","lastModifiedDate":"2021-03-25"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":" */","lastModifiedDate":"2021-03-25"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"public class DuplicateResidentRoomException extends RuntimeException {","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"     * Exception if either resident or room is found in ResidentRoom list.","lastModifiedDate":"2021-03-25"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"    public DuplicateResidentRoomException() {","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"        super(\"The resident or room has already been allocated.\"","lastModifiedDate":"2021-03-25"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"                + \"Please deallocate before proceeding\");","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-03-25"}],"authorContributionMap":{"colintkn":15}},{"path":"src/main/java/seedu/address/model/residentroom/exceptions/ResidentRoomNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.residentroom.exceptions;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"/**","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":" * Signals that the operation is unable to find the specified residentroom.","lastModifiedDate":"2021-03-25"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":" */","lastModifiedDate":"2021-03-25"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"public class ResidentRoomNotFoundException extends RuntimeException {}","lastModifiedDate":"2021-03-25"}],"authorContributionMap":{"colintkn":6}},{"path":"src/main/java/seedu/address/model/room/IsOccupied.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-06"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"public class IsOccupied {","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"            \"Room occupancy status can only be y or n in lowercase alphabets\";","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"    public static final String VALIDATION_REGEX \u003d \"y|n\";","lastModifiedDate":"2021-03-06"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"    public static final String OCCUPIED \u003d \"y\";","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"    public static final String UNOCCUPIED \u003d \"n\";","lastModifiedDate":"2021-03-25"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"    public final boolean isOccupied;","lastModifiedDate":"2021-03-06"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"     * Constructs a {@code IsOccupied}.","lastModifiedDate":"2021-03-06"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-06"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"     * @param occupancyStatus A valid occupancy status.","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    public IsOccupied(String occupancyStatus) {","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"        occupancyStatus \u003d occupancyStatus.toLowerCase();","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"        requireNonNull(occupancyStatus);","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"        checkArgument(isValidOccupancyStatus(occupancyStatus), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"        this.isOccupied \u003d occupancyStatus.equals(\"y\") ? true : false;","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2021-03-06"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    public static boolean isValidOccupancyStatus(String test) {","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"        test \u003d test.toLowerCase();","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-06"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-06"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    public String toString() {","lastModifiedDate":"2021-03-06"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        return isOccupied ? \"Y\" : \"N\";","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-06"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-06"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-06"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"                || (other instanceof IsOccupied // instanceof handles nulls","lastModifiedDate":"2021-03-06"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 isOccupied \u003d\u003d ((IsOccupied) other).isOccupied); // state check","lastModifiedDate":"2021-03-06"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"colintkn":2,"DrWala":45}},{"path":"src/main/java/seedu/address/model/room/Room.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-06"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":" * Represents a Room in the hostel management system.","lastModifiedDate":"2021-03-06"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-03-06"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"public class Room implements Comparable\u003cRoom\u003e {","lastModifiedDate":"2021-04-05"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    // Rooms have a default occupancy status of \"No\". Occupancy","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    // can only be edited through the allocation/deallocation commands","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    // or through the reading of the model from a JSON file (which isn\u0027t","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    // really editing, its just model creation)","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    public static final String DEFAULT_OCCUPANCY_STATUS \u003d \"N\";","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    // Identity fields","lastModifiedDate":"2021-03-06"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    // Room number, type, occupancy status, tags","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    private final RoomNumber roomNumber;","lastModifiedDate":"2021-03-06"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    private final RoomType roomType;","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    private final IsOccupied isOccupied;","lastModifiedDate":"2021-03-06"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-06"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"     * Every field must be present and not null. This constructor should only be used when creating","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"     * a room model from the JSON file. The Add/Edit room commands and their respective parsers should","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"     * NOT use this constructor. Use the one that does not take in isOccupied.","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    public Room(RoomNumber roomNumber, RoomType roomType, IsOccupied isOccupied, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-12"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        requireAllNonNull(roomNumber, roomType, isOccupied, tags);","lastModifiedDate":"2021-03-12"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        this.roomNumber \u003d roomNumber;","lastModifiedDate":"2021-03-06"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"        this.roomType \u003d roomType;","lastModifiedDate":"2021-03-12"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        this.isOccupied \u003d isOccupied;","lastModifiedDate":"2021-03-06"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2021-03-06"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"    public Room(RoomNumber roomNumber, RoomType roomType, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        requireAllNonNull(roomNumber, roomType, tags);","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        this.roomNumber \u003d roomNumber;","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"        this.roomType \u003d roomType;","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        this.isOccupied \u003d new IsOccupied(DEFAULT_OCCUPANCY_STATUS);","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"    public RoomNumber getRoomNumber() {","lastModifiedDate":"2021-03-06"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"        return roomNumber;","lastModifiedDate":"2021-03-06"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"    public RoomType getRoomType() {","lastModifiedDate":"2021-03-12"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"        return roomType;","lastModifiedDate":"2021-03-12"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"    public IsOccupied isOccupied() {","lastModifiedDate":"2021-03-06"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"        return isOccupied;","lastModifiedDate":"2021-03-06"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2021-03-06"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2021-03-06"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"     * Returns true if both rooms have the same number.","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"     * This defines a weaker notion of equality between two rooms.","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"    public boolean isSameRoom(Room otherRoom) {","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"        if (otherRoom \u003d\u003d this) {","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"            return true;","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"        return otherRoom !\u003d null","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 otherRoom.getRoomNumber().equals(getRoomNumber());","lastModifiedDate":"2021-03-10"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"     * Returns true if both rooms have the same identity and data fields.","lastModifiedDate":"2021-03-16"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"     * This defines a stronger notion of equality between two rooms.","lastModifiedDate":"2021-03-16"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-10"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"            return true;","lastModifiedDate":"2021-03-10"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"        if (!(other instanceof Room)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"            return false;","lastModifiedDate":"2021-03-10"},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"        Room otherRoom \u003d (Room) other;","lastModifiedDate":"2021-03-10"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"        return otherRoom.getRoomNumber().equals(getRoomNumber())","lastModifiedDate":"2021-03-10"},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 otherRoom.getRoomType().equals(getRoomType())","lastModifiedDate":"2021-03-12"},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 otherRoom.isOccupied().equals(isOccupied())","lastModifiedDate":"2021-03-10"},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 otherRoom.getTags().equals(getTags());","lastModifiedDate":"2021-03-10"},{"lineNumber":104,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":106,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-10"},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-03-10"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":"        return Objects.hash(roomNumber, roomType, isOccupied, tags);","lastModifiedDate":"2021-03-12"},{"lineNumber":110,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":112,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":113,"author":{"gitId":"DrWala"},"content":"    public String toString() {","lastModifiedDate":"2021-03-10"},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-03-10"},{"lineNumber":115,"author":{"gitId":"DrWala"},"content":"        builder.append(getRoomNumber())","lastModifiedDate":"2021-03-10"},{"lineNumber":116,"author":{"gitId":"DrWala"},"content":"                .append(\"; Type: \")","lastModifiedDate":"2021-03-10"},{"lineNumber":117,"author":{"gitId":"DrWala"},"content":"                .append(getRoomType())","lastModifiedDate":"2021-03-12"},{"lineNumber":118,"author":{"gitId":"DrWala"},"content":"                .append(\"; Occupancy Status: \")","lastModifiedDate":"2021-03-10"},{"lineNumber":119,"author":{"gitId":"DrWala"},"content":"                .append(isOccupied());","lastModifiedDate":"2021-03-10"},{"lineNumber":120,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":121,"author":{"gitId":"DrWala"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2021-03-10"},{"lineNumber":122,"author":{"gitId":"DrWala"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2021-03-10"},{"lineNumber":123,"author":{"gitId":"DrWala"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2021-03-10"},{"lineNumber":124,"author":{"gitId":"DrWala"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2021-03-10"},{"lineNumber":125,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":126,"author":{"gitId":"DrWala"},"content":"        return builder.toString();","lastModifiedDate":"2021-03-10"},{"lineNumber":127,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":128,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":129,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-04-05"},{"lineNumber":130,"author":{"gitId":"DrWala"},"content":"    public int compareTo(Room room) {","lastModifiedDate":"2021-04-05"},{"lineNumber":131,"author":{"gitId":"DrWala"},"content":"        return this.roomNumber.compareTo(room.getRoomNumber());","lastModifiedDate":"2021-04-05"},{"lineNumber":132,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":133,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"colintkn":1,"DrWala":132}},{"path":"src/main/java/seedu/address/model/room/RoomNumber.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-06"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":" * Represents a Room\u0027s number in the address book.","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRoomNumber(String)}","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"public class RoomNumber implements Comparable\u003cRoomNumber\u003e {","lastModifiedDate":"2021-04-05"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-06"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"            \"Room numbers should be formatted as such: XY-ABC, \"","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"                    + \"where XY can be any pair of digits except 00, and ABC can be any 3 digits.\";","lastModifiedDate":"2021-04-05"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    public static final String VALIDATION_REGEX \u003d \"(?!00)\\\\d{2}(-\\\\d{3})\";","lastModifiedDate":"2021-04-05"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    public final String roomNumber;","lastModifiedDate":"2021-03-06"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"     * Constructs a {@code RoomNumber}.","lastModifiedDate":"2021-03-06"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-06"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"     * @param roomNumber A valid room number.","lastModifiedDate":"2021-03-06"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    public RoomNumber(String roomNumber) {","lastModifiedDate":"2021-03-06"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"        requireNonNull(roomNumber);","lastModifiedDate":"2021-03-06"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"        checkArgument(isValidRoomNumber(roomNumber), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-06"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"        this.roomNumber \u003d roomNumber;","lastModifiedDate":"2021-03-06"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2021-03-06"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    public static boolean isValidRoomNumber(String test) {","lastModifiedDate":"2021-03-06"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-06"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-06"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"    public String toString() {","lastModifiedDate":"2021-03-06"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"        return roomNumber;","lastModifiedDate":"2021-03-06"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"     * Returns true if a room has the same number.","lastModifiedDate":"2021-03-25"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"     * This defines a weaker notion of equality between two rooms.","lastModifiedDate":"2021-03-25"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"    public boolean isSameRoom(Room room) {","lastModifiedDate":"2021-03-25"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        return this.equals(room.getRoomNumber());","lastModifiedDate":"2021-03-25"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-06"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-06"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-06"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"                || (other instanceof RoomNumber // instanceof handles nulls","lastModifiedDate":"2021-03-06"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 roomNumber.equals(((RoomNumber) other).roomNumber)); // state check","lastModifiedDate":"2021-03-06"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-06"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-06"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"        return roomNumber.hashCode();","lastModifiedDate":"2021-03-06"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-04-05"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"    public int compareTo(RoomNumber roomNumber) {","lastModifiedDate":"2021-04-05"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"        return this.roomNumber.compareTo(roomNumber.roomNumber);","lastModifiedDate":"2021-04-05"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"colintkn":9,"DrWala":58}},{"path":"src/main/java/seedu/address/model/room/RoomNumberOrTagsContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.List;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":" * Tests that a {@code Room}\u0027s {@code RoomNumber} or {@Tag} matches any of the keywords given.","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"public class RoomNumberOrTagsContainsKeywordsPredicate implements Predicate\u003cRoom\u003e {","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"    public RoomNumberOrTagsContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"     * Tests if any of the keywords are contained in either the room\u0027s number or any of its tags.","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"     * @param room Room whose number and tags need to be checked to see if they contain any of the given keywords.","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"     * @return True if keyword is contained in the room\u0027s number or tags.","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    public boolean test(Room room) {","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"        return keywords.stream()","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"                .anyMatch(keyword -\u003e room.getRoomNumber().roomNumber.contains(keyword)","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"                        || room.getTags().stream()","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"                        .anyMatch(t -\u003e t.tagName.toLowerCase().contains(keyword.toLowerCase())));","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"                || (other instanceof RoomNumberOrTagsContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 keywords.equals(((RoomNumberOrTagsContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"DrWala":37}},{"path":"src/main/java/seedu/address/model/room/RoomType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-06"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.util.EnumUtil;","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-06"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":" * Represents a RoomType in the hostel management system.","lastModifiedDate":"2021-03-06"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-03-06"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-06"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"public class RoomType {","lastModifiedDate":"2021-03-06"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-06"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"            \"The valid options for Room Type are: \" + String.join(\", \", EnumUtil.getNames(RoomTypeOptions.class));","lastModifiedDate":"2021-03-06"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    public final RoomTypeOptions value;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"     * Constructs a {@code RoomNumber}.","lastModifiedDate":"2021-03-06"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-06"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"     * @param value A valid room type.","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    public RoomType(String value) {","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"        value \u003d value.toUpperCase();","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"        requireNonNull(value);","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"        checkArgument(isValidRoomType(value), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"        this.value \u003d RoomTypeOptions.valueOf(value);","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"     * Returns true if a given string is a valid name. Tests are case insensitive.","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    public static boolean isValidRoomType(String test) {","lastModifiedDate":"2021-03-06"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"        test \u003d test.toUpperCase();","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        try {","lastModifiedDate":"2021-03-06"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"            RoomTypeOptions.valueOf(test);","lastModifiedDate":"2021-03-06"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"            return true;","lastModifiedDate":"2021-03-06"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"        } catch (IllegalArgumentException ex) {","lastModifiedDate":"2021-03-06"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"            // Unable to parse","lastModifiedDate":"2021-03-06"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"            return false;","lastModifiedDate":"2021-03-06"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-06"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-06"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"    public String toString() {","lastModifiedDate":"2021-03-06"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        switch (value) {","lastModifiedDate":"2021-04-06"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        case SUITE_AC:","lastModifiedDate":"2021-04-06"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"            return \"Suite AC\";","lastModifiedDate":"2021-04-06"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        case SUITE_NON_AC:","lastModifiedDate":"2021-04-06"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"            return \"Suite Non AC\";","lastModifiedDate":"2021-04-06"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        case CORRIDOR_AC:","lastModifiedDate":"2021-04-06"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"            return \"Corridor AC\";","lastModifiedDate":"2021-04-06"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"        case CORRIDOR_NON_AC:","lastModifiedDate":"2021-04-06"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"            return \"Corridor Non AC\";","lastModifiedDate":"2021-04-06"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"        default:","lastModifiedDate":"2021-04-06"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"            return \"Unable to provide string representation\";","lastModifiedDate":"2021-04-06"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-06"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-06"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-06"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"                || (other instanceof RoomType // instanceof handles nulls","lastModifiedDate":"2021-03-06"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 value.equals(((RoomType) other).value)); // state check","lastModifiedDate":"2021-03-12"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-06"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-06"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-12"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-06"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"DrWala":73}},{"path":"src/main/java/seedu/address/model/room/RoomTypeOptions.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;","lastModifiedDate":"2021-03-06"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"public enum RoomTypeOptions {","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"    CORRIDOR_AC,","lastModifiedDate":"2021-03-06"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"    CORRIDOR_NON_AC,","lastModifiedDate":"2021-03-06"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"    SUITE_AC,","lastModifiedDate":"2021-03-06"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"    SUITE_NON_AC","lastModifiedDate":"2021-03-06"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"DrWala":8}},{"path":"src/main/java/seedu/address/model/room/UniqueRoomList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import java.util.List;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.exceptions.DuplicateRoomException;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.exceptions.RoomNotFoundException;","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":" * A list of rooms that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":" * A room is considered unique by comparing using {@code Room#isSameRoom(Room)}. As such, adding and updating of","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":" * rooms uses Room#isSameRoom(Room) for equality so as to ensure that the room being added or updated is","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":" * unique in terms of identity in the UniqueRoomList. However, the removal of a person uses Room#equals(Object) so","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":" *","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":" * @see Room#isSameRoom(Room)","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"public class UniqueRoomList implements Iterable\u003cRoom\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    private final ObservableList\u003cRoom\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    private final ObservableList\u003cRoom\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"     * Returns true if the list contains an equivalent room as the given argument.","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    public boolean contains(Room toCheck) {","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        return internalList.stream().anyMatch(toCheck::isSameRoom);","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"     * Returns true if the list contains an equivalent room as the given argument.","lastModifiedDate":"2021-03-25"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"    public boolean contains(RoomNumber toCheck) {","lastModifiedDate":"2021-03-25"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-25"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        return internalList.stream().anyMatch(toCheck::isSameRoom);","lastModifiedDate":"2021-03-25"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"     * Adds a room to the list.","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"     * The room must not already exist in the list.","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"    public void add(Room toAdd) {","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"            throw new DuplicateRoomException();","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"     * Replaces the room {@code target} in the list with {@code editedRoom}.","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-03-10"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"     * The Room identity of {@code editedRoom} must not be the same as another existing room in the list.","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"    public void setRoom(Room target, Room editedRoom) {","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"        requireAllNonNull(target, editedRoom);","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"            throw new RoomNotFoundException();","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"        if (!target.isSameRoom(editedRoom) \u0026\u0026 contains(editedRoom)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"            throw new DuplicateRoomException();","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"        internalList.set(index, editedRoom);","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-04-05"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"     * Removes the equivalent room from the list.","lastModifiedDate":"2021-03-10"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"     * The room must exist in the list.","lastModifiedDate":"2021-03-10"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"    public void remove(Room toRemove) {","lastModifiedDate":"2021-03-10"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-03-10"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"            throw new RoomNotFoundException();","lastModifiedDate":"2021-03-10"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-04-06"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"    public void setRooms(UniqueRoomList replacement) {","lastModifiedDate":"2021-03-10"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-03-10"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-03-10"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-04-05"},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"     * Replaces the contents of this list with {@code rooms}.","lastModifiedDate":"2021-03-16"},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":"     * {@code rooms} must not contain duplicate rooms.","lastModifiedDate":"2021-03-16"},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"    public void setRooms(List\u003cRoom\u003e rooms) {","lastModifiedDate":"2021-03-10"},{"lineNumber":104,"author":{"gitId":"DrWala"},"content":"        requireAllNonNull(rooms);","lastModifiedDate":"2021-03-10"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":"        if (!roomsAreUnique(rooms)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":106,"author":{"gitId":"DrWala"},"content":"            throw new DuplicateRoomException();","lastModifiedDate":"2021-03-10"},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":"        internalList.setAll(rooms);","lastModifiedDate":"2021-03-10"},{"lineNumber":110,"author":{"gitId":"DrWala"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-04-05"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":112,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":113,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-03-10"},{"lineNumber":115,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":116,"author":{"gitId":"DrWala"},"content":"    public ObservableList\u003cRoom\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-03-10"},{"lineNumber":117,"author":{"gitId":"DrWala"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-03-10"},{"lineNumber":118,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":119,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":120,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":121,"author":{"gitId":"DrWala"},"content":"    public Iterator\u003cRoom\u003e iterator() {","lastModifiedDate":"2021-03-10"},{"lineNumber":122,"author":{"gitId":"DrWala"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-03-10"},{"lineNumber":123,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":124,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":125,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":126,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":127,"author":{"gitId":"DrWala"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-10"},{"lineNumber":128,"author":{"gitId":"DrWala"},"content":"                || (other instanceof UniqueRoomList // instanceof handles nulls","lastModifiedDate":"2021-03-10"},{"lineNumber":129,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 internalList.equals(((UniqueRoomList) other).internalList));","lastModifiedDate":"2021-03-10"},{"lineNumber":130,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":131,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":132,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":133,"author":{"gitId":"DrWala"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-10"},{"lineNumber":134,"author":{"gitId":"DrWala"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-03-10"},{"lineNumber":135,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":136,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":137,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":138,"author":{"gitId":"DrWala"},"content":"     * Returns true if {@code rooms} contains only unique rooms.","lastModifiedDate":"2021-03-10"},{"lineNumber":139,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":140,"author":{"gitId":"DrWala"},"content":"    private boolean roomsAreUnique(List\u003cRoom\u003e rooms) {","lastModifiedDate":"2021-03-10"},{"lineNumber":141,"author":{"gitId":"DrWala"},"content":"        for (int i \u003d 0; i \u003c rooms.size() - 1; i++) {","lastModifiedDate":"2021-03-10"},{"lineNumber":142,"author":{"gitId":"DrWala"},"content":"            for (int j \u003d i + 1; j \u003c rooms.size(); j++) {","lastModifiedDate":"2021-03-10"},{"lineNumber":143,"author":{"gitId":"DrWala"},"content":"                if (rooms.get(i).isSameRoom(rooms.get(j))) {","lastModifiedDate":"2021-03-10"},{"lineNumber":144,"author":{"gitId":"DrWala"},"content":"                    return false;","lastModifiedDate":"2021-03-10"},{"lineNumber":145,"author":{"gitId":"DrWala"},"content":"                }","lastModifiedDate":"2021-03-10"},{"lineNumber":146,"author":{"gitId":"DrWala"},"content":"            }","lastModifiedDate":"2021-03-10"},{"lineNumber":147,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":148,"author":{"gitId":"DrWala"},"content":"        return true;","lastModifiedDate":"2021-03-10"},{"lineNumber":149,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":150,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"colintkn":8,"DrWala":142}},{"path":"src/main/java/seedu/address/model/room/exceptions/DuplicateRoomException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room.exceptions;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":" * Signals that the operation will result in duplicate Rooms (Rooms are considered duplicates if they have the same","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":" * identity).","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"public class DuplicateRoomException extends RuntimeException {","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"    public DuplicateRoomException() {","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"        super(\"Operation would result in duplicate rooms.\");","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"DrWala":11}},{"path":"src/main/java/seedu/address/model/room/exceptions/RoomNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room.exceptions;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":" * Signals that the operation is unable to find the specified room.","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"public class RoomNotFoundException extends RuntimeException {","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"DrWala":7}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}.","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tag name should be alphanumeric and maximum 25 characters\";","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}{1,25}\";","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-04-08"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"     * @param test String to check.","lastModifiedDate":"2021-04-08"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"     * @return {@code True} If test is valid.","lastModifiedDate":"2021-04-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                        \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"stein414":6,"-":50}},{"path":"src/main/java/seedu/address/model/undoredo/StatefulAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"// Solution below adapted from AB-4: https://github.com/se-edu/addressbook-level4","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.model.undoredo;","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.LinkedList;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.List;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.undoredo.exceptions.NoRedoableStateException;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.undoredo.exceptions.NoUndoableStateException;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.undoredo.exceptions.RedoException;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.undoredo.exceptions.UndoException;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":" * An {@code AddressBook} that maintains a state for undo/redo operations.","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"public class StatefulAddressBook extends AddressBook {","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    private final List\u003cReadOnlyAddressBook\u003e stateHistory;","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    private int currStatePtr;","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a {@code StatefulAddressBook} with the given initial state.","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"     * @param initialState The initial state.","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    public StatefulAddressBook(ReadOnlyAddressBook initialState) {","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        super(initialState);","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        stateHistory \u003d new LinkedList\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"        stateHistory.add(new AddressBook(this));","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        currStatePtr \u003d 0;","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if a redo operation is possible. False otherwise.","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"     * @return True if a redo operation is possible. False otherwise.","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean canRedo() {","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"        return hasRemainingRedoableStates();","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if an undo operation is possible. False otherwise.","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"     * @return True if an undo operation is possible. False otherwise.","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean canUndo() {","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"        return hasRemainingUndoableStates();","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"     * Saves the current state of the address book for undo/redo operations.","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"    public void commit() {","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"        removeStatesAfterCurrent();","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        stateHistory.add(new AddressBook(this));","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"        currStatePtr++;","lastModifiedDate":"2021-03-27"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"     * Sets the current state of the address book to the next state, if any.","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws RedoException If the redo operation fails for any reason.","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    public void redo() throws RedoException {","lastModifiedDate":"2021-03-27"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"        if (!canRedo()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"            throw new NoRedoableStateException();","lastModifiedDate":"2021-03-27"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"        currStatePtr++;","lastModifiedDate":"2021-03-27"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"        resetData(stateHistory.get(currStatePtr));","lastModifiedDate":"2021-03-27"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"     * Reverts the current state of the address book to the previous state, if any.","lastModifiedDate":"2021-03-27"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws UndoException If the undo operation fails for any reason.","lastModifiedDate":"2021-03-27"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"    public void undo() throws UndoException {","lastModifiedDate":"2021-03-27"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"        if (!canUndo()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"            throw new NoUndoableStateException();","lastModifiedDate":"2021-03-27"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"        currStatePtr--;","lastModifiedDate":"2021-03-27"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"        resetData(stateHistory.get(currStatePtr));","lastModifiedDate":"2021-03-27"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"    private boolean hasRemainingRedoableStates() {","lastModifiedDate":"2021-03-27"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"        return currStatePtr \u003c stateHistory.size() - 1;","lastModifiedDate":"2021-03-27"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"    private boolean hasRemainingUndoableStates() {","lastModifiedDate":"2021-03-27"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"        return currStatePtr \u003e 0;","lastModifiedDate":"2021-03-27"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":"     * Removes all states at indices higher than the current state pointer, if any.","lastModifiedDate":"2021-03-27"},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"    private void removeStatesAfterCurrent() {","lastModifiedDate":"2021-03-27"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"        stateHistory.subList(currStatePtr + 1, stateHistory.size()).clear();","lastModifiedDate":"2021-03-27"},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"benedictkhoomw":100}},{"path":"src/main/java/seedu/address/model/undoredo/exceptions/NoRedoableStateException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"// Solution below adapted from AB-4: https://github.com/se-edu/addressbook-level4","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.model.undoredo.exceptions;","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":" * Thrown when there are no more future states to redo.","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"public class NoRedoableStateException extends RedoException {","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a {@code NoRedoableStateException} with a default message.","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    public NoRedoableStateException() {","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"        super(\"Cannot redo: no future states remaining!\");","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"benedictkhoomw":14}},{"path":"src/main/java/seedu/address/model/undoredo/exceptions/NoUndoableStateException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"// Solution below adapted from AB-4: https://github.com/se-edu/addressbook-level4","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.model.undoredo.exceptions;","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":" * Thrown when there are no more prior states to undo.","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"public class NoUndoableStateException extends UndoException {","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a {@code NoUndoableStateException} with a default message.","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    public NoUndoableStateException() {","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"        super(\"Cannot undo: no prior states remaining!\");","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"benedictkhoomw":14}},{"path":"src/main/java/seedu/address/model/undoredo/exceptions/RedoException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.model.undoredo.exceptions;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":" * Thrown when a redo operations fails. Base class for more specific exceptions.","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"public class RedoException extends RuntimeException {","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs an {@code RedoException} with the given message.","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"     * @param msg The exception message.","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    public RedoException(String msg) {","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"        super(msg);","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"benedictkhoomw":15}},{"path":"src/main/java/seedu/address/model/undoredo/exceptions/UndoException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.model.undoredo.exceptions;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":" * Thrown when an undo operations fails. Base class for more specific exceptions.","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"public class UndoException extends RuntimeException {","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs an {@code UndoException} with the given message.","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"     * @param msg The exception message.","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    public UndoException(String msg) {","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"        super(msg);","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"benedictkhoomw":15}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.model.resident.Room.UNALLOCATED_REGEX;","lastModifiedDate":"2021-04-02"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-04-02"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.issue.Category;","lastModifiedDate":"2021-04-02"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.issue.Description;","lastModifiedDate":"2021-04-02"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-04-02"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.issue.IssueStatus;","lastModifiedDate":"2021-04-02"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.issue.Status;","lastModifiedDate":"2021-04-02"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.issue.Timestamp;","lastModifiedDate":"2021-04-02"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;","lastModifiedDate":"2021-03-05"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;","lastModifiedDate":"2021-03-05"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;","lastModifiedDate":"2021-03-05"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;","lastModifiedDate":"2021-03-05"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.room.IsOccupied;","lastModifiedDate":"2021-04-02"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.room.RoomNumber;","lastModifiedDate":"2021-04-02"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.room.RoomType;","lastModifiedDate":"2021-04-02"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.room.RoomTypeOptions;","lastModifiedDate":"2021-04-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"    public static Resident[] getSampleResidents() {","lastModifiedDate":"2021-03-05"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"        return new Resident[] {","lastModifiedDate":"2021-03-05"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"            new Resident(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2021-03-05"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"                    new Year(\"1\"),","lastModifiedDate":"2021-03-05"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"                    new Room(UNALLOCATED_REGEX)),","lastModifiedDate":"2021-04-02"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"            new Resident(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2021-03-05"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"                    new Year(\"2\"),","lastModifiedDate":"2021-03-05"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"                    new Room(UNALLOCATED_REGEX)),","lastModifiedDate":"2021-04-02"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"            new Resident(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2021-03-05"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"                    new Year(\"3\"),","lastModifiedDate":"2021-03-05"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"                    new Room(UNALLOCATED_REGEX)),","lastModifiedDate":"2021-04-02"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"            new Resident(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2021-03-05"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"                    new Year(\"4\"),","lastModifiedDate":"2021-03-05"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"                    new Room(UNALLOCATED_REGEX)),","lastModifiedDate":"2021-04-02"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"            new Resident(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2021-03-05"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"                    new Year(\"4\"),","lastModifiedDate":"2021-03-05"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"                    new Room(UNALLOCATED_REGEX)),","lastModifiedDate":"2021-04-02"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"            new Resident(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2021-03-05"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"                    new Year(\"5\"),","lastModifiedDate":"2021-03-05"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"                    new Room(UNALLOCATED_REGEX))","lastModifiedDate":"2021-04-02"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        };","lastModifiedDate":"2021-04-02"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"    public static seedu.address.model.room.Room[] getSampleRooms() {","lastModifiedDate":"2021-04-02"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"        return new seedu.address.model.room.Room[] {","lastModifiedDate":"2021-04-02"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"            new seedu.address.model.room.Room(new RoomNumber(\"01-234\"),","lastModifiedDate":"2021-04-02"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"                    new RoomType(RoomTypeOptions.CORRIDOR_AC.name()),","lastModifiedDate":"2021-04-02"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"                    new IsOccupied(IsOccupied.UNOCCUPIED),","lastModifiedDate":"2021-04-02"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"                    new HashSet\u003c\u003e(Arrays.asList(new Tag(\"SHN\")))),","lastModifiedDate":"2021-04-02"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"            new seedu.address.model.room.Room(new RoomNumber(\"03-325\"),","lastModifiedDate":"2021-04-02"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"                    new RoomType(RoomTypeOptions.CORRIDOR_NON_AC.name()),","lastModifiedDate":"2021-04-02"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"                    new IsOccupied(IsOccupied.UNOCCUPIED),","lastModifiedDate":"2021-04-02"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"                    new HashSet\u003c\u003e()),","lastModifiedDate":"2021-04-02"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"            new seedu.address.model.room.Room(new RoomNumber(\"08-514\"),","lastModifiedDate":"2021-04-02"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"                    new RoomType(RoomTypeOptions.SUITE_AC.name()),","lastModifiedDate":"2021-04-02"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"                    new IsOccupied(IsOccupied.UNOCCUPIED),","lastModifiedDate":"2021-04-02"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"                    new HashSet\u003c\u003e()),","lastModifiedDate":"2021-04-02"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"            new seedu.address.model.room.Room(new RoomNumber(\"09-513\"),","lastModifiedDate":"2021-04-02"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"                    new RoomType(RoomTypeOptions.SUITE_NON_AC.name()),","lastModifiedDate":"2021-04-02"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"                    new IsOccupied(IsOccupied.UNOCCUPIED),","lastModifiedDate":"2021-04-02"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"                    new HashSet\u003c\u003e(Arrays.asList(new Tag(\"SHN\")))),","lastModifiedDate":"2021-04-02"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"            new seedu.address.model.room.Room(new RoomNumber(\"05-672\"),","lastModifiedDate":"2021-04-02"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"                    new RoomType(RoomTypeOptions.SUITE_NON_AC.name()),","lastModifiedDate":"2021-04-02"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"                    new IsOccupied(IsOccupied.UNOCCUPIED),","lastModifiedDate":"2021-04-02"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"                    new HashSet\u003c\u003e(Arrays.asList(new Tag(\"SHN\")))),","lastModifiedDate":"2021-04-02"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"            new seedu.address.model.room.Room(new RoomNumber(\"08-912\"),","lastModifiedDate":"2021-04-02"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"                    new RoomType(RoomTypeOptions.CORRIDOR_AC.name()),","lastModifiedDate":"2021-04-02"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"                    new IsOccupied(IsOccupied.UNOCCUPIED),","lastModifiedDate":"2021-04-02"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"                    new HashSet\u003c\u003e())","lastModifiedDate":"2021-04-02"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"        };","lastModifiedDate":"2021-04-02"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"    public static Issue[] getSampleIssues() {","lastModifiedDate":"2021-04-02"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"        return new Issue[] {","lastModifiedDate":"2021-04-02"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"            new Issue(new seedu.address.model.issue.RoomNumber(\"01-234\"), new Description(\"Broken light\"),","lastModifiedDate":"2021-04-02"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"                    new Timestamp(\"2020/01/01 12:00PM\"), new Status(IssueStatus.Closed),","lastModifiedDate":"2021-04-08"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"                    new Category(\"Fixtures\"), new HashSet\u003c\u003e()),","lastModifiedDate":"2021-04-02"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"            new Issue(new seedu.address.model.issue.RoomNumber(\"01-234\"), new Description(\"Cupboard door missing\"),","lastModifiedDate":"2021-04-02"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"                    new Timestamp(\"2021/01/31 04:12PM\"), new Status(IssueStatus.Pending),","lastModifiedDate":"2021-04-08"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"                    new Category(\"Furniture\"), new HashSet\u003c\u003e(Arrays.asList(new Tag(\"MEDIUM\")))),","lastModifiedDate":"2021-04-02"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"            new Issue(new seedu.address.model.issue.RoomNumber(\"03-325\"), new Description(\"Leaking ceiling\"),","lastModifiedDate":"2021-04-02"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"                    new Timestamp(\"2020/08/10 03:21PM\"), new Status(IssueStatus.Closed),","lastModifiedDate":"2021-04-08"},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":"                    new Category(\"Building Works\"), new HashSet\u003c\u003e(Arrays.asList(new Tag(\"HIGH\")))),","lastModifiedDate":"2021-04-02"},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"            new Issue(new seedu.address.model.issue.RoomNumber(\"05-672\"), new Description(\"Lumpy mattress\"),","lastModifiedDate":"2021-04-02"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"                    new Timestamp(\"2020/11/12 12:11AM\"), new Status(IssueStatus.Pending),","lastModifiedDate":"2021-04-02"},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"                    new Category(\"Furniture\"), new HashSet\u003c\u003e(Arrays.asList(new Tag(\"LOW\")))),","lastModifiedDate":"2021-04-02"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"        for (Resident sampleResident : getSampleResidents()) {","lastModifiedDate":"2021-03-05"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"            sampleAb.addResident(sampleResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":108,"author":{"gitId":"benedictkhoomw"},"content":"        for (seedu.address.model.room.Room sampleRoom : getSampleRooms()) {","lastModifiedDate":"2021-04-02"},{"lineNumber":109,"author":{"gitId":"benedictkhoomw"},"content":"            sampleAb.addRoom(sampleRoom);","lastModifiedDate":"2021-04-02"},{"lineNumber":110,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-04-02"},{"lineNumber":111,"author":{"gitId":"benedictkhoomw"},"content":"        for (Issue sampleIssue : getSampleIssues()) {","lastModifiedDate":"2021-04-02"},{"lineNumber":112,"author":{"gitId":"benedictkhoomw"},"content":"            sampleAb.addIssue(sampleIssue);","lastModifiedDate":"2021-04-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-04-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"benedictkhoomw":67,"stein414":3,"colintkn":22,"-":33}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedAlias.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-04-06"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-04-06"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;","lastModifiedDate":"2021-04-06"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"/**","lastModifiedDate":"2021-04-06"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":" * Jackson-friendly version of {@link Alias}.","lastModifiedDate":"2021-04-06"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":" */","lastModifiedDate":"2021-04-06"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"public class JsonAdaptedAlias {","lastModifiedDate":"2021-04-06"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Alias\u0027s %s field is missing!\";","lastModifiedDate":"2021-04-06"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"    private final String aliasName;","lastModifiedDate":"2021-04-06"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    private final String command;","lastModifiedDate":"2021-04-06"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"     * Constructs a {@code JsonAdaptedAlias} with the given resident details.","lastModifiedDate":"2021-04-06"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"     * @param aliasName Name of the alias.","lastModifiedDate":"2021-04-06"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"     * @param command The command of the alias.","lastModifiedDate":"2021-04-06"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"    @JsonCreator","lastModifiedDate":"2021-04-06"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    public JsonAdaptedAlias(@JsonProperty(\"aliasName\") String aliasName, @JsonProperty(\"command\") String command) {","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"        this.aliasName \u003d aliasName;","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-04-06"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"     * Converts a given {@code Alias} into this class for Jackson use.","lastModifiedDate":"2021-04-06"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"     * @param source The given alias.","lastModifiedDate":"2021-04-06"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"    public JsonAdaptedAlias(Alias source) {","lastModifiedDate":"2021-04-06"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"        aliasName \u003d source.getAliasName();","lastModifiedDate":"2021-04-06"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"        command \u003d source.getCommand();","lastModifiedDate":"2021-04-06"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"     * Converts this Jackson-friendly adapted alias object into the model\u0027s {@code Alias} object.","lastModifiedDate":"2021-04-06"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"     *","lastModifiedDate":"2021-04-06"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"     * @return An Alias object.","lastModifiedDate":"2021-04-06"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"     * @throws IllegalValueException If any field value is invalid.","lastModifiedDate":"2021-04-06"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"    public Alias toModelType() throws IllegalValueException {","lastModifiedDate":"2021-04-06"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"        if (aliasName \u003d\u003d null) {","lastModifiedDate":"2021-04-06"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"name\"));","lastModifiedDate":"2021-04-06"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"        if (!Alias.isValidName(aliasName)) {","lastModifiedDate":"2021-04-06"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"            throw new IllegalValueException(Alias.MESSAGE_NAME_CONSTRAINTS);","lastModifiedDate":"2021-04-06"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"        if (command \u003d\u003d null) {","lastModifiedDate":"2021-04-06"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"command\"));","lastModifiedDate":"2021-04-06"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"        if (!Alias.isValidCommand(command)) {","lastModifiedDate":"2021-04-06"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"            throw new IllegalValueException(Alias.MESSAGE_COMMAND_CONSTRAINTS);","lastModifiedDate":"2021-04-06"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"        return new Alias(aliasName, command);","lastModifiedDate":"2021-04-06"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"}","lastModifiedDate":"2021-04-06"}],"authorContributionMap":{"cnlinh":63}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedIssue.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import java.util.List;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Category;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Description;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.RoomNumber;","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Status;","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Timestamp;","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":" * Jackson-friendly version of {@link Issue}.","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"class JsonAdaptedIssue {","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Issue\u0027s %s field is missing!\";","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"    private final String roomNumber;","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"    private final String description;","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    private final String timestamp;","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    private final String status;","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"    private final String category;","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"     * Constructs a {@code JsonAdaptedIssue} with the given issue details.","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"    public JsonAdaptedIssue(@JsonProperty(\"roomNumber\") String roomNumber,","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"            @JsonProperty(\"description\") String description,","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"            @JsonProperty(\"timestamp\") String timestamp,","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"            @JsonProperty(\"status\") String status,","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"            @JsonProperty(\"category\") String category,","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"        this.roomNumber \u003d roomNumber;","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"        this.timestamp \u003d timestamp;","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"        this.status \u003d status;","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"        this.category \u003d category;","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"     * Converts a given {@code Issue} into this class for Jackson use.","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"    public JsonAdaptedIssue(Issue source) {","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"        roomNumber \u003d source.getRoomNumber().value;","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"        description \u003d source.getDescription().value;","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"        timestamp \u003d source.getTimestamp().toString();","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"        status \u003d source.getStatus().value.toString();","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"        category \u003d source.getCategory().value;","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2021-03-26"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2021-03-26"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-03-26"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"     * Converts this Jackson-friendly adapted issue object into the model\u0027s {@code Issue} object.","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted issue.","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"    public Issue toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":"        final List\u003cTag\u003e roomTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2021-03-26"},{"lineNumber":77,"author":{"gitId":"cnlinh"},"content":"            roomTags.add(tag.toModelType());","lastModifiedDate":"2021-03-26"},{"lineNumber":78,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"        if (roomNumber \u003d\u003d null) {","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, RoomNumber.class.getSimpleName()));","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"        if (!RoomNumber.isValidRoomNumber(roomNumber)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException(RoomNumber.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"        final RoomNumber modelRoomNumber \u003d new RoomNumber(roomNumber);","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"        if (description \u003d\u003d null) {","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2021-03-15"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"        if (!Description.isValidDescription(description)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"        final Description modelDescription \u003d new Description(description);","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"        if (timestamp \u003d\u003d null) {","lastModifiedDate":"2021-03-15"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2021-03-15"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Timestamp.class.getSimpleName()));","lastModifiedDate":"2021-03-15"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"        if (!Timestamp.isValidTimestamp(timestamp)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException(Timestamp.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":104,"author":{"gitId":"stein414"},"content":"        final Timestamp modelTimestamp \u003d new Timestamp(timestamp);","lastModifiedDate":"2021-03-15"},{"lineNumber":105,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":"        if (status \u003d\u003d null) {","lastModifiedDate":"2021-03-15"},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));","lastModifiedDate":"2021-03-15"},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":109,"author":{"gitId":"stein414"},"content":"        if (!Status.isValidStatus(status)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":110,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException(Status.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":111,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":112,"author":{"gitId":"stein414"},"content":"        final Status modelStatus \u003d new Status(status);","lastModifiedDate":"2021-03-15"},{"lineNumber":113,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":114,"author":{"gitId":"stein414"},"content":"        if (category \u003d\u003d null) {","lastModifiedDate":"2021-03-15"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2021-03-15"},{"lineNumber":116,"author":{"gitId":"stein414"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Category.class.getSimpleName()));","lastModifiedDate":"2021-03-15"},{"lineNumber":117,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":118,"author":{"gitId":"stein414"},"content":"        if (!Category.isValidCategory(category)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":119,"author":{"gitId":"stein414"},"content":"            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":120,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":121,"author":{"gitId":"stein414"},"content":"        final Category modelCategory \u003d new Category(category);","lastModifiedDate":"2021-03-15"},{"lineNumber":122,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":123,"author":{"gitId":"cnlinh"},"content":"        final Set\u003cTag\u003e modelIssueTags \u003d new HashSet\u003c\u003e(roomTags);","lastModifiedDate":"2021-03-26"},{"lineNumber":124,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":125,"author":{"gitId":"cnlinh"},"content":"        return new Issue(modelRoomNumber, modelDescription, modelTimestamp, modelStatus, modelCategory, modelIssueTags);","lastModifiedDate":"2021-03-26"},{"lineNumber":126,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":127,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":128,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"cnlinh":23,"stein414":105}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedResident.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;","lastModifiedDate":"2021-03-02"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-02"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;","lastModifiedDate":"2021-03-02"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;","lastModifiedDate":"2021-03-02"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;","lastModifiedDate":"2021-03-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":" * Jackson-friendly version of {@link Resident}.","lastModifiedDate":"2021-03-02"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"class JsonAdaptedResident {","lastModifiedDate":"2021-03-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Resident\u0027s %s field is missing!\";","lastModifiedDate":"2021-03-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    private final String year;","lastModifiedDate":"2021-03-05"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"    private final String room;","lastModifiedDate":"2021-02-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"     * Constructs a {@code JsonAdaptedResident} with the given resident details.","lastModifiedDate":"2021-03-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"    public JsonAdaptedResident(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2021-03-05"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"year\") String year,","lastModifiedDate":"2021-03-05"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"            @JsonProperty(\"room\") String room) {","lastModifiedDate":"2021-03-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        this.year \u003d year;","lastModifiedDate":"2021-03-05"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"        this.room \u003d room;","lastModifiedDate":"2021-02-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"     * Converts a given {@code Resident} into this class for Jackson use.","lastModifiedDate":"2021-03-02"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"    public JsonAdaptedResident(Resident source) {","lastModifiedDate":"2021-03-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        year \u003d source.getYear().value;","lastModifiedDate":"2021-03-05"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        room \u003d source.getRoom().value;","lastModifiedDate":"2021-02-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"     * Converts this Jackson-friendly adapted resident object into the model\u0027s {@code Resident} object.","lastModifiedDate":"2021-03-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted resident.","lastModifiedDate":"2021-03-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"    public Resident toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"        if (year \u003d\u003d null) {","lastModifiedDate":"2021-03-05"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Year.class.getSimpleName()));","lastModifiedDate":"2021-03-05"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-05"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"        if (!Year.isValidYear(year)) {","lastModifiedDate":"2021-03-05"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"            throw new IllegalValueException(Year.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-05"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-05"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"        final Year modelYear \u003d new Year(year);","lastModifiedDate":"2021-03-05"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"        if (!Room.isValidRoom(room)) {","lastModifiedDate":"2021-02-25"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"            throw new IllegalValueException(Room.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-02-25"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-02-25"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"        final Room modelRoom \u003d new Room(room);","lastModifiedDate":"2021-02-25"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"        return new Resident(modelName, modelPhone, modelEmail, modelYear, modelRoom);","lastModifiedDate":"2021-03-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"colintkn":38,"-":60}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedResidentRoom.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-25"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-25"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.room.RoomNumber;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"/**","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":" * Jackson-friendly version of {@link ResidentRoom}.","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":" */","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"class JsonAdaptedResidentRoom {","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Resident\u0027s %s field is missing!\";","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"    private final String name;","lastModifiedDate":"2021-03-25"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"    private final String roomNumber;","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"     * Constructs a {@code JsonAdaptedResidentRoom} with the given residentRoom details.","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-25"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"    public JsonAdaptedResidentRoom(@JsonProperty(\"name\") String name, @JsonProperty(\"roomNumber\") String roomNumber) {","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-25"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"        this.roomNumber \u003d roomNumber;","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"     * Converts a given {@code ResidentRoom} into this class for Jackson use.","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"    public JsonAdaptedResidentRoom(ResidentRoom source) {","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2021-03-25"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"        roomNumber \u003d source.getRoomNumber().toString();","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"     * Converts this Jackson-friendly adapted residentRoom object into the model\u0027s {@code ResidentRoom} object.","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"     *","lastModifiedDate":"2021-03-25"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted residentRoom.","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"    public ResidentRoom toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2021-03-25"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2021-03-25"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2021-03-25"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-25"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2021-03-25"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"        if (roomNumber \u003d\u003d null) {","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"            throw new IllegalValueException(String","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"                    .format(MISSING_FIELD_MESSAGE_FORMAT, RoomNumber.class.getSimpleName()));","lastModifiedDate":"2021-03-26"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"        if (!RoomNumber.isValidRoomNumber(roomNumber)) {","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"            throw new IllegalValueException(RoomNumber.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-26"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"        final RoomNumber modelRoomNumber \u003d new RoomNumber(roomNumber);","lastModifiedDate":"2021-03-26"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"        return new ResidentRoom(modelName, modelRoomNumber);","lastModifiedDate":"2021-03-26"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-03-25"}],"authorContributionMap":{"colintkn":64}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}.","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"public class JsonAdaptedTag {","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":46,"DrWala":1}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;","lastModifiedDate":"2021-04-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"import seedu.address.storage.room.JsonAdaptedRoom;","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_DUPLICATE_RESIDENT \u003d \"Residents list contains duplicate resident(s).\";","lastModifiedDate":"2021-03-05"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    public static final String MESSAGE_DUPLICATE_ROOM \u003d \"Rooms list contains duplicate room(s).\";","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"    public static final String MESSAGE_DUPLICATE_RESIDENT_ROOM \u003d","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"            \"ResidentRoom list contains duplicate residentRoom(s).\";","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"    private final List\u003cJsonAdaptedResident\u003e residents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-05"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    private final List\u003cJsonAdaptedRoom\u003e rooms \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    private final List\u003cJsonAdaptedIssue\u003e issues \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    private final List\u003cJsonAdaptedResidentRoom\u003e residentRooms \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"    private final List\u003cJsonAdaptedAlias\u003e aliases \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given residents.","lastModifiedDate":"2021-03-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"residents\") List\u003cJsonAdaptedResident\u003e residents,","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"            @JsonProperty(\"rooms\") List\u003cJsonAdaptedRoom\u003e rooms,","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"            @JsonProperty(\"issues\") List\u003cJsonAdaptedIssue\u003e issues,","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"            @JsonProperty(\"residentRooms\") List\u003cJsonAdaptedResidentRoom\u003e residentRooms,","lastModifiedDate":"2021-04-06"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"            @JsonProperty(\"aliases\") List\u003cJsonAdaptedAlias\u003e aliases) {","lastModifiedDate":"2021-04-06"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        this.residents.addAll(residents);","lastModifiedDate":"2021-03-05"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        this.rooms.addAll(rooms);","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"        this.issues.addAll(issues);","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"        this.residentRooms.addAll(residentRooms);","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"        this.aliases.addAll(aliases);","lastModifiedDate":"2021-04-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        residents.addAll(source.getResidentList().stream().map(JsonAdaptedResident::new).collect(Collectors.toList()));","lastModifiedDate":"2021-03-05"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"        rooms.addAll(source.getRoomList().stream().map(JsonAdaptedRoom::new).collect(Collectors.toList()));","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"        issues.addAll(source.getIssueList().stream().map(JsonAdaptedIssue::new).collect(Collectors.toList()));","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        residentRooms.addAll(source.getResidentRoomList().stream()","lastModifiedDate":"2021-03-26"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"                .map(JsonAdaptedResidentRoom::new).collect(Collectors.toList()));","lastModifiedDate":"2021-03-26"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"        aliases.addAll(source.getAliasMapping().getMapping().values().stream()","lastModifiedDate":"2021-04-06"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"                .map(JsonAdaptedAlias::new).collect(Collectors.toList()));","lastModifiedDate":"2021-04-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"        for (JsonAdaptedResident jsonAdaptedResident : residents) {","lastModifiedDate":"2021-03-05"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"            Resident resident \u003d jsonAdaptedResident.toModelType();","lastModifiedDate":"2021-03-05"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"            if (addressBook.hasResident(resident)) {","lastModifiedDate":"2021-03-05"},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_RESIDENT);","lastModifiedDate":"2021-03-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"            addressBook.addResident(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"        for (JsonAdaptedRoom jsonAdaptedRoom : rooms) {","lastModifiedDate":"2021-03-10"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"            Room room \u003d jsonAdaptedRoom.toModelType();","lastModifiedDate":"2021-03-10"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"            if (addressBook.hasRoom(room)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_ROOM);","lastModifiedDate":"2021-03-10"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"            }","lastModifiedDate":"2021-03-10"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"            addressBook.addRoom(room);","lastModifiedDate":"2021-03-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"        for (JsonAdaptedIssue jsonAdaptedIssue : issues) {","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"            Issue issue \u003d jsonAdaptedIssue.toModelType();","lastModifiedDate":"2021-03-15"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"            addressBook.addIssue(issue);","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"        for (JsonAdaptedResidentRoom jsonAdaptedResidentRoom : residentRooms) {","lastModifiedDate":"2021-03-26"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"            ResidentRoom residentRoom \u003d jsonAdaptedResidentRoom.toModelType();","lastModifiedDate":"2021-03-26"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"            if (addressBook.hasBothResidentRoom(residentRoom)) {","lastModifiedDate":"2021-03-26"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_ROOM);","lastModifiedDate":"2021-03-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-03-26"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"            addressBook.addResidentRoom(residentRoom);","lastModifiedDate":"2021-03-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":106,"author":{"gitId":"cnlinh"},"content":"        for (JsonAdaptedAlias jsonAdaptedAlias : aliases) {","lastModifiedDate":"2021-04-06"},{"lineNumber":107,"author":{"gitId":"cnlinh"},"content":"            Alias alias \u003d jsonAdaptedAlias.toModelType();","lastModifiedDate":"2021-04-06"},{"lineNumber":108,"author":{"gitId":"cnlinh"},"content":"            addressBook.addAlias(alias);","lastModifiedDate":"2021-04-06"},{"lineNumber":109,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":110,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"cnlinh":12,"stein414":13,"colintkn":25,"-":51,"DrWala":13}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.storage.commandhistory.CommandHistoryStorage;","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage, CommandHistoryStorage {","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"benedictkhoomw":2,"-":30}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.storage.commandhistory.CommandHistoryStorage;","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    private CommandHistoryStorage commandHistoryStorage;","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage}, {@code UserPrefStorage} and","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     * {@code CommandHistoryStorage}.","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"                          CommandHistoryStorage commandHistoryStorage) {","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"        requireAllNonNull(addressBookStorage, userPrefsStorage, commandHistoryStorage);","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        this.commandHistoryStorage \u003d commandHistoryStorage;","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CommandHistory methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"    public Path getCommandHistoryFilePath() {","lastModifiedDate":"2021-03-23"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"        return commandHistoryStorage.getCommandHistoryFilePath();","lastModifiedDate":"2021-03-23"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":"    public Optional\u003cReadOnlyCommandHistory\u003e readCommandHistory() throws IOException {","lastModifiedDate":"2021-03-23"},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":"        logger.fine(String.format(\"Attempting to read from data file: \",","lastModifiedDate":"2021-03-23"},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"                commandHistoryStorage.getCommandHistoryFilePath()));","lastModifiedDate":"2021-03-23"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"        return commandHistoryStorage.readCommandHistory();","lastModifiedDate":"2021-03-23"},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":101,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":102,"author":{"gitId":"benedictkhoomw"},"content":"    public void saveCommandHistory(ReadOnlyCommandHistory commandHistory) throws IOException {","lastModifiedDate":"2021-03-23"},{"lineNumber":103,"author":{"gitId":"benedictkhoomw"},"content":"        logger.fine(String.format(\"Attempting to write to data file: \",","lastModifiedDate":"2021-03-23"},{"lineNumber":104,"author":{"gitId":"benedictkhoomw"},"content":"                commandHistoryStorage.getCommandHistoryFilePath()));","lastModifiedDate":"2021-03-23"},{"lineNumber":105,"author":{"gitId":"benedictkhoomw"},"content":"        commandHistoryStorage.saveCommandHistory(commandHistory);","lastModifiedDate":"2021-03-23"},{"lineNumber":106,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"benedictkhoomw":31,"-":76}},{"path":"src/main/java/seedu/address/storage/commandhistory/CommandHistoryStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.storage.commandhistory;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":" * Represents a storage for {@link seedu.address.model.commandhistory.CommandHistory}.","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"public interface CommandHistoryStorage {","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the file path of the CommandHistory data file.","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    Path getCommandHistoryFilePath();","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns CommandHistory data from storage.","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws IOException If there was any problem when reading from the storage.","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    Optional\u003cReadOnlyCommandHistory\u003e readCommandHistory() throws IOException;","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     * Saves the given {@link seedu.address.model.commandhistory.ReadOnlyCommandHistory} to the storage.","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     * @param commandHistory Cannot be null.","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws IOException If there was any problem writing to the file.","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    void saveCommandHistory(ReadOnlyCommandHistory commandHistory) throws IOException;","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"benedictkhoomw":33}},{"path":"src/main/java/seedu/address/storage/commandhistory/PlainTextCommandHistoryStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.storage.commandhistory;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistory;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistoryEntry;","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":" * A class to access CommandHistory data stored as a plain text file on the hard disk.","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"public class PlainTextCommandHistoryStorage implements CommandHistoryStorage {","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(PlainTextCommandHistoryStorage.class);","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    private final Path filePath;","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a {@code PlainTextCommandHistoryStorage} that saves to/loads from","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     * the given file path.","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     * @param filePath The file path to save to/load from. Must be non-null.","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws NullPointerException If {@code filePath} is null.","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    public PlainTextCommandHistoryStorage(Path filePath) {","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"    public Path getCommandHistoryFilePath() {","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"        return filePath;","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"     * Attempts to read and deserialize command history from disk.","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"     * @return An {@code Optional} of the serialized command history, if successful.","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"     * {@code Optional.empty()} if file does not exist.","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws IOException If file exists but cannot be read.","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"    public Optional\u003cReadOnlyCommandHistory\u003e readCommandHistory() throws IOException {","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        if (!FileUtil.isFileExists(filePath)) {","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"            logger.info(String.format(\"Command history file %s not found\", filePath.toString()));","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        String content;","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"        try {","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"            content \u003d FileUtil.readFromFile(filePath);","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"            logger.warning(String.format(\"Error reading from command history file %s: %s\",","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"                    filePath.toString(), e.getMessage()));","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"            throw new IOException(e);","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"        return Optional.of(deserializeCommandHistory(content));","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"     * Writes a serialized version of command history to disk.","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"     * @param commandHistory Cannot be null.","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws IOException          If writing to disk fails.","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws NullPointerException If {@code commandHistory} is null.","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"    public void saveCommandHistory(ReadOnlyCommandHistory commandHistory) throws IOException {","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"        requireNonNull(commandHistory);","lastModifiedDate":"2021-03-24"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"        String content \u003d serializeCommandHistory(commandHistory);","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"        try {","lastModifiedDate":"2021-03-23"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"            FileUtil.createIfMissing(filePath);","lastModifiedDate":"2021-04-02"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"            FileUtil.writeToFile(filePath, content);","lastModifiedDate":"2021-03-23"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-03-23"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"            logger.warning(String.format(\"Error writing to command history file %s: %s\",","lastModifiedDate":"2021-03-23"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"                    filePath.toString(), e.getMessage()));","lastModifiedDate":"2021-03-23"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"            throw new IOException(e);","lastModifiedDate":"2021-03-23"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"     * Deserializes command history from its serialized form.","lastModifiedDate":"2021-03-24"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-24"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"     * @param serialized Must be non-null.","lastModifiedDate":"2021-03-24"},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws NullPointerException If {@code serialized} is null.","lastModifiedDate":"2021-03-24"},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"    private CommandHistory deserializeCommandHistory(String serialized) {","lastModifiedDate":"2021-03-24"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"        requireNonNull(serialized);","lastModifiedDate":"2021-03-24"},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"        if (serialized.isBlank()) {","lastModifiedDate":"2021-03-24"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"            return new CommandHistory();","lastModifiedDate":"2021-03-23"},{"lineNumber":101,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":102,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":103,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory history \u003d new CommandHistory();","lastModifiedDate":"2021-03-23"},{"lineNumber":104,"author":{"gitId":"benedictkhoomw"},"content":"        for (String entryText : serialized.split(System.lineSeparator())) {","lastModifiedDate":"2021-03-24"},{"lineNumber":105,"author":{"gitId":"benedictkhoomw"},"content":"            if (entryText.isBlank()) {","lastModifiedDate":"2021-03-23"},{"lineNumber":106,"author":{"gitId":"benedictkhoomw"},"content":"                continue;","lastModifiedDate":"2021-03-23"},{"lineNumber":107,"author":{"gitId":"benedictkhoomw"},"content":"            }","lastModifiedDate":"2021-03-23"},{"lineNumber":108,"author":{"gitId":"benedictkhoomw"},"content":"            history.appendEntry(new CommandHistoryEntry(entryText));","lastModifiedDate":"2021-03-23"},{"lineNumber":109,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":110,"author":{"gitId":"benedictkhoomw"},"content":"        return history;","lastModifiedDate":"2021-03-23"},{"lineNumber":111,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":112,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":113,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":114,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a serialized version of command history.","lastModifiedDate":"2021-03-24"},{"lineNumber":115,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-24"},{"lineNumber":116,"author":{"gitId":"benedictkhoomw"},"content":"     * @param commandHistory Must not be null.","lastModifiedDate":"2021-03-24"},{"lineNumber":117,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws NullPointerException If {@code commandHistory} is null.","lastModifiedDate":"2021-03-24"},{"lineNumber":118,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":119,"author":{"gitId":"benedictkhoomw"},"content":"    private String serializeCommandHistory(ReadOnlyCommandHistory commandHistory) {","lastModifiedDate":"2021-03-23"},{"lineNumber":120,"author":{"gitId":"benedictkhoomw"},"content":"        requireNonNull(commandHistory);","lastModifiedDate":"2021-03-24"},{"lineNumber":121,"author":{"gitId":"benedictkhoomw"},"content":"        StringBuilder content \u003d new StringBuilder();","lastModifiedDate":"2021-03-23"},{"lineNumber":122,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c commandHistory.size(); i++) {","lastModifiedDate":"2021-03-23"},{"lineNumber":123,"author":{"gitId":"benedictkhoomw"},"content":"            assert commandHistory.get(i) !\u003d null \u0026\u0026 commandHistory.get(i).value !\u003d null;","lastModifiedDate":"2021-03-24"},{"lineNumber":124,"author":{"gitId":"benedictkhoomw"},"content":"            content.append(commandHistory.get(i).value).append(System.lineSeparator());","lastModifiedDate":"2021-03-23"},{"lineNumber":125,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":126,"author":{"gitId":"benedictkhoomw"},"content":"        return content.toString();","lastModifiedDate":"2021-03-23"},{"lineNumber":127,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":128,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"benedictkhoomw":128}},{"path":"src/main/java/seedu/address/storage/room/JsonAdaptedRoom.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.storage.room;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import java.util.List;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.IsOccupied;","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomNumber;","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomType;","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"import seedu.address.storage.JsonAdaptedTag;","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":" * Jackson-friendly version of {@link Room}.","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"public class JsonAdaptedRoom {","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Room\u0027s %s field is missing!\";","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    private final String roomNumber;","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    private final String roomType;","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    private final String isOccupied;","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"     * Constructs a {@code JsonAdaptedRoom} with the given room details.","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    public JsonAdaptedRoom(@JsonProperty(\"roomNumber\") String roomNumber, @JsonProperty(\"roomType\") String roomType,","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"                           @JsonProperty(\"isOccupied\") String isOccupied,","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        this.roomNumber \u003d roomNumber;","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        this.roomType \u003d roomType;","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        this.isOccupied \u003d isOccupied;","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"     * Converts a given {@code Room} into this class for Jackson use.","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"    public JsonAdaptedRoom(Room source) {","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        this.roomNumber \u003d source.getRoomNumber().roomNumber;","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        this.roomType \u003d source.getRoomType().value.toString();","lastModifiedDate":"2021-03-12"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        this.isOccupied \u003d source.isOccupied().toString();","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"     * Converts this Jackson-friendly adapted room object into the model\u0027s {@code Room} object.","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted room.","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"    public Room toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-10"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"        final List\u003cTag\u003e roomTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"            roomTags.add(tag.toModelType());","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"        if (roomNumber \u003d\u003d null) {","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"            throw new IllegalValueException(String","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"                    .format(MISSING_FIELD_MESSAGE_FORMAT, RoomNumber.class.getSimpleName()));","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"        if (!RoomNumber.isValidRoomNumber(roomNumber)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"            throw new IllegalValueException(RoomNumber.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"        final RoomNumber modelRoomNumber \u003d new RoomNumber(roomNumber);","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"        if (roomType \u003d\u003d null) {","lastModifiedDate":"2021-03-10"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"            throw new IllegalValueException(String","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"                    .format(MISSING_FIELD_MESSAGE_FORMAT, RoomType.class.getSimpleName()));","lastModifiedDate":"2021-03-10"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"        if (!RoomType.isValidRoomType(roomType)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"            throw new IllegalValueException(RoomType.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-10"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"        final RoomType modelRoomType \u003d new RoomType(roomType);","lastModifiedDate":"2021-03-10"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"        if (isOccupied \u003d\u003d null) {","lastModifiedDate":"2021-03-10"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"            throw new IllegalValueException(String","lastModifiedDate":"2021-03-10"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"                    .format(MISSING_FIELD_MESSAGE_FORMAT, IsOccupied.class.getSimpleName()));","lastModifiedDate":"2021-03-10"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"        if (!IsOccupied.isValidOccupancyStatus(isOccupied)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"            throw new IllegalValueException(IsOccupied.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-10"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"        final IsOccupied modelRoomOccupancyStatus \u003d new IsOccupied(isOccupied);","lastModifiedDate":"2021-03-10"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"        final Set\u003cTag\u003e modelRoomTags \u003d new HashSet\u003c\u003e(roomTags);","lastModifiedDate":"2021-03-10"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"        return new Room(modelRoomNumber, modelRoomType, modelRoomOccupancyStatus, modelRoomTags);","lastModifiedDate":"2021-03-10"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"DrWala":100}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commandhistory.CommandHistorySelector;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-10-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    private final CommandHistorySelector commandHistorySelector;","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor} and {@code CommandHistorySelector}.","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"     * {@code CommandExecutor} and {@code CommandHistorySelector} must be non-null.","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws NullPointerException If either parameter is null.","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandBox(CommandExecutor commandExecutor, CommandHistorySelector commandHistorySelector) {","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        requireAllNonNull(commandExecutor, commandHistorySelector);","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"        this.commandHistorySelector \u003d commandHistorySelector;","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        assert commandTextField !\u003d null \u0026\u0026 commandExecutor !\u003d null;","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"            showCommand(\"\");","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"     * Handles keyboard input when {@code CommandBox} is focused.","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"    private void handleOnKeyPressed(KeyEvent event) {","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"        assert event !\u003d null;","lastModifiedDate":"2021-03-24"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"        switch (event.getCode()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"        case UP:","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"            event.consume();","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"            selectPreviousCommand();","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"            break;","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"        case DOWN:","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"            event.consume();","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"            selectNextCommand();","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"            break;","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"        default:","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"            break;","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"     * Selects the next command in history, if any, then displays it.","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"    private void selectNextCommand() {","lastModifiedDate":"2021-03-15"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"        assert commandHistorySelector !\u003d null;","lastModifiedDate":"2021-03-24"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"        String cmd \u003d commandHistorySelector.selectNextUntilOnePastLast().orElse(\"\");","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"        showCommand(cmd);","lastModifiedDate":"2021-03-23"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":"     * Selects the previous command in history, if any, then displays it.","lastModifiedDate":"2021-03-15"},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"    private void selectPreviousCommand() {","lastModifiedDate":"2021-03-15"},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"        assert commandHistorySelector !\u003d null;","lastModifiedDate":"2021-03-24"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"        String cmd \u003d commandHistorySelector.selectPreviousUntilFirst().orElse(\"\");","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"benedictkhoomw"},"content":"        showCommand(cmd);","lastModifiedDate":"2021-03-23"},{"lineNumber":102,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":103,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":108,"author":{"gitId":"benedictkhoomw"},"content":"        assert commandTextField !\u003d null \u0026\u0026 commandTextField.getStyleClass() !\u003d null;","lastModifiedDate":"2021-03-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":116,"author":{"gitId":"benedictkhoomw"},"content":"        assert commandTextField !\u003d null \u0026\u0026 commandTextField.getStyleClass() !\u003d null;","lastModifiedDate":"2021-03-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":127,"author":{"gitId":"benedictkhoomw"},"content":"     * Displays the given command string in the command box.","lastModifiedDate":"2021-03-24"},{"lineNumber":128,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":129,"author":{"gitId":"benedictkhoomw"},"content":"    private void showCommand(String cmd) {","lastModifiedDate":"2021-03-24"},{"lineNumber":130,"author":{"gitId":"benedictkhoomw"},"content":"        assert commandTextField !\u003d null;","lastModifiedDate":"2021-03-24"},{"lineNumber":131,"author":{"gitId":"benedictkhoomw"},"content":"        commandTextField.setText(cmd);","lastModifiedDate":"2021-03-24"},{"lineNumber":132,"author":{"gitId":"benedictkhoomw"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());","lastModifiedDate":"2021-03-24"},{"lineNumber":133,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":134,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"         * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"benedictkhoomw":66,"-":82}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103-t14-1.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"cnlinh":1,"-":101}},{"path":"src/main/java/seedu/address/ui/IssueCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":" * An UI component that displays information of a {@code Issue}.","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"public class IssueCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    private static final String FXML \u003d \"IssueListCard.fxml\";","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"    public final Issue issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    private Label roomNumber;","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"    private Label description;","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"    private Label timestamp;","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"    private Label status;","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    private Label category;","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"     * Creates a {@code IssueCode} with the given {@code Issue} and index to display.","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"    public IssueCard(Issue issue, int displayedIndex) {","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"        this.issue \u003d issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        roomNumber.setText(issue.getRoomNumber().value);","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"        description.setText(issue.getDescription().value);","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"        timestamp.setText(issue.getTimestamp().toString());","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"        status.setText(issue.getStatus().value.toString());","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"        category.setText(issue.getCategory().value);","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"        issue.getTags().stream()","lastModifiedDate":"2021-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2021-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2021-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"        if (!(other instanceof IssueCard)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"        IssueCard card \u003d (IssueCard) other;","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"                \u0026\u0026 issue.equals(card.issue);","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"cnlinh":1,"stein414":23,"-":56}},{"path":"src/main/java/seedu/address/ui/IssueListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":" * Panel containing the list of issues.","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"public class IssueListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"    private static final String FXML \u003d \"IssueListPanel.fxml\";","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    private ListView\u003cIssue\u003e issueListView;","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"     * Creates a {@code IssueListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    public IssueListPanel(ObservableList\u003cIssue\u003e issueList) {","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"        super(FXML);","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"        issueListView.setItems(issueList);","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"        issueListView.setCellFactory(listView -\u003e new IssueListViewCell());","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Issue} using a {@code IssueCard}.","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    class IssueListViewCell extends ListCell\u003cIssue\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"        protected void updateItem(Issue issue, boolean empty) {","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"            super.updateItem(issue, empty);","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"            if (empty || issue \u003d\u003d null) {","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"                setGraphic(null);","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"                setText(null);","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"            } else {","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"                setGraphic(new IssueCard(issue, getIndex() + 1).getRoot());","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"            }","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"stein414":45}},{"path":"src/main/java/seedu/address/ui/KeyboardShortcuts.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.input.KeyCodeCombination;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":" * A utility class containing a list of keyboard shortcuts to be used in the UI.","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"public class KeyboardShortcuts {","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    public static final KeyCodeCombination HELP_SHORTCUT \u003d","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"            new KeyCodeCombination(KeyCode.F1);","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    public static final KeyCodeCombination UNDO_SHORTCUT \u003d","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"            new KeyCodeCombination(KeyCode.Z, KeyCombination.SHORTCUT_DOWN);","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    public static final KeyCodeCombination REDO_SHORTCUT \u003d","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"            new KeyCodeCombination(KeyCode.Z, KeyCombination.SHORTCUT_DOWN, KeyCombination.SHIFT_DOWN);","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    // To prevent instantiation","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    private KeyboardShortcuts() {","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"benedictkhoomw":21}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.ui.KeyboardShortcuts.HELP_SHORTCUT;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.ui.KeyboardShortcuts.REDO_SHORTCUT;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.ui.KeyboardShortcuts.UNDO_SHORTCUT;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.undoredo.RedoCommand;","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.undoredo.UndoCommand;","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"    private ResidentListPanel residentListPanel;","lastModifiedDate":"2021-03-05"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"    private RoomListPanel roomListPanel;","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    private IssueListPanel issueListPanel;","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"    private StackPane residentListPanelPlaceholder;","lastModifiedDate":"2021-03-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"    private StackPane roomListPanelPlaceholder;","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"    private StackPane issueListPanelPlaceholder;","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"    @FXML","lastModifiedDate":"2021-03-28"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"    private MenuItem undoMenuItem;","lastModifiedDate":"2021-03-28"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"    @FXML","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"    private MenuItem redoMenuItem;","lastModifiedDate":"2021-03-28"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"        updateUndoRedoMenus();","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"        setAccelerator(helpMenuItem, HELP_SHORTCUT);","lastModifiedDate":"2021-03-28"},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"        setAccelerator(undoMenuItem, UNDO_SHORTCUT);","lastModifiedDate":"2021-03-28"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"        setAccelerator(redoMenuItem, REDO_SHORTCUT);","lastModifiedDate":"2021-03-28"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":138,"author":{"gitId":"colintkn"},"content":"        residentListPanel \u003d new ResidentListPanel(logic.getFilteredResidentList());","lastModifiedDate":"2021-03-05"},{"lineNumber":139,"author":{"gitId":"colintkn"},"content":"        residentListPanelPlaceholder.getChildren().add(residentListPanel.getRoot());","lastModifiedDate":"2021-03-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":141,"author":{"gitId":"DrWala"},"content":"        roomListPanel \u003d new RoomListPanel(logic.getFilteredRoomList());","lastModifiedDate":"2021-03-10"},{"lineNumber":142,"author":{"gitId":"DrWala"},"content":"        roomListPanelPlaceholder.getChildren().add(roomListPanel.getRoot());","lastModifiedDate":"2021-03-10"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":144,"author":{"gitId":"stein414"},"content":"        issueListPanel \u003d new IssueListPanel(logic.getFilteredIssueList());","lastModifiedDate":"2021-03-15"},{"lineNumber":145,"author":{"gitId":"stein414"},"content":"        issueListPanelPlaceholder.getChildren().add(issueListPanel.getRoot());","lastModifiedDate":"2021-03-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":153,"author":{"gitId":"benedictkhoomw"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getCommandHistorySelector());","lastModifiedDate":"2021-03-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":185,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":186,"author":{"gitId":"benedictkhoomw"},"content":"     * Executes an undo command.","lastModifiedDate":"2021-03-28"},{"lineNumber":187,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":188,"author":{"gitId":"benedictkhoomw"},"content":"    @FXML","lastModifiedDate":"2021-03-28"},{"lineNumber":189,"author":{"gitId":"benedictkhoomw"},"content":"    private void handleUndo() {","lastModifiedDate":"2021-03-28"},{"lineNumber":190,"author":{"gitId":"benedictkhoomw"},"content":"        try {","lastModifiedDate":"2021-03-28"},{"lineNumber":191,"author":{"gitId":"benedictkhoomw"},"content":"            executeCommand(UndoCommand.COMMAND_WORD);","lastModifiedDate":"2021-03-28"},{"lineNumber":192,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (ParseException | CommandException e) {","lastModifiedDate":"2021-03-28"},{"lineNumber":193,"author":{"gitId":"benedictkhoomw"},"content":"            // Handled by {@code executeCommand}","lastModifiedDate":"2021-03-28"},{"lineNumber":194,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":195,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":196,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":197,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":198,"author":{"gitId":"benedictkhoomw"},"content":"     * Executes a redo command.","lastModifiedDate":"2021-03-28"},{"lineNumber":199,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":200,"author":{"gitId":"benedictkhoomw"},"content":"    @FXML","lastModifiedDate":"2021-03-28"},{"lineNumber":201,"author":{"gitId":"benedictkhoomw"},"content":"    private void handleRedo() {","lastModifiedDate":"2021-03-28"},{"lineNumber":202,"author":{"gitId":"benedictkhoomw"},"content":"        try {","lastModifiedDate":"2021-03-28"},{"lineNumber":203,"author":{"gitId":"benedictkhoomw"},"content":"            executeCommand(RedoCommand.COMMAND_WORD);","lastModifiedDate":"2021-03-28"},{"lineNumber":204,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (ParseException | CommandException e) {","lastModifiedDate":"2021-03-28"},{"lineNumber":205,"author":{"gitId":"benedictkhoomw"},"content":"            // Handled by {@code executeCommand}","lastModifiedDate":"2021-03-28"},{"lineNumber":206,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":207,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":208,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":210,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":211,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":221,"author":{"gitId":"colintkn"},"content":"    public ResidentListPanel getResidentListPanel() {","lastModifiedDate":"2021-03-05"},{"lineNumber":222,"author":{"gitId":"colintkn"},"content":"        return residentListPanel;","lastModifiedDate":"2021-03-05"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":226,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":227,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":241,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":244,"author":{"gitId":"benedictkhoomw"},"content":"            updateUndoRedoMenus();","lastModifiedDate":"2021-03-30"},{"lineNumber":245,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":253,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":254,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":255,"author":{"gitId":"benedictkhoomw"},"content":"     * Enables or disables the undo and redo menu items based on the logic\u0027s state.","lastModifiedDate":"2021-03-30"},{"lineNumber":256,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":257,"author":{"gitId":"benedictkhoomw"},"content":"    private void updateUndoRedoMenus() {","lastModifiedDate":"2021-03-30"},{"lineNumber":258,"author":{"gitId":"benedictkhoomw"},"content":"        undoMenuItem.setDisable(!logic.canUndoAddressBook());","lastModifiedDate":"2021-03-30"},{"lineNumber":259,"author":{"gitId":"benedictkhoomw"},"content":"        redoMenuItem.setDisable(!logic.canRedoAddressBook());","lastModifiedDate":"2021-03-30"},{"lineNumber":260,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"benedictkhoomw":52,"stein414":5,"colintkn":6,"-":192,"DrWala":6}},{"path":"src/main/java/seedu/address/ui/ResidentCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-02"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":" * An UI component that displays information of a {@code Resident}.","lastModifiedDate":"2021-03-02"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"public class ResidentCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"    private static final String FXML \u003d \"ResidentListCard.fxml\";","lastModifiedDate":"2021-03-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    public final Resident resident;","lastModifiedDate":"2021-03-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"    @FXML","lastModifiedDate":"2021-02-25"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"    private Label year;","lastModifiedDate":"2021-03-05"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    @FXML","lastModifiedDate":"2021-03-05"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"    private Label room;","lastModifiedDate":"2021-02-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"     * Creates a {@code ResidentCode} with the given {@code Resident} and index to display.","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"    public ResidentCard(Resident resident, int displayedIndex) {","lastModifiedDate":"2021-03-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        this.resident \u003d resident;","lastModifiedDate":"2021-03-02"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        name.setText(resident.getName().fullName);","lastModifiedDate":"2021-03-02"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        phone.setText(resident.getPhone().value);","lastModifiedDate":"2021-03-02"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"        email.setText(resident.getEmail().value);","lastModifiedDate":"2021-03-02"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"        year.setText(\"Year \" + resident.getYear().value);","lastModifiedDate":"2021-03-05"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"        room.setText(resident.getRoom().value);","lastModifiedDate":"2021-03-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        if (!(other instanceof ResidentCard)) {","lastModifiedDate":"2021-03-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"        ResidentCard card \u003d (ResidentCard) other;","lastModifiedDate":"2021-03-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"                \u0026\u0026 resident.equals(card.resident);","lastModifiedDate":"2021-03-02"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"colintkn":20,"-":52}},{"path":"src/main/java/seedu/address/ui/ResidentListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-02"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":" * Panel containing the list of residents.","lastModifiedDate":"2021-03-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"public class ResidentListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-05"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    private static final String FXML \u003d \"ResidentListPanel.fxml\";","lastModifiedDate":"2021-03-05"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ResidentListPanel.class);","lastModifiedDate":"2021-03-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    private ListView\u003cResident\u003e residentListView;","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"     * Creates a {@code ResidentListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-03-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    public ResidentListPanel(ObservableList\u003cResident\u003e residentList) {","lastModifiedDate":"2021-03-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"        residentListView.setItems(residentList);","lastModifiedDate":"2021-03-05"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"        residentListView.setCellFactory(listView -\u003e new ResidentListViewCell());","lastModifiedDate":"2021-03-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Resident} using a {@code ResidentCard}.","lastModifiedDate":"2021-03-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    class ResidentListViewCell extends ListCell\u003cResident\u003e {","lastModifiedDate":"2021-03-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        protected void updateItem(Resident resident, boolean empty) {","lastModifiedDate":"2021-03-02"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"            super.updateItem(resident, empty);","lastModifiedDate":"2021-03-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"            if (empty || resident \u003d\u003d null) {","lastModifiedDate":"2021-03-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"                setGraphic(new ResidentCard(resident, getIndex() + 1).getRoot());","lastModifiedDate":"2021-03-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"colintkn":16,"-":33}},{"path":"src/main/java/seedu/address/ui/RoomCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":" * An UI component that displays information of a {@code Room}.","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"public class RoomCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    private static final String FXML \u003d \"RoomListCard.fxml\";","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    public final Room room;","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    @javafx.fxml.FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    private Label id;","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    private Label roomNumber;","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    private Label roomType;","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    private Label isOccupied;","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    private Label email;","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    private FlowPane tags;","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"     * Creates a {@code RoomCard} with the given {@code Room} and index to display.","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"    public RoomCard(Room room, int displayedIndex) {","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"        super(FXML);","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        this.room \u003d room;","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        roomNumber.setText(room.getRoomNumber().roomNumber);","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        roomType.setText(room.getRoomType().toString());","lastModifiedDate":"2021-04-06"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"        isOccupied.setText(room.isOccupied().isOccupied ? \"Occupied\" : \"Not Occupied\");","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        room.getTags().stream()","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"            return true;","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"        if (!(other instanceof RoomCard)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"            return false;","lastModifiedDate":"2021-03-10"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"        // state check","lastModifiedDate":"2021-03-10"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"        RoomCard card \u003d (RoomCard) other;","lastModifiedDate":"2021-03-10"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"                \u0026\u0026 room.equals(card.room);","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"DrWala":68}},{"path":"src/main/java/seedu/address/ui/RoomListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"public class RoomListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"    private static final String FXML \u003d \"RoomListPanel.fxml\";","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(RoomListPanel.class);","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    @javafx.fxml.FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    private ListView\u003cRoom\u003e roomListView;","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"     * Creates a {@code RoomListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    public RoomListPanel(ObservableList\u003cRoom\u003e roomList) {","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"        super(FXML);","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"        roomListView.setItems(roomList);","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"        roomListView.setCellFactory(listView -\u003e new RoomListViewCell());","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Room} using a {@code RoomCard}.","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    class RoomListViewCell extends ListCell\u003cRoom\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        protected void updateItem(Room room, boolean empty) {","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"            super.updateItem(room, empty);","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"            if (empty || room \u003d\u003d null) {","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"                setGraphic(null);","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"                setText(null);","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"            } else {","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"                setGraphic(new RoomCard(room, getIndex() + 1).getRoot());","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"            }","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"DrWala":44}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;","lastModifiedDate":"2016-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/sunrez_32.png\";","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"benedictkhoomw":1,"-":88}},{"path":"src/main/resources/view/CommandBox.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2018-04-01"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleOnKeyPressed\" promptText\u003d\"Enter command here...\"/\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"benedictkhoomw":1,"-":8}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":".split-pane:vertical .split-pane-divider {","lastModifiedDate":"2021-03-31"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":101,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;","lastModifiedDate":"2017-03-02"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":111,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":124,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2017-03-02"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2017-03-02"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-05-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2017-05-09"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":150,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2018-12-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2017-03-02"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":159,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2017-03-02"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":202,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":239,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":266,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":270,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":280,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":293,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":298,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":301,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":303,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":305,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":307,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":309,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":311,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":313,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":315,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":320,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":323,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":325,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2017-03-02"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":334,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":336,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":338,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":340,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":343,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":345,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":348,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":350,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":357,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"}],"authorContributionMap":{"benedictkhoomw":5,"-":352}},{"path":"src/main/resources/view/IssueListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"20\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-04-06"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"        \u003cLabel fx:id\u003d\"roomNumber\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        \u003cLabel fx:id\u003d\"timestamp\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"      \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"      \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$category\" /\u003e","lastModifiedDate":"2021-04-08"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"benedictkhoomw":1,"cnlinh":1,"stein414":32,"DrWala":3}},{"path":"src/main/resources/view/IssueListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"  \u003cListView fx:id\u003d\"issueListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"stein414":1,"-":7}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-04-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"         title\u003d\"SunRez\" minWidth\u003d\"1000\" minHeight\u003d\"500\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    \u003cImage url\u003d\"@/images/sunrez_32.png\" /\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Edit\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"            \u003cMenuItem fx:id\u003d\"undoMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUndo\" text\u003d\"Undo\" /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"            \u003cMenuItem fx:id\u003d\"redoMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleRedo\" text\u003d\"Redo\" /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"        \u003cSplitPane orientation\u003d\"VERTICAL\" VBox.vgrow\u003d\"ALWAYS\" \u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"          \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"                     minHeight\u003d\"100\" prefHeight\u003d\"100\" \u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"          \u003cSplitPane orientation\u003d\"HORIZONTAL\" VBox.vgrow\u003d\"ALWAYS\" minHeight\u003d\"200\" \u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"            \u003cVBox fx:id\u003d\"residentList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"320\" prefWidth\u003d\"320\" \u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"              \u003cLabel styleClass\u003d\"label-bright\"\u003eResidents\u003c/Label\u003e","lastModifiedDate":"2021-04-06"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"              \u003cStackPane fx:id\u003d\"residentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-03-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"            \u003cVBox fx:id\u003d\"roomList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"320\" prefWidth\u003d\"320\" \u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"              \u003cLabel styleClass\u003d\"label-bright\"\u003eRooms\u003c/Label\u003e","lastModifiedDate":"2021-04-06"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"              \u003cStackPane fx:id\u003d\"roomListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"            \u003cVBox fx:id\u003d\"issueList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"320\" prefWidth\u003d\"320\" \u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"              \u003cLabel styleClass\u003d\"label-bright\"\u003eIssues\u003c/Label\u003e","lastModifiedDate":"2021-04-06"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"              \u003cStackPane fx:id\u003d\"issueListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"          \u003c/SplitPane\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"        \u003c/SplitPane\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"benedictkhoomw":19,"stein414":5,"colintkn":1,"-":57,"DrWala":4}},{"path":"src/main/resources/view/ResidentListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"20\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-04-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"      \u003cLabel fx:id\u003d\"year\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$year\" /\u003e","lastModifiedDate":"2021-03-05"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"      \u003cLabel fx:id\u003d\"room\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$room\" /\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"benedictkhoomw":1,"colintkn":2,"-":34}},{"path":"src/main/resources/view/ResidentListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"  \u003cListView fx:id\u003d\"residentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"colintkn":1,"-":7}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2016-10-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\"","lastModifiedDate":"2017-06-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"benedictkhoomw":1,"-":8}},{"path":"src/main/resources/view/RoomListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"20\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-04-06"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"                \u003cLabel fx:id\u003d\"roomNumber\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"            \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"            \u003cLabel fx:id\u003d\"roomType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$roomType\" /\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"            \u003cLabel fx:id\u003d\"isOccupied\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$isOccupied\" /\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"benedictkhoomw":1,"DrWala":34}},{"path":"src/main/resources/view/RoomListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"    \u003cListView fx:id\u003d\"roomListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"DrWala":8}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidAndValidResidentAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"  \"residents\": [ {","lastModifiedDate":"2021-03-05"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"    \"name\": \"Valid Resident\",","lastModifiedDate":"2021-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2021-02-27"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"    \"year\": \"1\",","lastModifiedDate":"2021-03-05"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"    \"room\": \"Room unallocated\"","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"    \"name\": \"Resident With Invalid Phone Field\",","lastModifiedDate":"2021-03-02"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2021-02-27"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"    \"year\": \"1\",","lastModifiedDate":"2021-03-05"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"    \"room\": \"Room unallocated\"","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"colintkn":9,"-":6}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidResidentAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"  \"residents\": [ {","lastModifiedDate":"2021-03-02"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"    \"name\": \"Resident with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2021-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2021-02-27"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"    \"year\": \"1\",","lastModifiedDate":"2021-03-05"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"    \"room\": \"Room unallocated\"","lastModifiedDate":"2021-02-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"colintkn":5,"-":4}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicateResidentAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"  \"residents\": [","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"    {","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"      \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"      \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"      \"email\": \"alice@example.com\",","lastModifiedDate":"2021-02-27"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"      \"year\": \"1\",","lastModifiedDate":"2021-03-05"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"      \"room\": \"Room unallocated\"","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"    },","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"    {","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"      \"email\": \"pauline@example.com\",","lastModifiedDate":"2021-02-27"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"      \"year\": \"1\",","lastModifiedDate":"2021-03-05"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"      \"room\": \"Room unallocated\"","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"  ],","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"  \"rooms\": [],","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"  \"issues\": [],","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"  \"residentRooms\": [],","lastModifiedDate":"2021-04-06"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"  \"aliases\": []","lastModifiedDate":"2021-04-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"cnlinh":2,"stein414":7,"colintkn":7,"-":6}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidResidentAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"  \"residents\": [","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"    {","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"      \"name\": \"Hans Muster\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"      \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"      \"email\": \"invalid@email!3e\",","lastModifiedDate":"2021-02-27"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"      \"year\": \"1\",","lastModifiedDate":"2021-03-05"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"      \"room\": \"Room unallocated\"","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"  ],","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"  \"rooms\": [],","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"  \"issues\": [],","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"  \"residentRooms\": [],","lastModifiedDate":"2021-04-06"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"  \"aliases\": []","lastModifiedDate":"2021-04-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"cnlinh":2,"stein414":5,"colintkn":4,"-":4}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalResidentsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"  \"_comment\": \"AddressBook save file which contains the same Resident values as in TypicalResidents#getTypicalAddressBook()\",","lastModifiedDate":"2021-03-05"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"  \"residents\": [","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"    {","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"      \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"      \"email\": \"alice@example.com\",","lastModifiedDate":"2021-02-27"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"      \"year\": \"1\",","lastModifiedDate":"2021-03-05"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"      \"room\": \"Room unallocated\"","lastModifiedDate":"2021-03-25"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"    },","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"    {","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      \"name\": \"Benson Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"      \"phone\": \"98765432\",","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"      \"email\": \"johnd@example.com\",","lastModifiedDate":"2021-02-27"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"      \"year\": \"2\",","lastModifiedDate":"2021-03-05"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"      \"room\": \"Room unallocated\"","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    },","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"    {","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \"name\": \"Carl Kurz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \"phone\": \"95352563\",","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"      \"email\": \"heinz@example.com\",","lastModifiedDate":"2021-02-27"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"      \"year\": \"3\",","lastModifiedDate":"2021-03-05"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"      \"room\": \"Room unallocated\"","lastModifiedDate":"2021-02-27"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    },","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    {","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \"name\": \"Daniel Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \"phone\": \"87652533\",","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"      \"email\": \"cornelia@example.com\",","lastModifiedDate":"2021-02-27"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"      \"year\": \"4\",","lastModifiedDate":"2021-03-05"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"      \"room\": \"Room unallocated\"","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    },","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"    {","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \"name\": \"Elle Meyer\",","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \"phone\": \"9482224\",","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"      \"email\": \"werner@example.com\",","lastModifiedDate":"2021-02-27"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"      \"year\": \"5\",","lastModifiedDate":"2021-03-05"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"      \"room\": \"Room unallocated\"","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"    },","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"    {","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      \"name\": \"Fiona Kunz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      \"phone\": \"9482427\",","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"      \"email\": \"lydia@example.com\",","lastModifiedDate":"2021-02-27"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"      \"year\": \"1\",","lastModifiedDate":"2021-03-05"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"      \"room\": \"Room unallocated\"","lastModifiedDate":"2021-03-25"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"    },","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"    {","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      \"name\": \"George Best\",","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      \"phone\": \"9482442\",","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"      \"email\": \"anna@example.com\",","lastModifiedDate":"2021-02-27"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"      \"year\": \"3\",","lastModifiedDate":"2021-03-05"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"      \"room\": \"Room unallocated\"","lastModifiedDate":"2021-03-25"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"  ],","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"  \"rooms\": [","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"    {","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"      \"roomNumber\": \"09-100\",","lastModifiedDate":"2021-03-20"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"      \"roomType\": \"corridor_non_ac\",","lastModifiedDate":"2021-03-20"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"      \"isOccupied\": \"Y\",","lastModifiedDate":"2021-03-20"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"      \"tagged\": []","lastModifiedDate":"2021-03-20"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"    },","lastModifiedDate":"2021-03-20"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"    {","lastModifiedDate":"2021-03-20"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"      \"roomNumber\": \"09-110\",","lastModifiedDate":"2021-03-20"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"      \"roomType\": \"corridor_non_ac\",","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"      \"isOccupied\": \"N\",","lastModifiedDate":"2021-03-20"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"      \"tagged\": []","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"    },","lastModifiedDate":"2021-03-20"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"    {","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"      \"roomNumber\": \"10-100\",","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"      \"roomType\": \"corridor_ac\",","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"      \"isOccupied\": \"Y\",","lastModifiedDate":"2021-03-20"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"      \"tagged\": []","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"    },","lastModifiedDate":"2021-03-20"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"    {","lastModifiedDate":"2021-03-20"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"      \"roomNumber\": \"10-110\",","lastModifiedDate":"2021-03-20"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"      \"roomType\": \"corridor_ac\",","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"      \"isOccupied\": \"N\",","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"      \"tagged\": []","lastModifiedDate":"2021-03-20"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"    },","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"    {","lastModifiedDate":"2021-03-20"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"      \"roomNumber\": \"11-100\",","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"      \"roomType\": \"suite_non_ac\",","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"      \"isOccupied\": \"Y\",","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"      \"tagged\": []","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"    },","lastModifiedDate":"2021-03-20"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"    {","lastModifiedDate":"2021-03-20"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"      \"roomNumber\": \"11-110\",","lastModifiedDate":"2021-03-20"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"      \"roomType\": \"suite_non_ac\",","lastModifiedDate":"2021-03-20"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"      \"isOccupied\": \"N\",","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"      \"tagged\": []","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"    },","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"    {","lastModifiedDate":"2021-03-20"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"      \"roomNumber\": \"12-100\",","lastModifiedDate":"2021-03-20"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"      \"roomType\": \"suite_ac\",","lastModifiedDate":"2021-03-20"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"      \"isOccupied\": \"Y\",","lastModifiedDate":"2021-03-20"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"      \"tagged\": []","lastModifiedDate":"2021-03-20"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"    },","lastModifiedDate":"2021-03-20"},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"    {","lastModifiedDate":"2021-03-20"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"      \"roomNumber\": \"12-110\",","lastModifiedDate":"2021-03-20"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"      \"roomType\": \"suite_ac\",","lastModifiedDate":"2021-03-20"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"      \"isOccupied\": \"N\",","lastModifiedDate":"2021-03-20"},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":"      \"tagged\": []","lastModifiedDate":"2021-03-20"},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"  ],","lastModifiedDate":"2021-03-20"},{"lineNumber":104,"author":{"gitId":"stein414"},"content":"  \"issues\": [","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"stein414"},"content":"    {","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":"      \"roomNumber\": \"10-100\",","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"      \"description\": \"Broken table\",","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"      \"timestamp\": \"2021/01/01 12:00pm\",","lastModifiedDate":"2021-03-31"},{"lineNumber":109,"author":{"gitId":"stein414"},"content":"      \"status\": \"pending\",","lastModifiedDate":"2021-03-31"},{"lineNumber":110,"author":{"gitId":"stein414"},"content":"      \"category\": \"Furniture\"","lastModifiedDate":"2021-03-31"},{"lineNumber":111,"author":{"gitId":"stein414"},"content":"    },","lastModifiedDate":"2021-03-31"},{"lineNumber":112,"author":{"gitId":"stein414"},"content":"    {","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"stein414"},"content":"      \"roomNumber\": \"11-110\",","lastModifiedDate":"2021-04-01"},{"lineNumber":114,"author":{"gitId":"stein414"},"content":"      \"description\": \"Flickering light\",","lastModifiedDate":"2021-03-31"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":"      \"timestamp\": \"2021/03/20 08:35am\",","lastModifiedDate":"2021-04-08"},{"lineNumber":116,"author":{"gitId":"stein414"},"content":"      \"status\": \"closed\",","lastModifiedDate":"2021-03-31"},{"lineNumber":117,"author":{"gitId":"stein414"},"content":"      \"category\": \"Electrical\"","lastModifiedDate":"2021-03-31"},{"lineNumber":118,"author":{"gitId":"stein414"},"content":"    },","lastModifiedDate":"2021-03-31"},{"lineNumber":119,"author":{"gitId":"stein414"},"content":"    {","lastModifiedDate":"2021-03-31"},{"lineNumber":120,"author":{"gitId":"stein414"},"content":"      \"roomNumber\": \"09-100\",","lastModifiedDate":"2021-04-01"},{"lineNumber":121,"author":{"gitId":"stein414"},"content":"      \"description\": \"Chair cylinder exploded\",","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"stein414"},"content":"      \"timestamp\": \"2020/12/11 06:53pm\",","lastModifiedDate":"2021-04-08"},{"lineNumber":123,"author":{"gitId":"stein414"},"content":"      \"status\": \"pending\",","lastModifiedDate":"2021-03-31"},{"lineNumber":124,"author":{"gitId":"stein414"},"content":"      \"category\": \"Furniture\"","lastModifiedDate":"2021-03-31"},{"lineNumber":125,"author":{"gitId":"stein414"},"content":"    },","lastModifiedDate":"2021-03-31"},{"lineNumber":126,"author":{"gitId":"stein414"},"content":"    {","lastModifiedDate":"2021-03-31"},{"lineNumber":127,"author":{"gitId":"stein414"},"content":"      \"roomNumber\": \"09-110\",","lastModifiedDate":"2021-04-01"},{"lineNumber":128,"author":{"gitId":"stein414"},"content":"      \"description\": \"Bed soaked from rain due to open window\",","lastModifiedDate":"2021-03-31"},{"lineNumber":129,"author":{"gitId":"stein414"},"content":"      \"timestamp\": \"2020/11/29 11:23pm\",","lastModifiedDate":"2021-03-31"},{"lineNumber":130,"author":{"gitId":"stein414"},"content":"      \"status\": \"closed\",","lastModifiedDate":"2021-03-31"},{"lineNumber":131,"author":{"gitId":"stein414"},"content":"      \"category\": \"Furniture\"","lastModifiedDate":"2021-03-31"},{"lineNumber":132,"author":{"gitId":"stein414"},"content":"    },","lastModifiedDate":"2021-03-31"},{"lineNumber":133,"author":{"gitId":"stein414"},"content":"    {","lastModifiedDate":"2021-03-31"},{"lineNumber":134,"author":{"gitId":"stein414"},"content":"      \"roomNumber\": \"12-110\",","lastModifiedDate":"2021-04-01"},{"lineNumber":135,"author":{"gitId":"stein414"},"content":"      \"description\": \"Cockroach everywhere\",","lastModifiedDate":"2021-03-31"},{"lineNumber":136,"author":{"gitId":"stein414"},"content":"      \"timestamp\": \"2020/08/10 08:48am\",","lastModifiedDate":"2021-04-08"},{"lineNumber":137,"author":{"gitId":"stein414"},"content":"      \"status\": \"pending\",","lastModifiedDate":"2021-03-31"},{"lineNumber":138,"author":{"gitId":"stein414"},"content":"      \"category\": \"Others\"","lastModifiedDate":"2021-03-31"},{"lineNumber":139,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":140,"author":{"gitId":"stein414"},"content":"  ],","lastModifiedDate":"2021-03-31"},{"lineNumber":141,"author":{"gitId":"cnlinh"},"content":"  \"residentRooms\": [],","lastModifiedDate":"2021-04-06"},{"lineNumber":142,"author":{"gitId":"cnlinh"},"content":"  \"aliases\": []","lastModifiedDate":"2021-04-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"cnlinh":2,"stein414":53,"colintkn":22,"-":16,"DrWala":50}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\" : \"some value \",","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\" : 300,","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\" : 100,","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\" : 99","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },","lastModifiedDate":"2017-02-25"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"  \"addressBookFilePath\" : \"sunrez.json\"","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"benedictkhoomw":1,"-":12}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\" : 300,","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\" : 100","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },","lastModifiedDate":"2017-02-25"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"  \"addressBookFilePath\" : \"sunrez.json\"","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"benedictkhoomw":1,"-":10}},{"path":"src/test/java/seedu/address/commons/core/AliasMappingTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_1_TO_2;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_2_TO_1;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_ALIAS_ADD;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_ALIAS_DELETE;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_ALIAS_LIST;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_CLEAR;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_EXIT;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_HELP;","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_HISTORY;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_ISSUE_ADD;","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_ISSUE_CLOSE;","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_ISSUE_DELETE;","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_ISSUE_EDIT;","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_ISSUE_FIND;","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_ISSUE_LIST;","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_RESIDENT_ADD;","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_RESIDENT_DELETE;","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_RESIDENT_EDIT;","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_RESIDENT_FIND;","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_RESIDENT_LIST;","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_RESIDENT_LIST_UNALLOC;","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_ROOM_ADD;","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_ROOM_ALLOC;","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_ROOM_DEALLOC;","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_ROOM_DELETE;","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_ROOM_EDIT;","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_ROOM_FIND;","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_ROOM_LIST;","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.VALID_ALIAS_1;","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.VALID_ALIAS_2;","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.VALID_ALIAS_3;","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"public class AliasMappingTest {","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"    public void containsAlias() {","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"        AliasMapping aliasMapping \u003d new AliasMapping();","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"        aliasMapping.addAlias(VALID_ALIAS_1);","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.containsAlias(VALID_ALIAS_1.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"    public void isReservedKeyword_aliasNameIsReserved_returnsTrue() {","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"        AliasMapping aliasMapping \u003d new AliasMapping();","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"        //System command","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_HELP.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_HISTORY.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_EXIT.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_CLEAR.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_ALIAS_ADD.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_ALIAS_LIST.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_ALIAS_DELETE.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"        //Resident command","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_RESIDENT_ADD.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_RESIDENT_LIST.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_RESIDENT_FIND.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_RESIDENT_EDIT.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_RESIDENT_DELETE.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_RESIDENT_LIST_UNALLOC.getAliasName()));","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"        //Room command","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_ROOM_ADD.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_ROOM_LIST.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_ROOM_FIND.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_ROOM_EDIT.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_ROOM_DELETE.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_ROOM_ALLOC.getAliasName()));","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_ROOM_DEALLOC.getAliasName()));","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"cnlinh"},"content":"        //Issue command","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_ISSUE_ADD.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_ISSUE_LIST.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_ISSUE_FIND.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_ISSUE_EDIT.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_ISSUE_DELETE.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_ISSUE_CLOSE.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isReservedKeyword(ALIAS_ROOM_EDIT.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"cnlinh"},"content":"    public void isReservedKeyword_aliasNameIsNotReserved_returnsFalse() {","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"cnlinh"},"content":"        AliasMapping aliasMapping \u003d new AliasMapping();","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"cnlinh"},"content":"        assertFalse(aliasMapping.isReservedKeyword(VALID_ALIAS_1.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"cnlinh"},"content":"        assertFalse(aliasMapping.isReservedKeyword(VALID_ALIAS_2.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"cnlinh"},"content":"        assertFalse(aliasMapping.isReservedKeyword(VALID_ALIAS_3.getAliasName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"cnlinh"},"content":"    public void isRecursiveKeyword_aliasCommandIsNotRecursive_returnsFalse() {","lastModifiedDate":"2021-03-31"},{"lineNumber":101,"author":{"gitId":"cnlinh"},"content":"        AliasMapping aliasMapping \u003d new AliasMapping();","lastModifiedDate":"2021-03-30"},{"lineNumber":102,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"cnlinh"},"content":"        assertFalse(aliasMapping.isRecursiveKeyword(VALID_ALIAS_1.getCommand()));","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"cnlinh"},"content":"        assertFalse(aliasMapping.isRecursiveKeyword(VALID_ALIAS_2.getCommand()));","lastModifiedDate":"2021-03-30"},{"lineNumber":105,"author":{"gitId":"cnlinh"},"content":"        assertFalse(aliasMapping.isRecursiveKeyword(VALID_ALIAS_3.getCommand()));","lastModifiedDate":"2021-03-30"},{"lineNumber":106,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"cnlinh"},"content":"    public void isRecursiveKeyword_aliasCommandIsRecursive_returnsTrue() {","lastModifiedDate":"2021-03-31"},{"lineNumber":110,"author":{"gitId":"cnlinh"},"content":"        AliasMapping aliasMapping \u003d new AliasMapping();","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"cnlinh"},"content":"        aliasMapping.addAlias(ALIAS_1_TO_2);","lastModifiedDate":"2021-03-30"},{"lineNumber":112,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasMapping.isRecursiveKeyword(ALIAS_2_TO_1.getCommand()));","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":114,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":115,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":116,"author":{"gitId":"cnlinh"},"content":"    public void equals() {","lastModifiedDate":"2021-03-31"},{"lineNumber":117,"author":{"gitId":"cnlinh"},"content":"        AliasMapping map1 \u003d new AliasMapping();","lastModifiedDate":"2021-03-31"},{"lineNumber":118,"author":{"gitId":"cnlinh"},"content":"        AliasMapping map2 \u003d new AliasMapping();","lastModifiedDate":"2021-03-31"},{"lineNumber":119,"author":{"gitId":"cnlinh"},"content":"        // both are empty","lastModifiedDate":"2021-03-31"},{"lineNumber":120,"author":{"gitId":"cnlinh"},"content":"        assertEquals(map1, map2);","lastModifiedDate":"2021-03-31"},{"lineNumber":121,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"cnlinh"},"content":"        map1.addAlias(VALID_ALIAS_1);","lastModifiedDate":"2021-03-31"},{"lineNumber":123,"author":{"gitId":"cnlinh"},"content":"        map2.addAlias(VALID_ALIAS_1);","lastModifiedDate":"2021-03-31"},{"lineNumber":124,"author":{"gitId":"cnlinh"},"content":"        // both add the same alias","lastModifiedDate":"2021-03-31"},{"lineNumber":125,"author":{"gitId":"cnlinh"},"content":"        assertEquals(map1, map2);","lastModifiedDate":"2021-03-31"},{"lineNumber":126,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":127,"author":{"gitId":"cnlinh"},"content":"        map1.addAlias(VALID_ALIAS_2);","lastModifiedDate":"2021-03-31"},{"lineNumber":128,"author":{"gitId":"cnlinh"},"content":"        map2.addAlias(VALID_ALIAS_3);","lastModifiedDate":"2021-03-31"},{"lineNumber":129,"author":{"gitId":"cnlinh"},"content":"        // both contain different aliases","lastModifiedDate":"2021-03-31"},{"lineNumber":130,"author":{"gitId":"cnlinh"},"content":"        assertNotEquals(map1, map2);","lastModifiedDate":"2021-03-31"},{"lineNumber":131,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":132,"author":{"gitId":"cnlinh"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"cnlinh":132}},{"path":"src/test/java/seedu/address/commons/core/AliasTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.VALID_ALIAS_1;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"public class AliasTest {","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"    public static final String VALID_ALIAS_NAME \u003d \"valid\";","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"    public static final String INVALID_ALIAS_NAME \u003d \"inv@lid\";","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"    public static final String VALID_COMMAND \u003d \"validCommand\";","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    public void equals() {","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"        // same alias -\u003e true","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"        assertEquals(VALID_ALIAS_1, VALID_ALIAS_1);","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"        // same argument -\u003e true","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"        assertEquals(new Alias(VALID_ALIAS_NAME, VALID_COMMAND), new Alias(VALID_ALIAS_NAME, VALID_COMMAND));","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"        // null alias -\u003e false","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"        assertNotEquals(VALID_ALIAS_1, null);","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"        // different instance -\u003e false","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"        assertNotEquals(VALID_ALIAS_1, new AliasMapping());","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"    public void isValidName() {","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"        // valid name","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"        assertTrue(Alias.isValidName(\"valid\")); // alphabets only","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"        assertTrue(Alias.isValidName(\"54110\")); // numbers only","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"        assertTrue(Alias.isValidName(\"v4l1d\")); // alphanumeric","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"        // blank name","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"        assertFalse(Alias.isValidName(\"\")); // empty string","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"        assertFalse(Alias.isValidName(\" \")); // spaces only","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"        // invalid name","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"        assertFalse(Alias.isValidName(\"inv@lid\")); // special character","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"cnlinh":46}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"        assertNotNull(AppUtil.getImage(\"/images/sunrez_32.png\"));","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"benedictkhoomw":1,"-":35}},{"path":"src/test/java/seedu/address/commons/util/MathUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":" * Tests MathUtil\u0027s functions.","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"public class MathUtilTest {","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    public void clamp() {","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"        final int upper \u003d 3478;","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"        final int lower \u003d -9812;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"        final int value \u003d 123;","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"        // EP: Value strictly below lower bound -\u003e returns lower bound","lastModifiedDate":"2021-04-06"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(lower, MathUtil.clamp(lower - 213, lower, upper));","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"        // EP: Value strictly above upper bound -\u003e returns upper bound","lastModifiedDate":"2021-04-06"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(upper, MathUtil.clamp(upper + 91, lower, upper));","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"        // EP: Value strictly between bounds -\u003e returns value","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(value, MathUtil.clamp(value, lower, upper));","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        // BVA: Bounds and value equal -\u003e returns value","lastModifiedDate":"2021-04-06"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(upper, MathUtil.clamp(upper, upper, upper));","lastModifiedDate":"2021-04-06"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        // BVA: Value equals upper bound only -\u003e returns value","lastModifiedDate":"2021-04-06"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(upper, MathUtil.clamp(upper, lower, upper));","lastModifiedDate":"2021-04-06"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        // BVA: Value one below upper bound -\u003e returns value","lastModifiedDate":"2021-04-06"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(upper - 1, MathUtil.clamp(upper - 1, lower, upper));","lastModifiedDate":"2021-04-06"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        // BVA: Value one above upper bound -\u003e returns upper bound","lastModifiedDate":"2021-04-06"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(upper, MathUtil.clamp(upper + 1, lower, upper));","lastModifiedDate":"2021-04-06"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"        // BVA: Value equals lower bound only -\u003e returns value","lastModifiedDate":"2021-04-06"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(lower, MathUtil.clamp(lower, lower, upper));","lastModifiedDate":"2021-04-06"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        // BVA: Value one above lower bound -\u003e returns value","lastModifiedDate":"2021-04-06"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(lower + 1, MathUtil.clamp(lower + 1, lower, upper));","lastModifiedDate":"2021-04-06"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"        // BVA: Value one below lower bound -\u003e returns lower bound","lastModifiedDate":"2021-04-06"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(lower, MathUtil.clamp(lower - 1, lower, upper));","lastModifiedDate":"2021-04-06"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"    public void clamp_givenMinGreaterThanMax_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        final int min \u003d 5;","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"        final int max \u003d -7;","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"        final int value \u003d 23;","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e MathUtil.clamp(value, min, max));","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"benedictkhoomw":57}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX;","lastModifiedDate":"2021-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.YEAR_DESC_AMY;","lastModifiedDate":"2021-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.AMY;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.ListResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.storage.commandhistory.PlainTextCommandHistoryStorage;","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.ResidentBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"sunrez.json\"));","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        PlainTextCommandHistoryStorage commandHistoryStorage \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"                new PlainTextCommandHistoryStorage(temporaryFolder.resolve(\"commandHistory.txt\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, commandHistoryStorage);","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"        String deleteCommand \u003d \"rdel 9\";","lastModifiedDate":"2021-02-22"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"        String listCommand \u003d ListResidentCommand.COMMAND_WORD;","lastModifiedDate":"2021-02-22"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(listCommand, ListResidentCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2021-02-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"        PlainTextCommandHistoryStorage commandHistoryStorage \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"                new PlainTextCommandHistoryStorage(temporaryFolder.resolve(\"commandHistory.txt\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, commandHistoryStorage);","lastModifiedDate":"2021-03-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"        String addCommand \u003d AddResidentCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2021-02-27"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_AMY;","lastModifiedDate":"2021-03-25"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"        Resident expectedResident \u003d new ResidentBuilder(AMY).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"        expectedModel.appendCommandHistoryEntry(addCommand);","lastModifiedDate":"2021-03-10"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"        expectedModel.addResident(expectedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"    public void getFilteredResidentList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredResidentList().remove(0));","lastModifiedDate":"2021-03-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"benedictkhoomw":9,"colintkn":17,"-":143}},{"path":"src/test/java/seedu/address/logic/commandhistory/SuppliedCommandHistorySelectorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.logic.commandhistory;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.testutil.TypicalCommandHistoryEntries.getTypicalCommandHistory;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.testutil.commandhistory.CommandHistoryTestUtil.getEntries;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.List;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistory;","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistoryEntry;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"public class SuppliedCommandHistorySelectorTest {","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    private CommandHistory emptyHistory;","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    private CommandHistory typicalHistory;","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    private SuppliedCommandHistorySelector typicalSelector;","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    private SuppliedCommandHistorySelector emptySelector;","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    @BeforeEach","lastModifiedDate":"2021-04-06"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    public void setUp() {","lastModifiedDate":"2021-04-06"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        emptyHistory \u003d new CommandHistory();","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"        emptySelector \u003d new SuppliedCommandHistorySelector(() -\u003e emptyHistory);","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        typicalHistory \u003d getTypicalCommandHistory();","lastModifiedDate":"2021-04-06"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        typicalSelector \u003d new SuppliedCommandHistorySelector(() -\u003e typicalHistory);","lastModifiedDate":"2021-04-06"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    public void navigateToOnePastLast_onEmptyHistory_doesNotThrow() {","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        assertDoesNotThrow(() -\u003e emptySelector.navigateToOnePastLast());","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"    public void navigateToOnePastLast_thenSelectNextOnNonEmpty_returnsEmpty() {","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        typicalSelector.navigateToOnePastLast();","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(Optional.empty(), typicalSelector.selectNextUntilOnePastLast());","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"    public void navigateToOnePastLast_thenSelectPreviousOnNonEmpty_returnsLastEntry() {","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        String lastEntry \u003d typicalHistory.get(typicalHistory.size() - 1).value;","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"        typicalSelector.navigateToOnePastLast();","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(Optional.of(lastEntry), typicalSelector.selectPreviousUntilFirst());","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"    public void selectNext_onEmpty_returnsEmpty() {","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(Optional.empty(), emptySelector.selectNextUntilOnePastLast());","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"    public void selectNext_onNonEmptyFromLast_returnsEmpty() {","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"        List\u003cCommandHistoryEntry\u003e entries \u003d getEntries(typicalHistory);","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"        // Navigate to last","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"        typicalSelector.navigateToOnePastLast();","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"        typicalSelector.selectPreviousUntilFirst();","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(Optional.empty(), typicalSelector.selectNextUntilOnePastLast());","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"    public void selectNext_repeatedOnNonEmptyFromFirst_canSelectAllEntries() {","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"        List\u003cCommandHistoryEntry\u003e entries \u003d getEntries(typicalHistory);","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"        typicalSelector.navigateToOnePastLast();","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"        // Navigate to first entry","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d entries.size() - 1; i \u003e\u003d 0; i--) {","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"            typicalSelector.selectPreviousUntilFirst();","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"        // Check each entry from second until last","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 1; i \u003c entries.size(); i++) {","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"            Optional\u003cString\u003e entryText \u003d Optional.of(entries.get(i).value);","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"            assertEquals(entryText, typicalSelector.selectNextUntilOnePastLast());","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"    public void selectPrevious_onEmpty_returnsEmpty() {","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(Optional.empty(), emptySelector.selectPreviousUntilFirst());","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"    public void selectPrevious_onNonEmptyFromFirst_returnsFirst() {","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"        List\u003cCommandHistoryEntry\u003e entries \u003d getEntries(typicalHistory);","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"        typicalSelector.navigateToOnePastLast();","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"        // Navigate to first entry","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d entries.size() - 1; i \u003e\u003d 0; i--) {","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"            typicalSelector.selectPreviousUntilFirst();","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":"        // After selecting all the way to the first, the next call should return the first entry.","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(Optional.of(entries.get(0).value), typicalSelector.selectPreviousUntilFirst());","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"    public void selectPrevious_repeatedOnNonEmptyFromLast_canSelectAllEntries() {","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"benedictkhoomw"},"content":"        List\u003cCommandHistoryEntry\u003e entries \u003d getEntries(typicalHistory);","lastModifiedDate":"2021-03-30"},{"lineNumber":102,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"benedictkhoomw"},"content":"        // Check all entries in reverse","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"benedictkhoomw"},"content":"        typicalSelector.navigateToOnePastLast();","lastModifiedDate":"2021-03-30"},{"lineNumber":105,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d entries.size() - 1; i \u003e\u003d 0; i--) {","lastModifiedDate":"2021-03-30"},{"lineNumber":106,"author":{"gitId":"benedictkhoomw"},"content":"            Optional\u003cString\u003e entryText \u003d Optional.of(entries.get(i).value);","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"benedictkhoomw"},"content":"            assertEquals(entryText, typicalSelector.selectPreviousUntilFirst());","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":110,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"benedictkhoomw":110}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.ResidentBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":" * Contains integration tests (interaction with the Model) for {@code AddResidentCommand}.","lastModifiedDate":"2021-02-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"    public void execute_newResident_success() {","lastModifiedDate":"2021-03-05"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        Resident validResident \u003d new ResidentBuilder().build();","lastModifiedDate":"2021-03-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        expectedModel.addResident(validResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(new AddResidentCommand(validResident), model,","lastModifiedDate":"2021-03-05"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"                String.format(AddResidentCommand.MESSAGE_SUCCESS, validResident), expectedModel);","lastModifiedDate":"2021-03-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    public void execute_duplicateResident_throwsCommandException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        Resident residentInList \u003d model.getAddressBook().getResidentList().get(0);","lastModifiedDate":"2021-03-05"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(new AddResidentCommand(residentInList), model,","lastModifiedDate":"2021-03-05"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"            AddResidentCommand.MESSAGE_DUPLICATE_RESIDENT);","lastModifiedDate":"2021-03-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"colintkn":13,"-":33,"DrWala":1}},{"path":"src/test/java/seedu/address/logic/commands/AddResidentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.ResidentBuilder;","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"public class AddResidentCommandTest {","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    public void constructor_nullResident_throwsNullPointerException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddResidentCommand(null));","lastModifiedDate":"2021-02-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"    public void execute_residentAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-03-05"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"        ModelStubAcceptingResidentAdded modelStub \u003d new ModelStubAcceptingResidentAdded();","lastModifiedDate":"2021-03-05"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        Resident validResident \u003d new ResidentBuilder().build();","lastModifiedDate":"2021-03-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        CommandResult commandResult \u003d new AddResidentCommand(validResident).execute(modelStub);","lastModifiedDate":"2021-03-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"        assertEquals(String.format(AddResidentCommand.MESSAGE_SUCCESS, validResident),","lastModifiedDate":"2021-03-05"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"            commandResult.getFeedbackToUser());","lastModifiedDate":"2021-03-05"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        assertEquals(Arrays.asList(validResident), modelStub.residentsAdded);","lastModifiedDate":"2021-03-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    public void execute_duplicateResident_throwsCommandException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        Resident validResident \u003d new ResidentBuilder().build();","lastModifiedDate":"2021-03-05"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        AddResidentCommand addCommand \u003d new AddResidentCommand(validResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        ModelStub modelStub \u003d new ModelStubWithResident(validResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        assertThrows(CommandException.class, AddResidentCommand.MESSAGE_DUPLICATE_RESIDENT, () -\u003e","lastModifiedDate":"2021-03-05"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"                addCommand.execute(modelStub));","lastModifiedDate":"2021-02-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"        Resident alice \u003d new ResidentBuilder().withName(\"Alice\").build();","lastModifiedDate":"2021-03-05"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        Resident bob \u003d new ResidentBuilder().withName(\"Bob\").build();","lastModifiedDate":"2021-03-05"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        AddResidentCommand addAliceCommand \u003d new AddResidentCommand(alice);","lastModifiedDate":"2021-02-22"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        AddResidentCommand addBobCommand \u003d new AddResidentCommand(bob);","lastModifiedDate":"2021-02-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"        AddResidentCommand addAliceCommandCopy \u003d new AddResidentCommand(alice);","lastModifiedDate":"2021-02-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"        // different resident -\u003e returns false","lastModifiedDate":"2021-03-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"     * A Model stub that contains a single resident.","lastModifiedDate":"2021-03-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"    private class ModelStubWithResident extends ModelStub {","lastModifiedDate":"2021-03-05"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        private final Resident resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"        ModelStubWithResident(Resident resident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"            requireNonNull(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"            this.resident \u003d resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"        public boolean hasResident(Resident resident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"            requireNonNull(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"            return this.resident.isSameResident(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"     * A Model stub that always accept the resident being added.","lastModifiedDate":"2021-03-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":96,"author":{"gitId":"colintkn"},"content":"    private class ModelStubAcceptingResidentAdded extends ModelStub {","lastModifiedDate":"2021-03-05"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"        final ArrayList\u003cResident\u003e residentsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"        public boolean hasResident(Resident resident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"            requireNonNull(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"            return residentsAdded.stream().anyMatch(resident::isSameResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"        public void addResident(Resident resident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"            requireNonNull(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":108,"author":{"gitId":"colintkn"},"content":"            residentsAdded.add(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"benedictkhoomw"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":112,"author":{"gitId":"benedictkhoomw"},"content":"        public void commitAddressBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":113,"author":{"gitId":"benedictkhoomw"},"content":"            // called by {@code AddResidentCommand#execute()}","lastModifiedDate":"2021-03-27"},{"lineNumber":114,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":115,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"benedictkhoomw":5,"colintkn":43,"-":74}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"-":31,"DrWala":1}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;","lastModifiedDate":"2021-02-27"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;","lastModifiedDate":"2021-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;","lastModifiedDate":"2021-03-25"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.EditResidentDescriptorBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"    public static final String VALID_YEAR_AMY \u003d \"1\";","lastModifiedDate":"2021-03-05"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    public static final String VALID_YEAR_BOB \u003d \"2\";","lastModifiedDate":"2021-03-05"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"    public static final String VALID_ROOM_AMY \u003d Room.UNALLOCATED_REGEX;","lastModifiedDate":"2021-03-25"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"    public static final String VALID_ROOM_BOB \u003d Room.UNALLOCATED_REGEX;","lastModifiedDate":"2021-03-25"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    public static final String VALID_ROOM_NUMBER_AMY \u003d \"02-123\";","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"    public static final String VALID_ROOM_NUMBER_BOB \u003d \"03-123\";","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"    public static final String YEAR_DESC_AMY \u003d \" \" + PREFIX_YEAR + VALID_YEAR_AMY;","lastModifiedDate":"2021-03-05"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"    public static final String YEAR_DESC_BOB \u003d \" \" + PREFIX_YEAR + VALID_YEAR_BOB;","lastModifiedDate":"2021-03-05"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"    public static final String ROOM_DESC_AMY \u003d \" \" + PREFIX_ROOM + VALID_ROOM_AMY;","lastModifiedDate":"2021-02-27"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"    public static final String ROOM_DESC_BOB \u003d \" \" + PREFIX_ROOM + VALID_ROOM_BOB;","lastModifiedDate":"2021-02-27"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"    public static final String ROOM_NUMBER_DESC_AMY \u003d \" \" + PREFIX_ROOM + VALID_ROOM_NUMBER_AMY;","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"    public static final String ROOM_NUMBER_DESC_BOB \u003d \" \" + PREFIX_ROOM + VALID_ROOM_NUMBER_BOB;","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"    public static final String INVALID_YEAR_DESC \u003d \" \" + PREFIX_YEAR + \"6\"; // \u00276\u0027 is out of range","lastModifiedDate":"2021-03-05"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"    public static final String INVALID_ROOM_DESC \u003d \" \" + PREFIX_ROOM + \"1234\"; // missing \u0027#\u0027 and \u0027-\u0027 symbol","lastModifiedDate":"2021-02-27"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"    public static final EditResidentCommand.EditResidentDescriptor DESC_AMY;","lastModifiedDate":"2021-03-05"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"    public static final EditResidentCommand.EditResidentDescriptor DESC_BOB;","lastModifiedDate":"2021-03-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"        DESC_AMY \u003d new EditResidentDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-03-05"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2021-03-05"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"                .withYear(VALID_YEAR_AMY)","lastModifiedDate":"2021-03-05"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"                .build();","lastModifiedDate":"2021-02-23"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"        DESC_BOB \u003d new EditResidentDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2021-03-05"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-03-27"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"                .build();","lastModifiedDate":"2021-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"colintkn"},"content":"     * - the address book, filtered resident list and selected resident in {@code actualModel} remain unchanged","lastModifiedDate":"2021-03-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"colintkn"},"content":"        List\u003cResident\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredResidentList());","lastModifiedDate":"2021-03-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"colintkn"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredResidentList());","lastModifiedDate":"2021-03-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":124,"author":{"gitId":"colintkn"},"content":"     * Updates {@code model}\u0027s filtered list to show only the resident at the given {@code targetIndex} in the","lastModifiedDate":"2021-03-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":127,"author":{"gitId":"colintkn"},"content":"    public static void showResidentAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-03-05"},{"lineNumber":128,"author":{"gitId":"colintkn"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredResidentList().size());","lastModifiedDate":"2021-03-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":130,"author":{"gitId":"colintkn"},"content":"        Resident resident \u003d model.getFilteredResidentList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-05"},{"lineNumber":131,"author":{"gitId":"colintkn"},"content":"        final String[] splitName \u003d resident.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2021-03-05"},{"lineNumber":132,"author":{"gitId":"colintkn"},"content":"        model.updateFilteredResidentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2021-03-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":134,"author":{"gitId":"colintkn"},"content":"        assertEquals(1, model.getFilteredResidentList().size());","lastModifiedDate":"2021-03-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"colintkn":42,"-":94}},{"path":"src/test/java/seedu/address/logic/commands/DeleteResidentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showResidentAtIndex;","lastModifiedDate":"2021-03-05"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.DeleteResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":" * {@code DeleteResidentCommand}.","lastModifiedDate":"2021-02-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"public class DeleteResidentCommandTest {","lastModifiedDate":"2021-02-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        Resident residentToDelete \u003d model.getFilteredResidentList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        DeleteResidentCommand deleteResidentCommand \u003d new DeleteResidentCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(DeleteResidentCommand.MESSAGE_DELETE_RESIDENT_SUCCESS, residentToDelete);","lastModifiedDate":"2021-03-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"        expectedModel.deleteResident(residentToDelete);","lastModifiedDate":"2021-03-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(deleteResidentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-02-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredResidentList().size() + 1);","lastModifiedDate":"2021-03-05"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        DeleteResidentCommand deleteResidentCommand \u003d new DeleteResidentCommand(outOfBoundIndex);","lastModifiedDate":"2021-02-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(deleteResidentCommand, model, Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        showResidentAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"        Resident residentToDelete \u003d model.getFilteredResidentList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"        DeleteResidentCommand deleteResidentCommand \u003d new DeleteResidentCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(DeleteResidentCommand.MESSAGE_DELETE_RESIDENT_SUCCESS, residentToDelete);","lastModifiedDate":"2021-03-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"        expectedModel.deleteResident(residentToDelete);","lastModifiedDate":"2021-03-05"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"        showNoResident(expectedModel);","lastModifiedDate":"2021-03-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(deleteResidentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-02-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"        showResidentAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getResidentList().size());","lastModifiedDate":"2021-03-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        DeleteResidentCommand deleteResidentCommand \u003d new DeleteResidentCommand(outOfBoundIndex);","lastModifiedDate":"2021-02-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(deleteResidentCommand, model, Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"        DeleteResidentCommand deleteFirstCommand \u003d new DeleteResidentCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"        DeleteResidentCommand deleteSecondCommand \u003d new DeleteResidentCommand(INDEX_SECOND);","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"        DeleteResidentCommand deleteFirstCommandCopy \u003d new DeleteResidentCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"        // different resident -\u003e returns false","lastModifiedDate":"2021-03-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"    private void showNoResident(Model model) {","lastModifiedDate":"2021-03-05"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"        model.updateFilteredResidentList(p -\u003e false);","lastModifiedDate":"2021-03-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"colintkn"},"content":"        assertTrue(model.getFilteredResidentList().isEmpty());","lastModifiedDate":"2021-03-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"colintkn":22,"-":75,"DrWala":13}},{"path":"src/test/java/seedu/address/logic/commands/EditResidentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showResidentAtIndex;","lastModifiedDate":"2021-03-05"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-05-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand.EditResidentDescriptor;","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.EditResidentDescriptorBuilder;","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.ResidentBuilder;","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditResidentCommand.","lastModifiedDate":"2021-02-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"public class EditResidentCommandTest {","lastModifiedDate":"2021-02-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        Resident editedResident \u003d new ResidentBuilder().build();","lastModifiedDate":"2021-03-05"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder(editedResident).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(INDEX_FIRST, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(EditResidentCommand.MESSAGE_EDIT_RESIDENT_SUCCESS, editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        expectedModel.setResident(model.getFilteredResidentList().get(0), editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(editResidentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-02-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        Index indexLastResident \u003d Index.fromOneBased(model.getFilteredResidentList().size());","lastModifiedDate":"2021-03-05"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        Resident lastResident \u003d model.getFilteredResidentList().get(indexLastResident.getZeroBased());","lastModifiedDate":"2021-03-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"        ResidentBuilder residentInList \u003d new ResidentBuilder(lastResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        Resident editedResident \u003d residentInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-03-05"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"                .build();","lastModifiedDate":"2021-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand.EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder()","lastModifiedDate":"2021-03-05"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"                .withName(VALID_NAME_BOB)","lastModifiedDate":"2021-03-05"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"                .withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-02-23"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(indexLastResident, descriptor);","lastModifiedDate":"2021-03-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(EditResidentCommand.MESSAGE_EDIT_RESIDENT_SUCCESS, editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"        expectedModel.setResident(lastResident, editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(editResidentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-02-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(INDEX_FIRST,","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"            new EditResidentCommand.EditResidentDescriptor());","lastModifiedDate":"2021-03-05"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"        Resident editedResident \u003d model.getFilteredResidentList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(EditResidentCommand.MESSAGE_EDIT_RESIDENT_SUCCESS, editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(editResidentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-02-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"        showResidentAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"        Resident residentInFilteredList \u003d model.getFilteredResidentList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"        Resident editedResident \u003d new ResidentBuilder(residentInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(INDEX_FIRST,","lastModifiedDate":"2021-03-20"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"                new EditResidentDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-03-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(EditResidentCommand.MESSAGE_EDIT_RESIDENT_SUCCESS, editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"        expectedModel.setResident(model.getFilteredResidentList().get(0), editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(editResidentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-02-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"    public void execute_duplicateResidentUnfilteredList_failure() {","lastModifiedDate":"2021-03-05"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":"        Resident firstResident \u003d model.getFilteredResidentList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder(firstResident).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(INDEX_SECOND, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(editResidentCommand, model, EditResidentCommand.MESSAGE_DUPLICATE_RESIDENT);","lastModifiedDate":"2021-03-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"colintkn"},"content":"    public void execute_duplicateResidentFilteredList_failure() {","lastModifiedDate":"2021-03-05"},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":"        showResidentAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":116,"author":{"gitId":"colintkn"},"content":"        // edit resident in filtered list into a duplicate in address book","lastModifiedDate":"2021-03-05"},{"lineNumber":117,"author":{"gitId":"DrWala"},"content":"        Resident residentInList \u003d model.getAddressBook().getResidentList().get(INDEX_SECOND.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":118,"author":{"gitId":"DrWala"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(INDEX_FIRST,","lastModifiedDate":"2021-03-20"},{"lineNumber":119,"author":{"gitId":"colintkn"},"content":"                new EditResidentDescriptorBuilder(residentInList).build());","lastModifiedDate":"2021-03-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(editResidentCommand, model, EditResidentCommand.MESSAGE_DUPLICATE_RESIDENT);","lastModifiedDate":"2021-03-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":125,"author":{"gitId":"colintkn"},"content":"    public void execute_invalidResidentIndexUnfilteredList_failure() {","lastModifiedDate":"2021-03-05"},{"lineNumber":126,"author":{"gitId":"colintkn"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredResidentList().size() + 1);","lastModifiedDate":"2021-03-05"},{"lineNumber":127,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand.EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder()","lastModifiedDate":"2021-03-05"},{"lineNumber":128,"author":{"gitId":"colintkn"},"content":"                .withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":129,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-02-22"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":131,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(editResidentCommand, model, Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":139,"author":{"gitId":"colintkn"},"content":"    public void execute_invalidResidentIndexFilteredList_failure() {","lastModifiedDate":"2021-03-05"},{"lineNumber":140,"author":{"gitId":"DrWala"},"content":"        showResidentAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":141,"author":{"gitId":"DrWala"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;","lastModifiedDate":"2021-03-20"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":143,"author":{"gitId":"colintkn"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getResidentList().size());","lastModifiedDate":"2021-03-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":145,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(outOfBoundIndex,","lastModifiedDate":"2021-02-22"},{"lineNumber":146,"author":{"gitId":"colintkn"},"content":"                new EditResidentDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-03-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":148,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(editResidentCommand, model, Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"DrWala"},"content":"        final EditResidentCommand standardCommand \u003d new EditResidentCommand(INDEX_FIRST, DESC_AMY);","lastModifiedDate":"2021-03-20"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand.EditResidentDescriptor copyDescriptor \u003d new EditResidentDescriptor(DESC_AMY);","lastModifiedDate":"2021-03-05"},{"lineNumber":157,"author":{"gitId":"DrWala"},"content":"        EditResidentCommand commandWithSameValues \u003d new EditResidentCommand(INDEX_FIRST, copyDescriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"DrWala"},"content":"        assertFalse(standardCommand.equals(new EditResidentCommand(INDEX_SECOND, DESC_AMY)));","lastModifiedDate":"2021-03-20"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"DrWala"},"content":"        assertFalse(standardCommand.equals(new EditResidentCommand(INDEX_FIRST, DESC_BOB)));","lastModifiedDate":"2021-03-20"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"colintkn":52,"-":104,"DrWala":20}},{"path":"src/test/java/seedu/address/logic/commands/EditResidentDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.EditResidentDescriptorBuilder;","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"public class EditResidentDescriptorTest {","lastModifiedDate":"2021-03-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand.EditResidentDescriptor descriptorWithSameValues \u003d new EditResidentCommand","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"                .EditResidentDescriptor(DESC_AMY);","lastModifiedDate":"2021-03-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand.EditResidentDescriptor editedAmy \u003d new EditResidentDescriptorBuilder(DESC_AMY)","lastModifiedDate":"2021-03-05"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"                .withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        editedAmy \u003d new EditResidentDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        editedAmy \u003d new EditResidentDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"colintkn":9,"-":41}},{"path":"src/test/java/seedu/address/logic/commands/FindResidentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_RESIDENTS_LISTED_OVERVIEW;","lastModifiedDate":"2021-03-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.CARL;","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.ELLE;","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.FIONA;","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.FindResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":" * Contains integration tests (interaction with the Model) for {@code FindResidentCommand}.","lastModifiedDate":"2021-02-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"public class FindResidentCommandTest {","lastModifiedDate":"2021-02-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand findFirstCommand \u003d new FindResidentCommand(firstPredicate);","lastModifiedDate":"2021-02-22"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand findSecondCommand \u003d new FindResidentCommand(secondPredicate);","lastModifiedDate":"2021-02-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand findFirstCommandCopy \u003d new FindResidentCommand(firstPredicate);","lastModifiedDate":"2021-02-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        // different resident -\u003e returns false","lastModifiedDate":"2021-03-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"    public void execute_zeroKeywords_noResidentFound() {","lastModifiedDate":"2021-03-05"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RESIDENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-03-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand command \u003d new FindResidentCommand(predicate);","lastModifiedDate":"2021-02-22"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        expectedModel.updateFilteredResidentList(predicate);","lastModifiedDate":"2021-03-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredResidentList());","lastModifiedDate":"2021-03-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"    public void execute_multipleKeywords_multipleResidentsFound() {","lastModifiedDate":"2021-03-05"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RESIDENTS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-03-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand command \u003d new FindResidentCommand(predicate);","lastModifiedDate":"2021-02-22"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"        expectedModel.updateFilteredResidentList(predicate);","lastModifiedDate":"2021-03-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredResidentList());","lastModifiedDate":"2021-03-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"colintkn":22,"-":61,"DrWala":1}},{"path":"src/test/java/seedu/address/logic/commands/ListResidentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showResidentAtIndex;","lastModifiedDate":"2021-03-05"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.ListResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListResidentCommand.","lastModifiedDate":"2021-02-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"public class ListResidentCommandTest {","lastModifiedDate":"2021-02-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(new ListResidentCommand(), model, ListResidentCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-02-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        showResidentAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(new ListResidentCommand(), model, ListResidentCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-02-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"colintkn":6,"-":31,"DrWala":3}},{"path":"src/test/java/seedu/address/logic/commands/ModelStub.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.AliasMapping;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-03-25"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.room.RoomNumber;","lastModifiedDate":"2021-03-25"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":" * A default model stub that have all of the methods failing.","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"public class ModelStub implements Model {","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2021-03-13"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"    public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2021-03-13"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-03-13"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"    public boolean hasResident(Resident resident) {","lastModifiedDate":"2021-03-13"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"    public boolean hasResident(Name name) {","lastModifiedDate":"2021-03-25"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"    public void deleteResident(Resident target) {","lastModifiedDate":"2021-03-13"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"    public void addResident(Resident resident) {","lastModifiedDate":"2021-03-13"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"    public Index getIndexOfResidentWithSameName(Name name) {","lastModifiedDate":"2021-03-25"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"    public Resident getResidentWithSameName(Name name) {","lastModifiedDate":"2021-03-25"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"    public void setResident(Resident target, Resident editedResident) {","lastModifiedDate":"2021-03-13"},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":"    public ObservableList\u003cResident\u003e getFilteredResidentList() {","lastModifiedDate":"2021-03-13"},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":104,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":106,"author":{"gitId":"DrWala"},"content":"    public void updateFilteredResidentList(Predicate\u003cResident\u003e predicate) {","lastModifiedDate":"2021-03-13"},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":110,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":"    public boolean hasRoom(Room room) {","lastModifiedDate":"2021-03-13"},{"lineNumber":112,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":113,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":115,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":116,"author":{"gitId":"colintkn"},"content":"    public boolean hasRoom(RoomNumber roomNumber) {","lastModifiedDate":"2021-03-25"},{"lineNumber":117,"author":{"gitId":"colintkn"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":118,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":119,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":120,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":121,"author":{"gitId":"DrWala"},"content":"    public void deleteRoom(Room target) {","lastModifiedDate":"2021-03-13"},{"lineNumber":122,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":123,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":124,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":125,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":126,"author":{"gitId":"DrWala"},"content":"    public void addRoom(Room room) {","lastModifiedDate":"2021-03-13"},{"lineNumber":127,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":128,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":129,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":130,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":131,"author":{"gitId":"colintkn"},"content":"    public Room getRoomWithSameRoomNumber(RoomNumber roomNumber) {","lastModifiedDate":"2021-03-25"},{"lineNumber":132,"author":{"gitId":"colintkn"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":133,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":134,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":135,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":136,"author":{"gitId":"colintkn"},"content":"    public Index getIndexOfRoomWithSameRoomNumber(RoomNumber roomNumber) {","lastModifiedDate":"2021-03-25"},{"lineNumber":137,"author":{"gitId":"colintkn"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":138,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":139,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":140,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":141,"author":{"gitId":"colintkn"},"content":"    public boolean hasEitherResidentRoom(ResidentRoom residentRoom) {","lastModifiedDate":"2021-03-25"},{"lineNumber":142,"author":{"gitId":"colintkn"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":143,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":144,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":145,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":146,"author":{"gitId":"colintkn"},"content":"    public boolean hasBothResidentRoom(ResidentRoom residentRoom) {","lastModifiedDate":"2021-03-25"},{"lineNumber":147,"author":{"gitId":"colintkn"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":148,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":149,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":150,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":151,"author":{"gitId":"colintkn"},"content":"    public void addResidentRoom(ResidentRoom residentRoom) {","lastModifiedDate":"2021-03-25"},{"lineNumber":152,"author":{"gitId":"colintkn"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":153,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":154,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":155,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":156,"author":{"gitId":"colintkn"},"content":"    public void deleteResidentRoom(ResidentRoom target) {","lastModifiedDate":"2021-03-25"},{"lineNumber":157,"author":{"gitId":"colintkn"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":158,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":159,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":160,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":161,"author":{"gitId":"DrWala"},"content":"    public void setRoom(Room target, Room editedRoom) {","lastModifiedDate":"2021-03-13"},{"lineNumber":162,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":163,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":164,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":165,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":166,"author":{"gitId":"DrWala"},"content":"    public ObservableList\u003cRoom\u003e getFilteredRoomList() {","lastModifiedDate":"2021-03-13"},{"lineNumber":167,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":168,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":169,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":170,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":171,"author":{"gitId":"DrWala"},"content":"    public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {","lastModifiedDate":"2021-03-13"},{"lineNumber":172,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-13"},{"lineNumber":173,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":174,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":175,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":176,"author":{"gitId":"benedictkhoomw"},"content":"    public ReadOnlyCommandHistory getCommandHistory() {","lastModifiedDate":"2021-03-16"},{"lineNumber":177,"author":{"gitId":"benedictkhoomw"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-16"},{"lineNumber":178,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":179,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":180,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":181,"author":{"gitId":"stein414"},"content":"    public boolean hasIssue(Issue issue) {","lastModifiedDate":"2021-03-31"},{"lineNumber":182,"author":{"gitId":"stein414"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-31"},{"lineNumber":183,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":184,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":185,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":186,"author":{"gitId":"stein414"},"content":"    public void deleteIssue(Issue target) {","lastModifiedDate":"2021-03-16"},{"lineNumber":187,"author":{"gitId":"stein414"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-16"},{"lineNumber":188,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":189,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":190,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":191,"author":{"gitId":"benedictkhoomw"},"content":"    public void appendCommandHistoryEntry(String commandText) {","lastModifiedDate":"2021-03-16"},{"lineNumber":192,"author":{"gitId":"benedictkhoomw"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-16"},{"lineNumber":193,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":194,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":195,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":196,"author":{"gitId":"stein414"},"content":"    public void addIssue(Issue issue) {","lastModifiedDate":"2021-03-16"},{"lineNumber":197,"author":{"gitId":"stein414"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-16"},{"lineNumber":198,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":199,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":200,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":201,"author":{"gitId":"stein414"},"content":"    public void setIssue(Issue target, Issue editedIssue) {","lastModifiedDate":"2021-03-16"},{"lineNumber":202,"author":{"gitId":"stein414"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-16"},{"lineNumber":203,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":204,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":205,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":206,"author":{"gitId":"stein414"},"content":"    public void closeIssue(Issue target) {","lastModifiedDate":"2021-03-31"},{"lineNumber":207,"author":{"gitId":"stein414"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-31"},{"lineNumber":208,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":209,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":210,"author":{"gitId":"DrWala"},"content":"    @Override","lastModifiedDate":"2021-04-06"},{"lineNumber":211,"author":{"gitId":"DrWala"},"content":"    public boolean issuesContainRoom(Room target) {","lastModifiedDate":"2021-04-06"},{"lineNumber":212,"author":{"gitId":"DrWala"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-06"},{"lineNumber":213,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":214,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":215,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":216,"author":{"gitId":"stein414"},"content":"    public ObservableList\u003cIssue\u003e getFilteredIssueList() {","lastModifiedDate":"2021-03-16"},{"lineNumber":217,"author":{"gitId":"stein414"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-16"},{"lineNumber":218,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":219,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":220,"author":{"gitId":"stein414"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":221,"author":{"gitId":"stein414"},"content":"    public void updateFilteredIssueList(Predicate\u003cIssue\u003e predicate) {","lastModifiedDate":"2021-03-16"},{"lineNumber":222,"author":{"gitId":"stein414"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-16"},{"lineNumber":223,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":224,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":225,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-04-05"},{"lineNumber":226,"author":{"gitId":"colintkn"},"content":"    public ObservableList\u003cResidentRoom\u003e getFilteredResidentRoomList() {","lastModifiedDate":"2021-04-05"},{"lineNumber":227,"author":{"gitId":"colintkn"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-04-05"},{"lineNumber":228,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":229,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":230,"author":{"gitId":"colintkn"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":231,"author":{"gitId":"colintkn"},"content":"    public void updateFilteredResidentRoomList(Predicate\u003cResidentRoom\u003e predicate) {","lastModifiedDate":"2021-03-31"},{"lineNumber":232,"author":{"gitId":"colintkn"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-25"},{"lineNumber":233,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":234,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":235,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":236,"author":{"gitId":"cnlinh"},"content":"    public void addAlias(Alias alias) {","lastModifiedDate":"2021-03-16"},{"lineNumber":237,"author":{"gitId":"cnlinh"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-16"},{"lineNumber":238,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":239,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":240,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":241,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean canUndoAddressBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":242,"author":{"gitId":"benedictkhoomw"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-27"},{"lineNumber":243,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":244,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":245,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":246,"author":{"gitId":"benedictkhoomw"},"content":"    public void undoAddressBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":247,"author":{"gitId":"benedictkhoomw"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-27"},{"lineNumber":248,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":249,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":250,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":251,"author":{"gitId":"benedictkhoomw"},"content":"    public void commitAddressBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":252,"author":{"gitId":"colintkn"},"content":"        // called by {@code AddResidentCommand#execute()};","lastModifiedDate":"2021-03-31"},{"lineNumber":253,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":254,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":255,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":256,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean canRedoAddressBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":257,"author":{"gitId":"benedictkhoomw"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-27"},{"lineNumber":258,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":259,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":260,"author":{"gitId":"benedictkhoomw"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":261,"author":{"gitId":"benedictkhoomw"},"content":"    public void redoAddressBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":262,"author":{"gitId":"benedictkhoomw"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-27"},{"lineNumber":263,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":264,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":265,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":266,"author":{"gitId":"cnlinh"},"content":"    public void deleteAlias(String aliasName) {","lastModifiedDate":"2021-03-26"},{"lineNumber":267,"author":{"gitId":"cnlinh"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-26"},{"lineNumber":268,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":269,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":270,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":271,"author":{"gitId":"cnlinh"},"content":"    public AliasMapping getAliasMapping() {","lastModifiedDate":"2021-03-16"},{"lineNumber":272,"author":{"gitId":"cnlinh"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-16"},{"lineNumber":273,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":274,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":275,"author":{"gitId":"cnlinh"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":276,"author":{"gitId":"cnlinh"},"content":"    public void setAliasMapping(AliasMapping aliasMapping) {","lastModifiedDate":"2021-03-16"},{"lineNumber":277,"author":{"gitId":"cnlinh"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-16"},{"lineNumber":278,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":279,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"cnlinh":22,"benedictkhoomw":36,"stein414":35,"colintkn":64,"DrWala":122}},{"path":"src/test/java/seedu/address/logic/commands/ViewHistoryCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.logic.commands.commandhistory.ViewHistoryCommand.MESSAGE_ENTRY_FORMAT;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.logic.commands.commandhistory.ViewHistoryCommand.MESSAGE_HEADER_SUCCESS;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.testutil.TypicalCommandHistoryEntries.getTypicalCommandHistory;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.commandhistory.ViewHistoryCommand;","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistory;","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":" * {@code ViewHistoryCommand}.","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"public class ViewHistoryCommandTest {","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    private final Model typicalModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"            getTypicalCommandHistory());","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    public void equals() {","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"        final int lastFiveEntries \u003d 5;","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        ViewHistoryCommand viewAllCommand \u003d new ViewHistoryCommand();","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"        ViewHistoryCommand viewFiveCommand \u003d new ViewHistoryCommand(lastFiveEntries);","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(viewAllCommand.equals(viewAllCommand));","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(viewFiveCommand.equals(viewFiveCommand));","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(viewAllCommand.equals(new ViewHistoryCommand()));","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(viewFiveCommand.equals(new ViewHistoryCommand(lastFiveEntries)));","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"        assertFalse(viewFiveCommand.equals(lastFiveEntries));","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"        assertFalse(viewAllCommand.equals(null));","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"        // different commands -\u003e returns false","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        assertFalse(viewAllCommand.equals(viewFiveCommand));","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"    public void execute_countOutOfRange_throwsCommandException() {","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        final int tooBigCount \u003d typicalModel.getCommandHistory().size() + 1;","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"        ViewHistoryCommand historyCommand \u003d new ViewHistoryCommand(tooBigCount);","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"        String expectedMessage \u003d String.format(ViewHistoryCommand.MESSAGE_INVALID_COUNT,","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"                1, typicalModel.getCommandHistory().size());","lastModifiedDate":"2021-03-10"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"        assertCommandFailure(historyCommand, typicalModel, expectedMessage);","lastModifiedDate":"2021-03-10"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"    public void execute_viewAllWithEmptyHistory_success() {","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"        Model modelEmptyHistory \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new CommandHistory());","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"        ViewHistoryCommand historyCommand \u003d new ViewHistoryCommand();","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"        String expectedMessage \u003d ViewHistoryCommand.MESSAGE_EMPTY_HISTORY;","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"        // No change to model here; it is LogicManager\u0027s responsibility to track command history","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"        // Tests for that are in LogicManager integration tests.","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"        ModelManager expectedModel \u003d new ModelManager(modelEmptyHistory.getAddressBook(),","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"                modelEmptyHistory.getUserPrefs(), modelEmptyHistory.getCommandHistory());","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"        assertCommandSuccess(historyCommand, modelEmptyHistory, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"    public void execute_viewAllWithHistory_success() {","lastModifiedDate":"2021-03-10"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"        ViewHistoryCommand historyCommand \u003d new ViewHistoryCommand();","lastModifiedDate":"2021-03-10"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"        ReadOnlyCommandHistory history \u003d typicalModel.getCommandHistory();","lastModifiedDate":"2021-03-10"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"        String expectedMessage \u003d buildCommandHistoryReversed(history, history.size());","lastModifiedDate":"2021-03-10"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"        // No change to model here; it is LogicManager\u0027s responsibility to track command history","lastModifiedDate":"2021-03-10"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"        // Tests for that are in LogicManager integration tests.","lastModifiedDate":"2021-03-10"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"        ModelManager expectedModel \u003d new ModelManager(typicalModel.getAddressBook(),","lastModifiedDate":"2021-03-10"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"                typicalModel.getUserPrefs(), typicalModel.getCommandHistory());","lastModifiedDate":"2021-03-10"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"        assertCommandSuccess(historyCommand, typicalModel, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-10"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":"    public void execute_viewValidCountWithHistory_success() {","lastModifiedDate":"2021-03-10"},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"        ReadOnlyCommandHistory history \u003d typicalModel.getCommandHistory();","lastModifiedDate":"2021-03-10"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"        final int count \u003d history.size() - 1; // valid count less than the size","lastModifiedDate":"2021-03-10"},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"        ViewHistoryCommand historyCommand \u003d new ViewHistoryCommand(count);","lastModifiedDate":"2021-03-10"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":101,"author":{"gitId":"benedictkhoomw"},"content":"        String expectedMessage \u003d buildCommandHistoryReversed(history, count);","lastModifiedDate":"2021-03-10"},{"lineNumber":102,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":103,"author":{"gitId":"benedictkhoomw"},"content":"        // No change to model here; it is LogicManager\u0027s responsibility to track command history","lastModifiedDate":"2021-03-10"},{"lineNumber":104,"author":{"gitId":"benedictkhoomw"},"content":"        // Tests for that are in LogicManager integration tests.","lastModifiedDate":"2021-03-10"},{"lineNumber":105,"author":{"gitId":"benedictkhoomw"},"content":"        ModelManager expectedModel \u003d new ModelManager(typicalModel.getAddressBook(),","lastModifiedDate":"2021-03-10"},{"lineNumber":106,"author":{"gitId":"benedictkhoomw"},"content":"                typicalModel.getUserPrefs(), typicalModel.getCommandHistory());","lastModifiedDate":"2021-03-10"},{"lineNumber":107,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":108,"author":{"gitId":"benedictkhoomw"},"content":"        assertCommandSuccess(historyCommand, typicalModel, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-10"},{"lineNumber":109,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":110,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":111,"author":{"gitId":"benedictkhoomw"},"content":"    private String buildCommandHistoryReversed(ReadOnlyCommandHistory history, int count) {","lastModifiedDate":"2021-03-10"},{"lineNumber":112,"author":{"gitId":"benedictkhoomw"},"content":"        StringBuilder msg \u003d new StringBuilder(String.format(MESSAGE_HEADER_SUCCESS, count));","lastModifiedDate":"2021-03-10"},{"lineNumber":113,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d history.size() - 1; i \u003e\u003d history.size() - count; i--) {","lastModifiedDate":"2021-03-10"},{"lineNumber":114,"author":{"gitId":"benedictkhoomw"},"content":"            final int entryNum \u003d i + 1;","lastModifiedDate":"2021-03-10"},{"lineNumber":115,"author":{"gitId":"benedictkhoomw"},"content":"            final String entryText \u003d history.get(i).toString();","lastModifiedDate":"2021-03-10"},{"lineNumber":116,"author":{"gitId":"benedictkhoomw"},"content":"            msg.append(String.format(MESSAGE_ENTRY_FORMAT, entryNum, entryText));","lastModifiedDate":"2021-03-10"},{"lineNumber":117,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":118,"author":{"gitId":"benedictkhoomw"},"content":"        return msg.toString();","lastModifiedDate":"2021-03-10"},{"lineNumber":119,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":120,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"benedictkhoomw":119,"DrWala":1}},{"path":"src/test/java/seedu/address/logic/commands/alias/AliasCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package seedu.address.logic.commands.alias;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_1_TO_2;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_2_TO_1;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.ALIAS_HELP;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.VALID_ALIAS_1;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.VALID_ALIAS_2;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.VALID_ALIAS_3;","lastModifiedDate":"2021-04-08"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.VALID_ALIAS_4;","lastModifiedDate":"2021-04-08"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"public class AliasCommandTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    public void equals() {","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"        AliasCommand aliasOne \u003d new AliasCommand(VALID_ALIAS_1);","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"        AliasCommand aliasTwo \u003d new AliasCommand(VALID_ALIAS_2);","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"        // same object -\u003e true","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasOne.equals(aliasOne));","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"        // same alias -\u003e returns true","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"        AliasCommand aliasOneCopy \u003d new AliasCommand(VALID_ALIAS_1);","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"        assertTrue(aliasOne.equals(aliasOneCopy));","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"        // different instance types -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"        assertFalse(aliasOne.equals(1));","lastModifiedDate":"2021-04-08"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"        assertFalse(aliasOne.equals(null));","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"        // different alias -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"        assertFalse(aliasOne.equals(aliasTwo));","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"    public void execute_aliasNameIsReserved_throwsCommandException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"        AliasCommand alias \u003d new AliasCommand(ALIAS_HELP);","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"        assertThrows(CommandException.class, () -\u003e alias.execute(model));","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"    public void execute_aliasCommandIsRecursive_throwsCommandException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"        AliasCommand alias \u003d new AliasCommand(ALIAS_2_TO_1);","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"        model.addAlias(ALIAS_1_TO_2);","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"        assertThrows(CommandException.class, () -\u003e alias.execute(model));","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"    public void execute_aliasCommandIsValid_success() {","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":"        expectedModel.addAlias(VALID_ALIAS_3);","lastModifiedDate":"2021-04-08"},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"        assertCommandSuccess(new AliasCommand(VALID_ALIAS_3), model, String.format(AliasCommand.MESSAGE_SUCCESS_NEW,","lastModifiedDate":"2021-04-08"},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"                VALID_ALIAS_3.getAliasName()), expectedModel);","lastModifiedDate":"2021-04-08"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":"    public void execute_aliasNamePreviouslyDefined_success() {","lastModifiedDate":"2021-04-08"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-04-08"},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"        model.addAlias(VALID_ALIAS_3);","lastModifiedDate":"2021-04-08"},{"lineNumber":77,"author":{"gitId":"cnlinh"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-04-08"},{"lineNumber":78,"author":{"gitId":"cnlinh"},"content":"        expectedModel.addAlias(VALID_ALIAS_4);","lastModifiedDate":"2021-04-08"},{"lineNumber":79,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":80,"author":{"gitId":"cnlinh"},"content":"        assertCommandSuccess(new AliasCommand(VALID_ALIAS_4), model, String.format(AliasCommand.MESSAGE_SUCCESS_UPDATED,","lastModifiedDate":"2021-04-08"},{"lineNumber":81,"author":{"gitId":"cnlinh"},"content":"                VALID_ALIAS_4.getAliasName()), expectedModel);","lastModifiedDate":"2021-04-08"},{"lineNumber":82,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":83,"author":{"gitId":"cnlinh"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"cnlinh":83}},{"path":"src/test/java/seedu/address/logic/commands/alias/ListAliasCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package seedu.address.logic.commands.alias;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-04-08"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.VALID_ALIAS_1;","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.VALID_ALIAS_2;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.VALID_ALIAS_3;","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-04-08"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-04-08"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-04-08"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"public class ListAliasCommandTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"    public void equals() {","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"        ListAliasCommand commandOne \u003d new ListAliasCommand();","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"        ListAliasCommand commandTwo \u003d new ListAliasCommand();","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"        // same object -\u003e true","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"        assertTrue(commandOne.equals(commandOne));","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"        // same instance type -\u003e returns true","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"        assertTrue(commandOne.equals(commandTwo));","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"        // different instance types -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"        assertFalse(commandOne.equals(1));","lastModifiedDate":"2021-04-08"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"        assertFalse(commandOne.equals(null));","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"    public void execute_noAliasCreated_success() {","lastModifiedDate":"2021-04-08"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-04-08"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"        assertCommandSuccess(new ListAliasCommand(), model, String.format(ListAliasCommand.MESSAGE_EMPTY_ALIAS,","lastModifiedDate":"2021-04-08"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"                VALID_ALIAS_1.getAliasName()), model);","lastModifiedDate":"2021-04-08"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"    public void execute_someAliasesCreated_success() {","lastModifiedDate":"2021-04-08"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-04-08"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"        model.addAlias(VALID_ALIAS_1);","lastModifiedDate":"2021-04-08"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"        model.addAlias(VALID_ALIAS_2);","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"        model.addAlias(VALID_ALIAS_3);","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"        StringBuilder expectedMessage \u003d new StringBuilder();","lastModifiedDate":"2021-04-08"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"        expectedMessage.append(String.format(ListAliasCommand.MESSAGE_SUCCESS_HEADER, model.getAliasMapping().size()));","lastModifiedDate":"2021-04-08"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"        expectedMessage.append(model.getAliasMapping().toString());","lastModifiedDate":"2021-04-08"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"        assertCommandSuccess(new ListAliasCommand(), model, expectedMessage.toString(), model);","lastModifiedDate":"2021-04-08"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"cnlinh":57}},{"path":"src/test/java/seedu/address/logic/commands/alias/UnaliasCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package seedu.address.logic.commands.alias;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-04-08"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-04-08"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-04-08"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.VALID_ALIAS_1;","lastModifiedDate":"2021-04-08"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.VALID_ALIAS_2;","lastModifiedDate":"2021-04-08"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.testutil.alias.AliasUtil.VALID_ALIAS_3;","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-04-08"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-04-08"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-04-08"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-04-08"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"public class UnaliasCommandTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"    public void equals() {","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"        UnaliasCommand commandOne \u003d new UnaliasCommand(\"commandOne\");","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"        UnaliasCommand commandTwo \u003d new UnaliasCommand(\"commandTwo\");","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"        // same object -\u003e true","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"        assertTrue(commandOne.equals(commandOne));","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"        // same alias name -\u003e returns true","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"        UnaliasCommand commandOneCopy \u003d new UnaliasCommand(\"commandOne\");","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"        assertTrue(commandOne.equals(commandOneCopy));","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"        // different instance types -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"        assertFalse(commandOne.equals(1));","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"        assertFalse(commandOne.equals(null));","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"        // different alias name -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"        assertFalse(commandOne.equals(commandTwo));","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"    public void execute_aliasNotFound_throwsCommandException() {","lastModifiedDate":"2021-04-08"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-04-08"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"        model.addAlias(VALID_ALIAS_2);","lastModifiedDate":"2021-04-08"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"        UnaliasCommand unalias \u003d new UnaliasCommand(VALID_ALIAS_3.getAliasName());","lastModifiedDate":"2021-04-08"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"        assertThrows(CommandException.class, () -\u003e unalias.execute(model));","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-04-08"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"    public void execute_aliasFound_success() {","lastModifiedDate":"2021-04-08"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-04-08"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"        model.addAlias(VALID_ALIAS_1);","lastModifiedDate":"2021-04-08"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"        model.addAlias(VALID_ALIAS_2);","lastModifiedDate":"2021-04-08"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-04-08"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"        expectedModel.addAlias(VALID_ALIAS_2);","lastModifiedDate":"2021-04-08"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"        assertCommandSuccess(new UnaliasCommand(VALID_ALIAS_1.getAliasName()), model,","lastModifiedDate":"2021-04-08"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"                String.format(UnaliasCommand.MESSAGE_SUCCESS, VALID_ALIAS_1.getAliasName()), expectedModel);","lastModifiedDate":"2021-04-08"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-04-08"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"cnlinh":62}},{"path":"src/test/java/seedu/address/logic/commands/issue/AddIssueCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.ModelStub;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"import seedu.address.testutil.issue.IssueBuilder;","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"public class AddIssueCommandTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    public void constructor_nullIssue_throwsNullPointerException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddIssueCommand(null));","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"    public void execute_nullModel_throwsNullPointerException() throws Exception {","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"        Issue validIssue \u003d new IssueBuilder().build();","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddIssueCommand(validIssue).execute(null));","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"    public void execute_issueAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        ModelStubAcceptingIssueAdded modelStub \u003d new ModelStubAcceptingIssueAdded();","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"        Issue validIssue \u003d new IssueBuilder().build();","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"        CommandResult commandResult \u003d new AddIssueCommand(validIssue).execute(modelStub);","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"        assertEquals(String.format(AddIssueCommand.MESSAGE_SUCCESS, validIssue), commandResult.getFeedbackToUser());","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"        assertEquals(Arrays.asList(validIssue), modelStub.issuesAdded);","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"    public void execute_duplicateIssue_throwsCommandException() {","lastModifiedDate":"2021-04-01"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"        // First we create a issue and add that to the command. The command will eventually try to execute","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"        // by adding this issue to the model","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"        Issue validIssue \u003d new IssueBuilder().build();","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"        AddIssueCommand addIssueCommand \u003d new AddIssueCommand(validIssue);","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        // We create a model containing the same issue the command is going to try to add to the model","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"        ModelStub modelStub \u003d new ModelStubWithIssue(validIssue);","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"        // We see that (hopefully) the command raises an exception because the model already contains this issue","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"                AddIssueCommand.MESSAGE_DUPLICATE_ISSUE, () -\u003e addIssueCommand.execute(modelStub));","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"    public void equals() {","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"        Issue issue1 \u003d new IssueBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"                .withRoomNumber(\"10-011\")","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"        Issue issue2 \u003d new IssueBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"                .withRoomNumber(\"11-110\")","lastModifiedDate":"2021-04-01"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"        AddIssueCommand addIssue1Command \u003d new AddIssueCommand(issue1);","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"        AddIssueCommand addIssue2Command \u003d new AddIssueCommand(issue2);","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"        assertTrue(addIssue1Command.equals(addIssue1Command));","lastModifiedDate":"2021-03-31"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-31"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"        AddIssueCommand addIssue1CommandCopy \u003d new AddIssueCommand(issue1);","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"        assertTrue(addIssue1Command.equals(addIssue1CommandCopy));","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"        assertFalse(addIssue1Command.equals(1));","lastModifiedDate":"2021-03-31"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"        assertFalse(addIssue1Command.equals(null));","lastModifiedDate":"2021-03-31"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"        // different issue -\u003e return false","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"        assertFalse(addIssue1Command.equals(addIssue2Command));","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"     * A Model stub that contains a single issue.","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"    private class ModelStubWithIssue extends ModelStub {","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"        private final Issue issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"        ModelStubWithIssue(Issue issue) {","lastModifiedDate":"2021-03-31"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"            requireNonNull(issue);","lastModifiedDate":"2021-03-31"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"            this.issue \u003d issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"        @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"        public boolean hasIssue(Issue issue) {","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"            requireNonNull(issue);","lastModifiedDate":"2021-03-31"},{"lineNumber":104,"author":{"gitId":"stein414"},"content":"            return this.issue.equals(issue);","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"        public boolean hasRoom(seedu.address.model.room.RoomNumber roomNumber) {","lastModifiedDate":"2021-04-01"},{"lineNumber":109,"author":{"gitId":"stein414"},"content":"            return true;","lastModifiedDate":"2021-04-01"},{"lineNumber":110,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":111,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":112,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":114,"author":{"gitId":"stein414"},"content":"     * A Model stub that always accepts the issue being added.","lastModifiedDate":"2021-03-31"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":116,"author":{"gitId":"stein414"},"content":"    private class ModelStubAcceptingIssueAdded extends ModelStub {","lastModifiedDate":"2021-03-31"},{"lineNumber":117,"author":{"gitId":"stein414"},"content":"        final ArrayList\u003cIssue\u003e issuesAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-31"},{"lineNumber":118,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":119,"author":{"gitId":"stein414"},"content":"        @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":120,"author":{"gitId":"stein414"},"content":"        public boolean hasIssue(Issue issue) {","lastModifiedDate":"2021-03-31"},{"lineNumber":121,"author":{"gitId":"stein414"},"content":"            requireNonNull(issue);","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"stein414"},"content":"            return issuesAdded.stream().anyMatch(issue::equals);","lastModifiedDate":"2021-03-31"},{"lineNumber":123,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":124,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":125,"author":{"gitId":"stein414"},"content":"        @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":126,"author":{"gitId":"stein414"},"content":"        public void addIssue(Issue issue) {","lastModifiedDate":"2021-03-31"},{"lineNumber":127,"author":{"gitId":"stein414"},"content":"            requireNonNull(issue);","lastModifiedDate":"2021-03-31"},{"lineNumber":128,"author":{"gitId":"stein414"},"content":"            issuesAdded.add(issue);","lastModifiedDate":"2021-03-31"},{"lineNumber":129,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":130,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":131,"author":{"gitId":"stein414"},"content":"        @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":132,"author":{"gitId":"stein414"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-03-31"},{"lineNumber":133,"author":{"gitId":"stein414"},"content":"            return new AddressBook();","lastModifiedDate":"2021-03-31"},{"lineNumber":134,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":135,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":136,"author":{"gitId":"stein414"},"content":"        @Override","lastModifiedDate":"2021-03-31"},{"lineNumber":137,"author":{"gitId":"stein414"},"content":"        public void commitAddressBook() {","lastModifiedDate":"2021-03-31"},{"lineNumber":138,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":139,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":140,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":141,"author":{"gitId":"stein414"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":142,"author":{"gitId":"stein414"},"content":"        public boolean hasRoom(seedu.address.model.room.RoomNumber roomNumber) {","lastModifiedDate":"2021-04-01"},{"lineNumber":143,"author":{"gitId":"stein414"},"content":"            return true;","lastModifiedDate":"2021-04-01"},{"lineNumber":144,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":145,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":146,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"stein414":146}},{"path":"src/test/java/seedu/address/logic/commands/issue/CloseIssueCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.showIssueAtIndex;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":" * {@code CloseIssueCommand}.","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"public class CloseIssueCommandTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    public void execute_validIndexUnfilteredIssueList_success() {","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"        Issue issueToClose \u003d model.getFilteredIssueList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        CloseIssueCommand closeIssueCommand \u003d new CloseIssueCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        String expectedMessage \u003d String.format(CloseIssueCommand.MESSAGE_CLOSE_ISSUE_SUCCESS, issueToClose);","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        expectedModel.closeIssue(issueToClose);","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"        assertCommandSuccess(closeIssueCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"    public void execute_invalidIndexUnfilteredIssueList_throwsCommandException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredIssueList().size() + 1);","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"        CloseIssueCommand closeIssueCommand \u003d new CloseIssueCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"        assertCommandFailure(closeIssueCommand, model, Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"    public void execute_validIndexFilteredIssueList_success() {","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"        showIssueAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"        Issue issueToClose \u003d model.getFilteredIssueList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"        CloseIssueCommand closeIssueCommand \u003d new CloseIssueCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"        String expectedMessage \u003d String.format(CloseIssueCommand.MESSAGE_CLOSE_ISSUE_SUCCESS, issueToClose);","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"        expectedModel.closeIssue(issueToClose);","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"        showNoIssue(expectedModel);","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"        assertCommandSuccess(closeIssueCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"    public void execute_invalidIndexFilteredIssueList_throwsCommandException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"        showIssueAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getIssueList().size());","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"        CloseIssueCommand closeIssueCommand \u003d new CloseIssueCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-31"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"        assertCommandFailure(closeIssueCommand, model, Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-31"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"    public void equals() {","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"        CloseIssueCommand closeFirstCommand \u003d new CloseIssueCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-31"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"        CloseIssueCommand closeSecondCommand \u003d new CloseIssueCommand(INDEX_SECOND);","lastModifiedDate":"2021-03-31"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-31"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"        assertTrue(closeFirstCommand.equals(closeFirstCommand));","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"        CloseIssueCommand closeFirstCommandCopy \u003d new CloseIssueCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"        assertTrue(closeFirstCommand.equals(closeFirstCommandCopy));","lastModifiedDate":"2021-03-31"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"        assertFalse(closeFirstCommand.equals(1));","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"        assertFalse(closeFirstCommand.equals(null));","lastModifiedDate":"2021-03-31"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"        // different resident -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"        assertFalse(closeFirstCommand.equals(closeSecondCommand));","lastModifiedDate":"2021-03-31"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":104,"author":{"gitId":"stein414"},"content":"    private void showNoIssue(Model model) {","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"stein414"},"content":"        model.updateFilteredIssueList(p -\u003e false);","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"        assertTrue(model.getFilteredIssueList().isEmpty());","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":109,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"stein414":109}},{"path":"src/test/java/seedu/address/logic/commands/issue/DeleteIssueCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.showIssueAtIndex;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":" * {@code DeleteIssueCommand}.","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"public class DeleteIssueCommandTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    public void execute_validIndexUnfilteredIssueList_success() {","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"        Issue issueToDelete \u003d model.getFilteredIssueList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        DeleteIssueCommand deleteIssueCommand \u003d new DeleteIssueCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        String expectedMessage \u003d String.format(DeleteIssueCommand.MESSAGE_DELETE_ISSUE_SUCCESS, issueToDelete);","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        expectedModel.deleteIssue(issueToDelete);","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"        assertCommandSuccess(deleteIssueCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"    public void execute_invalidIndexUnfilteredIssueList_throwsCommandException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredIssueList().size() + 1);","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"        DeleteIssueCommand deleteIssueCommand \u003d new DeleteIssueCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"        assertCommandFailure(deleteIssueCommand, model, Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"    public void execute_validIndexFilteredIssueList_success() {","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"        showIssueAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"        Issue issueToDelete \u003d model.getFilteredIssueList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"        DeleteIssueCommand deleteIssueCommand \u003d new DeleteIssueCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"        String expectedMessage \u003d String.format(DeleteIssueCommand.MESSAGE_DELETE_ISSUE_SUCCESS, issueToDelete);","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"        expectedModel.deleteIssue(issueToDelete);","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"        showNoIssue(expectedModel);","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"        assertCommandSuccess(deleteIssueCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"    public void execute_invalidIndexFilteredIssueList_throwsCommandException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"        showIssueAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getIssueList().size());","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"        DeleteIssueCommand deleteIssueCommand \u003d new DeleteIssueCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-31"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"        assertCommandFailure(deleteIssueCommand, model, Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-31"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"    public void equals() {","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"        DeleteIssueCommand deleteFirstCommand \u003d new DeleteIssueCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-31"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"        DeleteIssueCommand deleteSecondCommand \u003d new DeleteIssueCommand(INDEX_SECOND);","lastModifiedDate":"2021-03-31"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-31"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"        DeleteIssueCommand deleteFirstCommandCopy \u003d new DeleteIssueCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2021-03-31"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2021-03-31"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"        // different resident -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2021-03-31"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":104,"author":{"gitId":"stein414"},"content":"    private void showNoIssue(Model model) {","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"stein414"},"content":"        model.updateFilteredIssueList(p -\u003e false);","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"        assertTrue(model.getFilteredIssueList().isEmpty());","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":109,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"stein414":109}},{"path":"src/test/java/seedu/address/logic/commands/issue/EditIssueCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.EditIssueCommand.EditIssueDescriptor;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.DESC_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.DESC_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.VALID_ISSUE_CATEGORY_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.VALID_ISSUE_DESCRIPTION_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.VALID_ISSUE_ROOM_NUMBER_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.VALID_ISSUE_STATUS_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.VALID_ISSUE_TIMESTAMP_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.showIssueAtIndex;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"import seedu.address.testutil.issue.EditIssueDescriptorBuilder;","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"import seedu.address.testutil.issue.IssueBuilder;","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditIssueCommand.","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"public class EditIssueCommandTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"    public void execute_allFieldsSpecifiedUnfilteredIssueList_success() {","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"        Issue issueToEdit \u003d model.getFilteredIssueList().get(0);","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"        Issue editedIssue \u003d new IssueBuilder(issueToEdit)","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"                .withRoomNumber(\"09-100\") // not using 11-110 as it will result in duplicate","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"                .withDescription(VALID_ISSUE_DESCRIPTION_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"                .withTimestamp(VALID_ISSUE_TIMESTAMP_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"                .withStatus(VALID_ISSUE_STATUS_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"                .withCategory(VALID_ISSUE_CATEGORY_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"        EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"                .withRoomNumber(\"09-100\")","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"                .withDescription(VALID_ISSUE_DESCRIPTION_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"                .withTimestamp(VALID_ISSUE_TIMESTAMP_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"                .withStatus(VALID_ISSUE_STATUS_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"                .withCategory(VALID_ISSUE_CATEGORY_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"        EditIssueCommand editIssueCommand \u003d new EditIssueCommand(INDEX_FIRST, descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"        String expectedMessage \u003d String.format(EditIssueCommand.MESSAGE_EDIT_ISSUE_SUCCESS, editedIssue);","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"        Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-04-01"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"                new AddressBook(model.getAddressBook()),","lastModifiedDate":"2021-04-01"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"                new UserPrefs());","lastModifiedDate":"2021-04-01"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"        expectedModel.setIssue(issueToEdit, editedIssue);","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"        assertCommandSuccess(editIssueCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"    public void execute_someFieldsSpecifiedUnfilteredIssueList_success() {","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"        Index indexLastIssue \u003d Index.fromOneBased(model.getFilteredIssueList().size());","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"        Issue lastIssue \u003d model.getFilteredIssueList().get(indexLastIssue.getZeroBased());","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"        IssueBuilder issueInList \u003d new IssueBuilder(lastIssue);","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"        Issue editedIssue \u003d issueInList","lastModifiedDate":"2021-03-31"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"                .withDescription(VALID_ISSUE_DESCRIPTION_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"                .withCategory(VALID_ISSUE_CATEGORY_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"        EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder(editedIssue)","lastModifiedDate":"2021-03-31"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"                .withDescription(VALID_ISSUE_DESCRIPTION_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"                .withCategory(VALID_ISSUE_CATEGORY_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"        EditIssueCommand editIssueCommand \u003d new EditIssueCommand(indexLastIssue, descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"        String expectedMessage \u003d String.format(EditIssueCommand.MESSAGE_EDIT_ISSUE_SUCCESS, editedIssue);","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-03-31"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"        expectedModel.setIssue(lastIssue, editedIssue);","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"        assertCommandSuccess(editIssueCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"    public void execute_noFieldSpecifiedUnfilteredIssueList_success() {","lastModifiedDate":"2021-03-31"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"        EditIssueCommand editIssueCommand \u003d new EditIssueCommand(INDEX_FIRST, new EditIssueDescriptor());","lastModifiedDate":"2021-03-31"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"        Issue editedIssue \u003d model.getFilteredIssueList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-31"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"        String expectedMessage \u003d String.format(EditIssueCommand.MESSAGE_EDIT_ISSUE_SUCCESS, editedIssue);","lastModifiedDate":"2021-03-31"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-03-31"},{"lineNumber":104,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"stein414"},"content":"        assertCommandSuccess(editIssueCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":109,"author":{"gitId":"stein414"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-03-31"},{"lineNumber":110,"author":{"gitId":"stein414"},"content":"        showIssueAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-31"},{"lineNumber":111,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":112,"author":{"gitId":"stein414"},"content":"        Issue issueInFilteredList \u003d model.getFilteredIssueList()","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"stein414"},"content":"                .get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-31"},{"lineNumber":114,"author":{"gitId":"stein414"},"content":"        Issue editedIssue \u003d new IssueBuilder(issueInFilteredList)","lastModifiedDate":"2021-03-31"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":"                .withRoomNumber(VALID_ISSUE_ROOM_NUMBER_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":116,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":117,"author":{"gitId":"stein414"},"content":"        EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":118,"author":{"gitId":"stein414"},"content":"                .withRoomNumber(VALID_ISSUE_ROOM_NUMBER_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":119,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":120,"author":{"gitId":"stein414"},"content":"        EditIssueCommand editIssueCommand \u003d new EditIssueCommand(INDEX_FIRST, descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":121,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"stein414"},"content":"        String expectedMessage \u003d String.format(EditIssueCommand.MESSAGE_EDIT_ISSUE_SUCCESS, editedIssue);","lastModifiedDate":"2021-03-31"},{"lineNumber":123,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":124,"author":{"gitId":"stein414"},"content":"        Model expectedModel \u003d new ModelManagerWithExistingRoom(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2021-04-01"},{"lineNumber":125,"author":{"gitId":"stein414"},"content":"                new UserPrefs());","lastModifiedDate":"2021-04-01"},{"lineNumber":126,"author":{"gitId":"stein414"},"content":"        expectedModel.setIssue(model.getFilteredIssueList().get(0), editedIssue);","lastModifiedDate":"2021-03-31"},{"lineNumber":127,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":128,"author":{"gitId":"stein414"},"content":"        assertCommandSuccess(editIssueCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-31"},{"lineNumber":129,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":130,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":131,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":132,"author":{"gitId":"stein414"},"content":"    public void execute_duplicateIssueFilteredList_failure() {","lastModifiedDate":"2021-03-31"},{"lineNumber":133,"author":{"gitId":"stein414"},"content":"        showIssueAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-31"},{"lineNumber":134,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":135,"author":{"gitId":"stein414"},"content":"        // edit issue in filtered list into a duplicate in address book","lastModifiedDate":"2021-03-31"},{"lineNumber":136,"author":{"gitId":"stein414"},"content":"        Issue issueInList \u003d model.getAddressBook().getIssueList().get(INDEX_SECOND.getZeroBased());","lastModifiedDate":"2021-03-31"},{"lineNumber":137,"author":{"gitId":"stein414"},"content":"        EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder(issueInList).build();","lastModifiedDate":"2021-03-31"},{"lineNumber":138,"author":{"gitId":"stein414"},"content":"        EditIssueCommand editIssueCommand \u003d new EditIssueCommand(INDEX_FIRST, descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":139,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":140,"author":{"gitId":"stein414"},"content":"        assertCommandFailure(editIssueCommand, model, EditIssueCommand.MESSAGE_DUPLICATE_ISSUE);","lastModifiedDate":"2021-03-31"},{"lineNumber":141,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":142,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":143,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":144,"author":{"gitId":"stein414"},"content":"    public void execute_invalidIssueIndexUnfilteredList_failure() {","lastModifiedDate":"2021-03-31"},{"lineNumber":145,"author":{"gitId":"stein414"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredIssueList().size() + 1);","lastModifiedDate":"2021-03-31"},{"lineNumber":146,"author":{"gitId":"stein414"},"content":"        EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":147,"author":{"gitId":"stein414"},"content":"                .withRoomNumber(VALID_ISSUE_ROOM_NUMBER_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":148,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":149,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":150,"author":{"gitId":"stein414"},"content":"        EditIssueCommand editIssueCommand \u003d new EditIssueCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":151,"author":{"gitId":"stein414"},"content":"        assertCommandFailure(editIssueCommand, model, Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-31"},{"lineNumber":152,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":153,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":154,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":155,"author":{"gitId":"stein414"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2021-03-31"},{"lineNumber":156,"author":{"gitId":"stein414"},"content":"     * but smaller than size of address book","lastModifiedDate":"2021-03-31"},{"lineNumber":157,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":158,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":159,"author":{"gitId":"stein414"},"content":"    public void execute_invalidIssueIndexFilteredList_failure() {","lastModifiedDate":"2021-03-31"},{"lineNumber":160,"author":{"gitId":"stein414"},"content":"        showIssueAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-31"},{"lineNumber":161,"author":{"gitId":"stein414"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;","lastModifiedDate":"2021-03-31"},{"lineNumber":162,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":163,"author":{"gitId":"stein414"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-03-31"},{"lineNumber":164,"author":{"gitId":"stein414"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getIssueList().size());","lastModifiedDate":"2021-03-31"},{"lineNumber":165,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":166,"author":{"gitId":"stein414"},"content":"        EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":167,"author":{"gitId":"stein414"},"content":"                .withRoomNumber(VALID_ISSUE_ROOM_NUMBER_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":168,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":169,"author":{"gitId":"stein414"},"content":"        EditIssueCommand editIssueCommand \u003d new EditIssueCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":170,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":171,"author":{"gitId":"stein414"},"content":"        assertCommandFailure(editIssueCommand, model, Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-31"},{"lineNumber":172,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":173,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":174,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":175,"author":{"gitId":"stein414"},"content":"    public void equals() {","lastModifiedDate":"2021-03-31"},{"lineNumber":176,"author":{"gitId":"stein414"},"content":"        final EditIssueCommand standardCommand \u003d new EditIssueCommand(INDEX_FIRST, DESC_11_110);","lastModifiedDate":"2021-04-01"},{"lineNumber":177,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":178,"author":{"gitId":"stein414"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-31"},{"lineNumber":179,"author":{"gitId":"stein414"},"content":"        EditIssueDescriptor copyDescriptor \u003d new EditIssueDescriptor(DESC_11_110);","lastModifiedDate":"2021-04-01"},{"lineNumber":180,"author":{"gitId":"stein414"},"content":"        EditIssueCommand commandWithSameValues \u003d new EditIssueCommand(INDEX_FIRST, copyDescriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":181,"author":{"gitId":"stein414"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-03-31"},{"lineNumber":182,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":183,"author":{"gitId":"stein414"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-31"},{"lineNumber":184,"author":{"gitId":"stein414"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-03-31"},{"lineNumber":185,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":186,"author":{"gitId":"stein414"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-03-31"},{"lineNumber":187,"author":{"gitId":"stein414"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-03-31"},{"lineNumber":188,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":189,"author":{"gitId":"stein414"},"content":"        // different types -\u003e return false;","lastModifiedDate":"2021-03-31"},{"lineNumber":190,"author":{"gitId":"stein414"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-03-31"},{"lineNumber":191,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":192,"author":{"gitId":"stein414"},"content":"        // different index -\u003e return false","lastModifiedDate":"2021-03-31"},{"lineNumber":193,"author":{"gitId":"stein414"},"content":"        assertFalse(standardCommand.equals(new EditIssueCommand(INDEX_SECOND, DESC_11_110)));","lastModifiedDate":"2021-04-01"},{"lineNumber":194,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":195,"author":{"gitId":"stein414"},"content":"        // different index -\u003e return false","lastModifiedDate":"2021-03-31"},{"lineNumber":196,"author":{"gitId":"stein414"},"content":"        assertFalse(standardCommand.equals(new EditIssueCommand(INDEX_FIRST, DESC_10_100)));","lastModifiedDate":"2021-03-31"},{"lineNumber":197,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":198,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":199,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":200,"author":{"gitId":"stein414"},"content":"     * A Model stub that definitely has the room the issue is being edited to","lastModifiedDate":"2021-04-01"},{"lineNumber":201,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":202,"author":{"gitId":"stein414"},"content":"    private class ModelManagerWithExistingRoom extends ModelManager {","lastModifiedDate":"2021-04-01"},{"lineNumber":203,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":204,"author":{"gitId":"stein414"},"content":"        public ModelManagerWithExistingRoom(AddressBook addressBook, UserPrefs userPrefs) {","lastModifiedDate":"2021-04-01"},{"lineNumber":205,"author":{"gitId":"stein414"},"content":"            super(addressBook, userPrefs);","lastModifiedDate":"2021-04-01"},{"lineNumber":206,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":207,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":208,"author":{"gitId":"stein414"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":209,"author":{"gitId":"stein414"},"content":"        public boolean hasRoom(seedu.address.model.room.RoomNumber roomNumber) {","lastModifiedDate":"2021-04-01"},{"lineNumber":210,"author":{"gitId":"stein414"},"content":"            return true;","lastModifiedDate":"2021-04-01"},{"lineNumber":211,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":212,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":213,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":214,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":215,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":216,"author":{"gitId":"stein414"},"content":"     * A Model stub that definitely DOES NOT has the room the issue is being edited to","lastModifiedDate":"2021-04-01"},{"lineNumber":217,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":218,"author":{"gitId":"stein414"},"content":"    private class ModelManagerWithNoExistingRoom extends ModelManager {","lastModifiedDate":"2021-04-01"},{"lineNumber":219,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":220,"author":{"gitId":"stein414"},"content":"        public ModelManagerWithNoExistingRoom(AddressBook addressBook, UserPrefs userPrefs) {","lastModifiedDate":"2021-04-01"},{"lineNumber":221,"author":{"gitId":"stein414"},"content":"            super(addressBook, userPrefs);","lastModifiedDate":"2021-04-01"},{"lineNumber":222,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":223,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":224,"author":{"gitId":"stein414"},"content":"        @Override","lastModifiedDate":"2021-04-01"},{"lineNumber":225,"author":{"gitId":"stein414"},"content":"        public boolean hasRoom(seedu.address.model.room.RoomNumber roomNumber) {","lastModifiedDate":"2021-04-01"},{"lineNumber":226,"author":{"gitId":"stein414"},"content":"            return false;","lastModifiedDate":"2021-04-01"},{"lineNumber":227,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-04-01"},{"lineNumber":228,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":229,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":230,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":231,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"stein414":231}},{"path":"src/test/java/seedu/address/logic/commands/issue/EditIssueDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.DESC_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.DESC_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.VALID_ISSUE_CATEGORY_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.VALID_ISSUE_DESCRIPTION_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.VALID_ISSUE_ROOM_NUMBER_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.VALID_ISSUE_STATUS_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.VALID_ISSUE_TIMESTAMP_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.EditIssueCommand.EditIssueDescriptor;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import seedu.address.testutil.issue.EditIssueDescriptorBuilder;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"public class EditIssueDescriptorTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    public void equals() {","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"        // Same values -\u003e return true","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"        EditIssueDescriptor descriptorWithSameValues \u003d new EditIssueDescriptor(DESC_10_100);","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"        assertTrue(DESC_10_100.equals(descriptorWithSameValues));","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"        // Same object -\u003e return true","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"        assertTrue(DESC_10_100.equals(DESC_10_100));","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        assertFalse(DESC_10_100.equals(null));","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"        // different types -\u003e return false","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        assertFalse(DESC_10_100.equals(5));","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        // different values -\u003e return false","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"        assertFalse(DESC_10_100.equals(DESC_11_110));","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        // tests for each of the different fields","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"        EditIssueDescriptor editedOne;","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"        // different room number -\u003e return false","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"        editedOne \u003d new EditIssueDescriptorBuilder(DESC_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"                .withRoomNumber(VALID_ISSUE_ROOM_NUMBER_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"        assertFalse(DESC_10_100.equals(editedOne));","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"        // different room number -\u003e return false","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"        editedOne \u003d new EditIssueDescriptorBuilder(DESC_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"                .withDescription(VALID_ISSUE_DESCRIPTION_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"        assertFalse(DESC_10_100.equals(editedOne));","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"        // different room number -\u003e return false","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        editedOne \u003d new EditIssueDescriptorBuilder(DESC_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"                .withTimestamp(VALID_ISSUE_TIMESTAMP_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"        assertFalse(DESC_10_100.equals(editedOne));","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"        // different room number -\u003e return false","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"        editedOne \u003d new EditIssueDescriptorBuilder(DESC_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"                .withStatus(VALID_ISSUE_STATUS_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"        assertFalse(DESC_10_100.equals(editedOne));","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"        // different room number -\u003e return false","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"        editedOne \u003d new EditIssueDescriptorBuilder(DESC_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"                .withCategory(VALID_ISSUE_CATEGORY_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"        assertFalse(DESC_10_100.equals(editedOne));","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"stein414":70}},{"path":"src/test/java/seedu/address/logic/commands/issue/IssueCommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.testutil.issue.EditIssueDescriptorBuilder;","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"public class IssueCommandTestUtil {","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    public static final String VALID_ISSUE_ROOM_NUMBER_10_100 \u003d \"10-100\";","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    public static final String VALID_ISSUE_DESCRIPTION_10_100 \u003d \"Broken table\";","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public static final String VALID_ISSUE_TIMESTAMP_10_100 \u003d \"2021/01/01 12:00pm\";","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    public static final String VALID_ISSUE_STATUS_10_100 \u003d \"pending\";","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    public static final String VALID_ISSUE_CATEGORY_10_100 \u003d \"Furniture\";","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"    public static final String VALID_ISSUE_ROOM_NUMBER_11_110 \u003d \"11-110\";","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"    public static final String VALID_ISSUE_DESCRIPTION_11_110 \u003d \"Flickering light\";","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"    public static final String VALID_ISSUE_TIMESTAMP_11_110 \u003d \"2021/03/20 08:35am\";","lastModifiedDate":"2021-04-08"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"    public static final String VALID_ISSUE_STATUS_11_110 \u003d \"closed\";","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    public static final String VALID_ISSUE_CATEGORY_11_110 \u003d \"Electrical\";","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"    public static final String ROOM_NUMBER_DESC_10_100 \u003d \" \" + PREFIX_ROOM_NUMBER + VALID_ISSUE_ROOM_NUMBER_10_100;","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"    public static final String DESCRIPTION_DESC_10_100 \u003d \" \" + PREFIX_DESCRIPTION + VALID_ISSUE_DESCRIPTION_10_100;","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    public static final String TIMESTAMP_DESC_10_100 \u003d \" \" + PREFIX_TIMESTAMP + VALID_ISSUE_TIMESTAMP_10_100;","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"    public static final String STATUS_DESC_10_100 \u003d \" \" + PREFIX_STATUS + VALID_ISSUE_STATUS_10_100;","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"    public static final String CATEGORY_DESC_10_100 \u003d \" \" + PREFIX_CATEGORY + VALID_ISSUE_CATEGORY_10_100;","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"    public static final String ROOM_NUMBER_DESC_11_110 \u003d \" \" + PREFIX_ROOM_NUMBER + VALID_ISSUE_ROOM_NUMBER_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"    public static final String DESCRIPTION_DESC_11_110 \u003d \" \" + PREFIX_DESCRIPTION + VALID_ISSUE_DESCRIPTION_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"    public static final String TIMESTAMP_DESC_11_110 \u003d \" \" + PREFIX_TIMESTAMP + VALID_ISSUE_TIMESTAMP_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"    public static final String STATUS_DESC_11_110 \u003d \" \" + PREFIX_STATUS + VALID_ISSUE_STATUS_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"    public static final String CATEGORY_DESC_11_110 \u003d \" \" + PREFIX_CATEGORY + VALID_ISSUE_CATEGORY_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"    public static final String INVALID_ROOM_NUMBER_DESC \u003d \" \" + PREFIX_ROOM_NUMBER + \"100-100\"; // extra floor digit","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \"\"; // empty description","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"    public static final String INVALID_TIMESTAMP_DESC \u003d \" \" + PREFIX_TIMESTAMP + \"2020/01/32 12:00pm\"; // invalid date","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"    public static final String INVALID_STATUS_DESC \u003d \" \" + PREFIX_STATUS + \"done\"; // done is invalid","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"    public static final String INVALID_CATEGORY_DESC \u003d \" \" + PREFIX_CATEGORY + \"@Furniture\"; // non alphanumerical","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"    public static final EditIssueCommand.EditIssueDescriptor DESC_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"    public static final EditIssueCommand.EditIssueDescriptor DESC_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"    static {","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        DESC_10_100 \u003d new EditIssueDescriptorBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"                .withRoomNumber(VALID_ISSUE_ROOM_NUMBER_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"                .withDescription(VALID_ISSUE_DESCRIPTION_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"                .withTimestamp(VALID_ISSUE_TIMESTAMP_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"                .withStatus(VALID_ISSUE_STATUS_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"                .withCategory(VALID_ISSUE_CATEGORY_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"        DESC_11_110 \u003d new EditIssueDescriptorBuilder()","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"                .withRoomNumber(VALID_ISSUE_ROOM_NUMBER_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"                .withDescription(VALID_ISSUE_DESCRIPTION_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"                .withTimestamp(VALID_ISSUE_TIMESTAMP_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"                .withStatus(VALID_ISSUE_STATUS_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"                .withCategory(VALID_ISSUE_CATEGORY_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"     * Updates {@code model}\u0027s filtered list to show only the issue at the given {@code targetIndex} in the","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"    public static void showIssueAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredIssueList().size());","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"        Issue issue \u003d model.getFilteredIssueList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"        model.updateFilteredIssueList((i) -\u003e i.equals(issue));","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"        assertEquals(1, model.getFilteredIssueList().size());","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"stein414":82}},{"path":"src/test/java/seedu/address/logic/commands/issue/ListIssueCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.commands.issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.showIssueAtIndex;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListIssueCommand.","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"public class ListIssueCommandTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"    private Model model;","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    private Model expectedModel;","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    @BeforeEach","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public void setUp() {","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"        assertCommandSuccess(new ListIssueCommand(), model, ListIssueCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"        showIssueAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"        assertCommandSuccess(new ListIssueCommand(), model, ListIssueCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"stein414":38}},{"path":"src/test/java/seedu/address/logic/commands/resident/AddResidentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.resident;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.ModelStub;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.ResidentBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"public class AddResidentCommandTest {","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"    public void constructor_nullResident_throwsNullPointerException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddResidentCommand(null));","lastModifiedDate":"2021-02-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"    public void execute_residentAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-03-05"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        ModelStubAcceptingResidentAdded modelStub \u003d new ModelStubAcceptingResidentAdded();","lastModifiedDate":"2021-03-05"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        Resident validResident \u003d new ResidentBuilder().build();","lastModifiedDate":"2021-03-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        CommandResult commandResult \u003d new AddResidentCommand(validResident).execute(modelStub);","lastModifiedDate":"2021-03-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"        assertEquals(String.format(AddResidentCommand.MESSAGE_SUCCESS, validResident),","lastModifiedDate":"2021-03-05"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"            commandResult.getFeedbackToUser());","lastModifiedDate":"2021-03-05"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"        assertEquals(Arrays.asList(validResident), modelStub.residentsAdded);","lastModifiedDate":"2021-03-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"    public void execute_duplicateResident_throwsCommandException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        Resident validResident \u003d new ResidentBuilder().build();","lastModifiedDate":"2021-03-05"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        AddResidentCommand addCommand \u003d new AddResidentCommand(validResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        ModelStub modelStub \u003d new ModelStubWithResident(validResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        assertThrows(CommandException.class, AddResidentCommand.MESSAGE_DUPLICATE_RESIDENT, () -\u003e","lastModifiedDate":"2021-03-05"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"                addCommand.execute(modelStub));","lastModifiedDate":"2021-02-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        Resident alice \u003d new ResidentBuilder().withName(\"Alice\").build();","lastModifiedDate":"2021-03-05"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        Resident bob \u003d new ResidentBuilder().withName(\"Bob\").build();","lastModifiedDate":"2021-03-05"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        AddResidentCommand addAliceCommand \u003d new AddResidentCommand(alice);","lastModifiedDate":"2021-02-22"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"        AddResidentCommand addBobCommand \u003d new AddResidentCommand(bob);","lastModifiedDate":"2021-02-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"        AddResidentCommand addAliceCommandCopy \u003d new AddResidentCommand(alice);","lastModifiedDate":"2021-02-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"        // different resident -\u003e returns false","lastModifiedDate":"2021-03-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"     * A Model stub that contains a single resident.","lastModifiedDate":"2021-03-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"    private class ModelStubWithResident extends ModelStub {","lastModifiedDate":"2021-03-05"},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":"        private final Resident resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"        ModelStubWithResident(Resident resident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"            requireNonNull(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"            this.resident \u003d resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"        public boolean hasResident(Resident resident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"            requireNonNull(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"            return this.resident.isSameResident(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"     * A Model stub that always accept the resident being added.","lastModifiedDate":"2021-03-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"    private class ModelStubAcceptingResidentAdded extends ModelStub {","lastModifiedDate":"2021-03-05"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"        final ArrayList\u003cResident\u003e residentsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"        public boolean hasResident(Resident resident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"            requireNonNull(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"            return residentsAdded.stream().anyMatch(resident::isSameResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"        public void addResident(Resident resident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":108,"author":{"gitId":"colintkn"},"content":"            requireNonNull(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":109,"author":{"gitId":"colintkn"},"content":"            residentsAdded.add(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"colintkn":45,"-":73}},{"path":"src/test/java/seedu/address/logic/commands/resident/DeleteResidentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.resident;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showResidentAtIndex;","lastModifiedDate":"2021-03-05"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":" * {@code DeleteResidentCommand}.","lastModifiedDate":"2021-02-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"public class DeleteResidentCommandTest {","lastModifiedDate":"2021-02-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"        Resident residentToDelete \u003d model.getFilteredResidentList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        DeleteResidentCommand deleteResidentCommand \u003d new DeleteResidentCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(DeleteResidentCommand.MESSAGE_DELETE_RESIDENT_SUCCESS, residentToDelete);","lastModifiedDate":"2021-03-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        expectedModel.deleteResident(residentToDelete);","lastModifiedDate":"2021-03-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(deleteResidentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-02-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredResidentList().size() + 1);","lastModifiedDate":"2021-03-05"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        DeleteResidentCommand deleteResidentCommand \u003d new DeleteResidentCommand(outOfBoundIndex);","lastModifiedDate":"2021-02-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(deleteResidentCommand, model, Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        showResidentAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"        Resident residentToDelete \u003d model.getFilteredResidentList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"        DeleteResidentCommand deleteResidentCommand \u003d new DeleteResidentCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(DeleteResidentCommand.MESSAGE_DELETE_RESIDENT_SUCCESS, residentToDelete);","lastModifiedDate":"2021-03-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        expectedModel.deleteResident(residentToDelete);","lastModifiedDate":"2021-03-05"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"        showNoResident(expectedModel);","lastModifiedDate":"2021-03-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(deleteResidentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-02-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"        showResidentAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;","lastModifiedDate":"2021-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getResidentList().size());","lastModifiedDate":"2021-03-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"        DeleteResidentCommand deleteResidentCommand \u003d new DeleteResidentCommand(outOfBoundIndex);","lastModifiedDate":"2021-02-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(deleteResidentCommand, model, Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"        DeleteResidentCommand deleteFirstCommand \u003d new DeleteResidentCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"        DeleteResidentCommand deleteSecondCommand \u003d new DeleteResidentCommand(INDEX_SECOND);","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"        DeleteResidentCommand deleteFirstCommandCopy \u003d new DeleteResidentCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"        // different resident -\u003e returns false","lastModifiedDate":"2021-03-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"    private void showNoResident(Model model) {","lastModifiedDate":"2021-03-05"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"        model.updateFilteredResidentList(p -\u003e false);","lastModifiedDate":"2021-03-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"        assertTrue(model.getFilteredResidentList().isEmpty());","lastModifiedDate":"2021-03-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"colintkn":22,"-":74,"DrWala":13}},{"path":"src/test/java/seedu/address/logic/commands/resident/EditResidentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.resident;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showResidentAtIndex;","lastModifiedDate":"2021-03-05"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-05-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand.EditResidentDescriptor;","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.EditResidentDescriptorBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.ResidentBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditResidentCommand.","lastModifiedDate":"2021-02-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"public class EditResidentCommandTest {","lastModifiedDate":"2021-02-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        Resident editedResident \u003d new ResidentBuilder().build();","lastModifiedDate":"2021-03-05"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder(editedResident).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(INDEX_FIRST, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(EditResidentCommand.MESSAGE_EDIT_RESIDENT_SUCCESS, editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        expectedModel.setResident(model.getFilteredResidentList().get(0), editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(editResidentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-02-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        Index indexLastResident \u003d Index.fromOneBased(model.getFilteredResidentList().size());","lastModifiedDate":"2021-03-05"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        Resident lastResident \u003d model.getFilteredResidentList().get(indexLastResident.getZeroBased());","lastModifiedDate":"2021-03-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"        ResidentBuilder residentInList \u003d new ResidentBuilder(lastResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        Resident editedResident \u003d residentInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-03-05"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"                .build();","lastModifiedDate":"2021-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand.EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder()","lastModifiedDate":"2021-03-05"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"                .withName(VALID_NAME_BOB)","lastModifiedDate":"2021-03-05"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"                .withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-02-23"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(indexLastResident, descriptor);","lastModifiedDate":"2021-03-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(EditResidentCommand.MESSAGE_EDIT_RESIDENT_SUCCESS, editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"        expectedModel.setResident(lastResident, editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(editResidentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-02-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(INDEX_FIRST,","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"            new EditResidentCommand.EditResidentDescriptor());","lastModifiedDate":"2021-03-05"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"        Resident editedResident \u003d model.getFilteredResidentList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(EditResidentCommand.MESSAGE_EDIT_RESIDENT_SUCCESS, editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(editResidentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-02-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"        showResidentAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"        Resident residentInFilteredList \u003d model.getFilteredResidentList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"        Resident editedResident \u003d new ResidentBuilder(residentInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(INDEX_FIRST,","lastModifiedDate":"2021-03-20"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"                new EditResidentDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-03-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(EditResidentCommand.MESSAGE_EDIT_RESIDENT_SUCCESS, editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"        expectedModel.setResident(model.getFilteredResidentList().get(0), editedResident);","lastModifiedDate":"2021-03-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(editResidentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-02-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"    public void execute_duplicateResidentUnfilteredList_failure() {","lastModifiedDate":"2021-03-05"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":"        Resident firstResident \u003d model.getFilteredResidentList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder(firstResident).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(INDEX_SECOND, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(editResidentCommand, model, EditResidentCommand.MESSAGE_DUPLICATE_RESIDENT);","lastModifiedDate":"2021-03-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"colintkn"},"content":"    public void execute_duplicateResidentFilteredList_failure() {","lastModifiedDate":"2021-03-05"},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":"        showResidentAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":116,"author":{"gitId":"colintkn"},"content":"        // edit resident in filtered list into a duplicate in address book","lastModifiedDate":"2021-03-05"},{"lineNumber":117,"author":{"gitId":"DrWala"},"content":"        Resident residentInList \u003d model.getAddressBook().getResidentList().get(INDEX_SECOND.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":118,"author":{"gitId":"DrWala"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(INDEX_FIRST,","lastModifiedDate":"2021-03-20"},{"lineNumber":119,"author":{"gitId":"colintkn"},"content":"                new EditResidentDescriptorBuilder(residentInList).build());","lastModifiedDate":"2021-03-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(editResidentCommand, model, EditResidentCommand.MESSAGE_DUPLICATE_RESIDENT);","lastModifiedDate":"2021-03-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":125,"author":{"gitId":"colintkn"},"content":"    public void execute_invalidResidentIndexUnfilteredList_failure() {","lastModifiedDate":"2021-03-05"},{"lineNumber":126,"author":{"gitId":"colintkn"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredResidentList().size() + 1);","lastModifiedDate":"2021-03-05"},{"lineNumber":127,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand.EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder()","lastModifiedDate":"2021-03-05"},{"lineNumber":128,"author":{"gitId":"colintkn"},"content":"                .withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":129,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-02-22"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":131,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(editResidentCommand, model, Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":139,"author":{"gitId":"colintkn"},"content":"    public void execute_invalidResidentIndexFilteredList_failure() {","lastModifiedDate":"2021-03-05"},{"lineNumber":140,"author":{"gitId":"DrWala"},"content":"        showResidentAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":141,"author":{"gitId":"DrWala"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;","lastModifiedDate":"2021-03-20"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":143,"author":{"gitId":"colintkn"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getResidentList().size());","lastModifiedDate":"2021-03-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":145,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand editResidentCommand \u003d new EditResidentCommand(outOfBoundIndex,","lastModifiedDate":"2021-02-22"},{"lineNumber":146,"author":{"gitId":"colintkn"},"content":"                new EditResidentDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-03-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":148,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(editResidentCommand, model, Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"DrWala"},"content":"        final EditResidentCommand standardCommand \u003d new EditResidentCommand(INDEX_FIRST, DESC_AMY);","lastModifiedDate":"2021-03-20"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand.EditResidentDescriptor copyDescriptor \u003d new EditResidentDescriptor(DESC_AMY);","lastModifiedDate":"2021-03-05"},{"lineNumber":157,"author":{"gitId":"DrWala"},"content":"        EditResidentCommand commandWithSameValues \u003d new EditResidentCommand(INDEX_FIRST, copyDescriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"DrWala"},"content":"        assertFalse(standardCommand.equals(new EditResidentCommand(INDEX_SECOND, DESC_AMY)));","lastModifiedDate":"2021-03-20"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"DrWala"},"content":"        assertFalse(standardCommand.equals(new EditResidentCommand(INDEX_FIRST, DESC_BOB)));","lastModifiedDate":"2021-03-20"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"colintkn":53,"-":103,"DrWala":20}},{"path":"src/test/java/seedu/address/logic/commands/resident/EditResidentDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.resident;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.EditResidentDescriptorBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"public class EditResidentDescriptorTest {","lastModifiedDate":"2021-03-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand.EditResidentDescriptor descriptorWithSameValues \u003d new EditResidentCommand","lastModifiedDate":"2021-03-05"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"                .EditResidentDescriptor(DESC_AMY);","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand.EditResidentDescriptor editedAmy \u003d new EditResidentDescriptorBuilder(DESC_AMY)","lastModifiedDate":"2021-03-05"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"                .withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        editedAmy \u003d new EditResidentDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        editedAmy \u003d new EditResidentDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"colintkn":9,"-":40}},{"path":"src/test/java/seedu/address/logic/commands/resident/FindResidentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.resident;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_RESIDENTS_LISTED_OVERVIEW;","lastModifiedDate":"2021-03-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.CARL;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.ELLE;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.FIONA;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":" * Contains integration tests (interaction with the Model) for {@code FindResidentCommand}.","lastModifiedDate":"2021-02-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"public class FindResidentCommandTest {","lastModifiedDate":"2021-02-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand findFirstCommand \u003d new FindResidentCommand(firstPredicate);","lastModifiedDate":"2021-02-22"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand findSecondCommand \u003d new FindResidentCommand(secondPredicate);","lastModifiedDate":"2021-02-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand findFirstCommandCopy \u003d new FindResidentCommand(firstPredicate);","lastModifiedDate":"2021-02-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        // different resident -\u003e returns false","lastModifiedDate":"2021-03-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"    public void execute_zeroKeywords_noResidentFound() {","lastModifiedDate":"2021-03-05"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RESIDENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-03-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand command \u003d new FindResidentCommand(predicate);","lastModifiedDate":"2021-02-22"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"        expectedModel.updateFilteredResidentList(predicate);","lastModifiedDate":"2021-03-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredResidentList());","lastModifiedDate":"2021-03-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"    public void execute_multipleKeywords_multipleResidentsFound() {","lastModifiedDate":"2021-03-05"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RESIDENTS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-03-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand command \u003d new FindResidentCommand(predicate);","lastModifiedDate":"2021-02-22"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"        expectedModel.updateFilteredResidentList(predicate);","lastModifiedDate":"2021-03-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredResidentList());","lastModifiedDate":"2021-03-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"colintkn":22,"-":60,"DrWala":1}},{"path":"src/test/java/seedu/address/logic/commands/resident/ListResidentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.resident;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showResidentAtIndex;","lastModifiedDate":"2021-03-05"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListResidentCommand.","lastModifiedDate":"2021-02-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"public class ListResidentCommandTest {","lastModifiedDate":"2021-02-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(new ListResidentCommand(), model, ListResidentCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-02-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        showResidentAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(new ListResidentCommand(), model, ListResidentCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-02-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"colintkn":6,"-":30,"DrWala":3}},{"path":"src/test/java/seedu/address/logic/commands/residentroom/AllocateResidentRoomCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.residentroom;","lastModifiedDate":"2021-04-06"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-04-06"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import static seedu.address.model.resident.Room.UNALLOCATED_REGEX;","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-04-06"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.AARON;","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.residentroom.TypicalResidentRooms.AARON_ROOM_NUMBER;","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.room.TypicalRooms.FIRST_ROOM;","lastModifiedDate":"2021-04-06"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-06"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-04-06"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-04-06"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-04-06"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-04-06"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-04-06"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-04-06"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.room.IsOccupied;","lastModifiedDate":"2021-04-06"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-04-06"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.ResidentBuilder;","lastModifiedDate":"2021-04-06"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.residentroom.ResidentRoomBuilder;","lastModifiedDate":"2021-04-06"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.room.RoomBuilder;","lastModifiedDate":"2021-04-06"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"/**","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":" * {@code DeleteResidentCommand}.","lastModifiedDate":"2021-04-06"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":" */","lastModifiedDate":"2021-04-06"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"public class AllocateResidentRoomCommandTest {","lastModifiedDate":"2021-04-06"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2021-04-06"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"    private ResidentRoom residentRoomToAdd \u003d new ResidentRoomBuilder(AARON_ROOM_NUMBER).build();","lastModifiedDate":"2021-04-06"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"    private Room roomAfterEdit \u003d FIRST_ROOM;","lastModifiedDate":"2021-04-06"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"    private Room roomBeforeEdit \u003d new RoomBuilder(FIRST_ROOM).withOccupancyStatus(IsOccupied.UNOCCUPIED).build();","lastModifiedDate":"2021-04-06"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    private Resident residentAfterEdit \u003d AARON;","lastModifiedDate":"2021-04-06"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"    private Resident residentBeforeEdit \u003d new ResidentBuilder(AARON).withRoom(UNALLOCATED_REGEX).build();","lastModifiedDate":"2021-04-06"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-06"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"    public void execute_validIndex_success() {","lastModifiedDate":"2021-04-06"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        // Setup the model before","lastModifiedDate":"2021-04-06"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"        model.addRoom(roomBeforeEdit);","lastModifiedDate":"2021-04-06"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        model.addResident(residentBeforeEdit);","lastModifiedDate":"2021-04-06"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        //Setup the model after","lastModifiedDate":"2021-04-06"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(AllocateResidentRoomCommand.MESSAGE_SUCCESS, residentRoomToAdd);","lastModifiedDate":"2021-04-06"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-04-06"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        expectedModel.addResident(residentAfterEdit);","lastModifiedDate":"2021-04-06"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        expectedModel.addRoom(roomAfterEdit);","lastModifiedDate":"2021-04-06"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        expectedModel.addResidentRoom(residentRoomToAdd);","lastModifiedDate":"2021-04-06"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"        AllocateResidentRoomCommand allocateResidentRoomCommand \u003d new","lastModifiedDate":"2021-04-06"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"                AllocateResidentRoomCommand(INDEX_FIRST, INDEX_FIRST);","lastModifiedDate":"2021-04-06"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(allocateResidentRoomCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-06"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-06"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"    public void execute_invalidIndex_throwsCommandException() {","lastModifiedDate":"2021-04-06"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredResidentList().size() + 1);","lastModifiedDate":"2021-04-06"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        DeallocateResidentRoomCommand deallocateResidentRoomCommand \u003d","lastModifiedDate":"2021-04-06"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"                new DeallocateResidentRoomCommand(outOfBoundIndex);","lastModifiedDate":"2021-04-06"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(deallocateResidentRoomCommand, model, Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-04-06"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-04-06"}],"authorContributionMap":{"colintkn":65}},{"path":"src/test/java/seedu/address/logic/commands/residentroom/DeallocateResidentRoomCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.commands.residentroom;","lastModifiedDate":"2021-04-05"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-04-05"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import static seedu.address.model.resident.Room.UNALLOCATED_REGEX;","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-04-05"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.AARON;","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.residentroom.TypicalResidentRooms.AARON_ROOM_NUMBER;","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.room.TypicalRooms.FIRST_ROOM;","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-05"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-04-05"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-04-05"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-04-05"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-04-05"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-04-05"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-04-05"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.room.IsOccupied;","lastModifiedDate":"2021-04-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-04-05"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.ResidentBuilder;","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.residentroom.ResidentRoomBuilder;","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.room.RoomBuilder;","lastModifiedDate":"2021-04-05"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"/**","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-04-05"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":" * {@code DeleteResidentCommand}.","lastModifiedDate":"2021-04-05"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":" */","lastModifiedDate":"2021-04-05"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"public class DeallocateResidentRoomCommandTest {","lastModifiedDate":"2021-04-05"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2021-04-05"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"    private ResidentRoom residentRoomToDelete \u003d new ResidentRoomBuilder(AARON_ROOM_NUMBER).build();","lastModifiedDate":"2021-04-05"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"    private Room roomBeforeEdit \u003d FIRST_ROOM;","lastModifiedDate":"2021-04-05"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"    private Room roomAfterEdit \u003d new RoomBuilder(FIRST_ROOM).withOccupancyStatus(IsOccupied.UNOCCUPIED).build();","lastModifiedDate":"2021-04-05"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    private Resident residentBeforeEdit \u003d AARON;","lastModifiedDate":"2021-04-05"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"    private Resident residentAfterEdit \u003d new ResidentBuilder(AARON).withRoom(UNALLOCATED_REGEX).build();","lastModifiedDate":"2021-04-05"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"    public void execute_validIndex_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        // Setup the model before","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"        model.addResidentRoom(residentRoomToDelete);","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        model.addRoom(roomBeforeEdit);","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        model.addResident(residentBeforeEdit);","lastModifiedDate":"2021-04-05"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        //Setup the model after","lastModifiedDate":"2021-04-05"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(DeallocateResidentRoomCommand.MESSAGE_SUCCESS, residentRoomToDelete);","lastModifiedDate":"2021-04-05"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-04-05"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        expectedModel.addResident(residentAfterEdit);","lastModifiedDate":"2021-04-05"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        expectedModel.addRoom(roomAfterEdit);","lastModifiedDate":"2021-04-05"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"        DeallocateResidentRoomCommand deallocateResidentRoomCommand \u003d new DeallocateResidentRoomCommand(INDEX_FIRST);","lastModifiedDate":"2021-04-05"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        assertCommandSuccess(deallocateResidentRoomCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"    public void execute_invalidIndex_throwsCommandException() {","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredResidentList().size() + 1);","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"        DeallocateResidentRoomCommand deallocateResidentRoomCommand \u003d","lastModifiedDate":"2021-04-05"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"                new DeallocateResidentRoomCommand(outOfBoundIndex);","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"        assertCommandFailure(deallocateResidentRoomCommand, model, Messages.MESSAGE_INVALID_RESIDENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-04-05"}],"authorContributionMap":{"colintkn":64}},{"path":"src/test/java/seedu/address/logic/commands/room/AddRoomCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.ModelStub;","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"import seedu.address.testutil.room.RoomBuilder;","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"public class AddRoomCommandTest {","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    public void constructor_nullRoom_throwsNullPointerException() {","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddRoomCommand(null));","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    public void execute_nullModel_throwsNullPointerException() throws Exception {","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        Room validRoom \u003d new RoomBuilder().build();","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddRoomCommand(validRoom).execute(null));","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    public void execute_roomAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        ModelStubAcceptingRoomAdded modelStub \u003d new ModelStubAcceptingRoomAdded();","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        Room validRoom \u003d new RoomBuilder().build();","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        CommandResult commandResult \u003d new AddRoomCommand(validRoom).execute(modelStub);","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        assertEquals(String.format(AddRoomCommand.MESSAGE_SUCCESS, validRoom), commandResult.getFeedbackToUser());","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        assertEquals(Arrays.asList(validRoom), modelStub.roomsAdded);","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"    public void execute_duplicateRooom_throwsCommandException() {","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        // First we create a room and add that to the command. The command will eventually try to execute","lastModifiedDate":"2021-03-13"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        // by adding this room to the model","lastModifiedDate":"2021-03-13"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"        Room validRoom \u003d new RoomBuilder().build();","lastModifiedDate":"2021-03-13"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        AddRoomCommand addRoomCommand \u003d new AddRoomCommand(validRoom);","lastModifiedDate":"2021-03-13"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        // We create a model containing the same room the command is going to try to add to the model","lastModifiedDate":"2021-03-13"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"        ModelStub modelStub \u003d new ModelStubWithRoom(validRoom);","lastModifiedDate":"2021-03-13"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"        // We see that (hopefully) the command raises an exception because the model already contains this room","lastModifiedDate":"2021-03-13"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-03-13"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"                AddRoomCommand.MESSAGE_DUPLICATE_ROOM, () -\u003e addRoomCommand.execute(modelStub));","lastModifiedDate":"2021-03-13"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-13"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"    public void equals() {","lastModifiedDate":"2021-03-13"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"        Room room1 \u003d new RoomBuilder().withRoomNumber(\"01-011\").build();","lastModifiedDate":"2021-03-13"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"        Room room2 \u003d new RoomBuilder().withRoomNumber(\"02-022\").build();","lastModifiedDate":"2021-03-13"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"        AddRoomCommand addRoom1Command \u003d new AddRoomCommand(room1);","lastModifiedDate":"2021-03-13"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"        AddRoomCommand addRoom2Command \u003d new AddRoomCommand(room2);","lastModifiedDate":"2021-03-13"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-13"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"        assertTrue(addRoom1Command.equals(addRoom1Command));","lastModifiedDate":"2021-03-13"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-13"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"        AddRoomCommand addRoom1CommandCopy \u003d new AddRoomCommand(room1);","lastModifiedDate":"2021-03-13"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"        assertTrue(addRoom1Command.equals(addRoom1CommandCopy));","lastModifiedDate":"2021-03-13"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-13"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"        assertFalse(addRoom1Command.equals(1));","lastModifiedDate":"2021-03-13"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-13"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"        assertFalse(addRoom1Command.equals(null));","lastModifiedDate":"2021-03-13"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"        // different room -\u003e return false","lastModifiedDate":"2021-03-13"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"        assertFalse(addRoom1Command.equals(addRoom2Command));","lastModifiedDate":"2021-03-13"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"     * A Model stub that contains a single room.","lastModifiedDate":"2021-03-13"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"    private class ModelStubWithRoom extends ModelStub {","lastModifiedDate":"2021-03-13"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"        private final Room room;","lastModifiedDate":"2021-03-13"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"        ModelStubWithRoom(Room room) {","lastModifiedDate":"2021-03-13"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"            requireNonNull(room);","lastModifiedDate":"2021-03-13"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"            this.room \u003d room;","lastModifiedDate":"2021-03-13"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"        @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"        public boolean hasRoom(Room room) {","lastModifiedDate":"2021-03-13"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"            requireNonNull(room);","lastModifiedDate":"2021-03-13"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"            return this.room.isSameRoom(room);","lastModifiedDate":"2021-03-13"},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":104,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":"     * A Model stub that always accepts the room being added.","lastModifiedDate":"2021-03-13"},{"lineNumber":106,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"    private class ModelStubAcceptingRoomAdded extends ModelStub {","lastModifiedDate":"2021-03-13"},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"        final ArrayList\u003cRoom\u003e roomsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-13"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":110,"author":{"gitId":"DrWala"},"content":"        @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":"        public boolean hasRoom(Room room) {","lastModifiedDate":"2021-03-13"},{"lineNumber":112,"author":{"gitId":"DrWala"},"content":"            requireNonNull(room);","lastModifiedDate":"2021-03-13"},{"lineNumber":113,"author":{"gitId":"DrWala"},"content":"            return roomsAdded.stream().anyMatch(room::isSameRoom);","lastModifiedDate":"2021-03-13"},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":115,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":116,"author":{"gitId":"DrWala"},"content":"        @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":117,"author":{"gitId":"DrWala"},"content":"        public void addRoom(Room room) {","lastModifiedDate":"2021-03-13"},{"lineNumber":118,"author":{"gitId":"DrWala"},"content":"            requireNonNull(room);","lastModifiedDate":"2021-03-13"},{"lineNumber":119,"author":{"gitId":"DrWala"},"content":"            roomsAdded.add(room);","lastModifiedDate":"2021-03-13"},{"lineNumber":120,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":121,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":122,"author":{"gitId":"benedictkhoomw"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":123,"author":{"gitId":"benedictkhoomw"},"content":"        public void commitAddressBook() {","lastModifiedDate":"2021-03-27"},{"lineNumber":124,"author":{"gitId":"benedictkhoomw"},"content":"            // called by {@code AddRoomCommand#execute()}","lastModifiedDate":"2021-03-27"},{"lineNumber":125,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":126,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":127,"author":{"gitId":"DrWala"},"content":"        @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":128,"author":{"gitId":"DrWala"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-03-13"},{"lineNumber":129,"author":{"gitId":"DrWala"},"content":"            return new AddressBook();","lastModifiedDate":"2021-03-13"},{"lineNumber":130,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":131,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":132,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"benedictkhoomw":5,"DrWala":127}},{"path":"src/test/java/seedu/address/logic/commands/room/DeleteRoomCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;","lastModifiedDate":"2021-03-20"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-20"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-20"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.room.RoomCommandTestUtil.showRoomAtIndex;","lastModifiedDate":"2021-03-20"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH;","lastModifiedDate":"2021-04-06"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":" * {@code DeleteRoomCommand}.","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"public class DeleteRoomCommandTest {","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    public void execute_validIndexUnfilteredRoomList_success() {","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        // Use 4th as its not tied to any issues in the test data","lastModifiedDate":"2021-04-06"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        Room roomToDelete \u003d model.getFilteredRoomList().get(INDEX_FOURTH.getZeroBased());","lastModifiedDate":"2021-04-06"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"        DeleteRoomCommand deleteRoomCommand \u003d new DeleteRoomCommand(INDEX_FOURTH);","lastModifiedDate":"2021-04-06"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        String expectedMessage \u003d String.format(DeleteRoomCommand.MESSAGE_DELETE_ROOM_SUCCESS, roomToDelete);","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"        expectedModel.deleteRoom(roomToDelete);","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        assertCommandSuccess(deleteRoomCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-20"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"    public void execute_invalidIndexUnfilteredRoomList_throwsCommandException() {","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRoomList().size() + 1);","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"        DeleteRoomCommand deleteRoomCommand \u003d new DeleteRoomCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        assertCommandFailure(deleteRoomCommand, model, Messages.MESSAGE_INVALID_ROOM_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-20"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"    public void execute_validIndexFilteredRoomList_success() {","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"        // Use 4th as its not tied to any issues in the test data","lastModifiedDate":"2021-04-06"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"        showRoomAtIndex(model, INDEX_FOURTH);","lastModifiedDate":"2021-04-06"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"        Room roomToDelete \u003d model.getFilteredRoomList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"        DeleteRoomCommand deleteRoomCommand \u003d new DeleteRoomCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"        String expectedMessage \u003d String.format(DeleteRoomCommand.MESSAGE_DELETE_ROOM_SUCCESS, roomToDelete);","lastModifiedDate":"2021-03-20"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-20"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"        expectedModel.deleteRoom(roomToDelete);","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"        showNoRoom(expectedModel);","lastModifiedDate":"2021-03-20"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"        assertCommandSuccess(deleteRoomCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-20"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"    public void execute_invalidIndexFilteredRoomList_throwsCommandException() {","lastModifiedDate":"2021-03-20"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"        showRoomAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;","lastModifiedDate":"2021-03-20"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-03-20"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getRoomList().size());","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"        DeleteRoomCommand deleteRoomCommand \u003d new DeleteRoomCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-20"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"        assertCommandFailure(deleteRoomCommand, model, Messages.MESSAGE_INVALID_ROOM_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-20"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"    public void equals() {","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"        DeleteRoomCommand deleteFirstCommand \u003d new DeleteRoomCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"        DeleteRoomCommand deleteSecondCommand \u003d new DeleteRoomCommand(INDEX_SECOND);","lastModifiedDate":"2021-03-20"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-20"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"        DeleteRoomCommand deleteFirstCommandCopy \u003d new DeleteRoomCommand(INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2021-03-20"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-20"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2021-03-20"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-20"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2021-03-20"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"        // different resident -\u003e returns false","lastModifiedDate":"2021-03-20"},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2021-03-20"},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":104,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-03-20"},{"lineNumber":106,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"    private void showNoRoom(Model model) {","lastModifiedDate":"2021-03-20"},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"        model.updateFilteredRoomList(p -\u003e false);","lastModifiedDate":"2021-03-20"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":110,"author":{"gitId":"DrWala"},"content":"        assertTrue(model.getFilteredRoomList().isEmpty());","lastModifiedDate":"2021-03-20"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":112,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"DrWala":112}},{"path":"src/test/java/seedu/address/logic/commands/room/EditRoomCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-20"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-20"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.room.EditRoomCommand.EditRoomDescriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.room.RoomCommandTestUtil.VALID_ROOM_DESCRIPTOR_ONE;","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.room.RoomCommandTestUtil.VALID_ROOM_DESCRIPTOR_TWO;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.room.RoomCommandTestUtil.VALID_ROOM_NUMBER_ONE;","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.room.RoomCommandTestUtil.VALID_ROOM_TYPES;","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.room.RoomCommandTestUtil.showRoomAtIndex;","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"import seedu.address.testutil.room.EditRoomDescriptorBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"import seedu.address.testutil.room.RoomBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditRoomCommand.","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"public class EditRoomCommandTest {","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    public void execute_allFieldsSpecifiedUnfilteredRoomList_success() {","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        Room roomToEdit \u003d model.getFilteredRoomList().get(0);","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        // Room we are changing to needs to maintain the occupancy status","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        // of the room we start with. So we pre-set it here.","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        Room editedRoom \u003d new RoomBuilder()","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"                // .withOccupancyStatus(roomToEdit.isOccupied().toString())","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"                .build();","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder(editedRoom).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"        EditRoomCommand editRoomCommand \u003d new EditRoomCommand(INDEX_FIRST, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        String expectedMessage \u003d String.format(EditRoomCommand.MESSAGE_EDIT_ROOM_SUCCESS, editedRoom);","lastModifiedDate":"2021-03-20"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        expectedModel.setRoom(roomToEdit, editedRoom);","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"        assertCommandSuccess(editRoomCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-20"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"    public void execute_someFieldsSpecifiedUnfilteredRoomList_success() {","lastModifiedDate":"2021-03-20"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"        Index indexLastRoom \u003d Index.fromOneBased(model.getFilteredRoomList().size());","lastModifiedDate":"2021-03-20"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"        Room lastRoom \u003d model.getFilteredRoomList().get(indexLastRoom.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"        RoomBuilder roomInList \u003d new RoomBuilder(lastRoom);","lastModifiedDate":"2021-03-20"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"        Room editedRoom \u003d roomInList","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"                .withRoomNumber(VALID_ROOM_NUMBER_ONE)","lastModifiedDate":"2021-03-20"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"                .withRoomType(VALID_ROOM_TYPES.get(0))","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"                .build();","lastModifiedDate":"2021-03-20"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"        EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder()","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"                .withRoomNumber(VALID_ROOM_NUMBER_ONE)","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"                .withRoomType(VALID_ROOM_TYPES.get(0))","lastModifiedDate":"2021-03-20"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"                .build();","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"        EditRoomCommand editRoomCommand \u003d new EditRoomCommand(indexLastRoom, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"        String expectedMessage \u003d String.format(EditRoomCommand.MESSAGE_EDIT_ROOM_SUCCESS, editedRoom);","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-03-20"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"        expectedModel.setRoom(lastRoom, editedRoom);","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"        assertCommandSuccess(editRoomCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"    public void execute_noFieldSpecifiedUnfilteredRoomList_success() {","lastModifiedDate":"2021-03-20"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"        EditRoomCommand editRoomCommand \u003d new EditRoomCommand(INDEX_FIRST,","lastModifiedDate":"2021-03-20"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"                new EditRoomDescriptor());","lastModifiedDate":"2021-03-20"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"        Room editedRoom \u003d model.getFilteredRoomList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"        String expectedMessage \u003d String.format(EditRoomCommand.MESSAGE_EDIT_ROOM_SUCCESS, editedRoom);","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-03-20"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"        assertCommandSuccess(editRoomCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-20"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-20"},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-03-20"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"        showRoomAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"        Room roomInFilteredList \u003d model.getFilteredRoomList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":"        Room editedRoom \u003d new RoomBuilder(roomInFilteredList).withRoomNumber(VALID_ROOM_NUMBER_ONE).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":"        EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder().withRoomNumber(VALID_ROOM_NUMBER_ONE).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"        EditRoomCommand editRoomCommand \u003d new EditRoomCommand(INDEX_FIRST, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":104,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":"        String expectedMessage \u003d String.format(EditRoomCommand.MESSAGE_EDIT_ROOM_SUCCESS, editedRoom);","lastModifiedDate":"2021-03-20"},{"lineNumber":106,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-03-20"},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"        expectedModel.setRoom(model.getFilteredRoomList().get(0), editedRoom);","lastModifiedDate":"2021-03-20"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":110,"author":{"gitId":"DrWala"},"content":"        assertCommandSuccess(editRoomCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-20"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":112,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":113,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-20"},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":"    public void execute_duplicateRoomUnfilteredList_failure() {","lastModifiedDate":"2021-03-20"},{"lineNumber":115,"author":{"gitId":"DrWala"},"content":"        Room firstRoom \u003d model.getFilteredRoomList().get(INDEX_FIRST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":116,"author":{"gitId":"DrWala"},"content":"        EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder(firstRoom).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":117,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":118,"author":{"gitId":"DrWala"},"content":"        // Edit the second room to become the same as the first room","lastModifiedDate":"2021-03-20"},{"lineNumber":119,"author":{"gitId":"DrWala"},"content":"        // This will cause a duplicate","lastModifiedDate":"2021-03-20"},{"lineNumber":120,"author":{"gitId":"DrWala"},"content":"        EditRoomCommand editRoomCommand \u003d new EditRoomCommand(INDEX_SECOND, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":121,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":122,"author":{"gitId":"DrWala"},"content":"        assertCommandFailure(editRoomCommand, model, EditRoomCommand.MESSAGE_DUPLICATE_ROOM);","lastModifiedDate":"2021-03-20"},{"lineNumber":123,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":124,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":125,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-20"},{"lineNumber":126,"author":{"gitId":"DrWala"},"content":"    public void execute_duplicateRoomFilteredList_failure() {","lastModifiedDate":"2021-03-20"},{"lineNumber":127,"author":{"gitId":"DrWala"},"content":"        showRoomAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":128,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":129,"author":{"gitId":"DrWala"},"content":"        // edit room in filtered list into a duplicate in address book","lastModifiedDate":"2021-03-20"},{"lineNumber":130,"author":{"gitId":"DrWala"},"content":"        Room roomInList \u003d model.getAddressBook().getRoomList().get(INDEX_SECOND.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":131,"author":{"gitId":"DrWala"},"content":"        EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder(roomInList).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":132,"author":{"gitId":"DrWala"},"content":"        EditRoomCommand editRoomCommand \u003d new EditRoomCommand(INDEX_FIRST, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":133,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":134,"author":{"gitId":"DrWala"},"content":"        assertCommandFailure(editRoomCommand, model, EditRoomCommand.MESSAGE_DUPLICATE_ROOM);","lastModifiedDate":"2021-03-20"},{"lineNumber":135,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":136,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":137,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-20"},{"lineNumber":138,"author":{"gitId":"DrWala"},"content":"    public void execute_invalidRoomIndexUnfilteredList_failure() {","lastModifiedDate":"2021-03-20"},{"lineNumber":139,"author":{"gitId":"DrWala"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRoomList().size() + 1);","lastModifiedDate":"2021-03-20"},{"lineNumber":140,"author":{"gitId":"DrWala"},"content":"        EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder()","lastModifiedDate":"2021-03-20"},{"lineNumber":141,"author":{"gitId":"DrWala"},"content":"                .withRoomNumber(VALID_ROOM_NUMBER_ONE)","lastModifiedDate":"2021-03-20"},{"lineNumber":142,"author":{"gitId":"DrWala"},"content":"                .build();","lastModifiedDate":"2021-03-20"},{"lineNumber":143,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":144,"author":{"gitId":"DrWala"},"content":"        EditRoomCommand editRoomCommand \u003d new EditRoomCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":145,"author":{"gitId":"DrWala"},"content":"        assertCommandFailure(editRoomCommand, model, Messages.MESSAGE_INVALID_ROOM_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-20"},{"lineNumber":146,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":147,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":148,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":149,"author":{"gitId":"DrWala"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2021-03-20"},{"lineNumber":150,"author":{"gitId":"DrWala"},"content":"     * but smaller than size of address book","lastModifiedDate":"2021-03-20"},{"lineNumber":151,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":152,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-20"},{"lineNumber":153,"author":{"gitId":"DrWala"},"content":"    public void execute_invalidRoomIndexFilteredList_failure() {","lastModifiedDate":"2021-03-20"},{"lineNumber":154,"author":{"gitId":"DrWala"},"content":"        showRoomAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":155,"author":{"gitId":"DrWala"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;","lastModifiedDate":"2021-03-20"},{"lineNumber":156,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":157,"author":{"gitId":"DrWala"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-03-20"},{"lineNumber":158,"author":{"gitId":"DrWala"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getRoomList().size());","lastModifiedDate":"2021-03-20"},{"lineNumber":159,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":160,"author":{"gitId":"DrWala"},"content":"        EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder()","lastModifiedDate":"2021-03-20"},{"lineNumber":161,"author":{"gitId":"DrWala"},"content":"                .withRoomNumber(VALID_ROOM_NUMBER_ONE)","lastModifiedDate":"2021-03-20"},{"lineNumber":162,"author":{"gitId":"DrWala"},"content":"                .build();","lastModifiedDate":"2021-03-20"},{"lineNumber":163,"author":{"gitId":"DrWala"},"content":"        EditRoomCommand editRoomCommand \u003d new EditRoomCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":164,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":165,"author":{"gitId":"DrWala"},"content":"        assertCommandFailure(editRoomCommand, model, Messages.MESSAGE_INVALID_ROOM_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-20"},{"lineNumber":166,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":167,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":168,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-20"},{"lineNumber":169,"author":{"gitId":"DrWala"},"content":"    public void equals() {","lastModifiedDate":"2021-03-20"},{"lineNumber":170,"author":{"gitId":"DrWala"},"content":"        final EditRoomCommand standardCommand \u003d new EditRoomCommand(INDEX_FIRST, VALID_ROOM_DESCRIPTOR_ONE);","lastModifiedDate":"2021-03-20"},{"lineNumber":171,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":172,"author":{"gitId":"DrWala"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-20"},{"lineNumber":173,"author":{"gitId":"DrWala"},"content":"        EditRoomDescriptor copyDescriptor \u003d new EditRoomDescriptor(VALID_ROOM_DESCRIPTOR_ONE);","lastModifiedDate":"2021-03-20"},{"lineNumber":174,"author":{"gitId":"DrWala"},"content":"        EditRoomCommand commandWithSameValues \u003d new EditRoomCommand(INDEX_FIRST, copyDescriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":175,"author":{"gitId":"DrWala"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-03-20"},{"lineNumber":176,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":177,"author":{"gitId":"DrWala"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-20"},{"lineNumber":178,"author":{"gitId":"DrWala"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-03-20"},{"lineNumber":179,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":180,"author":{"gitId":"DrWala"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-03-20"},{"lineNumber":181,"author":{"gitId":"DrWala"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-03-20"},{"lineNumber":182,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":183,"author":{"gitId":"DrWala"},"content":"        // different types -\u003e return false;","lastModifiedDate":"2021-03-20"},{"lineNumber":184,"author":{"gitId":"DrWala"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-03-20"},{"lineNumber":185,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":186,"author":{"gitId":"DrWala"},"content":"        // different index -\u003e return false","lastModifiedDate":"2021-03-20"},{"lineNumber":187,"author":{"gitId":"DrWala"},"content":"        assertFalse(standardCommand.equals(new EditRoomCommand(INDEX_SECOND, VALID_ROOM_DESCRIPTOR_ONE)));","lastModifiedDate":"2021-03-20"},{"lineNumber":188,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":189,"author":{"gitId":"DrWala"},"content":"        // different index -\u003e return false","lastModifiedDate":"2021-03-20"},{"lineNumber":190,"author":{"gitId":"DrWala"},"content":"        assertFalse(standardCommand.equals(new EditRoomCommand(INDEX_FIRST, VALID_ROOM_DESCRIPTOR_TWO)));","lastModifiedDate":"2021-03-20"},{"lineNumber":191,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":192,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":193,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"colintkn":1,"DrWala":192}},{"path":"src/test/java/seedu/address/logic/commands/room/EditRoomDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.room.RoomCommandTestUtil.VALID_ROOM_DESCRIPTOR_ONE;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.room.RoomCommandTestUtil.VALID_ROOM_DESCRIPTOR_TWO;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.room.RoomCommandTestUtil.VALID_ROOM_TAGS;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.EditRoomCommand.EditRoomDescriptor;","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.testutil.room.EditRoomDescriptorBuilder;","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"public class EditRoomDescriptorTest {","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    public void equals() {","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"        // Same values -\u003e return true","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"        EditRoomDescriptor descriptorWithSameValues \u003d new EditRoomDescriptor(VALID_ROOM_DESCRIPTOR_ONE);","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"        assertTrue(VALID_ROOM_DESCRIPTOR_ONE.equals(descriptorWithSameValues));","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"        // Same object -\u003e return true","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"        assertTrue(VALID_ROOM_DESCRIPTOR_ONE.equals(VALID_ROOM_DESCRIPTOR_ONE));","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"        assertFalse(VALID_ROOM_DESCRIPTOR_ONE.equals(null));","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"        // different types -\u003e return false","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"        assertFalse(VALID_ROOM_DESCRIPTOR_ONE.equals(5));","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        // different values -\u003e return false","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"        assertFalse(VALID_ROOM_DESCRIPTOR_ONE.equals(VALID_ROOM_DESCRIPTOR_TWO));","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        // tests for each of the different fields","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"        EditRoomDescriptor editedOne;","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        // different room number -\u003e return false","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        editedOne \u003d new EditRoomDescriptorBuilder(VALID_ROOM_DESCRIPTOR_ONE)","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"                .withRoomNumber(\"08-121\")","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"                .build();","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        assertFalse(VALID_ROOM_DESCRIPTOR_ONE.equals(editedOne));","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        // different room type -\u003e return false","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        editedOne \u003d new EditRoomDescriptorBuilder(VALID_ROOM_DESCRIPTOR_ONE)","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"                .withRoomType(\"suite_non_ac\")","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"                .build();","lastModifiedDate":"2021-03-13"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        assertFalse(VALID_ROOM_DESCRIPTOR_ONE.equals(editedOne));","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        // different tags -\u003e return false","lastModifiedDate":"2021-03-13"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        editedOne \u003d new EditRoomDescriptorBuilder(VALID_ROOM_DESCRIPTOR_ONE)","lastModifiedDate":"2021-03-13"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"                .withTags(VALID_ROOM_TAGS)","lastModifiedDate":"2021-03-13"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"                .build();","lastModifiedDate":"2021-03-13"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        assertFalse(VALID_ROOM_DESCRIPTOR_ONE.equals(editedOne));","lastModifiedDate":"2021-03-13"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"DrWala":56}},{"path":"src/test/java/seedu/address/logic/commands/room/ListRoomCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;","lastModifiedDate":"2021-03-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-20"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.commands.room.RoomCommandTestUtil.showRoomAtIndex;","lastModifiedDate":"2021-03-20"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListResidentCommand.","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"public class ListRoomCommandTest {","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        assertCommandSuccess(new ListRoomCommand(), model, ListRoomCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"        showRoomAtIndex(model, INDEX_FIRST);","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        assertCommandSuccess(new ListRoomCommand(), model, ListRoomCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"-":29,"DrWala":9}},{"path":"src/test/java/seedu/address/logic/commands/room/RoomCommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.logic.commands.room;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-20"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-20"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import java.util.List;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import java.util.Random;","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomNumberOrTagsContainsKeywordsPredicate;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import seedu.address.testutil.room.EditRoomDescriptorBuilder;","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"public class RoomCommandTestUtil {","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    public static final String VALID_ROOM_NUMBER_ONE \u003d \"05-123\";","lastModifiedDate":"2021-04-03"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    public static final String VALID_ROOM_NUMBER_TWO \u003d \"15-123\";","lastModifiedDate":"2021-04-03"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    public static final String VALID_ROOM_NUMBER_THREE \u003d \"22-123\";","lastModifiedDate":"2021-04-03"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    public static final List\u003cString\u003e VALID_ROOM_TYPES \u003d new ArrayList\u003c\u003e(","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"            Arrays.asList(\"corridor_non_ac\", \"corridor_ac\", \"suite_non_ac\", \"suite_ac\"));","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    public static final List\u003cString\u003e VALID_ROOM_OCCUPANCIES \u003d new ArrayList\u003c\u003e(Arrays.asList(\"y\", \"n\"));","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    public static final String[] VALID_ROOM_TAGS \u003d new String[]{\"tag1\", \"tag2\"};","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    public static final List\u003cString\u003e INVALID_VALID_ROOM_NUMBERS \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"            \"00-100\", // Room numbers cannot begin with 001","lastModifiedDate":"2021-04-05"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"            \"a15-312\", // non number characters not allowed in room number","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"            \"123-123\", \"12-12\", \"1-1\", \"123-12\", \"12 123\" // room number format is dd-ddd","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    ));","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    public static final List\u003cString\u003e INVALID_ROOM_TYPES \u003d new ArrayList\u003c\u003e(","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"            Arrays.asList(\"corridor_no_ac\", \"not aircon\", \"suite non ac\", \"123123\", \"something else altogether\"));","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    public static final List\u003cString\u003e INVALID_ROOM_OCCUPANCIES \u003d new ArrayList\u003c\u003e(","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"            Arrays.asList(\"yes\", \"no\", \"true\", \"false\", \"something else altogether\"));","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    public static final EditRoomCommand.EditRoomDescriptor VALID_ROOM_DESCRIPTOR_ONE;","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    public static final EditRoomCommand.EditRoomDescriptor VALID_ROOM_DESCRIPTOR_TWO;","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"    public static final EditRoomCommand.EditRoomDescriptor VALID_ROOM_DESCRIPTOR_RANDOM;","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"    static {","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        Random random \u003d new Random();","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        // 15-312, corridor non ac, not occupied","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        VALID_ROOM_DESCRIPTOR_ONE \u003d new EditRoomDescriptorBuilder().withRoomNumber(VALID_ROOM_NUMBER_ONE)","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"                .withRoomType(VALID_ROOM_TYPES.get(0))","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"                .build();","lastModifiedDate":"2021-03-13"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"        // 12-322, corridor ac, occupied","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        VALID_ROOM_DESCRIPTOR_TWO \u003d new EditRoomDescriptorBuilder().withRoomNumber(VALID_ROOM_NUMBER_TWO)","lastModifiedDate":"2021-03-13"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"                .withRoomType(VALID_ROOM_TYPES.get(1))","lastModifiedDate":"2021-03-13"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"                .build();","lastModifiedDate":"2021-03-13"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        // Random build based on valid parameters","lastModifiedDate":"2021-03-13"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        VALID_ROOM_DESCRIPTOR_RANDOM \u003d new EditRoomDescriptorBuilder().withRoomNumber(VALID_ROOM_NUMBER_THREE)","lastModifiedDate":"2021-03-13"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"                // Pick a random valid room type, there are only 4","lastModifiedDate":"2021-03-13"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"                .withRoomType(VALID_ROOM_TYPES.get(random.nextInt(VALID_ROOM_TYPES.size())))","lastModifiedDate":"2021-03-13"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"                .build();","lastModifiedDate":"2021-03-13"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"     * Updates {@code model}\u0027s filtered list to show only the room at the given {@code targetIndex} in the","lastModifiedDate":"2021-03-20"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2021-03-20"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"    public static void showRoomAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredResidentList().size());","lastModifiedDate":"2021-03-20"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"        Room room \u003d model.getFilteredRoomList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"        final String[] splitName \u003d room.getRoomNumber().roomNumber.split(\"\\\\s+\");","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"        model.updateFilteredRoomList(new RoomNumberOrTagsContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"        assertEquals(1, model.getFilteredRoomList().size());","lastModifiedDate":"2021-03-20"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"DrWala":72}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESIDENT_INDEX;","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_INDEX;","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.commandhistory.ViewHistoryCommand;","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.DeleteResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand.EditResidentDescriptor;","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.FindResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.ListResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.ListUnallocatedResidentsCommand;","lastModifiedDate":"2021-04-04"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.residentroom.AllocateResidentRoomCommand;","lastModifiedDate":"2021-04-04"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.residentroom.DeallocateResidentRoomCommand;","lastModifiedDate":"2021-04-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-04-06"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-05"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.EditResidentDescriptorBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.ResidentBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.ResidentUtil;","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2021-04-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"    public void parseCommand_residentAdd() throws Exception {","lastModifiedDate":"2021-04-04"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        Resident resident \u003d new ResidentBuilder().build();","lastModifiedDate":"2021-03-05"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"        AddResidentCommand command \u003d (AddResidentCommand) parser.parseCommand(ResidentUtil.getAddCommand(resident),","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"                new AddressBook());","lastModifiedDate":"2021-04-06"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        assertEquals(new AddResidentCommand(resident), command);","lastModifiedDate":"2021-03-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, new AddressBook())","lastModifiedDate":"2021-04-06"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"                instanceof ClearCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\", new AddressBook())","lastModifiedDate":"2021-04-06"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"                instanceof ClearCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"    public void parseCommand_residentDelete() throws Exception {","lastModifiedDate":"2021-04-04"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"        DeleteResidentCommand command \u003d (DeleteResidentCommand) parser.parseCommand(","lastModifiedDate":"2021-02-22"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"                DeleteResidentCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"                        + INDEX_FIRST.getOneBased(), new AddressBook());","lastModifiedDate":"2021-04-06"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"        assertEquals(new DeleteResidentCommand(INDEX_FIRST), command);","lastModifiedDate":"2021-03-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"    public void parseCommand_residentEdit() throws Exception {","lastModifiedDate":"2021-04-04"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"        Resident resident \u003d new ResidentBuilder().build();","lastModifiedDate":"2021-03-05"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder(resident).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand command \u003d (EditResidentCommand) parser.parseCommand(EditResidentCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-02-22"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"                + INDEX_FIRST.getOneBased() + \" \"","lastModifiedDate":"2021-03-20"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"                + ResidentUtil.getEditResidentDescriptorDetails(descriptor), new AddressBook());","lastModifiedDate":"2021-04-06"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"        assertEquals(new EditResidentCommand(INDEX_FIRST, descriptor), command);","lastModifiedDate":"2021-03-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, new AddressBook())","lastModifiedDate":"2021-04-06"},{"lineNumber":80,"author":{"gitId":"cnlinh"},"content":"                instanceof ExitCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":81,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", new AddressBook())","lastModifiedDate":"2021-04-06"},{"lineNumber":82,"author":{"gitId":"cnlinh"},"content":"                instanceof ExitCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"    public void parseCommand_residentFind() throws Exception {","lastModifiedDate":"2021-04-04"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand command \u003d (FindResidentCommand) parser.parseCommand(","lastModifiedDate":"2021-02-22"},{"lineNumber":89,"author":{"gitId":"cnlinh"},"content":"                FindResidentCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-16"},{"lineNumber":90,"author":{"gitId":"cnlinh"},"content":"                        + keywords.stream().collect(Collectors.joining(\" \")), new AddressBook());","lastModifiedDate":"2021-04-06"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"        assertEquals(new FindResidentCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2021-02-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, new AddressBook())","lastModifiedDate":"2021-04-06"},{"lineNumber":97,"author":{"gitId":"cnlinh"},"content":"                instanceof HelpCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":98,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", new AddressBook())","lastModifiedDate":"2021-04-06"},{"lineNumber":99,"author":{"gitId":"cnlinh"},"content":"                instanceof HelpCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"    public void parseCommand_residentList() throws Exception {","lastModifiedDate":"2021-04-04"},{"lineNumber":104,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(ListResidentCommand.COMMAND_WORD, new AddressBook())","lastModifiedDate":"2021-04-06"},{"lineNumber":105,"author":{"gitId":"cnlinh"},"content":"                instanceof ListResidentCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":106,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(ListResidentCommand.COMMAND_WORD + \" 3\", new AddressBook())","lastModifiedDate":"2021-04-06"},{"lineNumber":107,"author":{"gitId":"cnlinh"},"content":"                instanceof ListResidentCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":110,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":111,"author":{"gitId":"benedictkhoomw"},"content":"    public void parseCommand_history() throws Exception {","lastModifiedDate":"2021-03-10"},{"lineNumber":112,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(ViewHistoryCommand.COMMAND_WORD, new AddressBook())","lastModifiedDate":"2021-04-06"},{"lineNumber":113,"author":{"gitId":"cnlinh"},"content":"                instanceof ViewHistoryCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":114,"author":{"gitId":"cnlinh"},"content":"        assertTrue(parser.parseCommand(ViewHistoryCommand.COMMAND_WORD + \" 3\", new AddressBook())","lastModifiedDate":"2021-04-06"},{"lineNumber":115,"author":{"gitId":"cnlinh"},"content":"                instanceof ViewHistoryCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":116,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":117,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":118,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-04"},{"lineNumber":119,"author":{"gitId":"colintkn"},"content":"    public void parseCommand_residentUnallocatedList() throws Exception {","lastModifiedDate":"2021-04-04"},{"lineNumber":120,"author":{"gitId":"colintkn"},"content":"        assertTrue(parser.parseCommand(ListUnallocatedResidentsCommand.COMMAND_WORD, new AddressBook())","lastModifiedDate":"2021-04-07"},{"lineNumber":121,"author":{"gitId":"colintkn"},"content":"                instanceof ListUnallocatedResidentsCommand);","lastModifiedDate":"2021-04-04"},{"lineNumber":122,"author":{"gitId":"colintkn"},"content":"        assertTrue(parser.parseCommand(ListUnallocatedResidentsCommand.COMMAND_WORD + \" 3\", new AddressBook())","lastModifiedDate":"2021-04-07"},{"lineNumber":123,"author":{"gitId":"colintkn"},"content":"                instanceof ListUnallocatedResidentsCommand);","lastModifiedDate":"2021-04-04"},{"lineNumber":124,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":125,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":126,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-04"},{"lineNumber":127,"author":{"gitId":"colintkn"},"content":"    public void parseCommand_residentAllocate() throws Exception {","lastModifiedDate":"2021-04-04"},{"lineNumber":128,"author":{"gitId":"colintkn"},"content":"        AllocateResidentRoomCommand command \u003d (AllocateResidentRoomCommand) parser.parseCommand(","lastModifiedDate":"2021-04-05"},{"lineNumber":129,"author":{"gitId":"colintkn"},"content":"                AllocateResidentRoomCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-04-05"},{"lineNumber":130,"author":{"gitId":"colintkn"},"content":"                        + PREFIX_RESIDENT_INDEX + INDEX_FIRST.getOneBased() + \" \"","lastModifiedDate":"2021-04-05"},{"lineNumber":131,"author":{"gitId":"colintkn"},"content":"                        + PREFIX_ROOM_INDEX + INDEX_FIRST.getOneBased(), new AddressBook());","lastModifiedDate":"2021-04-07"},{"lineNumber":132,"author":{"gitId":"colintkn"},"content":"        assertEquals(new AllocateResidentRoomCommand(INDEX_FIRST, INDEX_FIRST), command);","lastModifiedDate":"2021-04-05"},{"lineNumber":133,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":134,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":135,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":136,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-04"},{"lineNumber":137,"author":{"gitId":"colintkn"},"content":"    public void parseCommand_residentDeallocate() throws Exception {","lastModifiedDate":"2021-04-04"},{"lineNumber":138,"author":{"gitId":"colintkn"},"content":"        DeallocateResidentRoomCommand command \u003d (DeallocateResidentRoomCommand) parser.parseCommand(","lastModifiedDate":"2021-04-04"},{"lineNumber":139,"author":{"gitId":"colintkn"},"content":"                DeallocateResidentRoomCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-04-04"},{"lineNumber":140,"author":{"gitId":"colintkn"},"content":"                        + INDEX_FIRST.getOneBased(), new AddressBook());","lastModifiedDate":"2021-04-07"},{"lineNumber":141,"author":{"gitId":"colintkn"},"content":"        assertEquals(new DeallocateResidentRoomCommand(INDEX_FIRST), command);","lastModifiedDate":"2021-04-04"},{"lineNumber":142,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":143,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":144,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":148,"author":{"gitId":"cnlinh"},"content":"            -\u003e parser.parseCommand(\"\", new AddressBook()));","lastModifiedDate":"2021-04-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":153,"author":{"gitId":"cnlinh"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()","lastModifiedDate":"2021-03-16"},{"lineNumber":154,"author":{"gitId":"cnlinh"},"content":"            -\u003e parser.parseCommand(\"unknownCommand\", new AddressBook()));","lastModifiedDate":"2021-04-06"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"benedictkhoomw":5,"cnlinh":31,"colintkn":56,"-":60,"DrWala":4}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;","lastModifiedDate":"2021-03-05"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-05"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;","lastModifiedDate":"2021-03-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"colintkn":3,"-":108,"DrWala":3}},{"path":"src/test/java/seedu/address/logic/parser/ViewHistoryCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.commandhistory.ViewHistoryCommand;","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.parser.commandhistory.ViewHistoryCommandParser;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"public class ViewHistoryCommandParserTest {","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String VALID_ARG_FIVE \u003d \"5\";","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String VALID_ARG_TWENTY_TWO \u003d \"22\";","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String NO_ARG \u003d \"\";","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String INVALID_ARG_A \u003d \"A\";","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String INVALID_ARG_NEGATIVE \u003d \"-4\";","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String INVALID_ARG_ZERO \u003d \"0\";","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    private final ViewHistoryCommandParser parser \u003d new ViewHistoryCommandParser();","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        // invalid count: non-integer","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"        assertParseFailure(parser, INVALID_ARG_A,","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewHistoryCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"        // invalid count: zero","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        assertParseFailure(parser, INVALID_ARG_ZERO,","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewHistoryCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        // invalid count: negative","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"        assertParseFailure(parser, INVALID_ARG_NEGATIVE,","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewHistoryCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        // non-empty preamble","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY,","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewHistoryCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"    public void parse_optionalCountMissing_success() {","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        assertParseSuccess(parser, NO_ARG, new ViewHistoryCommand());","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"    public void parse_withValidCount_success() {","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        // valid count 1","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_ARG_FIVE,","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"                new ViewHistoryCommand(Integer.parseInt(VALID_ARG_FIVE)));","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"        // valid count 2","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_ARG_TWENTY_TWO,","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"                new ViewHistoryCommand(Integer.parseInt(VALID_ARG_TWENTY_TWO)));","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"benedictkhoomw":57}},{"path":"src/test/java/seedu/address/logic/parser/alias/AliasCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package seedu.address.logic.parser.alias;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_BOB;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.YEAR_DESC_BOB;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMAND;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.alias.AliasCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"public class AliasCommandParserTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    private final AliasCommandParser parser \u003d new AliasCommandParser();","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"        // valid alias name and basic command without parameters","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"                String.format(\" %sh %shelp\", PREFIX_ALIAS, PREFIX_COMMAND),","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"                new AliasCommand(new Alias(\"h\", \"help\")));","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"        // valid alias name and basic command with trailing parameters","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"                String.format(\" %sh %shelp a/parama b/paramb\", PREFIX_ALIAS, PREFIX_COMMAND),","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"                new AliasCommand(new Alias(\"h\", \"help a/parama b/paramb\")));","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"        // valid alias name and command that requires extra parameters","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"        assertParseSuccess(parser, String.format(\" %saddbob %sradd \"","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"                        + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + YEAR_DESC_BOB + ROOM_DESC_BOB,","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"                PREFIX_ALIAS, PREFIX_COMMAND),","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"                new AliasCommand(new Alias(\"addbob\", \"radd \"","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"                        + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + YEAR_DESC_BOB + ROOM_DESC_BOB)));","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"    public void parse_compulsoryFieldEmpty_failure() {","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"        // missing alias name and command","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"                String.format(\" %s %s\", PREFIX_ALIAS, PREFIX_COMMAND),","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"                Alias.MESSAGE_NAME_CONSTRAINTS);","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"        // missing command","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"                String.format(\" %sname %s\", PREFIX_ALIAS, PREFIX_COMMAND),","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"                Alias.MESSAGE_COMMAND_CONSTRAINTS);","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"        // missing alias name","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"                String.format(\" %s %scommand\", PREFIX_ALIAS, PREFIX_COMMAND),","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"                Alias.MESSAGE_NAME_CONSTRAINTS);","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AliasCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"        // missing alias name and command","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"                String.format(\" \"),","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"        // missing command","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"                String.format(\" %sname\", PREFIX_ALIAS),","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"        // missing alias name","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":"                String.format(\" %scommand\", PREFIX_COMMAND),","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-31"},{"lineNumber":77,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"cnlinh"},"content":"    public void parse_invalidAliasName_failure() {","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"cnlinh"},"content":"        // empty alias name","lastModifiedDate":"2021-03-31"},{"lineNumber":82,"author":{"gitId":"cnlinh"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":83,"author":{"gitId":"cnlinh"},"content":"                String.format(\" %s %scommand\", PREFIX_ALIAS, PREFIX_COMMAND),","lastModifiedDate":"2021-03-31"},{"lineNumber":84,"author":{"gitId":"cnlinh"},"content":"                Alias.MESSAGE_NAME_CONSTRAINTS);","lastModifiedDate":"2021-03-31"},{"lineNumber":85,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"cnlinh"},"content":"        // contains space","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"cnlinh"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"cnlinh"},"content":"                String.format(\" %sna me %scommand\", PREFIX_ALIAS, PREFIX_COMMAND),","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"cnlinh"},"content":"                Alias.MESSAGE_NAME_CONSTRAINTS);","lastModifiedDate":"2021-03-31"},{"lineNumber":90,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":91,"author":{"gitId":"cnlinh"},"content":"        // contains special character","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"cnlinh"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"cnlinh"},"content":"                String.format(\" %sn@me %scommand\", PREFIX_ALIAS, PREFIX_COMMAND),","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"cnlinh"},"content":"                Alias.MESSAGE_NAME_CONSTRAINTS);","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":96,"author":{"gitId":"cnlinh"},"content":"        // contains space and special character","lastModifiedDate":"2021-03-31"},{"lineNumber":97,"author":{"gitId":"cnlinh"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":98,"author":{"gitId":"cnlinh"},"content":"                String.format(\" %sn@ me %scommand\", PREFIX_ALIAS, PREFIX_COMMAND),","lastModifiedDate":"2021-03-31"},{"lineNumber":99,"author":{"gitId":"cnlinh"},"content":"                Alias.MESSAGE_NAME_CONSTRAINTS);","lastModifiedDate":"2021-03-31"},{"lineNumber":100,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":101,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":102,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"cnlinh"},"content":"    public void parse_invalidCommand_failure() {","lastModifiedDate":"2021-03-31"},{"lineNumber":104,"author":{"gitId":"cnlinh"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"cnlinh"},"content":"                String.format(\" %sname %s\", PREFIX_ALIAS, PREFIX_COMMAND),","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"cnlinh"},"content":"                Alias.MESSAGE_COMMAND_CONSTRAINTS);","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"cnlinh"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"cnlinh":108}},{"path":"src/test/java/seedu/address/logic/parser/alias/UnaliasCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package seedu.address.logic.parser.alias;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.alias.UnaliasCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"public class UnaliasCommandParserTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"    private final UnaliasCommandParser parser \u003d new UnaliasCommandParser();","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"        // alias name is present and valid","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"                String.format(\" %sname\", PREFIX_ALIAS),","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"                new UnaliasCommand(\"name\"));","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"        // alias name is present and has space","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"                String.format(\" %sna me\", PREFIX_ALIAS),","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"                new UnaliasCommand(\"na me\"));","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"        // alias name is present and has special character","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"                String.format(\" %sn@me\", PREFIX_ALIAS),","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"                new UnaliasCommand(\"n@me\"));","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"        // alias name is present and has space and special character","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"                String.format(\" %sn@ me\", PREFIX_ALIAS),","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"                new UnaliasCommand(\"n@ me\"));","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnaliasCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"        // missing alias name","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"                String.format(\" \"),","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"                String.format(\" %s\", PREFIX_ALIAS),","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"cnlinh":50}},{"path":"src/test/java/seedu/address/logic/parser/issue/AddIssueCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.parser.issue;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.CATEGORY_DESC_10_100;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.CATEGORY_DESC_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.DESCRIPTION_DESC_10_100;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.DESCRIPTION_DESC_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.INVALID_CATEGORY_DESC;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.INVALID_DESCRIPTION_DESC;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.INVALID_ROOM_NUMBER_DESC;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.INVALID_STATUS_DESC;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.INVALID_TIMESTAMP_DESC;","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.ROOM_NUMBER_DESC_10_100;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.ROOM_NUMBER_DESC_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.STATUS_DESC_10_100;","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.STATUS_DESC_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.TIMESTAMP_DESC_10_100;","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.TIMESTAMP_DESC_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.issue.TypicalIssues.ISSUE_10_100;","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.AddIssueCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Category;","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Description;","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.RoomNumber;","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Status;","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Timestamp;","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"import seedu.address.testutil.issue.IssueBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"public class AddIssueCommandParserTest {","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"    private AddIssueCommandParser parser \u003d new AddIssueCommandParser();","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"        Issue expectedIssue \u003d new IssueBuilder(ISSUE_10_100).build();","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"        // whitespace only preamble","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"                + ROOM_NUMBER_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"                + STATUS_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"                + CATEGORY_DESC_10_100,","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"                new AddIssueCommand(expectedIssue));","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"        // multiple room number - last room number accepted","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, ROOM_NUMBER_DESC_11_110","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"                + ROOM_NUMBER_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"                + STATUS_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"                + CATEGORY_DESC_10_100,","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"                new AddIssueCommand(expectedIssue));","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"        // multiple description - last description accepted","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"                + ROOM_NUMBER_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_11_110","lastModifiedDate":"2021-04-01"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"                + STATUS_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"                + CATEGORY_DESC_10_100,","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"                new AddIssueCommand(expectedIssue));","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"        // multiple timestamp - last timestamp accepted","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"                + ROOM_NUMBER_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_11_110","lastModifiedDate":"2021-04-01"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"                + STATUS_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"                + CATEGORY_DESC_10_100,","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"                new AddIssueCommand(expectedIssue));","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"        // multiple status - last year accepted","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"                + ROOM_NUMBER_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"                + STATUS_DESC_11_110","lastModifiedDate":"2021-04-01"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"                + STATUS_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"                + CATEGORY_DESC_10_100,","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"                new AddIssueCommand(expectedIssue));","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"        // multiple rooms - last room accepted","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"                + ROOM_NUMBER_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"                + STATUS_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"                + CATEGORY_DESC_11_110","lastModifiedDate":"2021-04-01"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"                + CATEGORY_DESC_10_100,","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"                new AddIssueCommand(expectedIssue));","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"stein414"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIssueCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-30"},{"lineNumber":105,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":"        // missing room number prefix","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"                DESCRIPTION_DESC_10_100,","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"stein414"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-30"},{"lineNumber":110,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"stein414"},"content":"        // missing description prefix","lastModifiedDate":"2021-03-30"},{"lineNumber":112,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-03-30"},{"lineNumber":113,"author":{"gitId":"stein414"},"content":"                ROOM_NUMBER_DESC_10_100,","lastModifiedDate":"2021-03-30"},{"lineNumber":114,"author":{"gitId":"stein414"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-30"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":116,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":117,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":118,"author":{"gitId":"stein414"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-03-30"},{"lineNumber":119,"author":{"gitId":"stein414"},"content":"        // invalid room number","lastModifiedDate":"2021-03-30"},{"lineNumber":120,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, INVALID_ROOM_NUMBER_DESC","lastModifiedDate":"2021-03-30"},{"lineNumber":121,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":122,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":123,"author":{"gitId":"stein414"},"content":"                + STATUS_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":124,"author":{"gitId":"stein414"},"content":"                + CATEGORY_DESC_10_100,","lastModifiedDate":"2021-03-30"},{"lineNumber":125,"author":{"gitId":"stein414"},"content":"                RoomNumber.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-30"},{"lineNumber":126,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":127,"author":{"gitId":"stein414"},"content":"        // invalid phone","lastModifiedDate":"2021-03-30"},{"lineNumber":128,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, ROOM_NUMBER_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":129,"author":{"gitId":"stein414"},"content":"                + INVALID_DESCRIPTION_DESC","lastModifiedDate":"2021-03-30"},{"lineNumber":130,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":131,"author":{"gitId":"stein414"},"content":"                + STATUS_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":132,"author":{"gitId":"stein414"},"content":"                + CATEGORY_DESC_10_100,","lastModifiedDate":"2021-03-30"},{"lineNumber":133,"author":{"gitId":"stein414"},"content":"                Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-30"},{"lineNumber":134,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":135,"author":{"gitId":"stein414"},"content":"        // invalid email","lastModifiedDate":"2021-03-30"},{"lineNumber":136,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, ROOM_NUMBER_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":137,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":138,"author":{"gitId":"stein414"},"content":"                + INVALID_TIMESTAMP_DESC","lastModifiedDate":"2021-03-30"},{"lineNumber":139,"author":{"gitId":"stein414"},"content":"                + STATUS_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":140,"author":{"gitId":"stein414"},"content":"                + CATEGORY_DESC_10_100,","lastModifiedDate":"2021-03-30"},{"lineNumber":141,"author":{"gitId":"stein414"},"content":"                Timestamp.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-30"},{"lineNumber":142,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":143,"author":{"gitId":"stein414"},"content":"        // invalid year","lastModifiedDate":"2021-03-30"},{"lineNumber":144,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, ROOM_NUMBER_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":145,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":146,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":147,"author":{"gitId":"stein414"},"content":"                + INVALID_STATUS_DESC","lastModifiedDate":"2021-03-30"},{"lineNumber":148,"author":{"gitId":"stein414"},"content":"                + CATEGORY_DESC_10_100,","lastModifiedDate":"2021-03-30"},{"lineNumber":149,"author":{"gitId":"stein414"},"content":"                Status.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-30"},{"lineNumber":150,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":151,"author":{"gitId":"stein414"},"content":"        // invalid room","lastModifiedDate":"2021-03-30"},{"lineNumber":152,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, ROOM_NUMBER_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":153,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":154,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":155,"author":{"gitId":"stein414"},"content":"                + STATUS_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":156,"author":{"gitId":"stein414"},"content":"                + INVALID_CATEGORY_DESC,","lastModifiedDate":"2021-03-30"},{"lineNumber":157,"author":{"gitId":"stein414"},"content":"                Category.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-30"},{"lineNumber":158,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":159,"author":{"gitId":"stein414"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2021-03-30"},{"lineNumber":160,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, INVALID_ROOM_NUMBER_DESC","lastModifiedDate":"2021-03-30"},{"lineNumber":161,"author":{"gitId":"stein414"},"content":"                + INVALID_DESCRIPTION_DESC","lastModifiedDate":"2021-03-30"},{"lineNumber":162,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":163,"author":{"gitId":"stein414"},"content":"                + STATUS_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":164,"author":{"gitId":"stein414"},"content":"                + CATEGORY_DESC_10_100,","lastModifiedDate":"2021-03-30"},{"lineNumber":165,"author":{"gitId":"stein414"},"content":"                RoomNumber.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-30"},{"lineNumber":166,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":167,"author":{"gitId":"stein414"},"content":"        // non-empty preamble","lastModifiedDate":"2021-03-30"},{"lineNumber":168,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY","lastModifiedDate":"2021-03-30"},{"lineNumber":169,"author":{"gitId":"stein414"},"content":"                + ROOM_NUMBER_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":170,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":171,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":172,"author":{"gitId":"stein414"},"content":"                + STATUS_DESC_10_100","lastModifiedDate":"2021-03-30"},{"lineNumber":173,"author":{"gitId":"stein414"},"content":"                + CATEGORY_DESC_10_100,","lastModifiedDate":"2021-03-30"},{"lineNumber":174,"author":{"gitId":"stein414"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIssueCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-30"},{"lineNumber":175,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":176,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"stein414":176}},{"path":"src/test/java/seedu/address/logic/parser/issue/CloseIssueCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.parser.issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.CloseIssueCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":" * Similar to DeleteIssueCommandParserTest","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"public class CloseIssueCommandParserTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    private CloseIssueCommandParser parser \u003d new CloseIssueCommandParser();","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    public void parse_validArgs_returnsCloseCommand() {","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, \"1\", new CloseIssueCommand(INDEX_FIRST));","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"                CloseIssueCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"stein414":29}},{"path":"src/test/java/seedu/address/logic/parser/issue/DeleteIssueCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.parser.issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.DeleteIssueCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":" * outside of the DeleteIssueCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":" * same path through the DeleteIssueCommand, and therefore we test only one of them.","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"public class DeleteIssueCommandParserTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    private DeleteIssueCommandParser parser \u003d new DeleteIssueCommandParser();","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, \"1\", new DeleteIssueCommand(INDEX_FIRST));","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"                DeleteIssueCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"stein414":10,"-":23}},{"path":"src/test/java/seedu/address/logic/parser/issue/EditIssueCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.parser.issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.CATEGORY_DESC_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.DESCRIPTION_DESC_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.DESCRIPTION_DESC_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.INVALID_CATEGORY_DESC;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.INVALID_DESCRIPTION_DESC;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.INVALID_ROOM_NUMBER_DESC;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.INVALID_STATUS_DESC;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.INVALID_TIMESTAMP_DESC;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.ROOM_NUMBER_DESC_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.STATUS_DESC_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.TIMESTAMP_DESC_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.TIMESTAMP_DESC_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.VALID_ISSUE_CATEGORY_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.VALID_ISSUE_DESCRIPTION_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.VALID_ISSUE_DESCRIPTION_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.VALID_ISSUE_ROOM_NUMBER_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.VALID_ISSUE_STATUS_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.VALID_ISSUE_TIMESTAMP_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.commands.issue.IssueCommandTestUtil.VALID_ISSUE_TIMESTAMP_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.EditIssueCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.EditIssueCommand.EditIssueDescriptor;","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Category;","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Description;","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.RoomNumber;","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Status;","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Timestamp;","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"import seedu.address.testutil.issue.EditIssueDescriptorBuilder;","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"public class EditIssueCommandParserTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"            EditIssueCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"    private EditIssueCommandParser parser \u003d new EditIssueCommandParser();","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"        // no index specified","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, ROOM_NUMBER_DESC_10_100, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"        // no field specified","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, \"1\", EditIssueCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"        // no index and no field specified","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"        // negative index","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, \"-5\" + ROOM_NUMBER_DESC_10_100, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"        // zero index","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, \"0\" + ROOM_NUMBER_DESC_10_100, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ROOM_NUMBER_DESC,","lastModifiedDate":"2021-03-31"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"                RoomNumber.MESSAGE_CONSTRAINTS); // invalid room number","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC,","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"                Description.MESSAGE_CONSTRAINTS); // invalid description","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TIMESTAMP_DESC, Timestamp.MESSAGE_CONSTRAINTS); // invalid timestamp","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, \"1\" + INVALID_STATUS_DESC, Status.MESSAGE_CONSTRAINTS); // invalid status","lastModifiedDate":"2021-03-31"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, \"1\" + INVALID_CATEGORY_DESC, Category.MESSAGE_CONSTRAINTS); // invalid category","lastModifiedDate":"2021-03-31"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"        // invalid description followed by valid status","lastModifiedDate":"2021-03-31"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"                \"1\" + INVALID_DESCRIPTION_DESC + STATUS_DESC_10_100,","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"                Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"        // valid status followed by invalid status. The test case for invalid status followed by valid status","lastModifiedDate":"2021-03-31"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2021-03-31"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, \"1\" + STATUS_DESC_10_100 + INVALID_STATUS_DESC, Status.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TIMESTAMP_DESC + INVALID_STATUS_DESC + INVALID_CATEGORY_DESC,","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"                Timestamp.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-31"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-03-31"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"        Index targetIndex \u003d INDEX_SECOND;","lastModifiedDate":"2021-03-31"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"        String userInput \u003d targetIndex.getOneBased()","lastModifiedDate":"2021-03-31"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"                + ROOM_NUMBER_DESC_10_100","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_10_100","lastModifiedDate":"2021-03-31"},{"lineNumber":104,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_10_100","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"stein414"},"content":"                + STATUS_DESC_10_100","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":"                + CATEGORY_DESC_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"        EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":109,"author":{"gitId":"stein414"},"content":"                .withRoomNumber(VALID_ISSUE_ROOM_NUMBER_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":110,"author":{"gitId":"stein414"},"content":"                .withDescription(VALID_ISSUE_DESCRIPTION_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":111,"author":{"gitId":"stein414"},"content":"                .withTimestamp(VALID_ISSUE_TIMESTAMP_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":112,"author":{"gitId":"stein414"},"content":"                .withStatus(VALID_ISSUE_STATUS_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"stein414"},"content":"                .withCategory(VALID_ISSUE_CATEGORY_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":114,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":"        EditIssueCommand expectedCommand \u003d new EditIssueCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":116,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":117,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-31"},{"lineNumber":118,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":119,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":120,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":121,"author":{"gitId":"stein414"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"stein414"},"content":"        Index targetIndex \u003d INDEX_FIRST;","lastModifiedDate":"2021-03-31"},{"lineNumber":123,"author":{"gitId":"stein414"},"content":"        String userInput \u003d targetIndex.getOneBased()","lastModifiedDate":"2021-03-31"},{"lineNumber":124,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_10_100","lastModifiedDate":"2021-03-31"},{"lineNumber":125,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":126,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":127,"author":{"gitId":"stein414"},"content":"        EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":128,"author":{"gitId":"stein414"},"content":"                .withDescription(VALID_ISSUE_DESCRIPTION_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":129,"author":{"gitId":"stein414"},"content":"                .withTimestamp(VALID_ISSUE_TIMESTAMP_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":130,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":131,"author":{"gitId":"stein414"},"content":"        EditIssueCommand expectedCommand \u003d new EditIssueCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":132,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":133,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-31"},{"lineNumber":134,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":135,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":136,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":137,"author":{"gitId":"stein414"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2021-03-31"},{"lineNumber":138,"author":{"gitId":"stein414"},"content":"        // room number","lastModifiedDate":"2021-03-31"},{"lineNumber":139,"author":{"gitId":"stein414"},"content":"        Index targetIndex \u003d INDEX_THIRD;","lastModifiedDate":"2021-03-31"},{"lineNumber":140,"author":{"gitId":"stein414"},"content":"        String userInput \u003d targetIndex.getOneBased() + ROOM_NUMBER_DESC_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":141,"author":{"gitId":"stein414"},"content":"        EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":142,"author":{"gitId":"stein414"},"content":"                .withRoomNumber(VALID_ISSUE_ROOM_NUMBER_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":143,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":144,"author":{"gitId":"stein414"},"content":"        EditIssueCommand expectedCommand \u003d new EditIssueCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":145,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-31"},{"lineNumber":146,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":147,"author":{"gitId":"stein414"},"content":"        // description","lastModifiedDate":"2021-03-31"},{"lineNumber":148,"author":{"gitId":"stein414"},"content":"        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":149,"author":{"gitId":"stein414"},"content":"        descriptor \u003d new EditIssueDescriptorBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":150,"author":{"gitId":"stein414"},"content":"                .withDescription(VALID_ISSUE_DESCRIPTION_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":151,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":152,"author":{"gitId":"stein414"},"content":"        expectedCommand \u003d new EditIssueCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":153,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-31"},{"lineNumber":154,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":155,"author":{"gitId":"stein414"},"content":"        // timestamp","lastModifiedDate":"2021-03-31"},{"lineNumber":156,"author":{"gitId":"stein414"},"content":"        userInput \u003d targetIndex.getOneBased() + TIMESTAMP_DESC_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":157,"author":{"gitId":"stein414"},"content":"        descriptor \u003d new EditIssueDescriptorBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":158,"author":{"gitId":"stein414"},"content":"                .withTimestamp(VALID_ISSUE_TIMESTAMP_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":159,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":160,"author":{"gitId":"stein414"},"content":"        expectedCommand \u003d new EditIssueCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":161,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-31"},{"lineNumber":162,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":163,"author":{"gitId":"stein414"},"content":"        // status","lastModifiedDate":"2021-03-31"},{"lineNumber":164,"author":{"gitId":"stein414"},"content":"        userInput \u003d targetIndex.getOneBased() + STATUS_DESC_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":165,"author":{"gitId":"stein414"},"content":"        descriptor \u003d new EditIssueDescriptorBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":166,"author":{"gitId":"stein414"},"content":"                .withStatus(VALID_ISSUE_STATUS_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":167,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":168,"author":{"gitId":"stein414"},"content":"        expectedCommand \u003d new EditIssueCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":169,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-31"},{"lineNumber":170,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":171,"author":{"gitId":"stein414"},"content":"        // category","lastModifiedDate":"2021-03-31"},{"lineNumber":172,"author":{"gitId":"stein414"},"content":"        userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":173,"author":{"gitId":"stein414"},"content":"        descriptor \u003d new EditIssueDescriptorBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":174,"author":{"gitId":"stein414"},"content":"                .withCategory(VALID_ISSUE_CATEGORY_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":175,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":176,"author":{"gitId":"stein414"},"content":"        expectedCommand \u003d new EditIssueCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":177,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-31"},{"lineNumber":178,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":179,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":180,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":181,"author":{"gitId":"stein414"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2021-03-31"},{"lineNumber":182,"author":{"gitId":"stein414"},"content":"        Index targetIndex \u003d INDEX_FIRST;","lastModifiedDate":"2021-03-31"},{"lineNumber":183,"author":{"gitId":"stein414"},"content":"        String userInput \u003d targetIndex.getOneBased()","lastModifiedDate":"2021-03-31"},{"lineNumber":184,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_10_100","lastModifiedDate":"2021-03-31"},{"lineNumber":185,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_10_100","lastModifiedDate":"2021-03-31"},{"lineNumber":186,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_10_100","lastModifiedDate":"2021-03-31"},{"lineNumber":187,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_10_100","lastModifiedDate":"2021-03-31"},{"lineNumber":188,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_11_110","lastModifiedDate":"2021-04-01"},{"lineNumber":189,"author":{"gitId":"stein414"},"content":"                + TIMESTAMP_DESC_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":190,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":191,"author":{"gitId":"stein414"},"content":"        EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":192,"author":{"gitId":"stein414"},"content":"                .withDescription(VALID_ISSUE_DESCRIPTION_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":193,"author":{"gitId":"stein414"},"content":"                .withTimestamp(VALID_ISSUE_TIMESTAMP_11_110)","lastModifiedDate":"2021-04-01"},{"lineNumber":194,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":195,"author":{"gitId":"stein414"},"content":"        EditIssueCommand expectedCommand \u003d new EditIssueCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":196,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":197,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-31"},{"lineNumber":198,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":199,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":200,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":201,"author":{"gitId":"stein414"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2021-03-31"},{"lineNumber":202,"author":{"gitId":"stein414"},"content":"        // no other valid values specified","lastModifiedDate":"2021-03-31"},{"lineNumber":203,"author":{"gitId":"stein414"},"content":"        Index targetIndex \u003d INDEX_FIRST;","lastModifiedDate":"2021-03-31"},{"lineNumber":204,"author":{"gitId":"stein414"},"content":"        String userInput \u003d targetIndex.getOneBased()","lastModifiedDate":"2021-03-31"},{"lineNumber":205,"author":{"gitId":"stein414"},"content":"                + INVALID_STATUS_DESC","lastModifiedDate":"2021-03-31"},{"lineNumber":206,"author":{"gitId":"stein414"},"content":"                + STATUS_DESC_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":207,"author":{"gitId":"stein414"},"content":"        EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":208,"author":{"gitId":"stein414"},"content":"                .withStatus(VALID_ISSUE_STATUS_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":209,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":210,"author":{"gitId":"stein414"},"content":"        EditIssueCommand expectedCommand \u003d new EditIssueCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":211,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-31"},{"lineNumber":212,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":213,"author":{"gitId":"stein414"},"content":"        // other valid values specified","lastModifiedDate":"2021-03-31"},{"lineNumber":214,"author":{"gitId":"stein414"},"content":"        userInput \u003d targetIndex.getOneBased()","lastModifiedDate":"2021-03-31"},{"lineNumber":215,"author":{"gitId":"stein414"},"content":"                + DESCRIPTION_DESC_10_100","lastModifiedDate":"2021-03-31"},{"lineNumber":216,"author":{"gitId":"stein414"},"content":"                + INVALID_CATEGORY_DESC","lastModifiedDate":"2021-03-31"},{"lineNumber":217,"author":{"gitId":"stein414"},"content":"                + CATEGORY_DESC_10_100;","lastModifiedDate":"2021-03-31"},{"lineNumber":218,"author":{"gitId":"stein414"},"content":"        descriptor \u003d new EditIssueDescriptorBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":219,"author":{"gitId":"stein414"},"content":"                .withDescription(VALID_ISSUE_DESCRIPTION_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":220,"author":{"gitId":"stein414"},"content":"                .withCategory(VALID_ISSUE_CATEGORY_10_100)","lastModifiedDate":"2021-03-31"},{"lineNumber":221,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":222,"author":{"gitId":"stein414"},"content":"        expectedCommand \u003d new EditIssueCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":223,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-31"},{"lineNumber":224,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":225,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"stein414":225}},{"path":"src/test/java/seedu/address/logic/parser/issue/FindIssueCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.logic.parser.issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.FindIssueCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.RoomNumberOrTagContainsKeywordsPredicate;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"public class FindIssueCommandParserTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    private FindIssueCommandParser parser \u003d new FindIssueCommandParser();","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"                FindIssueCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"        FindIssueCommand expectedFindIssueCommand \u003d new FindIssueCommand(","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"                new RoomNumberOrTagContainsKeywordsPredicate(Arrays.asList(\"10-\", \"20-\")));","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, \"10- 20-\", expectedFindIssueCommand);","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        assertParseSuccess(parser, \" \\n 10- \\n \\t 20-  \\t\", expectedFindIssueCommand);","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"stein414":35}},{"path":"src/test/java/seedu/address/logic/parser/resident/AddResidentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.parser.resident;","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_YEAR_DESC;","lastModifiedDate":"2021-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2017-12-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2017-12-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAR_BOB;","lastModifiedDate":"2021-03-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.YEAR_DESC_AMY;","lastModifiedDate":"2021-03-05"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.YEAR_DESC_BOB;","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.BOB;","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;","lastModifiedDate":"2021-03-05"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-05"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;","lastModifiedDate":"2021-03-05"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;","lastModifiedDate":"2021-03-05"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.ResidentBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"public class AddResidentCommandParserTest {","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"    private AddResidentCommandParser parser \u003d new AddResidentCommandParser();","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"        Resident expectedResident \u003d new ResidentBuilder(BOB).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-02-27"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB, new AddResidentCommand(expectedResident));","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-02-27"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB, new AddResidentCommand(expectedResident));","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-02-27"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB, new AddResidentCommand(expectedResident));","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2021-02-27"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB, new AddResidentCommand(expectedResident));","lastModifiedDate":"2021-03-26"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"        // multiple years - last year accepted","lastModifiedDate":"2021-03-05"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2021-03-05"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_AMY","lastModifiedDate":"2021-03-05"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB, new AddResidentCommand(expectedResident));","lastModifiedDate":"2021-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddResidentCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-02-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-02-27"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-03-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-02-27"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-03-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB","lastModifiedDate":"2021-02-27"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"                + YEAR_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-03-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"        // missing year prefix","lastModifiedDate":"2021-03-05"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB","lastModifiedDate":"2021-03-05"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"                + VALID_YEAR_BOB, expectedMessage);","lastModifiedDate":"2021-03-26"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB","lastModifiedDate":"2021-02-27"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"                + VALID_YEAR_BOB, expectedMessage);","lastModifiedDate":"2021-03-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-02-27"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"            + YEAR_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB","lastModifiedDate":"2021-02-27"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"            + YEAR_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC","lastModifiedDate":"2021-02-27"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"            + YEAR_DESC_BOB, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"        // invalid year","lastModifiedDate":"2021-03-05"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-03-05"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"            + INVALID_YEAR_DESC, Year.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-26"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":109,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + INVALID_EMAIL_DESC","lastModifiedDate":"2021-02-27"},{"lineNumber":110,"author":{"gitId":"colintkn"},"content":"            + YEAR_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":113,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-02-27"},{"lineNumber":114,"author":{"gitId":"colintkn"},"content":"            + YEAR_DESC_BOB, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddResidentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"colintkn":56,"-":60}},{"path":"src/test/java/seedu/address/logic/parser/resident/DeleteResidentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.parser.resident;","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.DeleteResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":" * outside of the DeleteResidentCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2021-02-22"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":" * same path through the DeleteResidentCommand, and therefore we test only one of them.","lastModifiedDate":"2021-02-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"public class DeleteResidentCommandParserTest {","lastModifiedDate":"2021-02-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    private DeleteResidentCommandParser parser \u003d new DeleteResidentCommandParser();","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"        assertParseSuccess(parser, \"1\", new DeleteResidentCommand(INDEX_FIRST));","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-02-22"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"            DeleteResidentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-02-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"colintkn":8,"-":23,"DrWala":2}},{"path":"src/test/java/seedu/address/logic/parser/resident/EditResidentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.parser.resident;","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-05-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand.EditResidentDescriptor;","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;","lastModifiedDate":"2021-03-05"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-05"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;","lastModifiedDate":"2021-03-05"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.EditResidentDescriptorBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"public class EditResidentCommandParserTest {","lastModifiedDate":"2021-02-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditResidentCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-02-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"    private EditResidentCommandParser parser \u003d new EditResidentCommandParser();","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, \"1\", EditResidentCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-02-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,","lastModifiedDate":"2021-02-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"        Index targetIndex \u003d INDEX_SECOND;","lastModifiedDate":"2021-03-20"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY + NAME_DESC_AMY;","lastModifiedDate":"2021-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-03-05"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2021-02-23"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand expectedCommand \u003d new EditResidentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-02-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"        Index targetIndex \u003d INDEX_FIRST;","lastModifiedDate":"2021-03-20"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-03-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand expectedCommand \u003d new EditResidentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-02-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":"        Index targetIndex \u003d INDEX_THIRD;","lastModifiedDate":"2021-03-20"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":113,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":114,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand expectedCommand \u003d new EditResidentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-02-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":119,"author":{"gitId":"colintkn"},"content":"        descriptor \u003d new EditResidentDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":120,"author":{"gitId":"colintkn"},"content":"        expectedCommand \u003d new EditResidentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-02-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":125,"author":{"gitId":"colintkn"},"content":"        descriptor \u003d new EditResidentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":126,"author":{"gitId":"colintkn"},"content":"        expectedCommand \u003d new EditResidentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-02-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":132,"author":{"gitId":"DrWala"},"content":"        Index targetIndex \u003d INDEX_FIRST;","lastModifiedDate":"2021-03-20"},{"lineNumber":133,"author":{"gitId":"colintkn"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2021-02-22"},{"lineNumber":134,"author":{"gitId":"colintkn"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2021-02-23"},{"lineNumber":135,"author":{"gitId":"colintkn"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB;","lastModifiedDate":"2021-02-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-03-05"},{"lineNumber":138,"author":{"gitId":"colintkn"},"content":"                .withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-02-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand expectedCommand \u003d new EditResidentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-02-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":148,"author":{"gitId":"DrWala"},"content":"        Index targetIndex \u003d INDEX_FIRST;","lastModifiedDate":"2021-03-20"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":150,"author":{"gitId":"colintkn"},"content":"        EditResidentDescriptor descriptor \u003d new EditResidentDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":151,"author":{"gitId":"colintkn"},"content":"        EditResidentCommand expectedCommand \u003d new EditResidentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-02-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"colintkn"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC","lastModifiedDate":"2021-02-22"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":157,"author":{"gitId":"colintkn"},"content":"        descriptor \u003d new EditResidentDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":158,"author":{"gitId":"colintkn"},"content":"        expectedCommand \u003d new EditResidentCommand(targetIndex, descriptor);","lastModifiedDate":"2021-02-22"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"colintkn":35,"-":118,"DrWala":8}},{"path":"src/test/java/seedu/address/logic/parser/resident/FindResidentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.parser.resident;","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.FindResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"public class FindResidentCommandParserTest {","lastModifiedDate":"2021-02-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"    private FindResidentCommandParser parser \u003d new FindResidentCommandParser();","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-02-22"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"            FindResidentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-02-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"        FindResidentCommand expectedFindResidentCommand \u003d","lastModifiedDate":"2021-02-22"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"                new FindResidentCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2021-02-22"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindResidentCommand);","lastModifiedDate":"2021-02-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindResidentCommand);","lastModifiedDate":"2021-02-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"colintkn":11,"-":24}},{"path":"src/test/java/seedu/address/logic/parser/residentroom/AllocateResidentRoomParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.parser.residentroom;","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROOM_DESC;","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESIDENT_INDEX;","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_INDEX;","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.residentroom.AllocateResidentRoomCommand;","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"public class AllocateResidentRoomParserTest {","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"    private static final String VALID_RESIDENT_INDEX_DESC \u003d \" \" + PREFIX_RESIDENT_INDEX + \" \" + \"1\";","lastModifiedDate":"2021-04-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"    private static final String VALID_RESIDENT_INDEX_DESC_2 \u003d \" \" + PREFIX_RESIDENT_INDEX + \" \" + \"2\";","lastModifiedDate":"2021-04-05"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    private static final String VALID_ROOM_INDEX_DESC \u003d \" \" + PREFIX_ROOM_INDEX + \" \" + \"1\";","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    private static final String VALID_ROOM_INDEX_DESC_2 \u003d \" \" + PREFIX_ROOM_INDEX + \" \" + \"2\";","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"    private static final String INVALID_RESIDENT_INDEX_DESC \u003d \" \" + PREFIX_RESIDENT_INDEX + \" \" + \"a\";","lastModifiedDate":"2021-04-05"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    private static final String INVALID_ROOM_INDEX_DESC \u003d \" \" + PREFIX_ROOM_INDEX + \" \" + \"a\";","lastModifiedDate":"2021-04-05"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"    private AllocateResidentRoomCommandParser parser \u003d new AllocateResidentRoomCommandParser();","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_RESIDENT_INDEX_DESC + VALID_ROOM_INDEX_DESC,","lastModifiedDate":"2021-04-05"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"                new AllocateResidentRoomCommand(INDEX_FIRST, INDEX_FIRST));","lastModifiedDate":"2021-04-05"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"        // multiple resident index - last index accepted","lastModifiedDate":"2021-04-05"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        assertParseSuccess(parser, VALID_RESIDENT_INDEX_DESC_2 + VALID_RESIDENT_INDEX_DESC","lastModifiedDate":"2021-04-05"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"                        + VALID_ROOM_INDEX_DESC, new AllocateResidentRoomCommand(INDEX_FIRST, INDEX_FIRST));","lastModifiedDate":"2021-04-05"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        // multiple room index - last index accepted","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"        assertParseSuccess(parser, VALID_RESIDENT_INDEX_DESC + VALID_ROOM_INDEX_DESC_2 + VALID_ROOM_INDEX_DESC,","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"                new AllocateResidentRoomCommand(INDEX_FIRST, INDEX_FIRST));","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-01"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-04-01"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-04-01"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"                AllocateResidentRoomCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-04-01"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"        // missing resident index prefix","lastModifiedDate":"2021-04-05"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, INDEX_FIRST + VALID_ROOM_INDEX_DESC, expectedMessage);","lastModifiedDate":"2021-04-05"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        // missing room index prefix","lastModifiedDate":"2021-04-05"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, VALID_RESIDENT_INDEX_DESC + \" \" + INDEX_FIRST, expectedMessage);","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"        // all prefixes missing","lastModifiedDate":"2021-04-01"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, INDEX_FIRST + \" \" + INDEX_FIRST, expectedMessage);","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-04-01"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"        // invalid resident index","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, INVALID_RESIDENT_INDEX_DESC + VALID_ROOM_INDEX_DESC,","lastModifiedDate":"2021-04-05"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AllocateResidentRoomCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-04-05"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"        // invalid room index","lastModifiedDate":"2021-04-05"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, VALID_RESIDENT_INDEX_DESC + INVALID_ROOM_INDEX_DESC,","lastModifiedDate":"2021-04-05"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AllocateResidentRoomCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-04-05"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"        // two invalid values, invalid command error","lastModifiedDate":"2021-04-05"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_ROOM_DESC,","lastModifiedDate":"2021-04-05"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AllocateResidentRoomCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-04-05"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"        // non-empty preamble","lastModifiedDate":"2021-04-01"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + VALID_RESIDENT_INDEX_DESC + VALID_ROOM_INDEX_DESC,","lastModifiedDate":"2021-04-05"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AllocateResidentRoomCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-04-01"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"colintkn":78}},{"path":"src/test/java/seedu/address/logic/parser/residentroom/DeallocateResidentRoomParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.logic.parser.residentroom;","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.residentroom.DeallocateResidentRoomCommand;","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"/**","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":" * outside of the DeallocateResidentRoomCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":" * same path through the DeallocateResidentRoomCommand, and therefore we test only one of them.","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":" */","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"public class DeallocateResidentRoomParserTest {","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"    private DeallocateResidentRoomCommandParser parser \u003d new DeallocateResidentRoomCommandParser();","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"    public void parse_validArgs_returnsDeallocateCommand() {","lastModifiedDate":"2021-04-05"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"        assertParseSuccess(parser, \"1\", new DeallocateResidentRoomCommand(INDEX_FIRST));","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"                DeallocateResidentRoomCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"colintkn":32}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.ALICE;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.residentroom.TypicalResidentRooms.ALICE_ROOM_NUMBER;","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;","lastModifiedDate":"2021-04-06"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.AliasMapping;","lastModifiedDate":"2021-04-06"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-04-04"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.exceptions.DuplicateResidentException;","lastModifiedDate":"2021-03-05"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-03-25"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.ResidentBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        assertEquals(Collections.emptyList(), addressBook.getResidentList());","lastModifiedDate":"2021-03-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"    public void resetData_withDuplicateResident_throwsDuplicateResidentException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        // Two residents with the same identity fields","lastModifiedDate":"2021-03-05"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        Resident editedAlice \u003d new ResidentBuilder(ALICE)","lastModifiedDate":"2021-03-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        List\u003cResident\u003e newResidents \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2021-03-05"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"        List\u003cRoom\u003e newRooms \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"        List\u003cIssue\u003e newIssues \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newResidents, newRooms, newIssues);","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"        assertThrows(DuplicateResidentException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2021-03-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"    public void hasResident_nullResident_throwsNullPointerException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasResident((Resident) null));","lastModifiedDate":"2021-03-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"    public void hasResident_residentNotInAddressBook_returnsFalse() {","lastModifiedDate":"2021-03-05"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"        assertFalse(addressBook.hasResident(ALICE));","lastModifiedDate":"2021-03-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"    public void hasResident_residentInAddressBook_returnsTrue() {","lastModifiedDate":"2021-03-05"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"        addressBook.addResident(ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"        assertTrue(addressBook.hasResident(ALICE));","lastModifiedDate":"2021-03-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"    public void hasResident_residentWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2021-03-05"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"        addressBook.addResident(ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"        Resident editedAlice \u003d new ResidentBuilder(ALICE)","lastModifiedDate":"2021-03-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"        assertTrue(addressBook.hasResident(editedAlice));","lastModifiedDate":"2021-03-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-04-04"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"    public void hasResident_nullName_throwsNullPointerException() {","lastModifiedDate":"2021-04-04"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasResident((Name) null));","lastModifiedDate":"2021-04-04"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-04"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"    public void hasResident_nameNotInAddressBook_returnsFalse() {","lastModifiedDate":"2021-04-04"},{"lineNumber":96,"author":{"gitId":"colintkn"},"content":"        assertFalse(addressBook.hasResident(ALICE.getName()));","lastModifiedDate":"2021-04-04"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-04"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"    public void hasResident_nameInAddressBook_returnsTrue() {","lastModifiedDate":"2021-04-04"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"        addressBook.addResident(ALICE);","lastModifiedDate":"2021-04-04"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"        assertTrue(addressBook.hasResident(ALICE.getName()));","lastModifiedDate":"2021-04-04"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-04"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"    public void hasBothResidentRoom_residentRoomInAddressBook_returnsTrue() {","lastModifiedDate":"2021-04-04"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"        addressBook.addResidentRoom(ALICE_ROOM_NUMBER);","lastModifiedDate":"2021-04-05"},{"lineNumber":108,"author":{"gitId":"colintkn"},"content":"        assertTrue(addressBook.hasBothResidentRoom(ALICE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":109,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":110,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":111,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-04"},{"lineNumber":112,"author":{"gitId":"colintkn"},"content":"    public void removeResidentRoom_residentRoomInAddressBook_returnsEqual() {","lastModifiedDate":"2021-04-04"},{"lineNumber":113,"author":{"gitId":"colintkn"},"content":"        addressBook.addResidentRoom(ALICE_ROOM_NUMBER);","lastModifiedDate":"2021-04-05"},{"lineNumber":114,"author":{"gitId":"colintkn"},"content":"        addressBook.removeResidentRoom(ALICE_ROOM_NUMBER);","lastModifiedDate":"2021-04-05"},{"lineNumber":115,"author":{"gitId":"colintkn"},"content":"        AddressBook removedAddressBook \u003d new AddressBook();","lastModifiedDate":"2021-04-04"},{"lineNumber":116,"author":{"gitId":"colintkn"},"content":"        assertEquals(addressBook, removedAddressBook);","lastModifiedDate":"2021-04-04"},{"lineNumber":117,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":118,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":120,"author":{"gitId":"colintkn"},"content":"    public void getResidentList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":121,"author":{"gitId":"colintkn"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getResidentList().remove(0));","lastModifiedDate":"2021-03-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":125,"author":{"gitId":"colintkn"},"content":"     * A stub ReadOnlyAddressBook whose residents list can violate interface constraints.","lastModifiedDate":"2021-03-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":128,"author":{"gitId":"colintkn"},"content":"        private final ObservableList\u003cResident\u003e residents \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-05"},{"lineNumber":129,"author":{"gitId":"DrWala"},"content":"        private final ObservableList\u003cRoom\u003e rooms \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-10"},{"lineNumber":130,"author":{"gitId":"stein414"},"content":"        private final ObservableList\u003cIssue\u003e issues \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-15"},{"lineNumber":131,"author":{"gitId":"colintkn"},"content":"        private final ObservableList\u003cResidentRoom\u003e residentRooms \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-25"},{"lineNumber":132,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":134,"author":{"gitId":"stein414"},"content":"        AddressBookStub(Collection\u003cResident\u003e residents, Collection\u003cRoom\u003e rooms, Collection\u003cIssue\u003e issues) {","lastModifiedDate":"2021-03-16"},{"lineNumber":135,"author":{"gitId":"colintkn"},"content":"            this.residents.setAll(residents);","lastModifiedDate":"2021-03-05"},{"lineNumber":136,"author":{"gitId":"stein414"},"content":"            this.rooms.setAll(rooms);","lastModifiedDate":"2021-03-16"},{"lineNumber":137,"author":{"gitId":"stein414"},"content":"            this.issues.setAll(issues);","lastModifiedDate":"2021-03-15"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":141,"author":{"gitId":"colintkn"},"content":"        public ObservableList\u003cResident\u003e getResidentList() {","lastModifiedDate":"2021-03-05"},{"lineNumber":142,"author":{"gitId":"colintkn"},"content":"            return residents;","lastModifiedDate":"2021-03-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":144,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":145,"author":{"gitId":"DrWala"},"content":"        @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":146,"author":{"gitId":"DrWala"},"content":"        public ObservableList\u003cRoom\u003e getRoomList() {","lastModifiedDate":"2021-03-10"},{"lineNumber":147,"author":{"gitId":"DrWala"},"content":"            return rooms;","lastModifiedDate":"2021-03-10"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":149,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":150,"author":{"gitId":"stein414"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":151,"author":{"gitId":"stein414"},"content":"        public ObservableList\u003cIssue\u003e getIssueList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":152,"author":{"gitId":"stein414"},"content":"            return issues;","lastModifiedDate":"2021-03-15"},{"lineNumber":153,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":154,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":155,"author":{"gitId":"colintkn"},"content":"        @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":156,"author":{"gitId":"colintkn"},"content":"        public ObservableList\u003cResidentRoom\u003e getResidentRoomList() {","lastModifiedDate":"2021-03-25"},{"lineNumber":157,"author":{"gitId":"colintkn"},"content":"            return residentRooms;","lastModifiedDate":"2021-03-25"},{"lineNumber":158,"author":{"gitId":"colintkn"},"content":"        }","lastModifiedDate":"2021-03-25"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":160,"author":{"gitId":"cnlinh"},"content":"        @Override","lastModifiedDate":"2021-04-06"},{"lineNumber":161,"author":{"gitId":"cnlinh"},"content":"        public boolean isRecursiveKeyword(String commandWord) {","lastModifiedDate":"2021-04-06"},{"lineNumber":162,"author":{"gitId":"cnlinh"},"content":"            return false;","lastModifiedDate":"2021-04-06"},{"lineNumber":163,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":164,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":165,"author":{"gitId":"cnlinh"},"content":"        @Override","lastModifiedDate":"2021-04-06"},{"lineNumber":166,"author":{"gitId":"cnlinh"},"content":"        public boolean isReservedKeyword(String aliasName) {","lastModifiedDate":"2021-04-06"},{"lineNumber":167,"author":{"gitId":"cnlinh"},"content":"            return false;","lastModifiedDate":"2021-04-06"},{"lineNumber":168,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":169,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":170,"author":{"gitId":"cnlinh"},"content":"        @Override","lastModifiedDate":"2021-04-06"},{"lineNumber":171,"author":{"gitId":"cnlinh"},"content":"        public AliasMapping getAliasMapping() {","lastModifiedDate":"2021-04-06"},{"lineNumber":172,"author":{"gitId":"cnlinh"},"content":"            return new AliasMapping();","lastModifiedDate":"2021-04-06"},{"lineNumber":173,"author":{"gitId":"cnlinh"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":174,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":175,"author":{"gitId":"cnlinh"},"content":"        @Override","lastModifiedDate":"2021-04-06"},{"lineNumber":176,"author":{"gitId":"cnlinh"},"content":"        public Alias getAlias(String aliasName) {","lastModifiedDate":"2021-04-06"},{"lineNumber":177,"author":{"gitId":"cnlinh"},"content":"            return new Alias(\"test\", \"test\");","lastModifiedDate":"2021-04-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2021-04-06"},{"lineNumber":181,"author":{"gitId":"cnlinh"},"content":"        public boolean containsAlias(String aliasName) {","lastModifiedDate":"2021-04-06"},{"lineNumber":182,"author":{"gitId":"cnlinh"},"content":"            return false;","lastModifiedDate":"2021-04-06"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"cnlinh":22,"stein414":14,"colintkn":67,"-":76,"DrWala":7}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RESIDENTS;","lastModifiedDate":"2021-03-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.ALICE;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.BENSON;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-05"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"    public void hasResident_nullResident_throwsNullPointerException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasResident((Resident) null));","lastModifiedDate":"2021-03-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"    public void hasResident_residentNotInAddressBook_returnsFalse() {","lastModifiedDate":"2021-03-05"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"        assertFalse(modelManager.hasResident(ALICE));","lastModifiedDate":"2021-03-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"    public void hasResident_residentInAddressBook_returnsTrue() {","lastModifiedDate":"2021-03-05"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"        modelManager.addResident(ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"        assertTrue(modelManager.hasResident(ALICE));","lastModifiedDate":"2021-03-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"    public void getFilteredResidentList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredResidentList().remove(0));","lastModifiedDate":"2021-03-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withResident(ALICE).withResident(BENSON).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":122,"author":{"gitId":"colintkn"},"content":"        modelManager.updateFilteredResidentList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2021-03-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":126,"author":{"gitId":"colintkn"},"content":"        modelManager.updateFilteredResidentList(PREDICATE_SHOW_ALL_RESIDENTS);","lastModifiedDate":"2021-03-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"colintkn":17,"-":116}},{"path":"src/test/java/seedu/address/model/commandhistory/CommandHistoryEntryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.model.commandhistory;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"public class CommandHistoryEntryTest {","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String NON_EMPTY_STRING_1 \u003d \"asd\";","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String NON_EMPTY_STRING_2 \u003d \"history 5\";","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    public void constructor_nonNull_doesNotThrow() {","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"        assertDoesNotThrow(() -\u003e new CommandHistoryEntry(EMPTY_STRING));","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"        assertDoesNotThrow(() -\u003e new CommandHistoryEntry(NON_EMPTY_STRING_1));","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(NullPointerException.class, () -\u003e new CommandHistoryEntry(null));","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    public void constructor_usesStringParameter() {","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(EMPTY_STRING, new CommandHistoryEntry(EMPTY_STRING).value);","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(NON_EMPTY_STRING_1, new CommandHistoryEntry(NON_EMPTY_STRING_1).value);","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(NON_EMPTY_STRING_2, new CommandHistoryEntry(NON_EMPTY_STRING_2).value);","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    public void equals_isEvaluatedByStringEquality() {","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(new CommandHistoryEntry(NON_EMPTY_STRING_1), new CommandHistoryEntry(NON_EMPTY_STRING_1));","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(new CommandHistoryEntry(NON_EMPTY_STRING_2), new CommandHistoryEntry(NON_EMPTY_STRING_2));","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        assertNotEquals(new CommandHistoryEntry(NON_EMPTY_STRING_1), new CommandHistoryEntry(NON_EMPTY_STRING_2));","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"benedictkhoomw":40}},{"path":"src/test/java/seedu/address/model/commandhistory/CommandHistoryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.model.commandhistory;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.List;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.testutil.TypicalCommandHistoryEntries;","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"public class CommandHistoryTest {","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    public void appendEntry_insertsAtEndOfHistory() {","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory commandHistory \u003d TypicalCommandHistoryEntries.getTypicalCommandHistory();","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"        final int originalSize \u003d commandHistory.size();","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"        final int numToTest \u003d 10;","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d originalSize; i \u003c originalSize + numToTest; i++) {","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"            CommandHistoryEntry randomEntry \u003d TypicalCommandHistoryEntries.getRandomEntry();","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"            commandHistory.appendEntry(randomEntry);","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"            assertEquals(randomEntry, commandHistory.get(i));","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    public void appendEntry_insertsCorrectEntry() {","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory commandHistory;","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistoryEntry entry;","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        commandHistory \u003d new CommandHistory();","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        entry \u003d TypicalCommandHistoryEntries.HELP;","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        commandHistory.appendEntry(entry);","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(entry, commandHistory.get(0));","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        commandHistory \u003d new CommandHistory();","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"        entry \u003d TypicalCommandHistoryEntries.HISTORY_ALL;","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        commandHistory.appendEntry(entry);","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(entry, commandHistory.get(0));","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"    public void constructor_takingListOfEntries_isMakingACopyOfTheList() {","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"        List\u003cCommandHistoryEntry\u003e typicalEntries1 \u003d TypicalCommandHistoryEntries.getTypicalEntries();","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory commandHistory \u003d new CommandHistory(typicalEntries1);","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        // modify the list","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"        typicalEntries1.clear();","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        // check that the entries in CommandHistory have not changed","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"        List\u003cCommandHistoryEntry\u003e typicalEntries2 \u003d TypicalCommandHistoryEntries.getTypicalEntries();","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(typicalEntries2.size(), commandHistory.size());","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c commandHistory.size(); i++) {","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"            CommandHistoryEntry entry \u003d commandHistory.get(i);","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"            CommandHistoryEntry correspondingEntry \u003d typicalEntries2.get(i);","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"            assertEquals(entry, correspondingEntry);","lastModifiedDate":"2021-03-10"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    public void constructor_takingReadOnlyHistory_isMakingACopy() {","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory typicalHistory \u003d TypicalCommandHistoryEntries.getTypicalCommandHistory();","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory copy \u003d new CommandHistory(typicalHistory);","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(typicalHistory.size(), copy.size());","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c copy.size(); i++) {","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"            CommandHistoryEntry entry \u003d copy.get(i);","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"            CommandHistoryEntry correspondingEntry \u003d typicalHistory.get(i);","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"            assertEquals(entry, correspondingEntry);","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"    public void equals() {","lastModifiedDate":"2021-03-10"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory typicalHistory \u003d TypicalCommandHistoryEntries.getTypicalCommandHistory();","lastModifiedDate":"2021-03-10"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory copy \u003d new CommandHistory();","lastModifiedDate":"2021-03-10"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c typicalHistory.size(); i++) {","lastModifiedDate":"2021-03-10"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"            copy.appendEntry(typicalHistory.get(i));","lastModifiedDate":"2021-03-10"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory oneMissingEntry \u003d new CommandHistory();","lastModifiedDate":"2021-03-10"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c typicalHistory.size() - 1; i++) {","lastModifiedDate":"2021-03-10"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"            oneMissingEntry.appendEntry(typicalHistory.get(i));","lastModifiedDate":"2021-03-10"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory oneExtraEntry \u003d new CommandHistory();","lastModifiedDate":"2021-03-10"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c typicalHistory.size() - 1; i++) {","lastModifiedDate":"2021-03-10"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"            oneExtraEntry.appendEntry(typicalHistory.get(i));","lastModifiedDate":"2021-03-10"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":"        oneExtraEntry.appendEntry(TypicalCommandHistoryEntries.getRandomEntry());","lastModifiedDate":"2021-03-10"},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory differentEntriesButSameSize \u003d new CommandHistory();","lastModifiedDate":"2021-03-10"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c typicalHistory.size() - 1; i++) {","lastModifiedDate":"2021-03-10"},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"            differentEntriesButSameSize.appendEntry(TypicalCommandHistoryEntries.getRandomEntry());","lastModifiedDate":"2021-03-10"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":101,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":102,"author":{"gitId":"benedictkhoomw"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-03-10"},{"lineNumber":103,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(typicalHistory.equals(typicalHistory));","lastModifiedDate":"2021-03-10"},{"lineNumber":104,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":105,"author":{"gitId":"benedictkhoomw"},"content":"        // different type -\u003e return false","lastModifiedDate":"2021-03-30"},{"lineNumber":106,"author":{"gitId":"benedictkhoomw"},"content":"        assertFalse(typicalHistory.equals(\"hi there\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"benedictkhoomw"},"content":"        // same entries -\u003e return true","lastModifiedDate":"2021-03-10"},{"lineNumber":109,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(typicalHistory.equals(copy));","lastModifiedDate":"2021-03-10"},{"lineNumber":110,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":111,"author":{"gitId":"benedictkhoomw"},"content":"        // one missing entry -\u003e return false","lastModifiedDate":"2021-03-10"},{"lineNumber":112,"author":{"gitId":"benedictkhoomw"},"content":"        assertFalse(typicalHistory.equals(oneMissingEntry));","lastModifiedDate":"2021-03-10"},{"lineNumber":113,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":114,"author":{"gitId":"benedictkhoomw"},"content":"        // one extra entry -\u003e return false","lastModifiedDate":"2021-03-10"},{"lineNumber":115,"author":{"gitId":"benedictkhoomw"},"content":"        assertFalse(typicalHistory.equals(oneExtraEntry));","lastModifiedDate":"2021-03-10"},{"lineNumber":116,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":117,"author":{"gitId":"benedictkhoomw"},"content":"        // different entries -\u003e return false","lastModifiedDate":"2021-03-10"},{"lineNumber":118,"author":{"gitId":"benedictkhoomw"},"content":"        assertFalse(typicalHistory.equals(differentEntriesButSameSize));","lastModifiedDate":"2021-03-10"},{"lineNumber":119,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":120,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":121,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":122,"author":{"gitId":"benedictkhoomw"},"content":"    public void get_withInvalidIndex_throwsIndexOutOfBoundsException() {","lastModifiedDate":"2021-03-10"},{"lineNumber":123,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory empty \u003d new CommandHistory();","lastModifiedDate":"2021-03-10"},{"lineNumber":124,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e empty.get(-1));","lastModifiedDate":"2021-03-10"},{"lineNumber":125,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e empty.get(-1235));","lastModifiedDate":"2021-03-10"},{"lineNumber":126,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e empty.get(0));","lastModifiedDate":"2021-03-10"},{"lineNumber":127,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e empty.get(1));","lastModifiedDate":"2021-03-10"},{"lineNumber":128,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":129,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory typical \u003d TypicalCommandHistoryEntries.getTypicalCommandHistory();","lastModifiedDate":"2021-03-10"},{"lineNumber":130,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e typical.get(typical.size()));","lastModifiedDate":"2021-03-10"},{"lineNumber":131,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e typical.get(-1));","lastModifiedDate":"2021-03-10"},{"lineNumber":132,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":133,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":134,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":135,"author":{"gitId":"benedictkhoomw"},"content":"    public void get_withValidIndex_returnsCorrectEntry() {","lastModifiedDate":"2021-03-10"},{"lineNumber":136,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory commandHistory \u003d TypicalCommandHistoryEntries.getTypicalCommandHistory();","lastModifiedDate":"2021-03-10"},{"lineNumber":137,"author":{"gitId":"benedictkhoomw"},"content":"        List\u003cCommandHistoryEntry\u003e typicalEntries \u003d TypicalCommandHistoryEntries.getTypicalEntries();","lastModifiedDate":"2021-03-10"},{"lineNumber":138,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":139,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c typicalEntries.size(); i++) {","lastModifiedDate":"2021-03-10"},{"lineNumber":140,"author":{"gitId":"benedictkhoomw"},"content":"            CommandHistoryEntry entry \u003d commandHistory.get(i);","lastModifiedDate":"2021-03-10"},{"lineNumber":141,"author":{"gitId":"benedictkhoomw"},"content":"            CommandHistoryEntry correspondingEntry \u003d typicalEntries.get(i);","lastModifiedDate":"2021-03-10"},{"lineNumber":142,"author":{"gitId":"benedictkhoomw"},"content":"            assertEquals(entry, correspondingEntry);","lastModifiedDate":"2021-03-10"},{"lineNumber":143,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":144,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":145,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":146,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":147,"author":{"gitId":"benedictkhoomw"},"content":"    public void size_ofNewCommandHistory_isZero() {","lastModifiedDate":"2021-03-10"},{"lineNumber":148,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory commandHistory \u003d new CommandHistory();","lastModifiedDate":"2021-03-10"},{"lineNumber":149,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(0, commandHistory.size());","lastModifiedDate":"2021-03-10"},{"lineNumber":150,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":151,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"benedictkhoomw":151}},{"path":"src/test/java/seedu/address/model/issue/CategoryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"public class CategoryTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Category(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    public void constructor_invalidCategory_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"        String invalidCategory \u003d \"-\";","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidCategory));","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public void isValidName() {","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"        // null category","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategory(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"        // invalid categories","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"        assertFalse(Category.isValidCategory(\"\")); // empty category","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        assertFalse(Category.isValidCategory(\" abc\")); // start with whitespace","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"        assertFalse(Category.isValidCategory(\"-\")); // non alpha-numerical","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        // valid categories","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"        assertTrue(Category.isValidCategory(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ\")); // alphabet","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        assertTrue(Category.isValidCategory(\"1234567890\")); // numbers","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"        // alphanumerical","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"        assertTrue(Category.isValidCategory(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ1234567890\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        assertTrue(Category.isValidCategory(\"Wood Furniture\")); // alphabets with space","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"stein414":39}},{"path":"src/test/java/seedu/address/model/issue/DescriptionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"public class DescriptionTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Description(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    public void constructor_invalidDescription_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"        String invalidDescription \u003d \"\";","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public void isValidName() {","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"        // null description","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"        // invalid description","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"        assertFalse(Description.isValidDescription(\"\")); // empty description","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"        // valid description","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"        assertTrue(Description.isValidDescription(\"a\")); // single alphabet","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        assertTrue(Description.isValidDescription(\"1\")); // single digit","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"        assertTrue(Description.isValidDescription(\"fdasf1212\")); // alphanumberical","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        assertTrue(Description.isValidDescription(\"jk23l1 j32k1 k2k21l df\")); // alphanumerical with spaces","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"        // All valid characters","lastModifiedDate":"2021-04-08"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"        assertTrue(Description.isValidDescription(","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"                \"ABCDEFGHIJKLMNOPQRSTUWXYZabcdefghijklmnopqrstuvwxyz1234567890 \"));","lastModifiedDate":"2021-04-08"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"stein414":39}},{"path":"src/test/java/seedu/address/model/issue/IssueListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.issue.TypicalIssues.ISSUE_10_100;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.issue.TypicalIssues.ISSUE_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import java.util.List;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.exceptions.DuplicateIssueException;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.exceptions.IssueNotFoundException;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"public class IssueListTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    private final IssueList issueList \u003d new IssueList();","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    public void contains_nullIssue_throwsNullPointerException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e issueList.contains(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"    public void contains_issueNotInList_returnsFalse() {","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"        assertFalse(issueList.contains(ISSUE_10_100));","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    public void contains_issueInList_returnsTrue() {","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"        issueList.add(ISSUE_10_100);","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"        assertTrue(issueList.contains(ISSUE_10_100));","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"    public void add_nullIssue_throwsNullPointerException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e issueList.add(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"    public void add_duplicateIssue_throwsDuplicateIssueException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"        issueList.add(ISSUE_10_100);","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"        assertThrows(DuplicateIssueException.class, () -\u003e issueList.add(ISSUE_10_100));","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"    public void setIssue_nullTargetIssue_throwsNullPointerException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"        issueList.add(ISSUE_10_100);","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e issueList.setIssue(null, ISSUE_10_100));","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"    public void setIssue_nullEditedIssue_throwsNullPointerException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"        issueList.add(ISSUE_10_100);","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e issueList.setIssue(ISSUE_10_100, null));","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"    public void setIssue_targetIssueNotInList_throwsIssueNotFoundException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"        assertThrows(IssueNotFoundException.class, () -\u003e issueList.setIssue(ISSUE_10_100, ISSUE_10_100));","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"    public void setIssue_editedIssueIsSameIssue_success() {","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"        issueList.add(ISSUE_10_100);","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"        issueList.setIssue(ISSUE_10_100, ISSUE_10_100);","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"        IssueList expectedIssueList \u003d new IssueList();","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"        expectedIssueList.add(ISSUE_10_100);","lastModifiedDate":"2021-03-29"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"        assertEquals(expectedIssueList, issueList);","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"    public void setIssue_editedIssueIsDifferentIssue_success() {","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"        issueList.add(ISSUE_10_100);","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"        issueList.setIssue(ISSUE_10_100, ISSUE_11_110);","lastModifiedDate":"2021-04-01"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"        IssueList expectedIssueList \u003d new IssueList();","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"        expectedIssueList.add(ISSUE_11_110);","lastModifiedDate":"2021-04-01"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"        assertEquals(expectedIssueList, issueList);","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"    public void setIssue_editedIssueHasNonIdentity_throwsDuplicateIssueException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"        issueList.add(ISSUE_10_100);","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"        issueList.add(ISSUE_11_110);","lastModifiedDate":"2021-04-01"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"        assertThrows(DuplicateIssueException.class, () -\u003e issueList.setIssue(ISSUE_10_100, ISSUE_11_110));","lastModifiedDate":"2021-04-01"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"    public void remove_nullIssue_throwsNullPointerException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e issueList.remove(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"    public void remove_issueDoesNotExist_throwsIssueNotFoundException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"        assertThrows(IssueNotFoundException.class, () -\u003e issueList.remove(ISSUE_10_100));","lastModifiedDate":"2021-03-29"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"    public void remove_existingIssue_removesIssue() {","lastModifiedDate":"2021-03-29"},{"lineNumber":104,"author":{"gitId":"stein414"},"content":"        issueList.add(ISSUE_10_100);","lastModifiedDate":"2021-03-29"},{"lineNumber":105,"author":{"gitId":"stein414"},"content":"        issueList.remove(ISSUE_10_100);","lastModifiedDate":"2021-03-29"},{"lineNumber":106,"author":{"gitId":"stein414"},"content":"        IssueList expectedIssueList \u003d new IssueList();","lastModifiedDate":"2021-03-29"},{"lineNumber":107,"author":{"gitId":"stein414"},"content":"        assertEquals(expectedIssueList, issueList);","lastModifiedDate":"2021-03-29"},{"lineNumber":108,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":109,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":110,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":111,"author":{"gitId":"stein414"},"content":"    public void setIssues_nullIssueList_throwsNullPointerException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":112,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e issueList.setIssues((IssueList) null));","lastModifiedDate":"2021-03-29"},{"lineNumber":113,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":114,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":115,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":116,"author":{"gitId":"stein414"},"content":"    public void setIssues_uniqueIssueList_replacesOwnListWithProvidedIssueList() {","lastModifiedDate":"2021-03-29"},{"lineNumber":117,"author":{"gitId":"stein414"},"content":"        issueList.add(ISSUE_10_100);","lastModifiedDate":"2021-03-29"},{"lineNumber":118,"author":{"gitId":"stein414"},"content":"        IssueList expectedIssueList \u003d new IssueList();","lastModifiedDate":"2021-03-29"},{"lineNumber":119,"author":{"gitId":"stein414"},"content":"        expectedIssueList.add(ISSUE_11_110);","lastModifiedDate":"2021-04-01"},{"lineNumber":120,"author":{"gitId":"stein414"},"content":"        issueList.setIssues(expectedIssueList);","lastModifiedDate":"2021-03-29"},{"lineNumber":121,"author":{"gitId":"stein414"},"content":"        assertEquals(expectedIssueList, issueList);","lastModifiedDate":"2021-03-29"},{"lineNumber":122,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":123,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":124,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":125,"author":{"gitId":"stein414"},"content":"    public void setIssues_nullList_throwsNullPointerException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":126,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e issueList.setIssues((List\u003cIssue\u003e) null));","lastModifiedDate":"2021-03-29"},{"lineNumber":127,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":128,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":129,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":130,"author":{"gitId":"stein414"},"content":"    public void setIssues_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2021-03-29"},{"lineNumber":131,"author":{"gitId":"stein414"},"content":"        issueList.add(ISSUE_10_100);","lastModifiedDate":"2021-03-29"},{"lineNumber":132,"author":{"gitId":"stein414"},"content":"        List\u003cIssue\u003e newInternalIssueList \u003d Collections.singletonList(ISSUE_11_110);","lastModifiedDate":"2021-04-01"},{"lineNumber":133,"author":{"gitId":"stein414"},"content":"        issueList.setIssues(newInternalIssueList);","lastModifiedDate":"2021-03-29"},{"lineNumber":134,"author":{"gitId":"stein414"},"content":"        IssueList expectedIssueList \u003d new IssueList();","lastModifiedDate":"2021-03-29"},{"lineNumber":135,"author":{"gitId":"stein414"},"content":"        expectedIssueList.add(ISSUE_11_110);","lastModifiedDate":"2021-04-01"},{"lineNumber":136,"author":{"gitId":"stein414"},"content":"        assertEquals(expectedIssueList, issueList);","lastModifiedDate":"2021-03-29"},{"lineNumber":137,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":138,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":139,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":140,"author":{"gitId":"stein414"},"content":"    public void setIssues_listWithDuplicateIssues_throwsDuplicateIssueException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":141,"author":{"gitId":"stein414"},"content":"        List\u003cIssue\u003e listWithDuplicateIssues \u003d Arrays.asList(ISSUE_10_100, ISSUE_10_100);","lastModifiedDate":"2021-03-29"},{"lineNumber":142,"author":{"gitId":"stein414"},"content":"        assertThrows(DuplicateIssueException.class, () -\u003e issueList","lastModifiedDate":"2021-03-29"},{"lineNumber":143,"author":{"gitId":"stein414"},"content":"                .setIssues(listWithDuplicateIssues));","lastModifiedDate":"2021-03-29"},{"lineNumber":144,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":145,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":146,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":147,"author":{"gitId":"stein414"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":148,"author":{"gitId":"stein414"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e issueList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2021-03-29"},{"lineNumber":149,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":150,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"stein414":150}},{"path":"src/test/java/seedu/address/model/issue/IssueTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.issue.TypicalIssues.ISSUE_10_100;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.issue.TypicalIssues.ISSUE_11_110;","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import seedu.address.testutil.issue.IssueBuilder;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"public class IssueTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"    /*","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"     * @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"     * public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"     * Issue issue \u003d new IssueBuilder().build();","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"     * assertThrows(UnsupportedOperationException.class, () -\u003e issue.getPhone().remove());","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"     * }","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public void equals() {","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"        Issue issue10100Copy \u003d new IssueBuilder(ISSUE_10_100).build();","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"        assertTrue(ISSUE_10_100.equals(issue10100Copy));","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        assertTrue(ISSUE_10_100.equals(ISSUE_10_100));","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        assertFalse(ISSUE_10_100.equals(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"        assertFalse(ISSUE_10_100.equals(5));","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        // different issue -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"        assertFalse(ISSUE_10_100.equals(ISSUE_11_110));","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"        // different room number -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"        Issue editedIssue10100 \u003d new IssueBuilder(ISSUE_10_100)","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"                .withRoomNumber(ISSUE_11_110.getRoomNumber().value)","lastModifiedDate":"2021-04-01"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"        assertFalse(ISSUE_10_100.equals(editedIssue10100));","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"        // different description -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"        editedIssue10100 \u003d new IssueBuilder(ISSUE_10_100)","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"                .withDescription(ISSUE_11_110.getDescription().value)","lastModifiedDate":"2021-04-01"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"        assertFalse(ISSUE_10_100.equals(editedIssue10100));","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"        // different timestamp -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"        editedIssue10100 \u003d new IssueBuilder(ISSUE_10_100)","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"                .withTimestamp(ISSUE_11_110.getTimestamp().toString())","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"        assertFalse(ISSUE_10_100.equals(editedIssue10100));","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"        // different status -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"        editedIssue10100 \u003d new IssueBuilder(ISSUE_10_100)","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"                .withStatus(ISSUE_11_110.getStatus().value.toString())","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"        assertFalse(ISSUE_10_100.equals(editedIssue10100));","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"        // different category -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"        editedIssue10100 \u003d new IssueBuilder(ISSUE_10_100)","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"                .withCategory(ISSUE_11_110.getCategory().value)","lastModifiedDate":"2021-04-01"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"                .build();","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"        assertFalse(ISSUE_10_100.equals(editedIssue10100));","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"stein414":70}},{"path":"src/test/java/seedu/address/model/issue/RoomNumberContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import java.util.List;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.testutil.issue.IssueBuilder;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"public class RoomNumberContainsKeywordsPredicateTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    public void equals() {","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"10\");","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"10\", \"20\");","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"        RoomNumberOrTagContainsKeywordsPredicate firstPredicate \u003d new RoomNumberOrTagContainsKeywordsPredicate(","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"                firstPredicateKeywordList);","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"        RoomNumberOrTagContainsKeywordsPredicate secondPredicate \u003d new RoomNumberOrTagContainsKeywordsPredicate(","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"                secondPredicateKeywordList);","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        RoomNumberOrTagContainsKeywordsPredicate firstPredicateCopy \u003d new RoomNumberOrTagContainsKeywordsPredicate(","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"                firstPredicateKeywordList);","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"        // assertFa","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"        // different resident -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"    public void test_roomNumberContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"        // One keyword","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        RoomNumberOrTagContainsKeywordsPredicate predicate \u003d new RoomNumberOrTagContainsKeywordsPredicate(","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"                Collections.singletonList(\"10-\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"        assertTrue(predicate.test(new IssueBuilder().withRoomNumber(\"10-100\").build()));","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"        // Multiple keywords","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        predicate \u003d new RoomNumberOrTagContainsKeywordsPredicate(Arrays.asList(\"10-\", \"11-\"));","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"        assertTrue(predicate.test(new IssueBuilder().withRoomNumber(\"10-100\").build()));","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"        assertTrue(predicate.test(new IssueBuilder().withRoomNumber(\"11-100\").build()));","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"        predicate \u003d new RoomNumberOrTagContainsKeywordsPredicate(Arrays.asList(\"11-\", \"12-\"));","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"        assertFalse(predicate.test(new IssueBuilder().withRoomNumber(\"10-100\").build()));","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"        assertTrue(predicate.test(new IssueBuilder().withRoomNumber(\"11-100\").build()));","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"    public void test_roomNumberDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"        // Zero keywords","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"        RoomNumberOrTagContainsKeywordsPredicate predicate \u003d new RoomNumberOrTagContainsKeywordsPredicate(","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"                Collections.emptyList());","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"        assertFalse(predicate.test(new IssueBuilder().withRoomNumber(\"10-100\").build()));","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"        predicate \u003d new RoomNumberOrTagContainsKeywordsPredicate(Arrays.asList(\"123\"));","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"        assertFalse(predicate.test(new IssueBuilder().withRoomNumber(\"10-100\").build()));","lastModifiedDate":"2021-03-29"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"        // Keywords match description, timestamp, status, category, but does not match room number","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"        predicate \u003d new RoomNumberOrTagContainsKeywordsPredicate(","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"                Arrays.asList(IssueBuilder.DEFAULT_ROOM_NUMBER,","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"                        IssueBuilder.DEFAULT_DESCRIPTION,","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"                        IssueBuilder.DEFAULT_TIMESTAMP,","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"                        IssueBuilder.DEFAULT_STATUS,","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"                        IssueBuilder.DEFAULT_CATEGORY));","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"        assertFalse(predicate.test(new IssueBuilder().withRoomNumber(\"01-001\").build()));","lastModifiedDate":"2021-04-01"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"stein414":75,"DrWala":9}},{"path":"src/test/java/seedu/address/model/issue/RoomNumberTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"public class RoomNumberTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e new RoomNumber(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    public void constructor_invalidRoomNumber_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"        String invalidRoomNumber \u003d \"03-1234\";","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new RoomNumber(invalidRoomNumber));","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public void isValidRoomNumber() {","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"        // null room","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e RoomNumber.isValidRoomNumber(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"        // invalid rooms","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"        assertFalse(RoomNumber.isValidRoomNumber(\"\")); // empty string","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        assertFalse(RoomNumber.isValidRoomNumber(\"-\")); // no numbers","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"        assertFalse(RoomNumber.isValidRoomNumber(\"03144\")); // room does not have hyphen","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"        assertFalse(RoomNumber.isValidRoomNumber(\"floor-unit\")); // non-numeric","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        assertFalse(RoomNumber.isValidRoomNumber(\"fl00r-un1t\")); // alphabets with number","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"        assertFalse(RoomNumber.isValidRoomNumber(\"0-123\")); // floor is fewer than 2 digits","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        assertFalse(RoomNumber.isValidRoomNumber(\"000-123\")); // floor is more than 2 digits","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"        assertFalse(RoomNumber.isValidRoomNumber(\"00-12\")); // unit is few than 3 digits","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"        assertFalse(RoomNumber.isValidRoomNumber(\"00-1234\")); // unit is more than 3 digits","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"        // valid rooms","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"        assertTrue(RoomNumber.isValidRoomNumber(\"01-234\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"stein414":41}},{"path":"src/test/java/seedu/address/model/issue/StatusTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"public class StatusTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Status((String) null));","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Status((IssueStatus) null));","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"    public void constructor_invalidStatus_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"        String invalidStatus \u003d \"abc\";","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Status(invalidStatus));","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    public void isValidName() {","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"        // null status","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e Status.isValidStatus(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"        // invalid status","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        assertFalse(Status.isValidStatus(\"\")); // empty status","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"        assertFalse(Status.isValidStatus(\"abc\")); // invalid status","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        // valid status","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"        assertTrue(Status.isValidStatus(\"pending\")); // single alphabet","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        assertTrue(Status.isValidStatus(\"PENDING\")); // single digit","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"        assertTrue(Status.isValidStatus(\"PeNdInG\")); // mix case","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"        assertTrue(Status.isValidStatus(\"p\")); // single lower case","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        assertTrue(Status.isValidStatus(\"P\")); // single upper case","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"        assertTrue(Status.isValidStatus(\"closed\")); // single alphabet","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"        assertTrue(Status.isValidStatus(\"CLOSED\")); // single digit","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"        assertTrue(Status.isValidStatus(\"ClOsEd\")); // mix case","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"        assertTrue(Status.isValidStatus(\"c\")); // single lower case","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"        assertTrue(Status.isValidStatus(\"C\")); // single upper case","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"cnlinh":2,"stein414":42}},{"path":"src/test/java/seedu/address/model/issue/TimestampTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.model.issue;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"public class TimestampTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Timestamp(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"    public void constructor_invalidTimestamp_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"        String invalidTimestamp \u003d \"abc\";","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Timestamp(invalidTimestamp));","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"    public void isValidTimestamp() {","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"        // null timestamp","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"        assertThrows(NullPointerException.class, () -\u003e Timestamp.isValidTimestamp(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"        // invalid timestamps","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"        assertFalse(Timestamp.isValidTimestamp(\"\")); // empty string","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"        assertFalse(Timestamp.isValidTimestamp(\"2021/12/31 23:59\")); // 24-hour time","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"        assertFalse(Timestamp.isValidTimestamp(\"2021-12-31 23:59\")); // - instead of /","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"        assertFalse(Timestamp.isValidTimestamp(\"2021/12/32 0:00pm\")); // invalid midnight","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"        assertFalse(Timestamp.isValidTimestamp(\"0000/01/01 0:00am\")); // invalid year","lastModifiedDate":"2021-04-08"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"        assertFalse(Timestamp.isValidTimestamp(\"-9999/01/01 0:00am\")); // invalid year","lastModifiedDate":"2021-04-08"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        assertFalse(Timestamp.isValidTimestamp(\"2021/13/01 0:00am\")); // invalid month","lastModifiedDate":"2021-04-08"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"        assertFalse(Timestamp.isValidTimestamp(\"2021/1/01 0:00am\")); // month not double digit","lastModifiedDate":"2021-04-08"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"        assertFalse(Timestamp.isValidTimestamp(\"2021/12/32 11:59pm\")); // invalid date","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        assertFalse(Timestamp.isValidTimestamp(\"2021/12/3 11:59pm\")); // day not double digit","lastModifiedDate":"2021-04-08"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"        assertFalse(Timestamp.isValidTimestamp(\"2021/12/32 000:00pm\")); // invalid hour","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"        assertFalse(Timestamp.isValidTimestamp(\"2021/12/32 0:00pm\")); // hour not double digit","lastModifiedDate":"2021-04-08"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"        assertFalse(Timestamp.isValidTimestamp(\"2021/12/32 00:000pm\")); // invalid minute","lastModifiedDate":"2021-04-08"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"        assertFalse(Timestamp.isValidTimestamp(\"2021/12/32 00:0pm\")); // minute not double digit","lastModifiedDate":"2021-04-08"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"        // valid timestamps","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"        assertTrue(Timestamp.isValidTimestamp(\"2021/12/31 12:00am\")); // midnight","lastModifiedDate":"2021-04-07"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"        assertTrue(Timestamp.isValidTimestamp(\"2021/12/31 12:00AM\")); // AM capitalized","lastModifiedDate":"2021-04-07"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"        assertTrue(Timestamp.isValidTimestamp(\"2021/12/31 12:00Am\")); // partially capitalized","lastModifiedDate":"2021-04-07"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"        assertTrue(Timestamp.isValidTimestamp(\"2021/12/31 12:00aM\")); // partially capitalized","lastModifiedDate":"2021-04-07"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"        assertTrue(Timestamp.isValidTimestamp(\"2021/12/31 11:59pm\")); // 11:59 pm","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"        assertTrue(Timestamp.isValidTimestamp(\"0001/01/01 12:00am\")); // earliest datetime","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"stein414":51}},{"path":"src/test/java/seedu/address/model/resident/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));","lastModifiedDate":"2017-04-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part","lastModifiedDate":"2018-02-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"colintkn":1,"-":60}},{"path":"src/test/java/seedu/address/model/resident/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.ResidentBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        // different resident -\u003e returns false","lastModifiedDate":"2021-03-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        assertTrue(predicate.test(new ResidentBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-03-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        assertTrue(predicate.test(new ResidentBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-03-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        assertTrue(predicate.test(new ResidentBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2021-03-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        assertTrue(predicate.test(new ResidentBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-03-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"        assertFalse(predicate.test(new ResidentBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2021-03-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"        assertFalse(predicate.test(new ResidentBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-03-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"        assertFalse(predicate.test(new ResidentBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2021-03-05"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"                .withEmail(\"alice@email.com\").build()));","lastModifiedDate":"2021-02-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"colintkn":11,"-":64}},{"path":"src/test/java/seedu/address/model/resident/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"        assertTrue(Name.isValidName(\"Capital Joe Tan \")); // with 3 words","lastModifiedDate":"2021-04-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"colintkn":2,"-":36}},{"path":"src/test/java/seedu/address/model/resident/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"colintkn":1,"-":39}},{"path":"src/test/java/seedu/address/model/resident/ResidentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;","lastModifiedDate":"2021-03-02"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.ALICE;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.BOB;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.ResidentBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"public class ResidentTest {","lastModifiedDate":"2021-03-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    /*","lastModifiedDate":"2021-02-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"        Resident resident \u003d new ResidentRoomBuilder().build();","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e resident.getPhone().remove());","lastModifiedDate":"2021-03-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"    */","lastModifiedDate":"2021-02-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    public void isSameResident() {","lastModifiedDate":"2021-03-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"        assertTrue(ALICE.isSameResident(ALICE));","lastModifiedDate":"2021-03-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        assertFalse(ALICE.isSameResident(null));","lastModifiedDate":"2021-03-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        Resident editedAlice \u003d new ResidentBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-03-02"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"                .build();","lastModifiedDate":"2021-02-23"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"        assertTrue(ALICE.isSameResident(editedAlice));","lastModifiedDate":"2021-03-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        editedAlice \u003d new ResidentBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-02"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        assertFalse(ALICE.isSameResident(editedAlice));","lastModifiedDate":"2021-03-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        Resident editedBob \u003d new ResidentBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2021-03-02"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        assertFalse(BOB.isSameResident(editedBob));","lastModifiedDate":"2021-03-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        editedBob \u003d new ResidentBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2021-03-02"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        assertFalse(BOB.isSameResident(editedBob));","lastModifiedDate":"2021-03-02"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        Resident aliceCopy \u003d new ResidentBuilder(ALICE).build();","lastModifiedDate":"2021-03-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"        // different resident -\u003e returns false","lastModifiedDate":"2021-03-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"        Resident editedAlice \u003d new ResidentBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-02"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        editedAlice \u003d new ResidentBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-03-02"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        editedAlice \u003d new ResidentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-02"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"colintkn":26,"-":56}},{"path":"src/test/java/seedu/address/model/resident/RoomTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"public class RoomTest {","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Room(null));","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    public void constructor_invalidRoom_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"        String invalidRoom \u003d \"03-1234\";","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Room(invalidRoom));","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"    public void isValidRoom() {","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"        // null room","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e Room.isValidRoom(null));","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"        // invalid rooms","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"\")); // empty string","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"-\")); // no numbers","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"03144\")); // room does not have hyphen","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"floor-unit\")); // non-numeric","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"fl00r-un1t\")); // alphabets with number","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"0-123\")); // floor is fewer than 2 digits","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"000-123\")); // floor is more than 2 digits","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"00-12\")); // unit is few than 3 digits","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"        assertFalse(Room.isValidRoom(\"00-1234\")); // unit is more than 3 digits","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        // valid rooms","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        assertTrue(Room.isValidRoom(\"01-234\"));","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"colintkn":42}},{"path":"src/test/java/seedu/address/model/resident/UniqueResidentListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.ALICE;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.BOB;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.exceptions.DuplicateResidentException;","lastModifiedDate":"2021-03-05"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.exceptions.ResidentNotFoundException;","lastModifiedDate":"2021-03-05"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.ResidentBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"public class UniqueResidentListTest {","lastModifiedDate":"2021-03-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    private final UniqueResidentList uniqueResidentList \u003d new UniqueResidentList();","lastModifiedDate":"2021-03-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"    public void contains_nullResident_throwsNullPointerException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidentList.contains((Resident) null));","lastModifiedDate":"2021-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"    public void contains_residentNotInList_returnsFalse() {","lastModifiedDate":"2021-03-05"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        assertFalse(uniqueResidentList.contains(ALICE));","lastModifiedDate":"2021-03-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    public void contains_residentInList_returnsTrue() {","lastModifiedDate":"2021-03-05"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        assertTrue(uniqueResidentList.contains(ALICE));","lastModifiedDate":"2021-03-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    public void contains_residentWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2021-03-05"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        Resident editedAlice \u003d new ResidentBuilder(ALICE).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        assertTrue(uniqueResidentList.contains(editedAlice));","lastModifiedDate":"2021-03-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"    public void add_nullResident_throwsNullPointerException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidentList.add(null));","lastModifiedDate":"2021-03-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"    public void add_duplicateResident_throwsDuplicateResidentException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        assertThrows(DuplicateResidentException.class, () -\u003e uniqueResidentList.add(ALICE));","lastModifiedDate":"2021-03-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"    public void setResident_nullTargetResident_throwsNullPointerException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidentList.setResident(null, ALICE));","lastModifiedDate":"2021-03-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"    public void setResident_nullEditedResident_throwsNullPointerException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidentList.setResident(ALICE, null));","lastModifiedDate":"2021-03-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"    public void setResident_targetResidentNotInList_throwsResidentNotFoundException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"        assertThrows(ResidentNotFoundException.class, () -\u003e uniqueResidentList.setResident(ALICE, ALICE));","lastModifiedDate":"2021-03-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"    public void setResident_editedResidentIsSameResident_success() {","lastModifiedDate":"2021-03-05"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.setResident(ALICE, ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"        UniqueResidentList expectedUniqueResidentList \u003d new UniqueResidentList();","lastModifiedDate":"2021-03-05"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"        expectedUniqueResidentList.add(ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        assertEquals(expectedUniqueResidentList, uniqueResidentList);","lastModifiedDate":"2021-03-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"    public void setResident_editedResidentHasSameIdentity_success() {","lastModifiedDate":"2021-03-05"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"        Resident editedAlice \u003d new ResidentBuilder(ALICE)","lastModifiedDate":"2021-03-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.setResident(ALICE, editedAlice);","lastModifiedDate":"2021-03-05"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"        UniqueResidentList expectedUniqueResidentList \u003d new UniqueResidentList();","lastModifiedDate":"2021-03-05"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"        expectedUniqueResidentList.add(editedAlice);","lastModifiedDate":"2021-03-05"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"        assertEquals(expectedUniqueResidentList, uniqueResidentList);","lastModifiedDate":"2021-03-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"    public void setResident_editedResidentHasDifferentIdentity_success() {","lastModifiedDate":"2021-03-05"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":96,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.setResident(ALICE, BOB);","lastModifiedDate":"2021-03-05"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"        UniqueResidentList expectedUniqueResidentList \u003d new UniqueResidentList();","lastModifiedDate":"2021-03-05"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"        expectedUniqueResidentList.add(BOB);","lastModifiedDate":"2021-03-05"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"        assertEquals(expectedUniqueResidentList, uniqueResidentList);","lastModifiedDate":"2021-03-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"    public void setResident_editedResidentHasNonUniqueIdentity_throwsDuplicateResidentException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(BOB);","lastModifiedDate":"2021-03-05"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"        assertThrows(DuplicateResidentException.class, () -\u003e uniqueResidentList.setResident(ALICE, BOB));","lastModifiedDate":"2021-03-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"colintkn"},"content":"    public void remove_nullResident_throwsNullPointerException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":111,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidentList.remove(null));","lastModifiedDate":"2021-03-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"colintkn"},"content":"    public void remove_residentDoesNotExist_throwsResidentNotFoundException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":116,"author":{"gitId":"colintkn"},"content":"        assertThrows(ResidentNotFoundException.class, () -\u003e uniqueResidentList.remove(ALICE));","lastModifiedDate":"2021-03-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"colintkn"},"content":"    public void remove_existingResident_removesResident() {","lastModifiedDate":"2021-03-05"},{"lineNumber":121,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":122,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.remove(ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":123,"author":{"gitId":"colintkn"},"content":"        UniqueResidentList expectedUniqueResidentList \u003d new UniqueResidentList();","lastModifiedDate":"2021-03-05"},{"lineNumber":124,"author":{"gitId":"colintkn"},"content":"        assertEquals(expectedUniqueResidentList, uniqueResidentList);","lastModifiedDate":"2021-03-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"colintkn"},"content":"    public void setResidents_nullUniqueResidentList_throwsNullPointerException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":129,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidentList.setResidents((UniqueResidentList) null));","lastModifiedDate":"2021-03-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"colintkn"},"content":"    public void setResidents_uniqueResidentList_replacesOwnListWithProvidedUniqueResidentList() {","lastModifiedDate":"2021-03-05"},{"lineNumber":134,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":135,"author":{"gitId":"colintkn"},"content":"        UniqueResidentList expectedUniqueResidentList \u003d new UniqueResidentList();","lastModifiedDate":"2021-03-05"},{"lineNumber":136,"author":{"gitId":"colintkn"},"content":"        expectedUniqueResidentList.add(BOB);","lastModifiedDate":"2021-03-05"},{"lineNumber":137,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.setResidents(expectedUniqueResidentList);","lastModifiedDate":"2021-03-05"},{"lineNumber":138,"author":{"gitId":"colintkn"},"content":"        assertEquals(expectedUniqueResidentList, uniqueResidentList);","lastModifiedDate":"2021-03-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"colintkn"},"content":"    public void setResidents_nullList_throwsNullPointerException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":143,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidentList.setResidents((List\u003cResident\u003e) null));","lastModifiedDate":"2021-03-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"colintkn"},"content":"    public void setResidents_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2021-03-05"},{"lineNumber":148,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.add(ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":149,"author":{"gitId":"colintkn"},"content":"        List\u003cResident\u003e residentList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2021-03-05"},{"lineNumber":150,"author":{"gitId":"colintkn"},"content":"        uniqueResidentList.setResidents(residentList);","lastModifiedDate":"2021-03-05"},{"lineNumber":151,"author":{"gitId":"colintkn"},"content":"        UniqueResidentList expectedUniqueResidentList \u003d new UniqueResidentList();","lastModifiedDate":"2021-03-05"},{"lineNumber":152,"author":{"gitId":"colintkn"},"content":"        expectedUniqueResidentList.add(BOB);","lastModifiedDate":"2021-03-05"},{"lineNumber":153,"author":{"gitId":"colintkn"},"content":"        assertEquals(expectedUniqueResidentList, uniqueResidentList);","lastModifiedDate":"2021-03-05"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"colintkn"},"content":"    public void setResidents_listWithDuplicateResidents_throwsDuplicateResidentException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":158,"author":{"gitId":"colintkn"},"content":"        List\u003cResident\u003e listWithDuplicateResidents \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":159,"author":{"gitId":"colintkn"},"content":"        assertThrows(DuplicateResidentException.class, () -\u003e uniqueResidentList","lastModifiedDate":"2021-03-05"},{"lineNumber":160,"author":{"gitId":"colintkn"},"content":"                .setResidents(listWithDuplicateResidents));","lastModifiedDate":"2021-03-05"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":166,"author":{"gitId":"colintkn"},"content":"            -\u003e uniqueResidentList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2021-03-05"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"colintkn":84,"-":84}},{"path":"src/test/java/seedu/address/model/resident/YearTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-05"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-05"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-05"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-05"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"public class YearTest {","lastModifiedDate":"2021-03-05"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-05"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Year(null));","lastModifiedDate":"2021-03-05"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-05"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-05"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    public void constructor_invalidYear_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"        String invalidYear \u003d \"\";","lastModifiedDate":"2021-03-05"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Year(invalidYear));","lastModifiedDate":"2021-03-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-05"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-05"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"    public void isValidYear() {","lastModifiedDate":"2021-03-05"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"        // null year","lastModifiedDate":"2021-03-05"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e Year.isValidYear(null));","lastModifiedDate":"2021-03-05"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"        // invalid years","lastModifiedDate":"2021-03-05"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"        assertFalse(Year.isValidYear(\"\")); // empty string","lastModifiedDate":"2021-03-05"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"        assertFalse(Year.isValidYear(\" \")); // spaces only","lastModifiedDate":"2021-03-05"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"        assertFalse(Year.isValidYear(\"6\")); // number out of range","lastModifiedDate":"2021-03-05"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        assertFalse(Year.isValidYear(\"year\")); // non-numeric","lastModifiedDate":"2021-03-05"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        assertFalse(Year.isValidYear(\"Year3\")); // alphabets with number","lastModifiedDate":"2021-03-05"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        assertFalse(Year.isValidYear(\" 3 \")); // alphabets with number","lastModifiedDate":"2021-03-05"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"        // valid years","lastModifiedDate":"2021-03-05"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        assertTrue(Year.isValidYear(\"4\"));","lastModifiedDate":"2021-03-05"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-05"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-03-05"}],"authorContributionMap":{"colintkn":39}},{"path":"src/test/java/seedu/address/model/residentroom/ResidentRoomTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.residentroom;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_BOB;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.residentroom.TypicalResidentRooms.ALICE_ROOM_NUMBER;","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.residentroom.TypicalResidentRooms.BOB_ROOM_NUMBER;","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.residentroom.ResidentRoomBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"public class ResidentRoomTest {","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    public void isSameResident() {","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"        assertTrue(ALICE_ROOM_NUMBER.isSameResidentRoom(ALICE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"        assertFalse(ALICE_ROOM_NUMBER.isSameResidentRoom(null));","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"        // same name, different room number -\u003e returns true","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"        ResidentRoom editedAlice \u003d new ResidentRoomBuilder(ALICE_ROOM_NUMBER)","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"                .withRoomNumber(VALID_ROOM_NUMBER_BOB)","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"                .build();","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"        assertTrue(ALICE_ROOM_NUMBER.isSameResidentRoom(editedAlice));","lastModifiedDate":"2021-04-05"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"        // different name, same room number -\u003e returns true","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        ResidentRoom editedBob \u003d new ResidentRoomBuilder(ALICE_ROOM_NUMBER)","lastModifiedDate":"2021-04-05"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"                .withName(VALID_NAME_BOB)","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"                .build();","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        assertTrue(ALICE_ROOM_NUMBER.isSameResidentRoom(editedBob));","lastModifiedDate":"2021-04-05"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    public void equals() {","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        ResidentRoom aliceCopy \u003d new ResidentRoomBuilder(ALICE_ROOM_NUMBER).build();","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"        assertTrue(ALICE_ROOM_NUMBER.equals(aliceCopy));","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        assertTrue(ALICE_ROOM_NUMBER.equals(ALICE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        assertFalse(ALICE_ROOM_NUMBER.equals(null));","lastModifiedDate":"2021-04-05"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"        assertFalse(ALICE_ROOM_NUMBER.equals(5));","lastModifiedDate":"2021-04-05"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"        // different name, different room -\u003e returns false","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        assertFalse(ALICE_ROOM_NUMBER.equals(BOB_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        // different name, same room -\u003e returns false","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"        ResidentRoom editedAlice \u003d new ResidentRoomBuilder(ALICE_ROOM_NUMBER).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-04-05"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        assertFalse(ALICE_ROOM_NUMBER.equals(editedAlice));","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"        // same name, different room -\u003e returns false","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        editedAlice \u003d new ResidentRoomBuilder(ALICE_ROOM_NUMBER).withRoomNumber(VALID_ROOM_NUMBER_BOB).build();","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"        assertFalse(ALICE_ROOM_NUMBER.equals(editedAlice));","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"colintkn":63}},{"path":"src/test/java/seedu/address/model/residentroom/UniqueResidentRoomListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.model.residentroom;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.residentroom.TypicalResidentRooms.ALICE_ROOM_NUMBER;","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.residentroom.TypicalResidentRooms.BOB_ROOM_NUMBER;","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import java.util.List;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.exceptions.DuplicateResidentRoomException;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.exceptions.ResidentRoomNotFoundException;","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.residentroom.ResidentRoomBuilder;","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"public class UniqueResidentRoomListTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    private final UniqueResidentRoomList uniqueResidentRoomList \u003d new UniqueResidentRoomList();","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"    private final ResidentRoom bobEdited \u003d new ResidentRoomBuilder(BOB_ROOM_NUMBER)","lastModifiedDate":"2021-04-05"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"            .withRoomNumber(ALICE_ROOM_NUMBER.getRoomNumber().toString()).build();","lastModifiedDate":"2021-04-05"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"    private final ResidentRoom editedAlice \u003d new ResidentRoomBuilder(ALICE_ROOM_NUMBER)","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"                .withRoomNumber(BOB_ROOM_NUMBER.getRoomNumber().toString()).build();","lastModifiedDate":"2021-04-05"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    // ----------------------  Tests for containsEitherResidentRoom  ----------------------","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"    public void containsEitherResidentRoom_nullResidentRoom_throwsNullPointerException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, ()","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"            -\u003e uniqueResidentRoomList.containsEitherResidentRoom((ResidentRoom) null));","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"    public void containsEitherResidentRoom_residentRoomNotInList_returnsFalse() {","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"        assertFalse(uniqueResidentRoomList.containsEitherResidentRoom(ALICE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    public void containsEitherResidentRoom_exactResidentRoomInList_returnsTrue() {","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        uniqueResidentRoomList.add(ALICE_ROOM_NUMBER);","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        assertTrue(uniqueResidentRoomList.containsEitherResidentRoom(ALICE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"    public void containsEitherResidentRoom_residentRoomWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        uniqueResidentRoomList.add(ALICE_ROOM_NUMBER);","lastModifiedDate":"2021-04-05"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"        ResidentRoom editedAlice \u003d new ResidentRoomBuilder(ALICE_ROOM_NUMBER).build();","lastModifiedDate":"2021-04-05"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"        assertTrue(uniqueResidentRoomList.containsEitherResidentRoom(editedAlice));","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"    public void containsEitherResidentRoom_sameResidentDifferentRoomInList_returnsTrue() {","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"        uniqueResidentRoomList.add(editedAlice);","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"        assertTrue(uniqueResidentRoomList.containsEitherResidentRoom(ALICE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"    public void containsEitherResidentRoom_differentResidentSameRoomInList_returnsTrue() {","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"        ResidentRoom bobEdited \u003d new ResidentRoomBuilder(BOB_ROOM_NUMBER)","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"                .withRoomNumber(ALICE_ROOM_NUMBER.getRoomNumber().toString())","lastModifiedDate":"2021-04-05"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"                .build();","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"        uniqueResidentRoomList.add(bobEdited);","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"        assertTrue(uniqueResidentRoomList.containsEitherResidentRoom(ALICE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"    public void containsEitherResidentRoom_differentResidentRoomInList_returnsTrue() {","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"        uniqueResidentRoomList.add(BOB_ROOM_NUMBER);","lastModifiedDate":"2021-04-05"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"        assertFalse(uniqueResidentRoomList.containsEitherResidentRoom(ALICE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"    // ----------------------  Tests for containsBothResidentRoom  ----------------------","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"    public void containsBothResidentRoom_nullResidentRoom_throwsNullPointerException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, ()","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"            -\u003e uniqueResidentRoomList.containsBothResidentRoom((ResidentRoom) null));","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"    public void containsBothResidentRoom_residentRoomNotInList_returnsFalse() {","lastModifiedDate":"2021-03-31"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"        assertFalse(uniqueResidentRoomList.containsBothResidentRoom(ALICE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"    public void containsBothResidentRoom_exactResidentRoomInList_returnsTrue() {","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"        uniqueResidentRoomList.add(ALICE_ROOM_NUMBER);","lastModifiedDate":"2021-04-05"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"        assertTrue(uniqueResidentRoomList.containsBothResidentRoom(ALICE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"    public void containsBothResidentRoom_residentRoomWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"        uniqueResidentRoomList.add(ALICE_ROOM_NUMBER);","lastModifiedDate":"2021-04-05"},{"lineNumber":96,"author":{"gitId":"colintkn"},"content":"        ResidentRoom editedAlice \u003d new ResidentRoomBuilder(ALICE_ROOM_NUMBER).build();","lastModifiedDate":"2021-04-05"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"        assertTrue(uniqueResidentRoomList.containsBothResidentRoom(editedAlice));","lastModifiedDate":"2021-03-31"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":100,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"    public void containsBothResidentRoom_sameResidentDifferentRoomInList_returnsTrue() {","lastModifiedDate":"2021-03-31"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"        uniqueResidentRoomList.add(editedAlice);","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"        assertFalse(uniqueResidentRoomList.containsBothResidentRoom(ALICE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"    public void containsBothResidentRoom_differentResidentSameRoomInList_returnsTrue() {","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"colintkn"},"content":"        uniqueResidentRoomList.add(bobEdited);","lastModifiedDate":"2021-03-31"},{"lineNumber":109,"author":{"gitId":"colintkn"},"content":"        assertFalse(uniqueResidentRoomList.containsBothResidentRoom(ALICE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":110,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":111,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":112,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"colintkn"},"content":"    public void containsBothResidentRoom_differentResidentRoomInList_returnsTrue() {","lastModifiedDate":"2021-03-31"},{"lineNumber":114,"author":{"gitId":"colintkn"},"content":"        uniqueResidentRoomList.add(BOB_ROOM_NUMBER);","lastModifiedDate":"2021-04-05"},{"lineNumber":115,"author":{"gitId":"colintkn"},"content":"        assertFalse(uniqueResidentRoomList.containsBothResidentRoom(ALICE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":116,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":117,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":118,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":119,"author":{"gitId":"colintkn"},"content":"    public void add_nullResidentRoom_throwsNullPointerException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":120,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidentRoomList.add(null));","lastModifiedDate":"2021-03-31"},{"lineNumber":121,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":123,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":124,"author":{"gitId":"colintkn"},"content":"    public void add_duplicateResidentRoom_throwsDuplicateResidentRoomException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":125,"author":{"gitId":"colintkn"},"content":"        uniqueResidentRoomList.add(ALICE_ROOM_NUMBER);","lastModifiedDate":"2021-04-05"},{"lineNumber":126,"author":{"gitId":"colintkn"},"content":"        assertThrows(DuplicateResidentRoomException.class, () -\u003e uniqueResidentRoomList.add(ALICE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":127,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":128,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":129,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":130,"author":{"gitId":"colintkn"},"content":"    public void add_sameResidentDifferentRoom_throwsDuplicateResidentRoomException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":131,"author":{"gitId":"colintkn"},"content":"        uniqueResidentRoomList.add(editedAlice);","lastModifiedDate":"2021-03-31"},{"lineNumber":132,"author":{"gitId":"colintkn"},"content":"        assertThrows(DuplicateResidentRoomException.class, () -\u003e uniqueResidentRoomList.add(ALICE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":133,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":134,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":135,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":136,"author":{"gitId":"colintkn"},"content":"    public void add_differentResidentSameRoom_throwsDuplicateResidentRoomException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":137,"author":{"gitId":"colintkn"},"content":"        uniqueResidentRoomList.add(bobEdited);","lastModifiedDate":"2021-03-31"},{"lineNumber":138,"author":{"gitId":"colintkn"},"content":"        assertThrows(DuplicateResidentRoomException.class, () -\u003e uniqueResidentRoomList.add(ALICE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":139,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":140,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":141,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":142,"author":{"gitId":"colintkn"},"content":"    public void remove_nullResidentRoom_throwsNullPointerException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":143,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidentRoomList.remove(null));","lastModifiedDate":"2021-03-31"},{"lineNumber":144,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":145,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":146,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":147,"author":{"gitId":"colintkn"},"content":"    public void remove_residentDoesNotExist_throwsResidentRoomNotFoundException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":148,"author":{"gitId":"colintkn"},"content":"        assertThrows(ResidentRoomNotFoundException.class, () -\u003e uniqueResidentRoomList.remove(ALICE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":149,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":150,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":151,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":152,"author":{"gitId":"colintkn"},"content":"    public void remove_existingResidentRoom_removesResidentRoom() {","lastModifiedDate":"2021-03-31"},{"lineNumber":153,"author":{"gitId":"colintkn"},"content":"        uniqueResidentRoomList.add(ALICE_ROOM_NUMBER);","lastModifiedDate":"2021-04-05"},{"lineNumber":154,"author":{"gitId":"colintkn"},"content":"        uniqueResidentRoomList.remove(ALICE_ROOM_NUMBER);","lastModifiedDate":"2021-04-05"},{"lineNumber":155,"author":{"gitId":"colintkn"},"content":"        UniqueResidentRoomList expectedUniqueResidentRoomList \u003d new UniqueResidentRoomList();","lastModifiedDate":"2021-03-31"},{"lineNumber":156,"author":{"gitId":"colintkn"},"content":"        assertEquals(expectedUniqueResidentRoomList, uniqueResidentRoomList);","lastModifiedDate":"2021-03-31"},{"lineNumber":157,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":158,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":159,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":160,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":161,"author":{"gitId":"colintkn"},"content":"    public void setResidentRooms_nullList_throwsNullPointerException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":162,"author":{"gitId":"colintkn"},"content":"        assertThrows(NullPointerException.class, ()","lastModifiedDate":"2021-03-31"},{"lineNumber":163,"author":{"gitId":"colintkn"},"content":"            -\u003e uniqueResidentRoomList.setResidentRooms((List\u003cResidentRoom\u003e) null));","lastModifiedDate":"2021-03-31"},{"lineNumber":164,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":165,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":166,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":167,"author":{"gitId":"colintkn"},"content":"    public void setResidentRooms_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2021-03-31"},{"lineNumber":168,"author":{"gitId":"colintkn"},"content":"        uniqueResidentRoomList.add(ALICE_ROOM_NUMBER);","lastModifiedDate":"2021-04-05"},{"lineNumber":169,"author":{"gitId":"colintkn"},"content":"        List\u003cResidentRoom\u003e residentRoomList \u003d Collections.singletonList(BOB_ROOM_NUMBER);","lastModifiedDate":"2021-04-05"},{"lineNumber":170,"author":{"gitId":"colintkn"},"content":"        uniqueResidentRoomList.setResidentRooms(residentRoomList);","lastModifiedDate":"2021-03-31"},{"lineNumber":171,"author":{"gitId":"colintkn"},"content":"        UniqueResidentRoomList expectedUniqueResidentRoomList \u003d new UniqueResidentRoomList();","lastModifiedDate":"2021-03-31"},{"lineNumber":172,"author":{"gitId":"colintkn"},"content":"        expectedUniqueResidentRoomList.add(BOB_ROOM_NUMBER);","lastModifiedDate":"2021-04-05"},{"lineNumber":173,"author":{"gitId":"colintkn"},"content":"        assertEquals(expectedUniqueResidentRoomList, uniqueResidentRoomList);","lastModifiedDate":"2021-03-31"},{"lineNumber":174,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":175,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":176,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":177,"author":{"gitId":"colintkn"},"content":"    public void setResidentRooms_listWithDuplicateResidentRoom_throwsDuplicateResidentRoomException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":178,"author":{"gitId":"colintkn"},"content":"        List\u003cResidentRoom\u003e listWithDuplicateResidentRoom \u003d Arrays.asList(ALICE_ROOM_NUMBER, ALICE_ROOM_NUMBER);","lastModifiedDate":"2021-04-05"},{"lineNumber":179,"author":{"gitId":"colintkn"},"content":"        assertThrows(DuplicateResidentRoomException.class, () -\u003e uniqueResidentRoomList","lastModifiedDate":"2021-03-31"},{"lineNumber":180,"author":{"gitId":"colintkn"},"content":"                .setResidentRooms(listWithDuplicateResidentRoom));","lastModifiedDate":"2021-03-31"},{"lineNumber":181,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":182,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":183,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":184,"author":{"gitId":"colintkn"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-03-31"},{"lineNumber":185,"author":{"gitId":"colintkn"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2021-03-31"},{"lineNumber":186,"author":{"gitId":"colintkn"},"content":"            -\u003e uniqueResidentRoomList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2021-03-31"},{"lineNumber":187,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":188,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"colintkn":188}},{"path":"src/test/java/seedu/address/model/room/RoomNumberOrTagsContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;","lastModifiedDate":"2021-04-03"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-04-03"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-04-03"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.room.TypicalRooms.ROOM_SUITE_AC_NOT_OCCUPIED;","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-04-03"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import java.util.Collections;","lastModifiedDate":"2021-04-03"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import java.util.List;","lastModifiedDate":"2021-04-03"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-03"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import seedu.address.testutil.room.RoomBuilder;","lastModifiedDate":"2021-04-03"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"public class RoomNumberOrTagsContainsKeywordsPredicateTest {","lastModifiedDate":"2021-04-03"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    public void equals() {","lastModifiedDate":"2021-04-03"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2021-04-03"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2021-04-03"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"        RoomNumberOrTagsContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-04-03"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"                new RoomNumberOrTagsContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-04-03"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"        RoomNumberOrTagsContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-04-03"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"                new RoomNumberOrTagsContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-04-03"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-04-03"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-04-03"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-04-03"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        RoomNumberOrTagsContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-04-03"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"                new RoomNumberOrTagsContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-04-03"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-04-03"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-04-03"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-04-03"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-04-03"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-04-03"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        // different resident -\u003e returns false","lastModifiedDate":"2021-04-03"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-04-03"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"    public void test_roomNumberContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-04-03"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        // One keyword","lastModifiedDate":"2021-04-03"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"        RoomNumberOrTagsContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2021-04-03"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"                new RoomNumberOrTagsContainsKeywordsPredicate(Collections.singletonList(\"01\"));","lastModifiedDate":"2021-04-03"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        assertTrue(predicate.test(new RoomBuilder().withRoomNumber(\"01-123\").build()));","lastModifiedDate":"2021-04-03"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        predicate \u003d new RoomNumberOrTagsContainsKeywordsPredicate(Collections.singletonList(\"123\"));","lastModifiedDate":"2021-04-03"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        assertTrue(predicate.test(new RoomBuilder().withRoomNumber(\"01-123\").build()));","lastModifiedDate":"2021-04-03"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"        predicate \u003d new RoomNumberOrTagsContainsKeywordsPredicate(Collections.singletonList(\"01-123\"));","lastModifiedDate":"2021-04-03"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"        assertTrue(predicate.test(new RoomBuilder().withRoomNumber(\"01-123\").build()));","lastModifiedDate":"2021-04-03"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"        // Multiple keywords","lastModifiedDate":"2021-04-03"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"        predicate \u003d new RoomNumberOrTagsContainsKeywordsPredicate(Arrays.asList(\"01\", \"02\"));","lastModifiedDate":"2021-04-03"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"        assertTrue(predicate.test(new RoomBuilder().withRoomNumber(\"01-021\").build()));","lastModifiedDate":"2021-04-03"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-04-03"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"        predicate \u003d new RoomNumberOrTagsContainsKeywordsPredicate(Arrays.asList(\"01\", \"02\"));","lastModifiedDate":"2021-04-03"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"        assertTrue(predicate.test(new RoomBuilder().withRoomNumber(\"02-123\").build()));","lastModifiedDate":"2021-04-03"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"    public void test_roomNumberDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-04-03"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"        // Zero keywords","lastModifiedDate":"2021-04-03"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"        RoomNumberOrTagsContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2021-04-03"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"                new RoomNumberOrTagsContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-04-03"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"        assertFalse(predicate.test(new RoomBuilder().withRoomNumber(\"01-123\").build()));","lastModifiedDate":"2021-04-03"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-04-03"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"        predicate \u003d new RoomNumberOrTagsContainsKeywordsPredicate(Arrays.asList(\"01-123\"));","lastModifiedDate":"2021-04-03"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"        assertFalse(predicate.test(new RoomBuilder().withRoomNumber(\"02-234\").build()));","lastModifiedDate":"2021-04-03"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"        // Keywords match occupancy and room type, but does not match room number","lastModifiedDate":"2021-04-03"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"        predicate \u003d new RoomNumberOrTagsContainsKeywordsPredicate(Arrays.asList(\"suite_ac\", \"n\"));","lastModifiedDate":"2021-04-03"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"        assertFalse(predicate.test(new RoomBuilder(ROOM_SUITE_AC_NOT_OCCUPIED)","lastModifiedDate":"2021-04-05"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"                .build()));","lastModifiedDate":"2021-04-03"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"    public void test_tagContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-04-03"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"        // One keyword","lastModifiedDate":"2021-04-03"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"        RoomNumberOrTagsContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2021-04-03"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"                new RoomNumberOrTagsContainsKeywordsPredicate(Collections.singletonList(\"tagOne\"));","lastModifiedDate":"2021-04-03"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"        assertTrue(predicate.test(new RoomBuilder().withTags(\"tagOne\").build()));","lastModifiedDate":"2021-04-03"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"        // Multiple keywords","lastModifiedDate":"2021-04-03"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"        predicate \u003d new RoomNumberOrTagsContainsKeywordsPredicate(Arrays.asList(\"tagOne\", \"tagTwo\"));","lastModifiedDate":"2021-04-03"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"        assertTrue(predicate.test(new RoomBuilder().withTags(\"tagOne\").build()));","lastModifiedDate":"2021-04-03"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-04-03"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"        predicate \u003d new RoomNumberOrTagsContainsKeywordsPredicate(Arrays.asList(\"tagOne\", \"tagTwo\"));","lastModifiedDate":"2021-04-03"},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"        assertTrue(predicate.test(new RoomBuilder().withTags(\"tagZero\", \"tagOne\").build()));","lastModifiedDate":"2021-04-03"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":"    public void test_tagDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-04-03"},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"        // Zero keywords","lastModifiedDate":"2021-04-03"},{"lineNumber":104,"author":{"gitId":"DrWala"},"content":"        RoomNumberOrTagsContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2021-04-03"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":"                new RoomNumberOrTagsContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-04-03"},{"lineNumber":106,"author":{"gitId":"DrWala"},"content":"        assertFalse(predicate.test(new RoomBuilder().withTags(\"tagOne\").build()));","lastModifiedDate":"2021-04-03"},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-04-03"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":"        predicate \u003d new RoomNumberOrTagsContainsKeywordsPredicate(Arrays.asList(\"tagOne\", \"tagTwo\"));","lastModifiedDate":"2021-04-03"},{"lineNumber":110,"author":{"gitId":"DrWala"},"content":"        assertFalse(predicate.test(new RoomBuilder().withTags(\"tagThree\").build()));","lastModifiedDate":"2021-04-03"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":112,"author":{"gitId":"DrWala"},"content":"        // Keywords match occupancy and room type, but does not match room number","lastModifiedDate":"2021-04-03"},{"lineNumber":113,"author":{"gitId":"DrWala"},"content":"        predicate \u003d new RoomNumberOrTagsContainsKeywordsPredicate(Arrays.asList(\"suite_ac\", \"n\"));","lastModifiedDate":"2021-04-03"},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":"        assertFalse(predicate.test(new RoomBuilder(ROOM_SUITE_AC_NOT_OCCUPIED)","lastModifiedDate":"2021-04-05"},{"lineNumber":115,"author":{"gitId":"DrWala"},"content":"                .withTags(\"LOW\") // Tag \"Low\" does not contain any of the characters in \"suite_ac\" and \"N\"","lastModifiedDate":"2021-04-03"},{"lineNumber":116,"author":{"gitId":"DrWala"},"content":"                .build()));","lastModifiedDate":"2021-04-03"},{"lineNumber":117,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":118,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-04-03"}],"authorContributionMap":{"DrWala":118}},{"path":"src/test/java/seedu/address/model/room/RoomNumberTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;","lastModifiedDate":"2021-04-03"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-04-03"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-04-03"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-04-03"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-03"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"public class RoomNumberTest {","lastModifiedDate":"2021-04-03"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"        assertThrows(NullPointerException.class, () -\u003e new RoomNumber(null));","lastModifiedDate":"2021-04-03"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    public void constructor_invalidRoom_throwsIllegalArgumentException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"        String invalidRoomNumber \u003d \"\";","lastModifiedDate":"2021-04-03"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new RoomNumber(invalidRoomNumber));","lastModifiedDate":"2021-04-03"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    public void isValidRoomNumber() {","lastModifiedDate":"2021-04-03"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"        // null room number","lastModifiedDate":"2021-04-03"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"        assertThrows(NullPointerException.class, () -\u003e RoomNumber.isValidRoomNumber(null));","lastModifiedDate":"2021-04-03"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"        // invalid room number","lastModifiedDate":"2021-04-03"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"        assertFalse(RoomNumber.isValidRoomNumber(\"\")); // empty string","lastModifiedDate":"2021-04-03"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"        assertFalse(RoomNumber.isValidRoomNumber(\" \")); // spaces only","lastModifiedDate":"2021-04-03"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"        assertFalse(RoomNumber.isValidRoomNumber(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2021-04-03"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        assertFalse(RoomNumber.isValidRoomNumber(\"01-010*\")); // contains non-alphanumeric characters","lastModifiedDate":"2021-04-03"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"        assertFalse(RoomNumber.isValidRoomNumber(\"1-010\")); // format does not conform for floor number","lastModifiedDate":"2021-04-03"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        assertFalse(RoomNumber.isValidRoomNumber(\"01-00\")); // format does not conform for unit number","lastModifiedDate":"2021-04-03"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"        // valid room number","lastModifiedDate":"2021-04-03"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"        assertTrue(RoomNumber.isValidRoomNumber(\"12-123\")); // correct format","lastModifiedDate":"2021-04-03"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        assertTrue(RoomNumber.isValidRoomNumber(\"02-123\")); // correct format floor number start with 0","lastModifiedDate":"2021-04-03"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        assertTrue(RoomNumber.isValidRoomNumber(\"02-003\")); // correct format unit number start with 00","lastModifiedDate":"2021-04-03"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        assertTrue(RoomNumber.isValidRoomNumber(\"02-023\")); // correct format unit number start with 0","lastModifiedDate":"2021-04-03"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    public void equals() {","lastModifiedDate":"2021-04-03"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        RoomNumber roomNumber \u003d new RoomNumber(\"01-001\");","lastModifiedDate":"2021-04-03"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-04-03"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"        assertTrue(roomNumber.equals(roomNumber));","lastModifiedDate":"2021-04-03"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"        RoomNumber anotherRoomNumber \u003d new RoomNumber(\"01-001\");","lastModifiedDate":"2021-04-03"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        // diff object, same values -\u003e return true","lastModifiedDate":"2021-04-03"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        assertTrue(roomNumber.equals(anotherRoomNumber));","lastModifiedDate":"2021-04-03"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        anotherRoomNumber \u003d new RoomNumber(\"02-001\");","lastModifiedDate":"2021-04-03"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        // diff object, diff values -\u003e return false","lastModifiedDate":"2021-04-03"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        assertFalse(roomNumber.equals(anotherRoomNumber));","lastModifiedDate":"2021-04-03"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-04-03"}],"authorContributionMap":{"DrWala":56}},{"path":"src/test/java/seedu/address/model/room/RoomOccupancyTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;","lastModifiedDate":"2021-04-03"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-04-03"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-04-03"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-04-03"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-03"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"public class RoomOccupancyTest {","lastModifiedDate":"2021-04-03"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"        assertThrows(NullPointerException.class, () -\u003e new IsOccupied(null));","lastModifiedDate":"2021-04-03"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    public void constructor_invalidIsOccupied_throwsIllegalArgumentException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"        String invalidOccupancyStatus \u003d \"\";","lastModifiedDate":"2021-04-03"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new IsOccupied(invalidOccupancyStatus));","lastModifiedDate":"2021-04-03"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    public void isValidRoomNumber() {","lastModifiedDate":"2021-04-03"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"        // null occupancy status","lastModifiedDate":"2021-04-03"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"        assertThrows(NullPointerException.class, () -\u003e IsOccupied.isValidOccupancyStatus(null));","lastModifiedDate":"2021-04-03"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"        // invalid occupancy status","lastModifiedDate":"2021-04-03"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"        assertFalse(IsOccupied.isValidOccupancyStatus(\"\")); // empty string","lastModifiedDate":"2021-04-03"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"        assertFalse(IsOccupied.isValidOccupancyStatus(\" \")); // spaces only","lastModifiedDate":"2021-04-03"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"        assertFalse(IsOccupied.isValidOccupancyStatus(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2021-04-03"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        assertFalse(IsOccupied.isValidOccupancyStatus(\"X\")); // Not Y or N","lastModifiedDate":"2021-04-03"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"        assertFalse(IsOccupied.isValidOccupancyStatus(\"Yak\")); // Multiple characters starting with Y","lastModifiedDate":"2021-04-03"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        assertFalse(IsOccupied.isValidOccupancyStatus(\"Norway\")); // Multiple characters starting with N","lastModifiedDate":"2021-04-03"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"        // valid occupancy status","lastModifiedDate":"2021-04-03"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"        assertTrue(IsOccupied.isValidOccupancyStatus(\"Y\"));","lastModifiedDate":"2021-04-03"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        assertTrue(IsOccupied.isValidOccupancyStatus(\"N\"));","lastModifiedDate":"2021-04-03"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"    public void equals() {","lastModifiedDate":"2021-04-03"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        IsOccupied isOccupied \u003d new IsOccupied(\"Y\");","lastModifiedDate":"2021-04-03"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        // same object -\u003e return true","lastModifiedDate":"2021-04-03"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        assertTrue(isOccupied.equals(isOccupied));","lastModifiedDate":"2021-04-03"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"        IsOccupied anotherIsOccupied \u003d new IsOccupied(\"Y\");","lastModifiedDate":"2021-04-03"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        // diff object, same values -\u003e return true","lastModifiedDate":"2021-04-03"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"        assertTrue(isOccupied.equals(isOccupied));","lastModifiedDate":"2021-04-03"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        anotherIsOccupied \u003d new IsOccupied(\"N\");","lastModifiedDate":"2021-04-03"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"        // diff object, diff values -\u003e return false","lastModifiedDate":"2021-04-03"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        assertFalse(isOccupied.equals(anotherIsOccupied));","lastModifiedDate":"2021-04-03"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-04-03"}],"authorContributionMap":{"DrWala":54}},{"path":"src/test/java/seedu/address/model/room/RoomTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;","lastModifiedDate":"2021-04-03"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-04-03"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-04-03"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.room.TypicalRooms.ROOM_CORRIDOR_NON_AC_OCCUPIED;","lastModifiedDate":"2021-04-03"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.room.TypicalRooms.ROOM_SUITE_AC_NOT_OCCUPIED;","lastModifiedDate":"2021-04-03"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-03"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.testutil.room.RoomBuilder;","lastModifiedDate":"2021-04-03"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"public class RoomTest {","lastModifiedDate":"2021-04-03"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    public void isSameRoom() {","lastModifiedDate":"2021-04-03"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-04-03"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"        assertTrue(ROOM_CORRIDOR_NON_AC_OCCUPIED.isSameRoom(ROOM_CORRIDOR_NON_AC_OCCUPIED));","lastModifiedDate":"2021-04-03"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-04-03"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"        assertFalse(ROOM_CORRIDOR_NON_AC_OCCUPIED.isSameRoom(null));","lastModifiedDate":"2021-04-03"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2021-04-03"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"        Room editedRoomOne \u003d new RoomBuilder(ROOM_CORRIDOR_NON_AC_OCCUPIED)","lastModifiedDate":"2021-04-03"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"                .withOccupancyStatus(\"N\")","lastModifiedDate":"2021-04-03"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"                .withRoomType(\"suite_ac\")","lastModifiedDate":"2021-04-03"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"                .build();","lastModifiedDate":"2021-04-03"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"        assertTrue(ROOM_CORRIDOR_NON_AC_OCCUPIED.isSameRoom(editedRoomOne));","lastModifiedDate":"2021-04-03"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"        // different room number, all other attributes same -\u003e returns false","lastModifiedDate":"2021-04-03"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"        editedRoomOne \u003d new RoomBuilder(ROOM_CORRIDOR_NON_AC_OCCUPIED).withRoomNumber(\"22-100\").build();","lastModifiedDate":"2021-04-03"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        assertFalse(ROOM_CORRIDOR_NON_AC_OCCUPIED.isSameRoom(editedRoomOne));","lastModifiedDate":"2021-04-03"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    public void equals() {","lastModifiedDate":"2021-04-03"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-04-03"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        Room roomCopy \u003d new RoomBuilder(ROOM_CORRIDOR_NON_AC_OCCUPIED).build();","lastModifiedDate":"2021-04-03"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        assertTrue(ROOM_CORRIDOR_NON_AC_OCCUPIED.equals(roomCopy));","lastModifiedDate":"2021-04-03"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-04-03"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        assertTrue(ROOM_CORRIDOR_NON_AC_OCCUPIED.equals(ROOM_CORRIDOR_NON_AC_OCCUPIED));","lastModifiedDate":"2021-04-03"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-04-03"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        assertFalse(ROOM_CORRIDOR_NON_AC_OCCUPIED.equals(null));","lastModifiedDate":"2021-04-03"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2021-04-03"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        assertFalse(ROOM_CORRIDOR_NON_AC_OCCUPIED.equals(5));","lastModifiedDate":"2021-04-03"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        // different room -\u003e returns false","lastModifiedDate":"2021-04-03"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        assertFalse(ROOM_CORRIDOR_NON_AC_OCCUPIED.equals(ROOM_SUITE_AC_NOT_OCCUPIED));","lastModifiedDate":"2021-04-03"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        // different room number -\u003e returns false","lastModifiedDate":"2021-04-03"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        Room editedRoom \u003d new RoomBuilder(ROOM_CORRIDOR_NON_AC_OCCUPIED).withRoomNumber(\"14-100\").build();","lastModifiedDate":"2021-04-03"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        assertFalse(ROOM_CORRIDOR_NON_AC_OCCUPIED.equals(editedRoom));","lastModifiedDate":"2021-04-03"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"        // different room type -\u003e returns false","lastModifiedDate":"2021-04-03"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"        editedRoom \u003d new RoomBuilder(ROOM_CORRIDOR_NON_AC_OCCUPIED).withRoomType(\"suite_ac\").build();","lastModifiedDate":"2021-04-03"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"        assertFalse(ROOM_CORRIDOR_NON_AC_OCCUPIED.equals(editedRoom));","lastModifiedDate":"2021-04-03"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"        // different occupancy -\u003e returns false","lastModifiedDate":"2021-04-03"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"        editedRoom \u003d new RoomBuilder(ROOM_CORRIDOR_NON_AC_OCCUPIED).withOccupancyStatus(\"N\").build();","lastModifiedDate":"2021-04-03"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"        assertFalse(ROOM_CORRIDOR_NON_AC_OCCUPIED.equals(editedRoom));","lastModifiedDate":"2021-04-03"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-04-03"}],"authorContributionMap":{"DrWala":63}},{"path":"src/test/java/seedu/address/model/room/UniqueRoomListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.model.room;","lastModifiedDate":"2021-04-03"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-04-03"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-04-03"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-04-03"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-04-03"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-04-03"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.room.TypicalRooms.ROOM_CORRIDOR_NON_AC_OCCUPIED;","lastModifiedDate":"2021-04-03"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.room.TypicalRooms.ROOM_SUITE_AC_OCCUPIED;","lastModifiedDate":"2021-04-03"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-04-03"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import java.util.Collections;","lastModifiedDate":"2021-04-03"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import java.util.List;","lastModifiedDate":"2021-04-03"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-03"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.exceptions.DuplicateRoomException;","lastModifiedDate":"2021-04-03"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.exceptions.RoomNotFoundException;","lastModifiedDate":"2021-04-03"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"import seedu.address.testutil.room.RoomBuilder;","lastModifiedDate":"2021-04-03"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"public class UniqueRoomListTest {","lastModifiedDate":"2021-04-03"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    private final UniqueRoomList uniqueRoomList \u003d new UniqueRoomList();","lastModifiedDate":"2021-04-03"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    public void contains_nullRoom_throwsNullPointerException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueRoomList.contains((Room) null));","lastModifiedDate":"2021-04-03"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    public void contains_roomNotInList_returnsFalse() {","lastModifiedDate":"2021-04-03"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        assertFalse(uniqueRoomList.contains(ROOM_CORRIDOR_NON_AC_OCCUPIED));","lastModifiedDate":"2021-04-03"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    public void contains_roomInList_returnsTrue() {","lastModifiedDate":"2021-04-03"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.add(ROOM_CORRIDOR_NON_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        assertTrue(uniqueRoomList.contains(ROOM_CORRIDOR_NON_AC_OCCUPIED));","lastModifiedDate":"2021-04-03"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    public void contains_roomWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2021-04-03"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.add(ROOM_CORRIDOR_NON_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        Room editedRoom \u003d new RoomBuilder(ROOM_CORRIDOR_NON_AC_OCCUPIED).build();","lastModifiedDate":"2021-04-03"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"        assertTrue(uniqueRoomList.contains(editedRoom));","lastModifiedDate":"2021-04-03"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"    public void add_nullRoom_throwsNullPointerException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueRoomList.add(null));","lastModifiedDate":"2021-04-03"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"    public void add_duplicateRoom_throwsDuplicateRoomException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.add(ROOM_CORRIDOR_NON_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"        assertThrows(DuplicateRoomException.class, () -\u003e uniqueRoomList.add(ROOM_CORRIDOR_NON_AC_OCCUPIED));","lastModifiedDate":"2021-04-03"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"    public void setRoom_nullTargetRoom_throwsNullPointerException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2021-04-03"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"                uniqueRoomList.setRoom(null, ROOM_CORRIDOR_NON_AC_OCCUPIED));","lastModifiedDate":"2021-04-03"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"    public void setRoom_nullEditedRoom_throwsNullPointerException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2021-04-03"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"                uniqueRoomList.setRoom(ROOM_CORRIDOR_NON_AC_OCCUPIED, null));","lastModifiedDate":"2021-04-03"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"    public void setRoom_targetRoomNotInList_throwsRoomNotFoundException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"        assertThrows(RoomNotFoundException.class, () -\u003e","lastModifiedDate":"2021-04-03"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"                uniqueRoomList.setRoom(ROOM_CORRIDOR_NON_AC_OCCUPIED, ROOM_CORRIDOR_NON_AC_OCCUPIED));","lastModifiedDate":"2021-04-03"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"    public void setRoom_editedRoomIsSameRoom_success() {","lastModifiedDate":"2021-04-03"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.add(ROOM_CORRIDOR_NON_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.setRoom(ROOM_CORRIDOR_NON_AC_OCCUPIED, ROOM_CORRIDOR_NON_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"        UniqueRoomList expectedUniqueRoomList \u003d new UniqueRoomList();","lastModifiedDate":"2021-04-03"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"        expectedUniqueRoomList.add(ROOM_CORRIDOR_NON_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"        assertEquals(expectedUniqueRoomList, uniqueRoomList);","lastModifiedDate":"2021-04-03"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"    public void setRoom_editedRoomHasSameIdentity_success() {","lastModifiedDate":"2021-04-03"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.add(ROOM_CORRIDOR_NON_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"        Room editedRoom \u003d new RoomBuilder(ROOM_CORRIDOR_NON_AC_OCCUPIED)","lastModifiedDate":"2021-04-03"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"                .build();","lastModifiedDate":"2021-04-03"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.setRoom(ROOM_CORRIDOR_NON_AC_OCCUPIED, editedRoom);","lastModifiedDate":"2021-04-03"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"        UniqueRoomList expectedUniqueRoomList \u003d new UniqueRoomList();","lastModifiedDate":"2021-04-03"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"        expectedUniqueRoomList.add(editedRoom);","lastModifiedDate":"2021-04-03"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"        assertEquals(expectedUniqueRoomList, uniqueRoomList);","lastModifiedDate":"2021-04-03"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"    public void setRoom_editedRoomHasDifferentIdentity_success() {","lastModifiedDate":"2021-04-03"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.add(ROOM_CORRIDOR_NON_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.setRoom(ROOM_CORRIDOR_NON_AC_OCCUPIED, ROOM_SUITE_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":"        UniqueRoomList expectedUniqueRoomList \u003d new UniqueRoomList();","lastModifiedDate":"2021-04-03"},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":"        expectedUniqueRoomList.add(ROOM_SUITE_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"        assertEquals(expectedUniqueRoomList, uniqueRoomList);","lastModifiedDate":"2021-04-03"},{"lineNumber":104,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":106,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"    public void setRoom_editedRoomHasNonUniqueIdentity_throwsDuplicateRoomException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.add(ROOM_CORRIDOR_NON_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.add(ROOM_SUITE_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":110,"author":{"gitId":"DrWala"},"content":"        assertThrows(DuplicateRoomException.class, () -\u003e","lastModifiedDate":"2021-04-03"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":"                uniqueRoomList.setRoom(ROOM_CORRIDOR_NON_AC_OCCUPIED, ROOM_SUITE_AC_OCCUPIED));","lastModifiedDate":"2021-04-03"},{"lineNumber":112,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":113,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":115,"author":{"gitId":"DrWala"},"content":"    public void remove_nullRoom_throwsNullPointerException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":116,"author":{"gitId":"DrWala"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueRoomList.remove(null));","lastModifiedDate":"2021-04-03"},{"lineNumber":117,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":118,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":119,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":120,"author":{"gitId":"DrWala"},"content":"    public void remove_roomDoesNotExist_throwsRoomNotFoundException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":121,"author":{"gitId":"DrWala"},"content":"        assertThrows(RoomNotFoundException.class, () -\u003e uniqueRoomList.remove(ROOM_CORRIDOR_NON_AC_OCCUPIED));","lastModifiedDate":"2021-04-03"},{"lineNumber":122,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":123,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":124,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":125,"author":{"gitId":"DrWala"},"content":"    public void remove_existingRoom_removesRoom() {","lastModifiedDate":"2021-04-03"},{"lineNumber":126,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.add(ROOM_CORRIDOR_NON_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":127,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.remove(ROOM_CORRIDOR_NON_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":128,"author":{"gitId":"DrWala"},"content":"        UniqueRoomList expectedUniqueRoomList \u003d new UniqueRoomList();","lastModifiedDate":"2021-04-03"},{"lineNumber":129,"author":{"gitId":"DrWala"},"content":"        assertEquals(expectedUniqueRoomList, uniqueRoomList);","lastModifiedDate":"2021-04-03"},{"lineNumber":130,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":131,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":132,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":133,"author":{"gitId":"DrWala"},"content":"    public void setRooms_nullUniqueRoomList_throwsNullPointerException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":134,"author":{"gitId":"DrWala"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueRoomList.setRooms((UniqueRoomList) null));","lastModifiedDate":"2021-04-03"},{"lineNumber":135,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":136,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":137,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":138,"author":{"gitId":"DrWala"},"content":"    public void setRooms_uniqueRoomList_replacesOwnListWithProvidedUniqueRoomList() {","lastModifiedDate":"2021-04-03"},{"lineNumber":139,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.add(ROOM_CORRIDOR_NON_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":140,"author":{"gitId":"DrWala"},"content":"        UniqueRoomList expectedUniqueRoomList \u003d new UniqueRoomList();","lastModifiedDate":"2021-04-03"},{"lineNumber":141,"author":{"gitId":"DrWala"},"content":"        expectedUniqueRoomList.add(ROOM_SUITE_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":142,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.setRooms(expectedUniqueRoomList);","lastModifiedDate":"2021-04-03"},{"lineNumber":143,"author":{"gitId":"DrWala"},"content":"        assertEquals(expectedUniqueRoomList, uniqueRoomList);","lastModifiedDate":"2021-04-03"},{"lineNumber":144,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":145,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":146,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":147,"author":{"gitId":"DrWala"},"content":"    public void setRooms_nullList_throwsNullPointerException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":148,"author":{"gitId":"DrWala"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueRoomList.setRooms((List\u003cRoom\u003e) null));","lastModifiedDate":"2021-04-03"},{"lineNumber":149,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":150,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":151,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":152,"author":{"gitId":"DrWala"},"content":"    public void setRooms_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2021-04-03"},{"lineNumber":153,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.add(ROOM_CORRIDOR_NON_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":154,"author":{"gitId":"DrWala"},"content":"        List\u003cRoom\u003e roomList \u003d Collections.singletonList(ROOM_SUITE_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":155,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.setRooms(roomList);","lastModifiedDate":"2021-04-03"},{"lineNumber":156,"author":{"gitId":"DrWala"},"content":"        UniqueRoomList expectedUniqueRoomList \u003d new UniqueRoomList();","lastModifiedDate":"2021-04-03"},{"lineNumber":157,"author":{"gitId":"DrWala"},"content":"        expectedUniqueRoomList.add(ROOM_SUITE_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":158,"author":{"gitId":"DrWala"},"content":"        assertEquals(expectedUniqueRoomList, uniqueRoomList);","lastModifiedDate":"2021-04-03"},{"lineNumber":159,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":160,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":161,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":162,"author":{"gitId":"DrWala"},"content":"    public void setRooms_listWithDuplicateRooms_throwsDuplicateRoomException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":163,"author":{"gitId":"DrWala"},"content":"        List\u003cRoom\u003e listWithDuplicateRooms \u003d Arrays.asList(ROOM_CORRIDOR_NON_AC_OCCUPIED, ROOM_CORRIDOR_NON_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":164,"author":{"gitId":"DrWala"},"content":"        assertThrows(DuplicateRoomException.class, () -\u003e uniqueRoomList","lastModifiedDate":"2021-04-03"},{"lineNumber":165,"author":{"gitId":"DrWala"},"content":"                .setRooms(listWithDuplicateRooms));","lastModifiedDate":"2021-04-03"},{"lineNumber":166,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":167,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":168,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":169,"author":{"gitId":"DrWala"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":170,"author":{"gitId":"DrWala"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e","lastModifiedDate":"2021-04-03"},{"lineNumber":171,"author":{"gitId":"DrWala"},"content":"                uniqueRoomList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2021-04-03"},{"lineNumber":172,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":173,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":174,"author":{"gitId":"DrWala"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":175,"author":{"gitId":"DrWala"},"content":"    public void equals() {","lastModifiedDate":"2021-04-03"},{"lineNumber":176,"author":{"gitId":"DrWala"},"content":"        UniqueRoomList expectedUniqueRoomList \u003d new UniqueRoomList();","lastModifiedDate":"2021-04-03"},{"lineNumber":177,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":178,"author":{"gitId":"DrWala"},"content":"        // same object -\u003e return true (when empty)","lastModifiedDate":"2021-04-03"},{"lineNumber":179,"author":{"gitId":"DrWala"},"content":"        assertEquals(uniqueRoomList, uniqueRoomList);","lastModifiedDate":"2021-04-03"},{"lineNumber":180,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":181,"author":{"gitId":"DrWala"},"content":"        // diff types -\u003e return false","lastModifiedDate":"2021-04-03"},{"lineNumber":182,"author":{"gitId":"DrWala"},"content":"        assertNotEquals(uniqueRoomList, 5);","lastModifiedDate":"2021-04-03"},{"lineNumber":183,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":184,"author":{"gitId":"DrWala"},"content":"        // null -\u003e return false","lastModifiedDate":"2021-04-03"},{"lineNumber":185,"author":{"gitId":"DrWala"},"content":"        assertNotEquals(uniqueRoomList, null);","lastModifiedDate":"2021-04-03"},{"lineNumber":186,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":187,"author":{"gitId":"DrWala"},"content":"        // diff object -\u003e return true (when empty)","lastModifiedDate":"2021-04-03"},{"lineNumber":188,"author":{"gitId":"DrWala"},"content":"        assertEquals(uniqueRoomList, expectedUniqueRoomList);","lastModifiedDate":"2021-04-03"},{"lineNumber":189,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":190,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":191,"author":{"gitId":"DrWala"},"content":"        // same object -\u003e return true (with items)","lastModifiedDate":"2021-04-03"},{"lineNumber":192,"author":{"gitId":"DrWala"},"content":"        uniqueRoomList.add(ROOM_CORRIDOR_NON_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":193,"author":{"gitId":"DrWala"},"content":"        assertEquals(uniqueRoomList, uniqueRoomList);","lastModifiedDate":"2021-04-03"},{"lineNumber":194,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":195,"author":{"gitId":"DrWala"},"content":"        // diff object -\u003e return true (with same items)","lastModifiedDate":"2021-04-03"},{"lineNumber":196,"author":{"gitId":"DrWala"},"content":"        expectedUniqueRoomList.add(ROOM_CORRIDOR_NON_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":197,"author":{"gitId":"DrWala"},"content":"        assertEquals(uniqueRoomList, expectedUniqueRoomList);","lastModifiedDate":"2021-04-03"},{"lineNumber":198,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":199,"author":{"gitId":"DrWala"},"content":"        // diff object, diff items -\u003e return false (with same items)","lastModifiedDate":"2021-04-03"},{"lineNumber":200,"author":{"gitId":"DrWala"},"content":"        expectedUniqueRoomList.add(ROOM_SUITE_AC_OCCUPIED);","lastModifiedDate":"2021-04-03"},{"lineNumber":201,"author":{"gitId":"DrWala"},"content":"        assertNotEquals(uniqueRoomList, expectedUniqueRoomList);","lastModifiedDate":"2021-04-03"},{"lineNumber":202,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":203,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":204,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-04-03"}],"authorContributionMap":{"DrWala":204}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedResidentRoomTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-04-03"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-04-03"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-04-03"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_BOB;","lastModifiedDate":"2021-04-03"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.storage.JsonAdaptedResident.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-04-03"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-04-03"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-03"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-04-03"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-04-03"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.room.RoomNumber;","lastModifiedDate":"2021-04-03"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.resident.TypicalResidents;","lastModifiedDate":"2021-04-04"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.testutil.residentroom.TypicalResidentRooms;","lastModifiedDate":"2021-04-03"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"public class JsonAdaptedResidentRoomTest {","lastModifiedDate":"2021-04-03"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2021-04-03"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"    private static final String INVALID_ROOM_NUMBER \u003d \"03145\";","lastModifiedDate":"2021-04-03"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    private static final String VALID_NAME \u003d TypicalResidents.BOB.getName().toString();","lastModifiedDate":"2021-04-04"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    private static final String VALID_ROOM_NUMBER \u003d TypicalResidents.BOB.getRoom().toString();","lastModifiedDate":"2021-04-04"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-04"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"    public void toModelType_validResidentRoom_returnsResidentRoom() throws Exception {","lastModifiedDate":"2021-04-04"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResidentRoom residentRoom \u003d new JsonAdaptedResidentRoom(TypicalResidentRooms.BOB_ROOM_NUMBER);","lastModifiedDate":"2021-04-05"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"        assertEquals(TypicalResidentRooms.BOB_ROOM_NUMBER, residentRoom.toModelType());","lastModifiedDate":"2021-04-05"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"    public void toModelType_validResidentRoomDetails_returnsResidentRoom() throws Exception {","lastModifiedDate":"2021-04-03"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResidentRoom residentRoom \u003d new JsonAdaptedResidentRoom(VALID_NAME_BOB, VALID_ROOM_NUMBER_BOB);","lastModifiedDate":"2021-04-03"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        assertEquals(TypicalResidentRooms.BOB_ROOM_NUMBER, residentRoom.toModelType());","lastModifiedDate":"2021-04-05"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResidentRoom residentRoom \u003d","lastModifiedDate":"2021-04-03"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"                new JsonAdaptedResidentRoom(INVALID_NAME, VALID_ROOM_NUMBER);","lastModifiedDate":"2021-04-03"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-04-03"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, residentRoom::toModelType);","lastModifiedDate":"2021-04-03"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResidentRoom residentRoom \u003d new JsonAdaptedResidentRoom(null, VALID_ROOM_NUMBER);","lastModifiedDate":"2021-04-03"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2021-04-03"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, residentRoom::toModelType);","lastModifiedDate":"2021-04-03"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"    public void toModelType_invalidRoomNumber_throwsIllegalValueException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResidentRoom residentRoom \u003d","lastModifiedDate":"2021-04-03"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"                new JsonAdaptedResidentRoom(VALID_NAME, INVALID_ROOM_NUMBER);","lastModifiedDate":"2021-04-03"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d RoomNumber.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-04-03"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, residentRoom::toModelType);","lastModifiedDate":"2021-04-03"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-04-03"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"    public void toModelType_nullRoomNumber_throwsIllegalValueException() {","lastModifiedDate":"2021-04-03"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResidentRoom residentRoom \u003d","lastModifiedDate":"2021-04-03"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"                new JsonAdaptedResidentRoom(VALID_NAME, null);","lastModifiedDate":"2021-04-03"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, RoomNumber.class.getSimpleName());","lastModifiedDate":"2021-04-03"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, residentRoom::toModelType);","lastModifiedDate":"2021-04-03"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-03"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-04-03"}],"authorContributionMap":{"colintkn":66}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedResidentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.storage.JsonAdaptedResident.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.BENSON;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;","lastModifiedDate":"2021-03-02"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-02"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;","lastModifiedDate":"2021-03-02"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;","lastModifiedDate":"2021-03-02"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;","lastModifiedDate":"2021-03-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"public class JsonAdaptedResidentTest {","lastModifiedDate":"2021-03-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    private static final String INVALID_YEAR \u003d \"6\";","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    private static final String INVALID_ROOM \u003d \"03145\";","lastModifiedDate":"2021-03-05"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    private static final String VALID_YEAR \u003d BENSON.getYear().toString();","lastModifiedDate":"2021-03-05"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"    private static final String VALID_ROOM \u003d BENSON.getRoom().toString();","lastModifiedDate":"2021-02-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"    public void toModelType_validResidentDetails_returnsResident() throws Exception {","lastModifiedDate":"2021-03-05"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d new JsonAdaptedResident(BENSON);","lastModifiedDate":"2021-03-05"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        assertEquals(BENSON, resident.toModelType());","lastModifiedDate":"2021-03-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d","lastModifiedDate":"2021-03-05"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"                new JsonAdaptedResident(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_YEAR, VALID_ROOM);","lastModifiedDate":"2021-03-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);","lastModifiedDate":"2021-03-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d new JsonAdaptedResident(null, VALID_PHONE,","lastModifiedDate":"2021-03-05"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"                VALID_EMAIL, VALID_YEAR, VALID_ROOM);","lastModifiedDate":"2021-03-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);","lastModifiedDate":"2021-03-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d","lastModifiedDate":"2021-03-05"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"                new JsonAdaptedResident(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_YEAR, VALID_ROOM);","lastModifiedDate":"2021-03-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);","lastModifiedDate":"2021-03-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d new JsonAdaptedResident(VALID_NAME, null,","lastModifiedDate":"2021-03-05"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"                VALID_EMAIL, VALID_YEAR, VALID_ROOM);","lastModifiedDate":"2021-03-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);","lastModifiedDate":"2021-03-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d","lastModifiedDate":"2021-03-05"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"                new JsonAdaptedResident(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_YEAR, VALID_ROOM);","lastModifiedDate":"2021-03-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);","lastModifiedDate":"2021-03-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d new JsonAdaptedResident(VALID_NAME, VALID_PHONE,","lastModifiedDate":"2021-03-05"},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":"                null, VALID_YEAR, VALID_ROOM);","lastModifiedDate":"2021-03-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);","lastModifiedDate":"2021-03-05"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-05"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-05"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"    public void toModelType_invalidYear_throwsIllegalValueException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d","lastModifiedDate":"2021-03-05"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"                new JsonAdaptedResident(VALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-03-05"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"                        INVALID_YEAR, VALID_ROOM);","lastModifiedDate":"2021-03-05"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d Year.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-05"},{"lineNumber":91,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);","lastModifiedDate":"2021-03-05"},{"lineNumber":92,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-05"},{"lineNumber":93,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":94,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-03-05"},{"lineNumber":95,"author":{"gitId":"colintkn"},"content":"    public void toModelType_nullYear_throwsIllegalValueException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":96,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d new JsonAdaptedResident(VALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-03-05"},{"lineNumber":97,"author":{"gitId":"colintkn"},"content":"                null, VALID_ROOM);","lastModifiedDate":"2021-03-05"},{"lineNumber":98,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Year.class.getSimpleName());","lastModifiedDate":"2021-03-05"},{"lineNumber":99,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);","lastModifiedDate":"2021-03-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":102,"author":{"gitId":"colintkn"},"content":"    @Test","lastModifiedDate":"2021-02-27"},{"lineNumber":103,"author":{"gitId":"colintkn"},"content":"    public void toModelType_invalidRoom_throwsIllegalValueException() {","lastModifiedDate":"2021-02-27"},{"lineNumber":104,"author":{"gitId":"colintkn"},"content":"        JsonAdaptedResident resident \u003d","lastModifiedDate":"2021-03-05"},{"lineNumber":105,"author":{"gitId":"colintkn"},"content":"                new JsonAdaptedResident(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_YEAR, INVALID_ROOM);","lastModifiedDate":"2021-03-05"},{"lineNumber":106,"author":{"gitId":"colintkn"},"content":"        String expectedMessage \u003d Room.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-02-27"},{"lineNumber":107,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, resident::toModelType);","lastModifiedDate":"2021-03-05"},{"lineNumber":108,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-02-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"colintkn":59,"-":50}},{"path":"src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.ALICE;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.HOON;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.IDA;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"    public void readAddressBook_invalidResidentAddressBook_throwDataConversionException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidResidentAddressBook.json\"));","lastModifiedDate":"2021-03-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"    public void readAddressBook_invalidAndValidResidentAddressBook_throwDataConversionException() {","lastModifiedDate":"2021-03-05"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidResidentAddressBook.json\"));","lastModifiedDate":"2021-03-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        original.addResident(HOON);","lastModifiedDate":"2021-03-05"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"        original.removeResident(ALICE);","lastModifiedDate":"2021-03-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"        original.addResident(IDA);","lastModifiedDate":"2021-03-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"colintkn":10,"-":99,"DrWala":1}},{"path":"src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"    private static final Path TYPICAL_RESIDENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalResidentsAddressBook.json\");","lastModifiedDate":"2021-03-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"    private static final Path INVALID_RESIDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidResidentAddressBook.json\");","lastModifiedDate":"2021-03-05"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    private static final Path DUPLICATE_RESIDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateResidentAddressBook.json\");","lastModifiedDate":"2021-03-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    public void toModelType_typicalResidentsFile_success() throws Exception {","lastModifiedDate":"2021-03-05"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_RESIDENTS_FILE,","lastModifiedDate":"2021-03-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"        AddressBook typicalResidentsAddressBook \u003d getTypicalAddressBook();","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"        typicalResidentsAddressBook.equals(addressBookFromFile);","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"        assertEquals(addressBookFromFile, typicalResidentsAddressBook);","lastModifiedDate":"2021-03-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"    public void toModelType_invalidResidentFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-03-05"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_RESIDENT_FILE,","lastModifiedDate":"2021-03-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    public void toModelType_duplicateResidents_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-03-05"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_RESIDENT_FILE,","lastModifiedDate":"2021-03-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_RESIDENT,","lastModifiedDate":"2021-03-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"colintkn":11,"-":34,"DrWala":3}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"sunrez.json\"));","lastModifiedDate":"2021-03-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"benedictkhoomw":1,"-":122}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.storage.commandhistory.PlainTextCommandHistoryStorage;","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        PlainTextCommandHistoryStorage commandHistoryStorage \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"                new PlainTextCommandHistoryStorage(getTempFilePath(\"cmdHist\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, commandHistoryStorage);","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"benedictkhoomw":4,"-":66,"DrWala":1}},{"path":"src/test/java/seedu/address/storage/commandhistory/PlainTextCommandHistoryStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.storage.commandhistory;","lastModifiedDate":"2021-04-02"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-04-02"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-04-02"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-04-02"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-04-02"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import java.io.IOException;","lastModifiedDate":"2021-04-02"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-04-02"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-04-02"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-02"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2021-04-02"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistory;","lastModifiedDate":"2021-04-02"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.ReadOnlyCommandHistory;","lastModifiedDate":"2021-04-02"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.testutil.TypicalCommandHistoryEntries;","lastModifiedDate":"2021-04-02"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"public class PlainTextCommandHistoryStorageTest {","lastModifiedDate":"2021-04-02"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(","lastModifiedDate":"2021-04-02"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"            \"src\", \"test\", \"data\", \"PlainTextCommandHistoryStorageTest\");","lastModifiedDate":"2021-04-02"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String TEMP_FILE_PATH \u003d \"tempCmdHist.txt\";","lastModifiedDate":"2021-04-02"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String EMPTY_HISTORY_PATH \u003d \"emptyCmdHist.txt\";","lastModifiedDate":"2021-04-02"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String BLANK_LINES_HISTORY_PATH \u003d \"blankLinesCmdHist.txt\";","lastModifiedDate":"2021-04-02"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String NON_EXISTENT_HISTORY_PATH \u003d \"nonExistentCmdHist.txt\";","lastModifiedDate":"2021-04-02"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"    @TempDir","lastModifiedDate":"2021-04-02"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    public Path testFolder;","lastModifiedDate":"2021-04-02"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    public void constructor_nullPath_throwsNullPointerException() {","lastModifiedDate":"2021-04-02"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(NullPointerException.class, () -\u003e getStorageWithPath(null));","lastModifiedDate":"2021-04-02"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    public void constructor_validPath_doesNotThrow() {","lastModifiedDate":"2021-04-02"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        assertDoesNotThrow(() -\u003e getStorageWithPath(TEMP_FILE_PATH));","lastModifiedDate":"2021-04-02"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"    public void getCommandHistoryFilePath_validPath_succeeds() {","lastModifiedDate":"2021-04-02"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        Path validPath \u003d addToTestDataPathIfNotNull(TEMP_FILE_PATH);","lastModifiedDate":"2021-04-02"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(validPath, new PlainTextCommandHistoryStorage(validPath).getCommandHistoryFilePath());","lastModifiedDate":"2021-04-02"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"    public void readCommandHistory_missingFile_returnsEmpty() {","lastModifiedDate":"2021-04-02"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2021-04-02"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"            assertTrue(getStorageWithPath(NON_EXISTENT_HISTORY_PATH).readCommandHistory().isEmpty());","lastModifiedDate":"2021-04-02"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"        });","lastModifiedDate":"2021-04-02"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"    public void read_blankLinesHistory_returnsEmptyHistory() throws IOException {","lastModifiedDate":"2021-04-02"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"        ReadOnlyCommandHistory read \u003d getStorageWithPath(BLANK_LINES_HISTORY_PATH).readCommandHistory().get();","lastModifiedDate":"2021-04-02"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(new CommandHistory(), read);","lastModifiedDate":"2021-04-02"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"    public void read_emptyHistory_success() throws IOException {","lastModifiedDate":"2021-04-02"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"        ReadOnlyCommandHistory read \u003d getStorageWithPath(EMPTY_HISTORY_PATH).readCommandHistory().get();","lastModifiedDate":"2021-04-02"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(new CommandHistory(), read);","lastModifiedDate":"2021-04-02"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    @Test","lastModifiedDate":"2021-04-02"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"    public void saveAndRead_allInOrder_success() throws IOException {","lastModifiedDate":"2021-04-02"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"        Path filePath \u003d testFolder.resolve(TEMP_FILE_PATH);","lastModifiedDate":"2021-04-02"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"        PlainTextCommandHistoryStorage storage \u003d new PlainTextCommandHistoryStorage(filePath);","lastModifiedDate":"2021-04-02"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory typical \u003d TypicalCommandHistoryEntries.getTypicalCommandHistory();","lastModifiedDate":"2021-04-02"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"        // Write to empty file and check that what was written can be read","lastModifiedDate":"2021-04-02"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"        storage.saveCommandHistory(typical);","lastModifiedDate":"2021-04-02"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"        ReadOnlyCommandHistory readBack \u003d storage.readCommandHistory().get();","lastModifiedDate":"2021-04-02"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(typical, readBack);","lastModifiedDate":"2021-04-02"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"        // Modify existing data, save, read and check","lastModifiedDate":"2021-04-02"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"        typical.appendEntry(TypicalCommandHistoryEntries.getRandomEntry());","lastModifiedDate":"2021-04-02"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"        storage.saveCommandHistory(typical);","lastModifiedDate":"2021-04-02"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"        readBack \u003d storage.readCommandHistory().get();","lastModifiedDate":"2021-04-02"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"        assertEquals(typical, readBack);","lastModifiedDate":"2021-04-02"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2021-04-02"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2021-04-02"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2021-04-02"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"                : null;","lastModifiedDate":"2021-04-02"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-04-02"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"    private PlainTextCommandHistoryStorage getStorageWithPath(String path) {","lastModifiedDate":"2021-04-02"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"        Path pathMayBeNull \u003d addToTestDataPathIfNotNull(path);","lastModifiedDate":"2021-04-02"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"        return new PlainTextCommandHistoryStorage(pathMayBeNull);","lastModifiedDate":"2021-04-02"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-04-02"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-04-02"}],"authorContributionMap":{"benedictkhoomw":93}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withResident(\"John\", \"Doe\").build();}","lastModifiedDate":"2021-03-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"     * Adds a new {@code Resident} to the {@code AddressBook} that we are building.","lastModifiedDate":"2021-03-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    public AddressBookBuilder withResident(Resident resident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"        addressBook.addResident(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook build() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"colintkn":5,"-":29}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-07-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-07-30"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"     * Returns the middle index of the resident in the {@code model}\u0027s resident list.","lastModifiedDate":"2021-03-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        return Index.fromOneBased(model.getFilteredResidentList().size() / 2);","lastModifiedDate":"2021-03-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"     * Returns the last index of the resident in the {@code model}\u0027s resident list.","lastModifiedDate":"2021-03-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        return Index.fromOneBased(model.getFilteredResidentList().size());","lastModifiedDate":"2021-03-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"     * Returns the resident in the {@code model}\u0027s resident list at {@code index}.","lastModifiedDate":"2021-03-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"    public static Resident getResident(Model model, Index index) {","lastModifiedDate":"2021-03-05"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        return model.getFilteredResidentList().get(index.getZeroBased());","lastModifiedDate":"2021-03-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"colintkn":8,"-":47}},{"path":"src/test/java/seedu/address/testutil/TypicalAddressBook.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-03-20"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import static seedu.address.testutil.issue.TypicalIssues.getTypicalIssues;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.testutil.resident.TypicalResidents.getTypicalResidents;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.testutil.room.TypicalRooms.getTypicalRooms;","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"public class TypicalAddressBook {","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"     * Returns an {@code AddressBook} with all the typical residents, rooms, and issues.","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"        for (Resident resident : getTypicalResidents()) {","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"            ab.addResident(resident);","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"        for (Room room : getTypicalRooms()) {","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"            ab.addRoom(room);","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"        for (Issue issue : getTypicalIssues()) {","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"            ab.addIssue(issue);","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        return ab;","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"stein414":8,"colintkn":1,"DrWala":23}},{"path":"src/test/java/seedu/address/testutil/TypicalCommandHistoryEntries.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.List;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Random;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.logic.commands.commandhistory.ViewHistoryCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistory;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistoryEntry;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":" * A utility class containing a list of {@code CommandHistoryEntry} objects to be used in tests.","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"public class TypicalCommandHistoryEntries {","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    public static final int DEFAULT_MAX_RANDOM_ENTRY_LENGTH \u003d 25;","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    public static final CommandHistoryEntry HELP \u003d new CommandHistoryEntry(HelpCommand.COMMAND_WORD);","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    public static final CommandHistoryEntry HISTORY_ALL \u003d new CommandHistoryEntry(ViewHistoryCommand.COMMAND_WORD);","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    public static final CommandHistoryEntry HISTORY_FIVE \u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"            new CommandHistoryEntry(ViewHistoryCommand.COMMAND_WORD + \" 5\");","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"     * Prevent instantiation.","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    private TypicalCommandHistoryEntries() {","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"     * Generates and returns a {@code CommandHistoryEntry} containing a random alphanumeric string of","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"     * length between 1 and {@code DEFAULT_MAX_RANDOM_ENTRY_LENGTH}, inclusive.","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The generated {@code CommandHistoryEntry}.","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"    public static CommandHistoryEntry getRandomEntry() {","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        return getRandomEntry(DEFAULT_MAX_RANDOM_ENTRY_LENGTH);","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"     * Generates and returns a {@code CommandHistoryEntry} containing a random alphanumeric string of","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"     * length between 1 and {@code maxStringLength}, inclusive.","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"     * @param maxStringLength The inclusive upper bound on string length.","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The generated {@code CommandHistoryEntry}.","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"    public static CommandHistoryEntry getRandomEntry(int maxStringLength) {","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        // Solution below adapted from https://www.baeldung.com/java-random-string","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"        final int leftLimit \u003d 48; // numeral \u00270\u0027","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        final int rightLimit \u003d 122; // letter \u0027z\u0027","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"        final Random random \u003d new Random();","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        final int targetStringLength \u003d random.nextInt(maxStringLength + 1);","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        final String generatedString \u003d random.ints(leftLimit, rightLimit + 1)","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"                .filter(i -\u003e (i \u003c\u003d 57 || i \u003e\u003d 65) \u0026\u0026 (i \u003c\u003d 90 || i \u003e\u003d 97))","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"                .limit(targetStringLength)","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"                .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"                .toString();","lastModifiedDate":"2021-03-10"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandHistoryEntry(generatedString);","lastModifiedDate":"2021-03-10"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a {@code CommandHistory} with some typical command history entries.","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A {@code CommandHistory} with some typical command history entries.","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"    public static CommandHistory getTypicalCommandHistory() {","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"        CommandHistory ch \u003d new CommandHistory();","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"        for (CommandHistoryEntry entry : getTypicalEntries()) {","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"            ch.appendEntry(entry);","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"        return ch;","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a list of some typical command history entries.","lastModifiedDate":"2021-03-10"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A list of some typical command history entries.","lastModifiedDate":"2021-03-10"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"    public static List\u003cCommandHistoryEntry\u003e getTypicalEntries() {","lastModifiedDate":"2021-03-10"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(HELP, HISTORY_ALL, HELP, HISTORY_FIVE, HISTORY_FIVE));","lastModifiedDate":"2021-03-10"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"benedictkhoomw":86}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-08-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"    public static final Index INDEX_FOURTH \u003d Index.fromOneBased(4);","lastModifiedDate":"2021-04-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"-":9,"DrWala":4}},{"path":"src/test/java/seedu/address/testutil/alias/AliasUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package seedu.address.testutil.alias;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.Alias;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import seedu.address.commons.core.AliasMapping;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.alias.AliasCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.alias.ListAliasCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.alias.UnaliasCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.commandhistory.ViewHistoryCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.issue.AddIssueCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.issue.CloseIssueCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.issue.DeleteIssueCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.issue.EditIssueCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.issue.FindIssueCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.issue.ListIssueCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.resident.DeleteResidentCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.resident.FindResidentCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.resident.ListResidentCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.resident.ListUnallocatedResidentsCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.residentroom.AllocateResidentRoomCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.residentroom.DeallocateResidentRoomCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.room.AddRoomCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.room.DeleteRoomCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.room.EditRoomCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.room.FindRoomCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.room.ListRoomCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.undoredo.RedoCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"import seedu.address.logic.commands.undoredo.UndoCommand;","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"/**","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":" * A utility class for Alias.","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":" */","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"public class AliasUtil {","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"    // recursive aliases","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_1_TO_2 \u003d new Alias(\"1\", \"2\");","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_2_TO_1 \u003d new Alias(\"3\", \"1\");","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"    // valid aliases","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"    public static final Alias VALID_ALIAS_1 \u003d new Alias(\"h\", \"help\");","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"    public static final Alias VALID_ALIAS_2 \u003d new Alias(\"rls\", \"rlist\");","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"    public static final Alias VALID_ALIAS_3 \u003d new Alias(","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"            \"pest\",","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"            \"iadd r/12-200 d/Cockroach infestation c/Pest\");","lastModifiedDate":"2021-04-08"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"    public static final Alias VALID_ALIAS_4 \u003d new Alias(\"pest\", \"help\");","lastModifiedDate":"2021-04-08"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"    // alias mapping valid aliases","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"    public static final AliasMapping VALID_ALIAS_MAPPING;","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"    private static final String VALID_COMMAND \u003d \"validCommand\";","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"    // reserved alias","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_HELP \u003d new Alias(HelpCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_HISTORY \u003d new Alias(ViewHistoryCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_EXIT \u003d new Alias(ExitCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_CLEAR \u003d new Alias(ClearCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_ALIAS_ADD \u003d new Alias(AliasCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_ALIAS_LIST \u003d new Alias(ListAliasCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_ALIAS_DELETE \u003d new Alias(UnaliasCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_UNDO \u003d new Alias(UndoCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_REDO \u003d new Alias(RedoCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_RESIDENT_ADD \u003d new Alias(AddResidentCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_RESIDENT_LIST \u003d new Alias(ListResidentCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_RESIDENT_FIND \u003d new Alias(FindResidentCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_RESIDENT_EDIT \u003d new Alias(EditResidentCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_RESIDENT_DELETE \u003d new Alias(DeleteResidentCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_RESIDENT_LIST_UNALLOC \u003d new Alias(ListUnallocatedResidentsCommand.COMMAND_WORD,","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"            VALID_COMMAND);","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_ROOM_ADD \u003d new Alias(AddRoomCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_ROOM_LIST \u003d new Alias(ListRoomCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_ROOM_FIND \u003d new Alias(FindRoomCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_ROOM_EDIT \u003d new Alias(EditRoomCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_ROOM_DELETE \u003d new Alias(DeleteRoomCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_ROOM_ALLOC \u003d new Alias(AllocateResidentRoomCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_ROOM_DEALLOC \u003d new Alias(DeallocateResidentRoomCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-31"},{"lineNumber":82,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_ISSUE_ADD \u003d new Alias(AddIssueCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_ISSUE_LIST \u003d new Alias(ListIssueCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_ISSUE_FIND \u003d new Alias(FindIssueCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_ISSUE_EDIT \u003d new Alias(EditIssueCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_ISSUE_DELETE \u003d new Alias(DeleteIssueCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"cnlinh"},"content":"    public static final Alias ALIAS_ISSUE_CLOSE \u003d new Alias(CloseIssueCommand.COMMAND_WORD, VALID_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"cnlinh"},"content":"    static {","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"cnlinh"},"content":"        AliasMapping temp \u003d new AliasMapping();","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"cnlinh"},"content":"        temp.addAlias(VALID_ALIAS_1);","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"cnlinh"},"content":"        temp.addAlias(VALID_ALIAS_2);","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"cnlinh"},"content":"        temp.addAlias(VALID_ALIAS_3);","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"cnlinh"},"content":"        VALID_ALIAS_MAPPING \u003d temp;","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"cnlinh"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"cnlinh"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"cnlinh":97}},{"path":"src/test/java/seedu/address/testutil/commandhistory/CommandHistoryTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package seedu.address.testutil.commandhistory;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.List;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistory;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import seedu.address.model.commandhistory.CommandHistoryEntry;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"/**","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":" * A utility class for testing command history.","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":" */","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"public class CommandHistoryTestUtil {","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     * Prevent instantiation.","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    private CommandHistoryTestUtil() {","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"     * Creates a list of entries from the given history, with the same order.","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"     *","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"     * @param history The command history to get entries from.","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The list of entries in the command history, in the same order.","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    public static List\u003cCommandHistoryEntry\u003e getEntries(CommandHistory history) {","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        List\u003cCommandHistoryEntry\u003e entries \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c history.size(); i++) {","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"            entries.add(history.get(i));","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"        return entries;","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"benedictkhoomw":33}},{"path":"src/test/java/seedu/address/testutil/issue/EditIssueDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.testutil.issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import seedu.address.logic.commands.issue.EditIssueCommand.EditIssueDescriptor;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Category;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Description;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.RoomNumber;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Status;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Timestamp;","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":" * A utility class to help with building EditIssueDescriptor objects.","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"public class EditIssueDescriptorBuilder {","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    private EditIssueDescriptor descriptor;","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    public EditIssueDescriptorBuilder() {","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"        this.descriptor \u003d new EditIssueDescriptor();","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"    public EditIssueDescriptorBuilder(EditIssueDescriptor descriptor) {","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"        this.descriptor \u003d new EditIssueDescriptor(descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"     * Returns an {@code EditIssueDescriptorBuilder} with fields containing {@code issue}\u0027s details","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"    public EditIssueDescriptorBuilder(Issue issue) {","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"        descriptor \u003d new EditIssueDescriptor();","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"        descriptor.setRoomNumber(issue.getRoomNumber());","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"        descriptor.setDescription(issue.getDescription());","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        descriptor.setTimestamp(issue.getTimestamp());","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"        descriptor.setStatus(issue.getStatus());","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"        descriptor.setCategory(issue.getCategory());","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"        descriptor.setTags(issue.getTags());","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"     * Sets the {@code RoomNumber} of the {@code EditIssueDescriptorBuilder} that we are building.","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"    public EditIssueDescriptorBuilder withRoomNumber(String roomNumber) {","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"        descriptor.setRoomNumber(new RoomNumber(roomNumber));","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"        return this;","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"     * Sets the {@code Description} of the {@code EditIssueDescriptorBuilder} that we are building.","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"    public EditIssueDescriptorBuilder withDescription(String issueNumber) {","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"        descriptor.setDescription(new Description(issueNumber));","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"        return this;","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"     * Sets the {@code Timestamp} of the {@code EditIssueDescriptorBuilder} that we are building.","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"    public EditIssueDescriptorBuilder withTimestamp(String issueNumber) {","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"        descriptor.setTimestamp(new Timestamp(issueNumber));","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"        return this;","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"     * Sets the {@code Status} of the {@code EditIssueDescriptorBuilder} that we are building.","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"    public EditIssueDescriptorBuilder withStatus(String issueNumber) {","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"        descriptor.setStatus(new Status(issueNumber));","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"        return this;","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"     * Sets the {@code Category} of the {@code EditIssueDescriptorBuilder} that we are building.","lastModifiedDate":"2021-03-31"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"    public EditIssueDescriptorBuilder withCategory(String issueNumber) {","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"        descriptor.setCategory(new Category(issueNumber));","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"        return this;","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditIssueDescriptorBuilder}","lastModifiedDate":"2021-03-31"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"     * that we are building.","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"    public EditIssueDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2021-03-31"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2021-03-31"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"        return this;","lastModifiedDate":"2021-03-31"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"     * Builds the EditIssueDescriptor based on the provided parameters","lastModifiedDate":"2021-03-31"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"     * @return EditIssueDescriptor with properties issued through the various","lastModifiedDate":"2021-03-31"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"     *         methods of the {@code EditIssueDescriptorBuiler} class","lastModifiedDate":"2021-03-31"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"    public EditIssueDescriptor build() {","lastModifiedDate":"2021-03-31"},{"lineNumber":100,"author":{"gitId":"stein414"},"content":"        return descriptor;","lastModifiedDate":"2021-03-31"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"stein414":102}},{"path":"src/test/java/seedu/address/testutil/issue/IssueBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.testutil.issue;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Category;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Description;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.RoomNumber;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Status;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Timestamp;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":" * A utility class to help with building Issue objects.","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"public class IssueBuilder {","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"    public static final String DEFAULT_ROOM_NUMBER \u003d \"10-100\";","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Table shaky\";","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"    public static final String DEFAULT_TIMESTAMP \u003d \"2021/01/01 12:30pm\";","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"    public static final String DEFAULT_STATUS \u003d \"pending\";","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"    public static final String DEFAULT_CATEGORY \u003d \"Furniture\";","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"    private RoomNumber roomNumber;","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"stein414"},"content":"    private Description description;","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"stein414"},"content":"    private Timestamp timestamp;","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"stein414"},"content":"    private Status status;","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"stein414"},"content":"    private Category category;","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"stein414"},"content":"     * Creates a {@code IssueBuilder} with the default details.","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"stein414"},"content":"    public IssueBuilder() {","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"        this.roomNumber \u003d new RoomNumber(DEFAULT_ROOM_NUMBER);","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"stein414"},"content":"        this.description \u003d new Description(DEFAULT_DESCRIPTION);","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"stein414"},"content":"        this.timestamp \u003d new Timestamp(DEFAULT_TIMESTAMP);","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"stein414"},"content":"        this.status \u003d new Status(DEFAULT_STATUS);","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"        this.category \u003d new Category(DEFAULT_CATEGORY);","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"     * Initializes the IssueBuilder with the data of {@code issueToCopy}.","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"    public IssueBuilder(Issue issueToCopy) {","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"        this.roomNumber \u003d issueToCopy.getRoomNumber();","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"        this.description \u003d issueToCopy.getDescription();","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"        this.timestamp \u003d issueToCopy.getTimestamp();","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"        this.status \u003d issueToCopy.getStatus();","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"        this.category \u003d issueToCopy.getCategory();","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"        this.tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"stein414"},"content":"     * Sets the {@code RoomNumber} of the {@code Issue} that we are building.","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"stein414"},"content":"    public IssueBuilder withRoomNumber(String roomNumber) {","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"stein414"},"content":"        this.roomNumber \u003d new RoomNumber(roomNumber);","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"stein414"},"content":"        return this;","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"stein414"},"content":"     * Sets the {@code Description} of the {@code Issue} that we are building.","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"stein414"},"content":"    public IssueBuilder withDescription(String description) {","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"stein414"},"content":"        this.description \u003d new Description(description);","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"stein414"},"content":"        return this;","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"stein414"},"content":"     * Sets the {@code Timestamp} of the {@code Issue} that we are building.","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":73,"author":{"gitId":"stein414"},"content":"    public IssueBuilder withTimestamp(String timestamp) {","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"stein414"},"content":"        this.timestamp \u003d new Timestamp(timestamp);","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"stein414"},"content":"        return this;","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"stein414"},"content":"     * Sets the {@code Status} of the {@code Issue} that we are building.","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"stein414"},"content":"    public IssueBuilder withStatus(String status) {","lastModifiedDate":"2021-03-29"},{"lineNumber":82,"author":{"gitId":"stein414"},"content":"        this.status \u003d new Status(status);","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"stein414"},"content":"        return this;","lastModifiedDate":"2021-03-29"},{"lineNumber":84,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":85,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"stein414"},"content":"     * Sets the {@code Category} of the {@code Issue} that we are building.","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"stein414"},"content":"    public IssueBuilder withCategory(String category) {","lastModifiedDate":"2021-03-29"},{"lineNumber":90,"author":{"gitId":"stein414"},"content":"        this.category \u003d new Category(category);","lastModifiedDate":"2021-03-29"},{"lineNumber":91,"author":{"gitId":"stein414"},"content":"        return this;","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"stein414"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"stein414"},"content":"     * Builds the issue based on the provided parameters","lastModifiedDate":"2021-03-29"},{"lineNumber":96,"author":{"gitId":"stein414"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"stein414"},"content":"     * @return Issue with properties issued through the various methods of the {@code IssueBuilder} class","lastModifiedDate":"2021-03-29"},{"lineNumber":98,"author":{"gitId":"stein414"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":99,"author":{"gitId":"stein414"},"content":"    public Issue build() {","lastModifiedDate":"2021-03-29"},{"lineNumber":100,"author":{"gitId":"cnlinh"},"content":"        return new Issue(roomNumber, description, timestamp, status, category, tags);","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":102,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":103,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"cnlinh":7,"stein414":96}},{"path":"src/test/java/seedu/address/testutil/issue/TypicalIssues.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"stein414"},"content":"package seedu.address.testutil.issue;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"stein414"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"stein414"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"stein414"},"content":"import java.util.List;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"stein414"},"content":"import seedu.address.model.issue.Issue;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"stein414"},"content":"public class TypicalIssues {","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":11,"author":{"gitId":"stein414"},"content":"    public static final Issue ISSUE_09_100 \u003d new IssueBuilder()","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"stein414"},"content":"            .withRoomNumber(\"09-100\")","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"stein414"},"content":"            .withDescription(\"Chair cylinder exploded\")","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"stein414"},"content":"            .withTimestamp(\"2020/12/11 06:53pm\")","lastModifiedDate":"2021-04-08"},{"lineNumber":15,"author":{"gitId":"stein414"},"content":"            .withStatus(\"pending\")","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"stein414"},"content":"            .withCategory(\"Furniture\")","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"stein414"},"content":"            .build();","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"stein414"},"content":"    public static final Issue ISSUE_09_110 \u003d new IssueBuilder()","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"stein414"},"content":"            .withRoomNumber(\"09-110\")","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"stein414"},"content":"            .withDescription(\"Bed soaked from rain due to open window\")","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"stein414"},"content":"            .withTimestamp(\"2020/11/29 11:23pm\")","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"stein414"},"content":"            .withStatus(\"closed\")","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"stein414"},"content":"            .withCategory(\"Furniture\")","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"stein414"},"content":"            .build();","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    public static final Issue ISSUE_10_100 \u003d new IssueBuilder()","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"10-100\")","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"            .withDescription(\"Broken table\")","lastModifiedDate":"2021-04-06"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"            .withTimestamp(\"2021/01/01 12:00pm\")","lastModifiedDate":"2021-04-06"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"            .withStatus(\"pending\")","lastModifiedDate":"2021-04-06"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"            .withCategory(\"Furniture\")","lastModifiedDate":"2021-04-06"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"            .build();","lastModifiedDate":"2021-04-06"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"    public static final Issue ISSUE_11_110 \u003d new IssueBuilder()","lastModifiedDate":"2021-04-06"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"11-110\")","lastModifiedDate":"2021-04-06"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"            .withDescription(\"Flickering light\")","lastModifiedDate":"2021-04-06"},{"lineNumber":35,"author":{"gitId":"stein414"},"content":"            .withTimestamp(\"2021/03/20 08:35am\")","lastModifiedDate":"2021-04-08"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"            .withStatus(\"closed\")","lastModifiedDate":"2021-04-06"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"            .withCategory(\"Electrical\")","lastModifiedDate":"2021-04-06"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"            .build();","lastModifiedDate":"2021-04-06"},{"lineNumber":39,"author":{"gitId":"stein414"},"content":"    public static final Issue ISSUE_12_110 \u003d new IssueBuilder()","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"stein414"},"content":"            .withRoomNumber(\"12-110\")","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"stein414"},"content":"            .withDescription(\"Cockroach everywhere\")","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"stein414"},"content":"            .withTimestamp(\"2020/08/10 08:48am\")","lastModifiedDate":"2021-04-08"},{"lineNumber":43,"author":{"gitId":"stein414"},"content":"            .withStatus(\"pending\")","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"stein414"},"content":"            .withCategory(\"Others\")","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"stein414"},"content":"            .build();","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"stein414"},"content":"    private TypicalIssues() {","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"stein414"},"content":"    } // prevents instantiation","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"stein414"},"content":"    public static List\u003cIssue\u003e getTypicalIssues() {","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"stein414"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ISSUE_10_100, ISSUE_11_110, ISSUE_09_100, ISSUE_09_110, ISSUE_12_110));","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"stein414"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"stein414"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"stein414"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"stein414":41,"DrWala":13}},{"path":"src/test/java/seedu/address/testutil/resident/EditResidentDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.testutil.resident;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand.EditResidentDescriptor;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;","lastModifiedDate":"2021-03-02"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-02"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;","lastModifiedDate":"2021-03-02"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;","lastModifiedDate":"2021-03-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":" * A utility class to help with building EditResidentDescriptor objects.","lastModifiedDate":"2021-03-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"public class EditResidentDescriptorBuilder {","lastModifiedDate":"2021-03-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"    private EditResidentDescriptor descriptor;","lastModifiedDate":"2021-03-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"    public EditResidentDescriptorBuilder() {","lastModifiedDate":"2021-03-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"        descriptor \u003d new EditResidentCommand.EditResidentDescriptor();","lastModifiedDate":"2021-03-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"    public EditResidentDescriptorBuilder(EditResidentCommand.EditResidentDescriptor descriptor) {","lastModifiedDate":"2021-03-05"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"        this.descriptor \u003d new EditResidentCommand.EditResidentDescriptor(descriptor);","lastModifiedDate":"2021-03-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"     * Returns an {@code EditResidentDescriptor} with fields containing {@code resident}\u0027s details","lastModifiedDate":"2021-03-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"    public EditResidentDescriptorBuilder(Resident resident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        descriptor \u003d new EditResidentCommand.EditResidentDescriptor();","lastModifiedDate":"2021-03-05"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        descriptor.setName(resident.getName());","lastModifiedDate":"2021-03-02"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"        descriptor.setPhone(resident.getPhone());","lastModifiedDate":"2021-03-02"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        descriptor.setEmail(resident.getEmail());","lastModifiedDate":"2021-03-02"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"        descriptor.setYear(resident.getYear());","lastModifiedDate":"2021-03-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Name} of the {@code EditResidentDescriptor} that we are building.","lastModifiedDate":"2021-03-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    public EditResidentDescriptorBuilder withName(String name) {","lastModifiedDate":"2021-03-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Phone} of the {@code EditResidentDescriptor} that we are building.","lastModifiedDate":"2021-03-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"    public EditResidentDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2021-03-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Email} of the {@code EditResidentDescriptor} that we are building.","lastModifiedDate":"2021-03-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"    public EditResidentDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2021-03-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-02-27"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Year} of the {@code EditResidentDescriptor} that we are building.","lastModifiedDate":"2021-03-05"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-05"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"    public EditResidentDescriptorBuilder withYear(String year) {","lastModifiedDate":"2021-03-05"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"        descriptor.setYear(new Year(year));","lastModifiedDate":"2021-03-05"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"        return this;","lastModifiedDate":"2021-03-05"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-05"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Room} of the {@code EditResidentDescriptor} that we are building.","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"    public EditResidentDescriptorBuilder withRoom(String room) {","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"        descriptor.setRoom(new Room(room));","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"        return this;","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"    public EditResidentCommand.EditResidentDescriptor build() {","lastModifiedDate":"2021-03-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"colintkn":46,"-":35}},{"path":"src/test/java/seedu/address/testutil/resident/ResidentBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.testutil.resident;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Email;","lastModifiedDate":"2021-03-05"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-05"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Phone;","lastModifiedDate":"2021-03-05"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-05"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;","lastModifiedDate":"2021-03-05"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Year;","lastModifiedDate":"2021-03-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":" * A utility class to help with building Resident objects.","lastModifiedDate":"2021-03-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"public class ResidentBuilder {","lastModifiedDate":"2021-03-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"    public static final String DEFAULT_YEAR \u003d \"1\";","lastModifiedDate":"2021-03-05"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"    public static final String DEFAULT_ROOM \u003d Room.UNALLOCATED_REGEX;","lastModifiedDate":"2021-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    private Year year;","lastModifiedDate":"2021-03-05"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"    private Room room;","lastModifiedDate":"2021-02-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"     * Creates a {@code ResidentRoomBuilder} with the default details.","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"    public ResidentBuilder() {","lastModifiedDate":"2021-03-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"        year \u003d new Year(DEFAULT_YEAR);","lastModifiedDate":"2021-03-05"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"        room \u003d new Room(DEFAULT_ROOM);","lastModifiedDate":"2021-02-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"     * Initializes the ResidentRoomBuilder with the data of {@code residentToCopy}.","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    public ResidentBuilder(Resident residentToCopy) {","lastModifiedDate":"2021-03-05"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        name \u003d residentToCopy.getName();","lastModifiedDate":"2021-03-05"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"        phone \u003d residentToCopy.getPhone();","lastModifiedDate":"2021-03-05"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"        email \u003d residentToCopy.getEmail();","lastModifiedDate":"2021-03-05"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"        year \u003d residentToCopy.getYear();","lastModifiedDate":"2021-03-05"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        room \u003d residentToCopy.getRoom();","lastModifiedDate":"2021-03-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Name} of the {@code Resident} that we are building.","lastModifiedDate":"2021-03-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"    public ResidentBuilder withName(String name) {","lastModifiedDate":"2021-03-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Phone} of the {@code Resident} that we are building.","lastModifiedDate":"2021-03-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"    public ResidentBuilder withPhone(String phone) {","lastModifiedDate":"2021-03-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Email} of the {@code Resident} that we are building.","lastModifiedDate":"2021-03-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"    public ResidentBuilder withEmail(String email) {","lastModifiedDate":"2021-03-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-02-27"},{"lineNumber":74,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Year} of the {@code Resident} that we are building.","lastModifiedDate":"2021-03-05"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-02-27"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"    public ResidentBuilder withYear(String year) {","lastModifiedDate":"2021-03-05"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"        this.year \u003d new Year(year);","lastModifiedDate":"2021-03-05"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"        return this;","lastModifiedDate":"2021-03-05"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-05"},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-05"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Room} of the {@code Resident} that we are building.","lastModifiedDate":"2021-03-05"},{"lineNumber":83,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-05"},{"lineNumber":84,"author":{"gitId":"colintkn"},"content":"    public ResidentBuilder withRoom(String room) {","lastModifiedDate":"2021-03-05"},{"lineNumber":85,"author":{"gitId":"colintkn"},"content":"        this.room \u003d new Room(room);","lastModifiedDate":"2021-02-27"},{"lineNumber":86,"author":{"gitId":"colintkn"},"content":"        return this;","lastModifiedDate":"2021-02-27"},{"lineNumber":87,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-02-27"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":89,"author":{"gitId":"colintkn"},"content":"    public Resident build() {","lastModifiedDate":"2021-03-05"},{"lineNumber":90,"author":{"gitId":"colintkn"},"content":"        return new Resident(name, phone, email, year, room);","lastModifiedDate":"2021-03-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"colintkn":48,"-":45}},{"path":"src/test/java/seedu/address/testutil/resident/ResidentUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.testutil.resident;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;","lastModifiedDate":"2021-02-27"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;","lastModifiedDate":"2021-04-04"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;","lastModifiedDate":"2021-03-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.AddResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.resident.EditResidentCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.logic.commands.residentroom.AllocateResidentRoomCommand;","lastModifiedDate":"2021-04-04"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-02"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":" * A utility class for Resident.","lastModifiedDate":"2021-03-02"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"public class ResidentUtil {","lastModifiedDate":"2021-03-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"     * Returns an add command string for adding the {@code resident}.","lastModifiedDate":"2021-03-02"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    public static String getAddCommand(Resident resident) {","lastModifiedDate":"2021-03-02"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"        return AddResidentCommand.COMMAND_WORD + \" \" + getResidentDetails(resident);","lastModifiedDate":"2021-03-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"     * Returns an allocate command string for adding the {@code residentRoom}.","lastModifiedDate":"2021-04-04"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"    public static String getAllocateResidentRoomCommand(ResidentRoom residentRoom) {","lastModifiedDate":"2021-04-04"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"        return AllocateResidentRoomCommand.COMMAND_WORD + \" \" + getResidentRoomDetails(residentRoom);","lastModifiedDate":"2021-04-04"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"     * Returns the part of command string for the given {@code residentRoom}\u0027s details.","lastModifiedDate":"2021-04-04"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"    public static String getResidentRoomDetails(ResidentRoom residentRoom) {","lastModifiedDate":"2021-04-04"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-04-04"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"        sb.append(PREFIX_NAME + residentRoom.getName().fullName + \" \");","lastModifiedDate":"2021-04-04"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"        sb.append(PREFIX_ROOM_NUMBER + residentRoom.getRoomNumber().toString() + \" \");","lastModifiedDate":"2021-04-04"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"        return sb.toString();","lastModifiedDate":"2021-04-04"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"     * Returns the part of command string for the given {@code resident}\u0027s details.","lastModifiedDate":"2021-03-02"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"    public static String getResidentDetails(Resident resident) {","lastModifiedDate":"2021-03-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"        sb.append(PREFIX_NAME + resident.getName().fullName + \" \");","lastModifiedDate":"2021-03-02"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"        sb.append(PREFIX_PHONE + resident.getPhone().value + \" \");","lastModifiedDate":"2021-03-02"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"        sb.append(PREFIX_EMAIL + resident.getEmail().value + \" \");","lastModifiedDate":"2021-03-02"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"        sb.append(PREFIX_YEAR + resident.getYear().value + \" \");","lastModifiedDate":"2021-03-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"     * Returns the part of command string for the given {@code EditResidentDescriptor}\u0027s details.","lastModifiedDate":"2021-03-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"    public static String getEditResidentDescriptorDetails(EditResidentCommand.EditResidentDescriptor descriptor) {","lastModifiedDate":"2021-03-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"        descriptor.getYear().ifPresent(year -\u003e sb.append(PREFIX_YEAR).append(year.value).append(\" \"));","lastModifiedDate":"2021-03-05"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"        descriptor.getRoom().ifPresent(room -\u003e sb.append(PREFIX_ROOM).append(room.value).append(\" \"));","lastModifiedDate":"2021-03-05"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"colintkn":42,"-":28}},{"path":"src/test/java/seedu/address/testutil/resident/TypicalResidents.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.testutil.resident;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_AMY;","lastModifiedDate":"2021-02-27"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_BOB;","lastModifiedDate":"2021-02-27"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAR_AMY;","lastModifiedDate":"2021-03-05"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAR_BOB;","lastModifiedDate":"2021-03-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Resident;","lastModifiedDate":"2021-03-02"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Room;","lastModifiedDate":"2021-03-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":" * A utility class containing a list of {@code Resident} objects to be used in tests.","lastModifiedDate":"2021-03-02"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"public class TypicalResidents {","lastModifiedDate":"2021-03-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    public static final Resident ALICE \u003d new ResidentBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2021-03-02"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"            .withEmail(\"alice@example.com\")","lastModifiedDate":"2021-02-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"            .withYear(\"1\")","lastModifiedDate":"2021-03-05"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"            .withRoom(Room.UNALLOCATED_REGEX)","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-02-23"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"    public static final Resident BENSON \u003d new ResidentBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2021-03-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"            .withYear(\"2\")","lastModifiedDate":"2021-03-05"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"            .withRoom(Room.UNALLOCATED_REGEX)","lastModifiedDate":"2021-03-25"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-02-23"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"    public static final Resident CARL \u003d new ResidentBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2021-03-02"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"            .withEmail(\"heinz@example.com\").withYear(\"3\").withRoom(Room.UNALLOCATED_REGEX).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"    public static final Resident DANIEL \u003d new ResidentBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2021-03-02"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"            .withEmail(\"cornelia@example.com\")","lastModifiedDate":"2021-02-27"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"            .withYear(\"4\")","lastModifiedDate":"2021-03-05"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"            .withRoom(Room.UNALLOCATED_REGEX)","lastModifiedDate":"2021-03-25"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-02-27"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"    public static final Resident ELLE \u003d new ResidentBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2021-03-02"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"            .withEmail(\"werner@example.com\")","lastModifiedDate":"2021-02-27"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"            .withYear(\"5\")","lastModifiedDate":"2021-03-05"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"            .withRoom(Room.UNALLOCATED_REGEX)","lastModifiedDate":"2021-03-25"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-02-27"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"    public static final Resident FIONA \u003d new ResidentBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2021-03-02"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"            .withEmail(\"lydia@example.com\")","lastModifiedDate":"2021-02-27"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"            .withYear(\"1\")","lastModifiedDate":"2021-03-05"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"            .withRoom(Room.UNALLOCATED_REGEX)","lastModifiedDate":"2021-03-25"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-02-27"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"    public static final Resident GEORGE \u003d new ResidentBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2021-03-02"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"            .withEmail(\"anna@example.com\")","lastModifiedDate":"2021-02-27"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"            .withYear(\"3\")","lastModifiedDate":"2021-03-05"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"            .withRoom(Room.UNALLOCATED_REGEX)","lastModifiedDate":"2021-03-25"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-02-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"    public static final Resident HOON \u003d new ResidentBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2021-03-02"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"            .withEmail(\"stefan@example.com\").withYear(\"1\").withRoom(Room.UNALLOCATED_REGEX).build();","lastModifiedDate":"2021-03-25"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"    public static final Resident IDA \u003d new ResidentBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2021-03-02"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"            .withEmail(\"hans@example.com\").withYear(\"2\").withRoom(Room.UNALLOCATED_REGEX).build();","lastModifiedDate":"2021-03-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"    // Manually added - Resident\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2021-03-02"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"    public static final Resident AMY \u003d new ResidentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2021-03-02"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"            .withEmail(VALID_EMAIL_AMY).withYear(VALID_YEAR_AMY).withRoom(VALID_ROOM_AMY).build();","lastModifiedDate":"2021-03-05"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"    public static final Resident BOB \u003d new ResidentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-03-02"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"            .withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-02-23"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"            .withYear(VALID_YEAR_BOB)","lastModifiedDate":"2021-03-05"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"            .withRoom(VALID_ROOM_BOB)","lastModifiedDate":"2021-02-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":75,"author":{"gitId":"colintkn"},"content":"    // First Typical Resident","lastModifiedDate":"2021-04-05"},{"lineNumber":76,"author":{"gitId":"colintkn"},"content":"    public static final Resident AARON \u003d new ResidentBuilder().withName(\"Aaron Ang\")","lastModifiedDate":"2021-04-05"},{"lineNumber":77,"author":{"gitId":"colintkn"},"content":"            .withEmail(\"aaron@example.com\")","lastModifiedDate":"2021-04-05"},{"lineNumber":78,"author":{"gitId":"colintkn"},"content":"            .withPhone(\"91258294\")","lastModifiedDate":"2021-04-05"},{"lineNumber":79,"author":{"gitId":"colintkn"},"content":"            .withYear(\"1\")","lastModifiedDate":"2021-04-05"},{"lineNumber":80,"author":{"gitId":"colintkn"},"content":"            .withRoom(\"01-000\")","lastModifiedDate":"2021-04-05"},{"lineNumber":81,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-04-05"},{"lineNumber":82,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"    private TypicalResidents() {","lastModifiedDate":"2021-03-20"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"    } // prevents instantiation","lastModifiedDate":"2021-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":88,"author":{"gitId":"colintkn"},"content":"    public static List\u003cResident\u003e getTypicalResidents() {","lastModifiedDate":"2021-03-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"colintkn":60,"-":29,"DrWala":2}},{"path":"src/test/java/seedu/address/testutil/residentroom/ResidentRoomBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.testutil.residentroom;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.resident.Name;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.room.RoomNumber;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"/**","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":" * A utility class to help with building Resident objects.","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":" */","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"public class ResidentRoomBuilder {","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"    public static final String DEFAULT_ROOM_NUMBER \u003d \"01-123\";","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":"    private Name name;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":"    private RoomNumber roomNumber;","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"     * Creates a {@code ResidentRoomBuilder} with the default details.","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"    public ResidentRoomBuilder() {","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"        roomNumber \u003d new RoomNumber(DEFAULT_ROOM_NUMBER);","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"     * Initializes the ResidentRoomBuilder with the data of {@code residentRoomToCopy}.","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"    public ResidentRoomBuilder(ResidentRoom residentRoomToCopy) {","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"        name \u003d residentRoomToCopy.getName();","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"        roomNumber \u003d residentRoomToCopy.getRoomNumber();","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Name} of the {@code ResidentRoom} that we are building.","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"    public ResidentRoomBuilder withName(String name) {","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"        return this;","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code Room} of the {@code ResidentRoom} that we are building.","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"    public ResidentRoomBuilder withRoomNumber(String room) {","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"        this.roomNumber \u003d new RoomNumber(room);","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"        return this;","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"    public ResidentRoom build() {","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"        return new ResidentRoom(name, roomNumber);","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"colintkn":53}},{"path":"src/test/java/seedu/address/testutil/residentroom/TypicalResidentRooms.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"colintkn"},"content":"package seedu.address.testutil.residentroom;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_AMY;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"colintkn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_BOB;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"colintkn"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"colintkn"},"content":"import java.util.List;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.residentroom.ResidentRoom;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"colintkn"},"content":"/**","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"colintkn"},"content":" * A utility class containing a list of {@code Resident} objects to be used in tests.","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"colintkn"},"content":" */","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"colintkn"},"content":"public class TypicalResidentRooms {","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"colintkn"},"content":"    public static final ResidentRoom ALICE_ROOM_NUMBER \u003d new ResidentRoomBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2021-04-05"},{"lineNumber":20,"author":{"gitId":"colintkn"},"content":"            .withRoomNumber(\"01-100\")","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"colintkn"},"content":"    public static final ResidentRoom BENSON_ROOM_NUMBER \u003d new ResidentRoomBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"colintkn"},"content":"            .withRoomNumber(\"01-101\")","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"colintkn"},"content":"    public static final ResidentRoom CARL_ROOM_NUMBER \u003d new ResidentRoomBuilder().withName(\"Carl Kurz\")","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"colintkn"},"content":"            .withRoomNumber(\"01-102\").build();","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"colintkn"},"content":"    public static final ResidentRoom DANIEL_ROOM_NUMBER \u003d new ResidentRoomBuilder().withName(\"Daniel Meier\")","lastModifiedDate":"2021-04-05"},{"lineNumber":28,"author":{"gitId":"colintkn"},"content":"            .withRoomNumber(\"01-103\")","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"colintkn"},"content":"    public static final ResidentRoom ELLE_ROOM_NUMBER \u003d new ResidentRoomBuilder().withName(\"Elle Meyer\")","lastModifiedDate":"2021-04-05"},{"lineNumber":31,"author":{"gitId":"colintkn"},"content":"            .withRoomNumber(\"01-104\")","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"colintkn"},"content":"    public static final ResidentRoom FIONA_ROOM_NUMBER \u003d new ResidentRoomBuilder().withName(\"Fiona Kunz\")","lastModifiedDate":"2021-04-05"},{"lineNumber":34,"author":{"gitId":"colintkn"},"content":"            .withRoomNumber(\"01-105\")","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"colintkn"},"content":"    public static final ResidentRoom GEORGE_ROOM_NUMBER \u003d new ResidentRoomBuilder().withName(\"George Best\")","lastModifiedDate":"2021-04-05"},{"lineNumber":37,"author":{"gitId":"colintkn"},"content":"            .withRoomNumber(\"01-106\")","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"colintkn"},"content":"    // Manually added","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"colintkn"},"content":"    public static final ResidentRoom HOON_ROOM_NUMBER \u003d new ResidentRoomBuilder().withName(\"Hoon Meier\")","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"colintkn"},"content":"            .withRoomNumber(\"01-107\")","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"colintkn"},"content":"    public static final ResidentRoom IDA_ROOM_NUMBER \u003d new ResidentRoomBuilder().withName(\"Ida Mueller\")","lastModifiedDate":"2021-04-05"},{"lineNumber":45,"author":{"gitId":"colintkn"},"content":"            .withRoomNumber(\"01-108\")","lastModifiedDate":"2021-04-05"},{"lineNumber":46,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-04-05"},{"lineNumber":47,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"colintkn"},"content":"    // Manually added - ResidentRoom\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"colintkn"},"content":"    public static final ResidentRoom AMY_ROOM_NUMBER \u003d new ResidentRoomBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-04-05"},{"lineNumber":50,"author":{"gitId":"colintkn"},"content":"            .withRoomNumber(VALID_ROOM_NUMBER_AMY)","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"colintkn"},"content":"    public static final ResidentRoom BOB_ROOM_NUMBER \u003d new ResidentRoomBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2021-04-05"},{"lineNumber":53,"author":{"gitId":"colintkn"},"content":"            .withRoomNumber(VALID_ROOM_NUMBER_BOB)","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"colintkn"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"    // First Typical ResidentRoom","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"    public static final ResidentRoom AARON_ROOM_NUMBER \u003d new ResidentRoomBuilder().withName(\"Aaron Ang\")","lastModifiedDate":"2021-04-05"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"            .withRoomNumber(\"01-000\").build();","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"colintkn"},"content":"    private TypicalResidentRooms() {","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"colintkn"},"content":"    } // prevents instantiation","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"    public static List\u003cResidentRoom\u003e getTypicalResidentRooms() {","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_ROOM_NUMBER, BENSON_ROOM_NUMBER, CARL_ROOM_NUMBER,","lastModifiedDate":"2021-04-05"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"                DANIEL_ROOM_NUMBER, ELLE_ROOM_NUMBER, FIONA_ROOM_NUMBER, GEORGE_ROOM_NUMBER));","lastModifiedDate":"2021-04-05"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"colintkn":70}},{"path":"src/test/java/seedu/address/testutil/room/EditRoomDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.testutil.room;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.EditRoomCommand.EditRoomDescriptor;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"colintkn"},"content":"import seedu.address.model.room.IsOccupied;","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomNumber;","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomType;","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":" * A utility class to help with building EditRoomDescriptor objects.","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"public class EditRoomDescriptorBuilder {","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    private EditRoomDescriptor descriptor;","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    public EditRoomDescriptorBuilder() {","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"        this.descriptor \u003d new EditRoomDescriptor();","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    public EditRoomDescriptorBuilder(EditRoomDescriptor descriptor) {","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"        this.descriptor \u003d new EditRoomDescriptor(descriptor);","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"     * Returns an {@code EditRoomDescriptorBuilder} with fields containing {@code room}\u0027s details","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    public EditRoomDescriptorBuilder(Room room) {","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        descriptor \u003d new EditRoomDescriptor();","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        descriptor.setRoomNumber(room.getRoomNumber());","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"        descriptor.setRoomType(room.getRoomType());","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"        descriptor.setIsOccupied(room.isOccupied());","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        descriptor.setTags(room.getTags());","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"     * Sets the {@code RoomNumber} of the {@code EditRoomDescriptorBuilder} that we are building.","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    public EditRoomDescriptorBuilder withRoomNumber(String roomNumber) {","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        descriptor.setRoomNumber(new RoomNumber(roomNumber));","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        return this;","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"     * Sets the {@code RoomType} of the {@code EditRoomDescriptorBuilder} that we are building.","lastModifiedDate":"2021-03-13"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"    public EditRoomDescriptorBuilder withRoomType(String roomType) {","lastModifiedDate":"2021-03-13"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        descriptor.setRoomType(new RoomType(roomType));","lastModifiedDate":"2021-03-13"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        return this;","lastModifiedDate":"2021-03-13"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditRoomDescriptorBuilder}","lastModifiedDate":"2021-03-13"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"     * that we are building.","lastModifiedDate":"2021-03-13"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"    public EditRoomDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2021-03-13"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2021-03-13"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2021-03-13"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"        return this;","lastModifiedDate":"2021-03-13"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":65,"author":{"gitId":"colintkn"},"content":"    /**","lastModifiedDate":"2021-04-01"},{"lineNumber":66,"author":{"gitId":"colintkn"},"content":"     * Sets the {@code occupancy} of the {@code EditRoomDescriptorBuilder} that we are building.","lastModifiedDate":"2021-04-01"},{"lineNumber":67,"author":{"gitId":"colintkn"},"content":"     */","lastModifiedDate":"2021-04-01"},{"lineNumber":68,"author":{"gitId":"colintkn"},"content":"    public EditRoomDescriptorBuilder withOccupancy(String isOccupied) {","lastModifiedDate":"2021-04-01"},{"lineNumber":69,"author":{"gitId":"colintkn"},"content":"        descriptor.setIsOccupied(new IsOccupied(isOccupied));","lastModifiedDate":"2021-04-01"},{"lineNumber":70,"author":{"gitId":"colintkn"},"content":"        return this;","lastModifiedDate":"2021-04-01"},{"lineNumber":71,"author":{"gitId":"colintkn"},"content":"    }","lastModifiedDate":"2021-04-01"},{"lineNumber":72,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"     * Builds the EditRoomDescriptor based on the provided parameters","lastModifiedDate":"2021-03-13"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-13"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"     * @return EditRoomDescriptor with properties issued through the various","lastModifiedDate":"2021-03-13"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"     * methods of the {@code EditRoomDescriptorBuiler} class","lastModifiedDate":"2021-03-13"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"    public EditRoomDescriptor build() {","lastModifiedDate":"2021-03-13"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"        return descriptor;","lastModifiedDate":"2021-03-13"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"colintkn":9,"DrWala":73}},{"path":"src/test/java/seedu/address/testutil/room/RoomBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.testutil.room;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.IsOccupied;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomNumber;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.RoomType;","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":" * A utility class to help with building Room objects.","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"public class RoomBuilder {","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    public static final String DEFAULT_ROOM_NUMBER \u003d \"01-001\";","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    public static final String DEFAULT_ROOM_TYPE \u003d \"CORRIDOR_NON_AC\";","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    public static final String DEFAULT_OCCUPANCY_STATUS \u003d \"N\";","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    private RoomNumber roomNumber;","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    private RoomType type;","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    private IsOccupied isOccupied;","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"     * Creates a {@code RoomBuilder} with the default details.","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    public RoomBuilder() {","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        this.roomNumber \u003d new RoomNumber(DEFAULT_ROOM_NUMBER);","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"        this.type \u003d new RoomType(DEFAULT_ROOM_TYPE);","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        this.isOccupied \u003d new IsOccupied(DEFAULT_OCCUPANCY_STATUS);","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        this.tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"     * Initializes the RoomBuilder with the data of {@code roomToCopy}.","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    public RoomBuilder(Room roomToCopy) {","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        this.roomNumber \u003d roomToCopy.getRoomNumber();","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"        this.type \u003d roomToCopy.getRoomType();","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        this.isOccupied \u003d roomToCopy.isOccupied();","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        this.tags \u003d new HashSet\u003c\u003e(roomToCopy.getTags());","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"     * Sets the {@code RoomNumber} of the {@code Room} that we are building.","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"    public RoomBuilder withRoomNumber(String roomNumber) {","lastModifiedDate":"2021-03-13"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"        this.roomNumber \u003d new RoomNumber(roomNumber);","lastModifiedDate":"2021-03-13"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        return this;","lastModifiedDate":"2021-03-13"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"     * Sets the {@code RoomType} of the {@code Room} that we are building.","lastModifiedDate":"2021-03-13"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"    public RoomBuilder withRoomType(String roomType) {","lastModifiedDate":"2021-03-13"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"        this.type \u003d new RoomType(roomType);","lastModifiedDate":"2021-03-13"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"        return this;","lastModifiedDate":"2021-03-13"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"     * Sets the {@code IsOccupied} of the {@code Room} that we are building.","lastModifiedDate":"2021-03-13"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"    public RoomBuilder withOccupancyStatus(String isOccupied) {","lastModifiedDate":"2021-03-13"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"        this.isOccupied \u003d new IsOccupied(isOccupied);","lastModifiedDate":"2021-03-13"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"        return this;","lastModifiedDate":"2021-03-13"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Room} that we are building.","lastModifiedDate":"2021-03-13"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"    public RoomBuilder withTags(String... tags) {","lastModifiedDate":"2021-03-13"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2021-03-13"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"        return this;","lastModifiedDate":"2021-03-13"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"     * Builds the room based on the provided parameters","lastModifiedDate":"2021-03-13"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"     *","lastModifiedDate":"2021-03-13"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"     * @return Room with properties issued through the various methods of the {@code RoomBuilder} class","lastModifiedDate":"2021-03-13"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"    public Room build() {","lastModifiedDate":"2021-03-13"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"        return new Room(roomNumber, type, isOccupied, tags);","lastModifiedDate":"2021-03-13"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"DrWala":87}},{"path":"src/test/java/seedu/address/testutil/room/RoomUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.testutil.room;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TAG;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_TYPE;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.AddRoomCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import seedu.address.logic.commands.room.EditRoomCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"/**","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":" * A utility class for Room.","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":" */","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"public class RoomUtil {","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"     * Returns an add command string for adding the {@code room}.","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    public static String getAddCommand(Room room) {","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"        return AddRoomCommand.COMMAND_WORD + \" \" + getRoomDetails(room);","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"     * Returns the part of command string for the given {@code room}\u0027s details.","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    public static String getRoomDetails(Room room) {","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"        sb.append(PREFIX_ROOM_NUMBER + room.getRoomNumber().roomNumber + \" \");","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        sb.append(PREFIX_ROOM_TYPE + room.getRoomType().value.toString() + \" \");","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        room.getTags().stream().forEach(","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"            s -\u003e sb.append(PREFIX_ROOM_TAG + s.tagName + \" \")","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"        );","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        return sb.toString();","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"     * Returns the part of command string for the given {@code EditRoomDescriptor}\u0027s details.","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    public static String getEditRoomDescriptorDetails(EditRoomCommand.EditRoomDescriptor descriptor) {","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        descriptor.getRoomNumber()","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"                .ifPresent(roomNumber -\u003e sb.append(PREFIX_ROOM_NUMBER + roomNumber.roomNumber + \" \"));","lastModifiedDate":"2021-03-13"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        descriptor.getRoomType()","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"                .ifPresent(roomType -\u003e sb.append(PREFIX_PHONE).append(roomType.value.toString()).append(\" \"));","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2021-03-13"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2021-03-13"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2021-03-13"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"                sb.append(PREFIX_ROOM_TAG);","lastModifiedDate":"2021-03-13"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"            } else {","lastModifiedDate":"2021-03-13"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_ROOM_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2021-03-13"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"            }","lastModifiedDate":"2021-03-13"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"        return sb.toString();","lastModifiedDate":"2021-03-13"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"DrWala":58}},{"path":"src/test/java/seedu/address/testutil/room/TypicalRooms.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package seedu.address.testutil.room;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import java.util.List;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import seedu.address.model.room.Room;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"public class TypicalRooms {","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"    public static final Room ROOM_CORRIDOR_NON_AC_OCCUPIED \u003d new RoomBuilder()","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"09-100\")","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"corridor_non_ac\")","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"y\")","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"            .build();","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    public static final Room ROOM_CORRIDOR_NON_AC_NOT_OCCUPIED \u003d new RoomBuilder()","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"09-110\")","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"corridor_non_ac\")","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"n\")","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"            .build();","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    public static final Room ROOM_CORRIDOR_AC_OCCUPIED \u003d new RoomBuilder()","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"10-100\")","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"corridor_ac\")","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"y\")","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"            .build();","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    public static final Room ROOM_CORRIDOR_AC_NOT_OCCUPIED \u003d new RoomBuilder()","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"10-110\")","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"corridor_ac\")","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"n\")","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"            .build();","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    public static final Room ROOM_SUITE_NON_AC_OCCUPIED \u003d new RoomBuilder()","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"11-100\")","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"suite_non_ac\")","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"y\")","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"            .build();","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    public static final Room ROOM_SUITE_NON_AC_NOT_OCCUPIED \u003d new RoomBuilder()","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"11-110\")","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"suite_non_ac\")","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"n\")","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"            .build();","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"    public static final Room ROOM_SUITE_AC_OCCUPIED \u003d new RoomBuilder()","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"12-100\")","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"suite_ac\")","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"y\")","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"            .build();","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"    public static final Room ROOM_SUITE_AC_NOT_OCCUPIED \u003d new RoomBuilder()","lastModifiedDate":"2021-03-13"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"12-110\")","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"suite_ac\")","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"n\")","lastModifiedDate":"2021-03-13"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"            .build();","lastModifiedDate":"2021-03-13"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"    public static final Room MANUAL_ROOM \u003d new RoomBuilder()","lastModifiedDate":"2021-03-13"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"            .withRoomNumber(\"13-110\")","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"            .withRoomType(\"suite_ac\")","lastModifiedDate":"2021-03-13"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"            .withOccupancyStatus(\"n\")","lastModifiedDate":"2021-03-13"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"            .build();","lastModifiedDate":"2021-03-13"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":57,"author":{"gitId":"colintkn"},"content":"    public static final Room FIRST_ROOM \u003d new RoomBuilder()","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"colintkn"},"content":"            .withRoomNumber(\"01-000\")","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"colintkn"},"content":"            .withRoomType(\"suite_ac\")","lastModifiedDate":"2021-04-05"},{"lineNumber":60,"author":{"gitId":"colintkn"},"content":"            .withOccupancyStatus(\"y\")","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"colintkn"},"content":"            .build();","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"colintkn"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"    private TypicalRooms() {","lastModifiedDate":"2021-03-13"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"    public static List\u003cRoom\u003e getTypicalRooms() {","lastModifiedDate":"2021-03-13"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"                ROOM_CORRIDOR_NON_AC_OCCUPIED,","lastModifiedDate":"2021-03-13"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"                ROOM_CORRIDOR_NON_AC_NOT_OCCUPIED,","lastModifiedDate":"2021-03-20"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"                ROOM_CORRIDOR_AC_OCCUPIED,","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"                ROOM_CORRIDOR_AC_NOT_OCCUPIED,","lastModifiedDate":"2021-03-20"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"                ROOM_SUITE_NON_AC_OCCUPIED,","lastModifiedDate":"2021-03-20"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"                ROOM_SUITE_NON_AC_NOT_OCCUPIED,","lastModifiedDate":"2021-03-13"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"                ROOM_SUITE_AC_OCCUPIED,","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"                ROOM_SUITE_AC_NOT_OCCUPIED","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"        ));","lastModifiedDate":"2021-03-20"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"colintkn":6,"DrWala":73}}]
